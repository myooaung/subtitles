1
00:00:05,490 --> 00:00:06,900
OK so welcome back.

2
00:00:06,900 --> 00:00:12,210
This is part two of the solution to the Section 16 challenge on polymorphism.

3
00:00:12,570 --> 00:00:18,240
If you recall the last part what we did was we took the account class and we made it an abstract base

4
00:00:18,240 --> 00:00:23,530
class by adding those to pure virtual functions for deposit and withdraw.

5
00:00:23,550 --> 00:00:27,900
Then we went through all the classes gave them all virtual destructors made sure our deposits and our

6
00:00:27,900 --> 00:00:30,610
withdraw methods were running correctly and so forth.

7
00:00:30,630 --> 00:00:32,560
So everything was working great.

8
00:00:32,640 --> 00:00:38,400
And right now the source code that you see in challenge solution Dasch Part 2 project which is the active

9
00:00:38,400 --> 00:00:41,270
project right now is exactly where we left off.

10
00:00:41,310 --> 00:00:46,580
In part 1 and this is the only test case I'm really interested in right now.

11
00:00:46,770 --> 00:00:52,410
I've got a base class pointer I'm creating a new trust account and I'm displaying that object on an

12
00:00:52,410 --> 00:00:53,220
output stream.

13
00:00:53,460 --> 00:00:56,660
And when I run this I don't really get what I want.

14
00:00:56,670 --> 00:01:00,750
I get the account part of the object remember what we talked about last time.

15
00:01:00,780 --> 00:01:06,300
So what that means is that this is being statically bound not dynamically bound and the object is being

16
00:01:06,300 --> 00:01:06,920
sliced.

17
00:01:06,930 --> 00:01:12,630
So the trust account part of it is being discarded and we're displaying account instead of trust account

18
00:01:13,230 --> 00:01:18,390
the account name Liow the account name balance which is part of that account part of me but the interest

19
00:01:18,390 --> 00:01:23,140
rate is not displaying and the same will be true for savings and checking accounts.

20
00:01:23,160 --> 00:01:24,210
So what's the fix.

21
00:01:24,210 --> 00:01:29,460
Well there's a lot of ways to fix this but the way we're going to fix it is we're going to create an

22
00:01:29,460 --> 00:01:35,190
interface class called printable and we're going to let a count be derived from my principal and then

23
00:01:35,190 --> 00:01:39,230
all of the concrete classes will implement how they want to be displayed.

24
00:01:39,510 --> 00:01:41,750
OK so let's get started with that.

25
00:01:41,970 --> 00:01:46,800
So the first thing we want to do is we want to create the printable class so you can right click here

26
00:01:46,800 --> 00:01:51,960
on source and select new class and give it to me and principal and you could just call it printable

27
00:01:51,960 --> 00:01:52,700
if you like.

28
00:01:52,830 --> 00:02:00,150
I'll name it I printable and the blackguard I'll use this just underscore printable underscore h underscore

29
00:02:00,150 --> 00:02:01,320
just said we've done before.

30
00:02:01,380 --> 00:02:04,400
You can choose to leave this blank in code like will generate one for you.

31
00:02:04,710 --> 00:02:05,160
That's it.

32
00:02:05,220 --> 00:02:05,720
Select.

33
00:02:05,750 --> 00:02:09,120
OK so there's my principal class.

34
00:02:09,120 --> 00:02:11,150
You can see right now it's a real simple class.

35
00:02:11,190 --> 00:02:15,780
And what we want to do is implement this so let's look at the header file first.

36
00:02:15,840 --> 00:02:20,520
We need to include IO stream since we're going to use an O stream.

37
00:02:20,520 --> 00:02:22,000
So we'll do that right away.

38
00:02:22,230 --> 00:02:24,630
And there's my class I printable.

39
00:02:24,630 --> 00:02:31,770
We don't need a constructor and we want our destructor to be virtual because we're going to have a pure

40
00:02:31,770 --> 00:02:33,530
virtual function in here.

41
00:02:33,660 --> 00:02:39,120
So we want this to be virtual and we want the compiler to just generate one for us.

42
00:02:39,300 --> 00:02:41,950
We don't need anything special we won't have raw pointers.

43
00:02:42,000 --> 00:02:42,530
We're not.

44
00:02:42,580 --> 00:02:45,270
You don't have any resources that we have to clean up.

45
00:02:45,720 --> 00:02:48,500
OK so there's my virtual destructor.

46
00:02:48,570 --> 00:02:50,580
Now I want to have another function.

47
00:02:50,580 --> 00:02:54,730
This is going to be a pure virtual function and it's going to be called print.

48
00:02:54,750 --> 00:03:01,410
We call this anything you like and it expects a stood string and it's going to be by reference and I'll

49
00:03:01,410 --> 00:03:01,770
call it.

50
00:03:01,830 --> 00:03:08,230
Unless it's a constant virtual functions we don't want it to modify anything and it's pure.

51
00:03:08,340 --> 00:03:11,030
So I'm going to add the equal zero at the end.

52
00:03:11,460 --> 00:03:15,360
OK so now we also need to create a friend function here.

53
00:03:15,360 --> 00:03:18,660
And the reason we're creating the friend function is for the syntax right.

54
00:03:18,660 --> 00:03:23,370
Remember when we're using the insertion operator we want to stream on the left side of the object that

55
00:03:23,370 --> 00:03:25,100
we want to display on the right side.

56
00:03:25,320 --> 00:03:30,570
I can't do that with a member function so I'm going to use a friend function so we create will say friend

57
00:03:31,530 --> 00:03:35,190
and it's going to return a stood O stream by reference.

58
00:03:35,190 --> 00:03:38,350
What are we overloading we're overloading the insertion operator.

59
00:03:38,590 --> 00:03:39,630
And what are the parameters.

60
00:03:39,690 --> 00:03:44,700
The first one is a pseudo stream by reference.

61
00:03:44,700 --> 00:03:51,480
Again I'll call that OS and the second parameter is that Konst I printable.

62
00:03:51,510 --> 00:03:55,010
It's really important that this is an IDE printable not an account not anything else.

63
00:03:55,110 --> 00:04:00,580
Since an account will be derived from an i printable everything in that hierarchy will also be an eye

64
00:04:00,600 --> 00:04:03,120
principle and conform to this interface.

65
00:04:03,480 --> 00:04:06,510
And we can call this object or right hand side or whatever you like.

66
00:04:06,600 --> 00:04:08,590
I'll just call it object that's it.

67
00:04:08,760 --> 00:04:10,030
That's our class.

68
00:04:10,050 --> 00:04:14,840
Now what we need to do is we need to implement this function right here and we'll do that in principle.

69
00:04:15,030 --> 00:04:22,490
Implementation Far-Right here will get rid of all of this and I'll include IO stream appear.

70
00:04:24,560 --> 00:04:27,810
Perfect So let's implement this function right here.

71
00:04:27,950 --> 00:04:29,630
So what is this function all about.

72
00:04:29,630 --> 00:04:32,660
This is the function that really runs everything.

73
00:04:32,870 --> 00:04:37,670
We're going to get an eye printable object here by reference so we know that that object has already

74
00:04:37,700 --> 00:04:39,090
overridden print.

75
00:04:39,230 --> 00:04:40,100
It must have right.

76
00:04:40,100 --> 00:04:41,810
Otherwise it wouldn't have compiled.

77
00:04:41,810 --> 00:04:51,700
So what we can do here is we can simply call RBJ don't print and that reference to the output stream.

78
00:04:51,860 --> 00:04:52,590
That's pretty cool.

79
00:04:52,590 --> 00:04:57,500
And you notice that that matches this guy right here right.

80
00:04:57,520 --> 00:04:59,840
There's print and there's the stream.

81
00:04:59,840 --> 00:05:06,020
Now remember all the classes in our account class hierarchy are going to override this virtual function.

82
00:05:06,080 --> 00:05:08,630
So there'll be principal It's really as simple as that.

83
00:05:08,840 --> 00:05:09,980
So that's it.

84
00:05:09,980 --> 00:05:15,070
We're going to put that we're going to call the objects print and then we're just going to return us

85
00:05:16,490 --> 00:05:17,400
and we are done.

86
00:05:17,450 --> 00:05:20,680
It's a real real simple interface.

87
00:05:20,690 --> 00:05:21,350
Perfect.

88
00:05:21,350 --> 00:05:25,320
Now let's go to our account and what are we going to do here.

89
00:05:25,760 --> 00:05:29,960
Well you know what we're going to leave taking this guy out for last because we really do need to take

90
00:05:29,960 --> 00:05:30,610
him out.

91
00:05:30,860 --> 00:05:33,000
But for now let's just leave him in.

92
00:05:33,200 --> 00:05:37,320
But what we need to do first is we need to be principal right.

93
00:05:37,460 --> 00:05:45,730
So let's come over here and we will include I printable.

94
00:05:45,830 --> 00:05:52,540
So now we've got the header file and we want our accounts to be derived publicly from.

95
00:05:52,640 --> 00:05:54,430
Principal.

96
00:05:55,220 --> 00:05:56,630
So what does that tell you now.

97
00:05:56,660 --> 00:05:59,060
An account is an eye principle right.

98
00:05:59,180 --> 00:06:03,670
And I printable has this pure virtual function.

99
00:06:04,040 --> 00:06:09,440
So that account needs to override that function and then it becomes printable.

100
00:06:09,440 --> 00:06:09,800
All right.

101
00:06:09,800 --> 00:06:11,140
So let's come over here.

102
00:06:11,570 --> 00:06:13,490
And what's the function.

103
00:06:13,670 --> 00:06:14,990
The function is virtual

104
00:06:17,420 --> 00:06:19,390
void print.

105
00:06:19,490 --> 00:06:23,710
It expects a stood O stream ref.

106
00:06:25,130 --> 00:06:29,090
It's Konst and I'm overwriting it.

107
00:06:29,090 --> 00:06:32,500
So you're telling the compiler exactly what's going on here.

108
00:06:32,630 --> 00:06:38,300
This guy is a pure virtual function in the printable interface class.

109
00:06:38,390 --> 00:06:41,540
You're telling the compiler that you plan to override it.

110
00:06:41,600 --> 00:06:42,980
Please check his signature.

111
00:06:42,980 --> 00:06:44,550
Make sure I get it right.

112
00:06:44,840 --> 00:06:49,900
So I'm going to copy this because we need to do that in all our classes in the class hierarchy.

113
00:06:49,940 --> 00:06:54,920
So this is a account that h I'm going to go to checking account dot H and I'm going to put it right

114
00:06:54,920 --> 00:06:56,840
in here.

115
00:06:57,560 --> 00:07:01,600
I'm going to go to a savings account dot H put it right in here.

116
00:07:02,390 --> 00:07:08,610
And finally I'm going to go to a trust account that age and put it right in there.

117
00:07:09,680 --> 00:07:10,520
Perfect.

118
00:07:10,520 --> 00:07:11,790
So now what do we need to do.

119
00:07:11,810 --> 00:07:15,700
We actually need to override that function do what we said we were going to do.

120
00:07:15,890 --> 00:07:18,770
So where do we do that what we do that in this file.

121
00:07:18,950 --> 00:07:20,910
So here's my account header file.

122
00:07:20,960 --> 00:07:24,040
This is the function that we want to override.

123
00:07:24,410 --> 00:07:28,430
And what we want to do is we want to say okay if I'm going to count this is I'm going to print myself

124
00:07:28,730 --> 00:07:31,210
if I'm a checking account this is how I want to print myself.

125
00:07:31,220 --> 00:07:35,800
So it's very similar to what we did earlier with those friend with different function right here and

126
00:07:35,810 --> 00:07:38,650
we could just about get rid of that we can actually get rid of it now.

127
00:07:38,690 --> 00:07:41,350
But I like getting rid of it at the very end so we'll do that.

128
00:07:41,570 --> 00:07:48,180
So here's my account C.P and let me copy this since that's the one that we need to override in here.

129
00:07:48,230 --> 00:07:49,730
So I'm going to come right over here.

130
00:07:50,060 --> 00:07:52,250
And you noticed this line right here.

131
00:07:52,250 --> 00:07:55,600
We're going to reuse that line because that's how we want to print an account.

132
00:07:55,910 --> 00:07:58,490
Let's override this function.

133
00:07:58,490 --> 00:08:05,540
This is the print function for the account class and we can get rid of the override.

134
00:08:05,540 --> 00:08:07,190
We don't need that here.

135
00:08:07,850 --> 00:08:08,910
So what do we do here.

136
00:08:08,960 --> 00:08:12,670
Well let's just set the precision for the output stream since we're printing numbers.

137
00:08:12,770 --> 00:08:14,990
We'll just print them to two decimal places.

138
00:08:14,990 --> 00:08:18,840
And what we'll do is we'll also display fixpoint.

139
00:08:18,890 --> 00:08:21,320
That way looks nicer as well.

140
00:08:21,470 --> 00:08:22,800
Now what do we want to do here.

141
00:08:22,880 --> 00:08:25,330
Well we want to do what we said we were going to do.

142
00:08:25,330 --> 00:08:25,570
Right.

143
00:08:25,570 --> 00:08:29,120
We wanted to display the accounted for sure this is how we do it.

144
00:08:29,240 --> 00:08:31,710
So we just need to copy that right in here.

145
00:08:32,090 --> 00:08:33,620
Now there's only one little thing.

146
00:08:33,860 --> 00:08:36,010
This is now a member right.

147
00:08:36,050 --> 00:08:37,790
So we don't need to do account dot.

148
00:08:37,850 --> 00:08:41,360
We could just get rid of all that that we did that we had to do that before because it was a friend

149
00:08:41,690 --> 00:08:46,640
but now we could just access those members directly since we're members and now we can get rid of this

150
00:08:46,640 --> 00:08:47,210
guy.

151
00:08:47,230 --> 00:08:48,720
I don't need him anymore.

152
00:08:48,920 --> 00:08:52,510
We can go back to our header file and get rid of the friend.

153
00:08:52,910 --> 00:08:53,490
That's it.

154
00:08:53,510 --> 00:08:58,930
So now this account class is using that overridden functionality to print itself.

155
00:08:59,120 --> 00:09:02,270
So let's do that for the other ones who will get a checking account.

156
00:09:02,270 --> 00:09:02,990
There it is.

157
00:09:03,020 --> 00:09:03,870
It's good to go here.

158
00:09:03,920 --> 00:09:10,430
We'll go to the implementation and what we'll do is we'll implement this function again.

159
00:09:10,430 --> 00:09:12,620
Again we don't have to say virtual here.

160
00:09:12,770 --> 00:09:15,440
We could simply say this is the checking account

161
00:09:18,840 --> 00:09:21,860
Prit method we can get rid of the override

162
00:09:25,050 --> 00:09:28,030
and then we can write the same code that we wrote before.

163
00:09:28,620 --> 00:09:36,240
And finally we just display how we want to display it pretty easy.

164
00:09:36,240 --> 00:09:43,560
And now we can get rid of this guy and we come to the header file and get rid of our friend as you can

165
00:09:43,560 --> 00:09:44,830
see the steps involved.

166
00:09:44,850 --> 00:09:46,550
I'll go ahead and do the last two.

167
00:09:46,650 --> 00:09:52,620
OK so I've gone ahead and implemented that print function in all of these classes so here's the print

168
00:09:52,620 --> 00:09:53,520
for a count.

169
00:09:53,550 --> 00:09:55,810
You can see it's just printing the name and the balance.

170
00:09:56,010 --> 00:09:58,530
Here's the print for a checking account.

171
00:09:58,530 --> 00:10:02,060
You can see it's printing out checking account name and balance.

172
00:10:02,310 --> 00:10:07,090
Here's the print for the savings account which is printing savings account the name the balance and

173
00:10:07,090 --> 00:10:08,240
the interest rate.

174
00:10:08,460 --> 00:10:12,870
And finally for the trust account is printing out the name the balance the interest rate and the number

175
00:10:12,870 --> 00:10:14,820
of withdrawals on that account.

176
00:10:15,330 --> 00:10:15,890
That's it.

177
00:10:15,900 --> 00:10:21,020
Before we had that trust account Leo and it only printed account Liow ten thousand.

178
00:10:21,030 --> 00:10:24,120
Now we've got dynamic binding so we should get what we want.

179
00:10:24,120 --> 00:10:26,610
So let's give this a run.

180
00:10:26,610 --> 00:10:28,200
And that's exactly what happened.

181
00:10:28,200 --> 00:10:29,160
That's pretty cool.

182
00:10:29,160 --> 00:10:35,940
Now we've got trust to count Leo 10000 two percent 2.6 percent interest rate and zero withdrawals.

183
00:10:35,940 --> 00:10:36,380
All right.

184
00:10:36,390 --> 00:10:37,770
So we're almost done.

185
00:10:37,890 --> 00:10:42,360
The last step is to deal with those functions and account Udal and clean that up and we had a lot of

186
00:10:42,360 --> 00:10:46,080
duplicated code in there once we've got that challenge is done.
