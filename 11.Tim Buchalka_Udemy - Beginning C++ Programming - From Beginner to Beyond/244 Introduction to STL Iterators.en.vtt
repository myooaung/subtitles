WEBVTT
1
00:00:05.560 --> 00:00:12.590
In this video I'd like to go over the basics of iterators in the standard template library iterators

2
00:00:12.590 --> 00:00:15.920
allow us to think of a container as a sequence of elements.

3
00:00:15.920 --> 00:00:17.950
It doesn't matter what the container is.

4
00:00:17.960 --> 00:00:22.070
For example we might have a vector or a set or a map.

5
00:00:22.070 --> 00:00:27.410
There are very different containers but iterators allow us to process sequence of elements from these

6
00:00:27.410 --> 00:00:32.630
containers without worrying or even needing to know about how the container is implemented behind the

7
00:00:32.630 --> 00:00:33.680
scenes.

8
00:00:33.890 --> 00:00:35.780
That gives us so much power.

9
00:00:36.110 --> 00:00:41.960
Iterators are implemented as template classes so we create iterator objects and use them to iterate

10
00:00:41.960 --> 00:00:43.180
through our containers.

11
00:00:43.950 --> 00:00:48.020
The syntax we use with iterators will remind you of pointers.

12
00:00:48.030 --> 00:00:53.070
We can use the dereference operator the increment and decrement operators and so forth.

13
00:00:53.070 --> 00:00:54.700
This was done intentionally.

14
00:00:54.840 --> 00:01:00.720
C++ programmers are comfortable with the pointer syntax and it's very easy to learn how to use iterators

15
00:01:00.930 --> 00:01:03.870
without having to learn some other arbitrary syntax.

16
00:01:04.170 --> 00:01:07.940
Most of the ACL containers can be traversed with iterators.

17
00:01:07.950 --> 00:01:11.700
There are a few exceptions such as a stack in a queue and we'll see them later.

18
00:01:11.700 --> 00:01:19.290
So what do iterators looked like and how do we use them an iterator must be declared based on the type

19
00:01:19.290 --> 00:01:21.880
of container type that it will iterate over.

20
00:01:22.050 --> 00:01:27.310
So if I have a vector of integers then my iterator must know that when I create it.

21
00:01:27.330 --> 00:01:29.380
The syntax is very straightforward.

22
00:01:29.580 --> 00:01:35.880
We provide the container type the scope resolution operator the iterator type and then the name of our

23
00:01:35.880 --> 00:01:37.720
iterator object.

24
00:01:37.770 --> 00:01:40.330
That sounds complicated I know but it's not.

25
00:01:40.410 --> 00:01:47.360
Let's see some examples and you'll see the following declarations I'm declaring for iterator objects.

26
00:01:47.620 --> 00:01:53.980
The first one is an iterator that will iterate over a vector of integers.

27
00:01:53.980 --> 00:01:56.690
It can only be used on vectors of integers.

28
00:01:57.590 --> 00:02:01.930
The second two can iterate over a list of strings.

29
00:02:02.000 --> 00:02:06.200
A list is a container in the SPL which we'll see later in this section.

30
00:02:06.200 --> 00:02:10.760
The third 83 can iterate over a map of string string pairs.

31
00:02:10.840 --> 00:02:14.530
Maps are like dictionaries will also see them in this section.

32
00:02:14.540 --> 00:02:21.530
Finally I-84 is an iterator that can iterate over sets of characters as you can see we must be very

33
00:02:21.530 --> 00:02:23.990
specific when declaring iterators.

34
00:02:23.990 --> 00:02:26.200
Now let's look at an example using a vector.

35
00:02:26.240 --> 00:02:31.720
So we can see how to initialize iterators in this example.

36
00:02:31.770 --> 00:02:37.200
We've created a vector of integers named Veck and initialized it to 1 2 and 3.

37
00:02:37.320 --> 00:02:43.710
Remember a vector is a container in the SPL that stores elements in contiguous memory and can resize

38
00:02:43.710 --> 00:02:50.270
itself to accommodate elements dynamically how this is implemented in the SPL doesn't really matter

39
00:02:50.270 --> 00:02:55.410
to us what we do need to know is that a container has a beginning and an end.

40
00:02:55.520 --> 00:02:59.810
The FCL defines the beginning as the first element in the container.

41
00:02:59.810 --> 00:03:07.500
In this case the one and the child defines the end as one after the last element in the container this

42
00:03:07.500 --> 00:03:12.980
is very important and it's consistent throughout TSTO the end is not the last element.

43
00:03:12.990 --> 00:03:15.200
It's one after the last element.

44
00:03:15.390 --> 00:03:21.510
Almost all of the steel containers have begin and methods when we call these methods they return an

45
00:03:21.510 --> 00:03:27.450
iterator object that's pointing to either the first element in the container or one past the last element

46
00:03:27.450 --> 00:03:28.800
in the container.

47
00:03:28.950 --> 00:03:35.610
In this case vector begin will return an iterator that's pointing to the element 1 and vector and will

48
00:03:35.610 --> 00:03:39.880
return an iterator pointing 1 past the element 3 in this case.

49
00:03:40.810 --> 00:03:42.650
When we write code we use vector.

50
00:03:42.650 --> 00:03:46.240
End as the sentinel so that we know when we're at the end of the list.

51
00:03:47.970 --> 00:03:52.860
Now suppose we have a set a set may or may not be implemented in contiguous memory.

52
00:03:52.860 --> 00:03:53.610
It doesn't matter.

53
00:03:53.610 --> 00:03:54.720
And that's the point.

54
00:03:54.720 --> 00:04:00.560
We don't need to know if we want to iterate over a set of characters names suits in this case.

55
00:04:00.810 --> 00:04:06.360
We know that suits that began we'll return an iterator to the first element in the set and suits that

56
00:04:06.420 --> 00:04:11.340
and we'll return an iterator one past the last element in the set.

57
00:04:11.640 --> 00:04:15.570
We can use this information to initialize our iterators.

58
00:04:15.570 --> 00:04:21.510
For example we can declare an iterator named I-T that will iterate over a vector of integers and then

59
00:04:21.510 --> 00:04:25.760
initialize I-T to point to the first element in that vector.

60
00:04:25.770 --> 00:04:27.660
We do that by calling vector.

61
00:04:27.730 --> 00:04:32.440
Again in this case I will point to the element 1 in the vector.

62
00:04:32.790 --> 00:04:39.660
If the vector had been empty then it would point to vector and now the syntax can get long when we do

63
00:04:39.660 --> 00:04:44.540
this so we can use auto to let the compiler deduce the type of the iterator.

64
00:04:44.550 --> 00:04:51.000
This is really handy and it's used very often so the compiler deduces the type of I-T is an iterator

65
00:04:51.000 --> 00:04:55.010
to a vector of integers based on the result returned by vector.

66
00:04:55.050 --> 00:05:01.440
Again this is much more readable and much more rideable and easier to debug.

67
00:05:01.440 --> 00:05:04.830
There are a bunch of operations that we can use on iterators.

68
00:05:04.860 --> 00:05:11.070
Most will feel very similar to using pointers in this table we have a few of the most commonly used

69
00:05:11.070 --> 00:05:13.380
operations for iterators.

70
00:05:13.380 --> 00:05:15.300
The first column is the operation.

71
00:05:15.300 --> 00:05:17.400
The second column explains what it does.

72
00:05:17.520 --> 00:05:21.740
And the third column shows what type of iterators supports the operation.

73
00:05:22.350 --> 00:05:26.970
In this table will assume that I-T is an iterator and is an integer.

74
00:05:26.970 --> 00:05:31.690
Notice the first two iterator operations pre-increment and post-increment.

75
00:05:31.860 --> 00:05:37.490
When we increment an iterator we're asking it to point to the next element in the container.

76
00:05:37.500 --> 00:05:38.860
How is that determined.

77
00:05:38.880 --> 00:05:41.210
It's up to the container we're using.

78
00:05:41.880 --> 00:05:46.000
The third operation is assigning one iterator to another.

79
00:05:46.020 --> 00:05:49.620
Of course the types of the iterators must be the same.

80
00:05:49.650 --> 00:05:53.640
These three operations are supported by all iterators.

81
00:05:53.640 --> 00:05:56.240
The Forth OPERATOR Is the dereference operator.

82
00:05:56.280 --> 00:06:02.070
Just like when we dereference a pointer when we dereference an iterator we get the element in the container

83
00:06:02.070 --> 00:06:07.740
that it's pointing to and we can also use the error operator when we're pointing to objects and we want

84
00:06:07.740 --> 00:06:10.220
to access their attributes and methods.

85
00:06:10.560 --> 00:06:16.350
Both input and output iterators support this and we're able to read and write elements to containers

86
00:06:17.280 --> 00:06:18.600
for the rest of the operators.

87
00:06:18.600 --> 00:06:21.150
You can pause the video and look at them on your own.

88
00:06:21.150 --> 00:06:26.220
Notice that we have ways to compare iterators and we can also decrement operators.

89
00:06:26.490 --> 00:06:31.890
Some container support bidirectional iterators which means that we can move forward and backwards through

90
00:06:31.890 --> 00:06:33.240
the container.

91
00:06:33.240 --> 00:06:37.610
Others support random access iterators like arrays and vectors.

92
00:06:37.650 --> 00:06:40.320
So how can we use these operators to work with iterators.

93
00:06:40.590 --> 00:06:43.220
Here's a really simple but common example.

94
00:06:43.230 --> 00:06:49.200
First we declare VEC as a vector of integers and will initialize it to 1 2 and 3.

95
00:06:49.220 --> 00:06:55.210
What we want to do is use an iterator to iterate over the vector and display the contents of the vector.

96
00:06:55.380 --> 00:07:01.920
So we declare our iterator I-T as an iterator over a vector of integers and we initialize it to the

97
00:07:01.920 --> 00:07:06.070
first element of Veck by calling vector begin.

98
00:07:06.090 --> 00:07:13.230
Now we simply iterate through the vector while I-T is not equal to Vicot end and at each iteration we

99
00:07:13.230 --> 00:07:17.890
display the element the iterators pointing to by dereferencing the iterator.

100
00:07:17.940 --> 00:07:21.010
Then we moved to the next element by incrementing the iterator.

101
00:07:21.030 --> 00:07:21.870
That's it.

102
00:07:21.870 --> 00:07:23.730
Simple as pie.

103
00:07:23.760 --> 00:07:24.770
I know what you're thinking.

104
00:07:24.810 --> 00:07:28.560
Why not just use a range base for loop or counter control for a loop.

105
00:07:28.830 --> 00:07:30.950
We absolutely could and we often do.

106
00:07:31.260 --> 00:07:36.660
We'll see in a bit that arr. base for loop is converted to an iterator based loop behind the scenes

107
00:07:36.660 --> 00:07:37.740
by the compiler.

108
00:07:38.070 --> 00:07:42.690
But the real answer is that in the case of a vector we could do it a lot of different ways but other

109
00:07:42.690 --> 00:07:47.110
containers don't allow us to randomly access elements like a vector does.

110
00:07:47.130 --> 00:07:52.500
So for those containers iterators are necessary.

111
00:07:52.500 --> 00:07:56.050
We can achieve the same result with a for loop instead of a while loop.

112
00:07:56.070 --> 00:07:58.540
Here we declare I-T using auto.

113
00:07:58.710 --> 00:08:00.920
This makes the code much more readable.

114
00:08:01.140 --> 00:08:08.190
We start at Vector that begin with loop while t is not equal to vector on end and we display the element

115
00:08:08.190 --> 00:08:13.560
by dereferencing the iterator that we increment the iterator and do it all over again.

116
00:08:13.560 --> 00:08:16.800
This is exactly how range base for loops work.

117
00:08:16.830 --> 00:08:21.870
In fact sometimes we might mess up the code in a range based for loop that iterates over a container

118
00:08:21.870 --> 00:08:27.070
and the compiler gives us an error message saying that something is wrong with the iterator.

119
00:08:27.090 --> 00:08:30.780
This error is really confusing to beginning students but no more.

120
00:08:30.960 --> 00:08:35.420
If you ever get an error like that you'll know exactly what's going on.

121
00:08:35.430 --> 00:08:39.260
Now let's iterate over a set of characters using an iterator.

122
00:08:39.300 --> 00:08:46.850
Here we define suits to be a set of characters and we initialize it to the character C-h SD.

123
00:08:46.870 --> 00:08:52.960
We can also declare our iterator I-T is auto and let the compiler deduce its type based on the result

124
00:08:52.960 --> 00:08:55.340
of suit stop begin.

125
00:08:55.390 --> 00:09:01.630
Then we loop while I-T is not equal to suits that end and display the character increment the iterator

126
00:09:01.690 --> 00:09:02.870
and loop again.

127
00:09:02.890 --> 00:09:06.700
The pattern should look familiar.

128
00:09:06.700 --> 00:09:11.440
Finally let's wrap up these slides by looking at a reverse iterator or reverse.

129
00:09:11.440 --> 00:09:13.710
Iterator is exactly what you would expect.

130
00:09:13.720 --> 00:09:15.130
It works in reverse.

131
00:09:15.160 --> 00:09:21.050
So the last element is the first and the first is the last and when we increment the iterator we move

132
00:09:21.050 --> 00:09:26.450
backwards to the container in reverse when we decrement the iterator we move forward.

133
00:09:26.860 --> 00:09:32.060
Here's the same example with Veck as a vector of the three integers 1 2 and 3.

134
00:09:32.080 --> 00:09:39.240
We then declare I t as a reverse iterator and initialize I-T to vector begin.

135
00:09:39.370 --> 00:09:46.510
Since it's a reverse iterator I will be pointing to the last element in the list not the first.

136
00:09:46.510 --> 00:09:52.180
Now we can write code as we did before and this will display the vector elements in reverse 3 to one

137
00:09:52.180 --> 00:09:53.870
in this case.

138
00:09:54.280 --> 00:09:59.260
In addition to the reverse iterator there's a few variants that are constant raters that are read only

139
00:09:59.260 --> 00:09:59.740
iterators.

140
00:09:59.740 --> 00:10:03.490
Let's take a look at those really quickly.

141
00:10:03.490 --> 00:10:08.020
So in this slide I will wrap up the iterators by learning about the constant raters.

142
00:10:08.020 --> 00:10:12.860
These are methods in the appropriate container class that returns specific types of iterators.

143
00:10:12.880 --> 00:10:16.160
You can see that we used begin and end for regular iterators.

144
00:10:16.180 --> 00:10:23.980
We can also use C begin and see end for constant raters are began in our end for reverse iterators as

145
00:10:23.980 --> 00:10:30.460
we saw in the previous slide and see our begin and our end for Konst reverse iterators.

146
00:10:30.930 --> 00:10:34.660
OK so that's a basic introduction to the ACL iterators.

147
00:10:34.660 --> 00:10:39.580
There is much much more to learn but this foundation will let you use iterators with containers and

148
00:10:39.580 --> 00:10:42.510
algorithms and solve a bunch of problems.

149
00:10:42.520 --> 00:10:47.250
So let's head over to the idea and I'll go over some of the simple iterators in life code.
