WEBVTT
1
00:00:05.630 --> 00:00:09.920
Welcome to pointers and references in this section of the Course you'll learn how to use one of the

2
00:00:09.920 --> 00:00:15.950
most powerful elements in the C++ programming language the pointer pointers give the programmer the

3
00:00:15.950 --> 00:00:21.320
power to work directly with the computer's memory and that includes allocating and deallocating memory

4
00:00:21.320 --> 00:00:25.030
dynamically at runtime as it's required by the program.

5
00:00:25.490 --> 00:00:29.420
You might have heard horror stories from other programmers about pointers and how difficult they can

6
00:00:29.420 --> 00:00:33.060
be to use and the damage they can cause when used improperly.

7
00:00:33.230 --> 00:00:38.060
You may have also heard that Java and Python and other programming languages don't have pointers because

8
00:00:38.060 --> 00:00:43.670
they can cause so many issues C++ pointers give you more power over your machine than you could ever

9
00:00:43.670 --> 00:00:46.310
achieve with languages like Java and Python.

10
00:00:46.310 --> 00:00:48.650
Now that's not have not come Java or Python.

11
00:00:48.650 --> 00:00:55.070
It all comes down to why the languages were created and what domains are typically used in C++ programs

12
00:00:55.070 --> 00:01:00.710
are used extensively to develop operating systems systems software device drivers embedded systems and

13
00:01:00.710 --> 00:01:02.810
so forth with these systems.

14
00:01:02.810 --> 00:01:05.020
We want to be in complete control over the hardware.

15
00:01:05.150 --> 00:01:09.210
We don't want a virtual machine handling memory or checking for everything that could go wrong.

16
00:01:09.530 --> 00:01:16.220
We just simply can't afford that extra overhead at runtime where this power comes responsibility responsibility

17
00:01:16.220 --> 00:01:19.940
to understand how to use and release memory efficiently and correctly.

18
00:01:20.000 --> 00:01:25.620
And this is one of the main use cases for pointers in this section will learn about what a pointer is.

19
00:01:25.640 --> 00:01:26.140
Guess what.

20
00:01:26.150 --> 00:01:28.030
It's a variable that was easier.

21
00:01:28.250 --> 00:01:33.520
My point is that pointers are not this mysterious concept that's virtually impossible to understand.

22
00:01:33.560 --> 00:01:35.550
Pointers are easy to understand and use.

23
00:01:35.570 --> 00:01:37.510
We just need to learn to use them correctly.

24
00:01:37.550 --> 00:01:42.650
The syntax around using pointers is the part that can be a little intimidating at first but as usual

25
00:01:42.650 --> 00:01:45.730
I use my handy drawing pad and walk you through it all in detail.

26
00:01:45.980 --> 00:01:50.090
Well learn how to declare pointers store addresses and pointers and dereference pointers.

27
00:01:50.090 --> 00:01:52.240
That means getting what they're pointing to.

28
00:01:52.310 --> 00:01:56.690
Then we'll learn how to allocate memory dynamically from the heap or the Freestore.

29
00:01:56.690 --> 00:01:59.600
This opens up a new world of problem solving.

30
00:01:59.600 --> 00:02:03.820
Then we'll talk about pointer arithmetic and see how similar pointers and arrays are.

31
00:02:03.950 --> 00:02:09.140
We'll also learn to do pass by reference with pointers this time and will also learn how the Konst qualifier

32
00:02:09.140 --> 00:02:11.120
applies to pointers.

33
00:02:11.120 --> 00:02:15.350
Finally we're talking about some of the pointer potential pitfalls what can go wrong and what kinds

34
00:02:15.350 --> 00:02:18.850
of things can happen when you use pointers incorrectly.

35
00:02:19.060 --> 00:02:21.290
Then I will switch over and talk about references.

36
00:02:21.290 --> 00:02:25.100
We've already seen references when we talked about functions in the last section.

37
00:02:25.130 --> 00:02:30.650
Remember how references are aliases in this section will quickly reveal what we learned about references

38
00:02:30.650 --> 00:02:35.240
in the last section of the course and will see a few more ways that we can use references.

39
00:02:35.240 --> 00:02:41.000
Finally everything we learn in this section regarding pointers is using C++ as raw pointers.

40
00:02:41.020 --> 00:02:45.820
There is a ton of code out there that uses raw pointers and it's important to understand them completely

41
00:02:46.370 --> 00:02:48.920
but C++ also has smart pointers.

42
00:02:48.920 --> 00:02:53.390
These are pointers that eliminate many of the safety problems with raw pointers but it's still very

43
00:02:53.390 --> 00:02:58.860
efficient to use while smart pointers are used more often with object orientation and are considered

44
00:02:58.860 --> 00:03:00.670
a more advanced C++ topic.

45
00:03:00.830 --> 00:03:06.050
I'll provide an overview in this section so that's it a lot to cover in this section but it's all very

46
00:03:06.050 --> 00:03:11.150
focused and shouldn't take too long at all before you completely understand pointers and references.

47
00:03:11.180 --> 00:03:13.970
First let's see exactly what a pointer is in the next video.
