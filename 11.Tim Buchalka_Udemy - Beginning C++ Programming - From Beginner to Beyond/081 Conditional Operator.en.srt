1
00:00:05,520 --> 00:00:09,610
In this video will learn about C++ as conditional operator.

2
00:00:09,610 --> 00:00:12,360
This is a really neat and very useful operator.

3
00:00:12,370 --> 00:00:16,220
The operator is represented by the question mark and the colon symbols.

4
00:00:16,300 --> 00:00:18,520
But they aren't used next to one another.

5
00:00:18,730 --> 00:00:23,830
The conditional operator is a ternary operator which means that it operates on three operands.

6
00:00:23,830 --> 00:00:28,440
The first operand is the conditional expression which is usually in parentheses.

7
00:00:28,900 --> 00:00:34,650
The conditional expression is evaluated first and it must evaluate to a boolean or true false value.

8
00:00:35,140 --> 00:00:37,740
Then we follow the conditional expression with the question mark.

9
00:00:37,740 --> 00:00:43,480
Part of the conditional operator followed by expression 1 then the colon part followed by expression

10
00:00:43,480 --> 00:00:44,060
2.

11
00:00:44,350 --> 00:00:47,620
This may sound complicated but it's really super simple.

12
00:00:47,620 --> 00:00:53,290
The conditional expression is evaluated if it's true then the expression returns the value of expression

13
00:00:53,290 --> 00:00:53,810
1.

14
00:00:53,890 --> 00:00:58,150
If it's false then the expression returns the value of expression 2.

15
00:00:58,420 --> 00:01:02,290
You can see it's like an if else construct in a single expression.

16
00:01:02,710 --> 00:01:06,060
While this operator is very handy It's also easy to abuse.

17
00:01:06,250 --> 00:01:10,570
Best practice is to never nested conditional operator expression within another one.

18
00:01:10,570 --> 00:01:15,500
This leads to if else if logic that quickly becomes unreadable and difficult to manage.

19
00:01:15,670 --> 00:01:20,560
Let's see some examples of the conditional operator in this example.

20
00:01:20,560 --> 00:01:24,730
We have variables A and B initialized to 10 and 20 respectively.

21
00:01:24,730 --> 00:01:29,700
We also have score initialized to 92 and result initialized to zero.

22
00:01:29,740 --> 00:01:33,940
The first assignment statement uses the conditional operator on the right hand side.

23
00:01:33,970 --> 00:01:41,120
First we evaluate a greater than B if A is greater than B then the value of A is assigned to the result.

24
00:01:41,310 --> 00:01:45,070
If it is not greater than B then we assigned the value of beach a result.

25
00:01:45,160 --> 00:01:47,130
That set you see is very straightforward.

26
00:01:47,290 --> 00:01:52,420
You can see this works exactly like an if statement but it's more concise.

27
00:01:52,420 --> 00:01:56,350
The second example evaluates if a is less than B.

28
00:01:56,380 --> 00:02:00,450
If this is true then the value of B minus a is assigned to result.

29
00:02:00,520 --> 00:02:04,830
Otherwise the value of a minus B is assigned to result in 13.

30
00:02:04,850 --> 00:02:09,040
But we're using the conditional operator to avoid a divide by zero error.

31
00:02:09,040 --> 00:02:11,840
First we check if B is not equal to zero.

32
00:02:11,890 --> 00:02:17,370
If this is true then we divide a by B and assign the result back to result.

33
00:02:17,920 --> 00:02:20,400
Otherwise we simply assign zero to the result.

34
00:02:20,680 --> 00:02:25,900
Notice how we're avoiding a divide by zero error by making sure that B is not equal to zero before we

35
00:02:25,900 --> 00:02:27,170
divide.

36
00:02:27,170 --> 00:02:31,490
Finally we often see the conditional operator used in output statements.

37
00:02:31,570 --> 00:02:36,390
In this case we check if score is greater than 90 and if it is we display excellent.

38
00:02:36,430 --> 00:02:38,820
Otherwise we display good.

39
00:02:38,860 --> 00:02:42,790
You can see the conditional operator can be very handy and easy to read and understand when it's used

40
00:02:42,790 --> 00:02:43,870
this way.

41
00:02:43,870 --> 00:02:47,830
Let's head over to the ID and see it in live code.

42
00:02:47,860 --> 00:02:49,350
Ok so no I'm in code like.

43
00:02:49,360 --> 00:02:55,360
I'm in the section 9 workspace in the conditional operator project and what I'd like to do is just go

44
00:02:55,360 --> 00:02:58,870
over a couple of real simple examples of using the conditional operator.

45
00:02:58,900 --> 00:03:02,120
First of all write it using regular if else statement then move right.

46
00:03:02,140 --> 00:03:05,570
Using the conditional operator OK so let's get started.

47
00:03:05,620 --> 00:03:10,920
Let's create a variable here call it number and this is what the user is going to turn into.

48
00:03:10,990 --> 00:03:11,420
Into.

49
00:03:11,420 --> 00:03:16,820
We're going to save it in to here will prompt the user to enter an integer

50
00:03:21,130 --> 00:03:24,090
and will read that integer into Gnome.

51
00:03:25,340 --> 00:03:26,330
OK simple as that.

52
00:03:26,340 --> 00:03:31,410
Now what we want to know is we want to know whether the integer they typed in is even or odd.

53
00:03:31,430 --> 00:03:39,920
So let's use a simple if else statement will say if the number they entered mod 2 is equal to zero.

54
00:03:40,830 --> 00:03:46,730
OK in this case we're dividing by two and we're looking at the remainder so obviously if it's an even

55
00:03:46,730 --> 00:03:48,170
number the remainder will be 0.

56
00:03:48,170 --> 00:03:49,850
That's what we're testing.

57
00:03:49,880 --> 00:03:53,630
So in this case we'll just see C out.

58
00:03:54,000 --> 00:03:54,890
Let's say numb

59
00:03:58,310 --> 00:03:58,940
is even

60
00:04:02,260 --> 00:04:04,230
in the else case.

61
00:04:04,250 --> 00:04:10,830
Obviously it has to be odd.

62
00:04:15,560 --> 00:04:20,440
OK so that's real simple logic here.

63
00:04:20,510 --> 00:04:21,970
Let's test this out.

64
00:04:29,260 --> 00:04:31,410
For d l and the end line.

65
00:04:33,550 --> 00:04:37,230
OK so an even integer let's say we want to type in 6 6 is even.

66
00:04:37,240 --> 00:04:38,210
That's correct.

67
00:04:38,280 --> 00:04:40,810
More one more time with seven.

68
00:04:40,920 --> 00:04:42,090
Seven is odd.

69
00:04:42,250 --> 00:04:43,780
Simple as that.

70
00:04:43,780 --> 00:04:46,150
Now let's rewrite this if else statement.

71
00:04:46,150 --> 00:04:51,170
Just using a simple conditional operator that's inside the output statement.

72
00:04:51,280 --> 00:04:56,330
So will say C out and will say something dumb.

73
00:04:56,440 --> 00:05:06,040
Now here's we'll put the conditional operator numb is and right here is where I will put the conditional

74
00:05:06,040 --> 00:05:07,350
operator OK.

75
00:05:07,420 --> 00:05:13,450
So in this case we need to wrap this up and put the conditional operator right in here so we're going

76
00:05:13,450 --> 00:05:18,030
to test to see if numb mod 2 is equal to zero.

77
00:05:18,350 --> 00:05:25,230
If that is the case then I've got my question marks which gives me the true side and I'll just say even.

78
00:05:25,960 --> 00:05:27,700
And the colon.

79
00:05:28,340 --> 00:05:29,750
Odd.

80
00:05:31,300 --> 00:05:32,550
That's it.

81
00:05:33,160 --> 00:05:36,460
And we'll end this with a new line as well.

82
00:05:37,370 --> 00:05:39,310
Let's run this to see what it looks like.

83
00:05:40,800 --> 00:05:44,010
So put into it we can see both of those statements fire.

84
00:05:44,050 --> 00:05:46,270
Because we've got the regular if statement going.

85
00:05:46,600 --> 00:05:50,680
And let's try to run it again with three.

86
00:05:50,680 --> 00:05:51,750
There we go.

87
00:05:51,790 --> 00:05:54,460
Now let's see what's really going on here.

88
00:05:54,670 --> 00:06:04,990
In this case again we are testing to see if the number is even if this is true then this piece is the

89
00:06:04,990 --> 00:06:09,060
one that's going to be able to get an output operator here and one insertion operator.

90
00:06:09,070 --> 00:06:14,440
So this is going to be replace this whole thing right here will be replaced with even the string even

91
00:06:15,220 --> 00:06:16,000
if it's false.

92
00:06:16,030 --> 00:06:17,340
It will be replaced with odd.

93
00:06:17,350 --> 00:06:22,480
So we've got the same thing going on here right now is even numbers odd except that it's all in one

94
00:06:22,540 --> 00:06:24,020
statement like that.

95
00:06:24,100 --> 00:06:24,600
Dismay.

96
00:06:24,610 --> 00:06:26,640
You may be wondering why in the world would you do this.

97
00:06:26,650 --> 00:06:33,070
Well a lot of times it's really handy to not have this sort of logic here but rather put something right

98
00:06:33,100 --> 00:06:34,030
in a print statement.

99
00:06:34,040 --> 00:06:38,950
So suppose we've got some sort about put statement and we've got a looping thing going on and every

100
00:06:38,950 --> 00:06:42,880
tenth time I need to do something I need to print something different.

101
00:06:42,880 --> 00:06:48,130
It's real handy to use this operator in that context because it makes your code a lot cleaner and if

102
00:06:48,130 --> 00:06:51,360
you use it properly like this it's really easy to understand.

103
00:06:51,520 --> 00:06:55,390
OK let's do another example and I'll comment this out here.

104
00:06:58,780 --> 00:07:02,120
And let's just do a real simple example is going to compare two integers.

105
00:07:02,170 --> 00:07:04,260
And so we need those two integers here.

106
00:07:04,290 --> 00:07:07,610
MCCOLLUM number one and them to

107
00:07:12,010 --> 00:07:19,330
and look tell the user to enter two integers separated by a space

108
00:07:23,880 --> 00:07:24,450
OK.

109
00:07:24,690 --> 00:07:26,910
And we'll read into those two integers.

110
00:07:26,910 --> 00:07:29,760
Number one and number two.

111
00:07:30,510 --> 00:07:30,950
All right.

112
00:07:31,080 --> 00:07:36,260
So in this case I want to display the largest in the smallest of those two integers.

113
00:07:36,270 --> 00:07:39,420
But I want to do it using the conditional operator.

114
00:07:39,420 --> 00:07:42,570
So the first thing we need to do is we need to see if the integers are the same right.

115
00:07:42,570 --> 00:07:44,910
If they are the same then we'll just say they're the same.

116
00:07:44,910 --> 00:07:46,570
There is no largest or smallest.

117
00:07:46,650 --> 00:07:48,410
So let's do that logic first.

118
00:07:48,410 --> 00:07:57,300
So we say if someone is not equal to number two in this case we want to say OK one is bigger than the

119
00:07:57,300 --> 00:07:59,280
other which is biggest which is smallest right.

120
00:07:59,340 --> 00:08:02,070
The Else case means that they're the same.

121
00:08:02,130 --> 00:08:03,780
So let's handle that case first.

122
00:08:03,780 --> 00:08:10,660
So I'll just say see out and we'll just say something like the numbers are the same.

123
00:08:14,260 --> 00:08:16,050
And I put a new line at the end.

124
00:08:19,060 --> 00:08:19,620
OK.

125
00:08:19,810 --> 00:08:24,220
Now this is the logic we need to figure out now we need to figure out what's the largest And what's

126
00:08:24,220 --> 00:08:27,910
the smallest I could write an IF fell statement in here a couple of times right.

127
00:08:28,000 --> 00:08:31,020
But in this case I'm just going to do it right in line with an output statement.

128
00:08:31,030 --> 00:08:37,330
So let's do the first one we'll say see out and what I want to do here as I just said the largest because

129
00:08:37,330 --> 00:08:40,720
that's what we get to look for first.

130
00:08:41,710 --> 00:08:43,930
And now we'll use the conditional operator.

131
00:08:43,930 --> 00:08:52,110
So again I put the Prendes in there and put in and mine at the end might as well do it now.

132
00:08:52,180 --> 00:09:01,530
Now the logic in here says OK let's test to see if someone is greater than number two.

133
00:09:01,780 --> 00:09:02,360
Right.

134
00:09:02,380 --> 00:09:10,500
If it is used the conditional operator and display number 1 if it's not I display number two.

135
00:09:11,050 --> 00:09:11,860
That's it.

136
00:09:11,860 --> 00:09:12,660
Simple as that.

137
00:09:14,570 --> 00:09:16,370
It Over here will say seek out

138
00:09:19,180 --> 00:09:19,930
smallest

139
00:09:22,670 --> 00:09:29,630
and the same sort of logic that come right into the Perrin's right in here.

140
00:09:29,650 --> 00:09:34,970
And what we'll do is we'll test in this case number one less than two.

141
00:09:35,150 --> 00:09:42,280
And if it is one otherwise I'm to OK that's it let's run this

142
00:09:46,870 --> 00:09:48,680
he says that should have been number one

143
00:09:52,350 --> 00:09:56,050
and tried to introduce separated by space do the equal case first.

144
00:09:56,430 --> 00:09:57,450
The numbers are the same.

145
00:09:57,450 --> 00:09:59,600
That's good.

146
00:09:59,700 --> 00:10:04,370
Let's do a five in the 10 largest is 10 smallest is five.

147
00:10:04,650 --> 00:10:06,050
And let's do a 10 or five

148
00:10:09,770 --> 00:10:12,370
largest ten smallest is still 5 so we're good.

149
00:10:12,380 --> 00:10:16,670
So here's a real simple example of using the conditional operator will use the conditional operator

150
00:10:16,670 --> 00:10:19,230
in a couple places as the course progresses.

151
00:10:19,250 --> 00:10:24,120
And typically it's going to be inside a loop as we're looping and we want to do something every fifth

152
00:10:24,140 --> 00:10:25,360
time tenth time.

153
00:10:25,440 --> 00:10:29,240
You know that say every fifth time you want to print a new line or something like that.

154
00:10:29,360 --> 00:10:34,650
Then this makes a lot of sense to do it inside right inside an output statement like this.
