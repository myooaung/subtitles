WEBVTT
1
00:00:05.600 --> 00:00:11.610
This video we'll take our first program which we've compiled to show that it's got no errors and we'll

2
00:00:11.610 --> 00:00:12.570
build it.

3
00:00:12.570 --> 00:00:19.440
Now if you recall building means compiling linking together with extra libraries and external files

4
00:00:19.440 --> 00:00:20.380
if we need to.

5
00:00:20.620 --> 00:00:24.920
And creating an executor file that's what building is all about.

6
00:00:24.930 --> 00:00:29.040
There are several steps involved with building the first one obviously is compiling.

7
00:00:29.310 --> 00:00:33.710
If we can't get a clean compile then there's no way we're going to build a system.

8
00:00:33.720 --> 00:00:38.340
So we want to be able to compile and then link to create to each file.

9
00:00:38.340 --> 00:00:41.070
Finally we can run our executable.

10
00:00:41.100 --> 00:00:44.970
So in this case you notice here's the source code and there's a lot of space in here.

11
00:00:44.970 --> 00:00:46.590
Normally we don't have all the space in here.

12
00:00:46.590 --> 00:00:51.210
I just put it in because it makes it a little bit easier for you to read when you're first learning.

13
00:00:51.240 --> 00:00:52.880
So let's just keep it like that.

14
00:00:52.890 --> 00:00:56.490
This program is exactly the same as it was before we're entering.

15
00:00:56.490 --> 00:00:59.770
We're asking the user to enter their favorite number between 1 and 100.

16
00:00:59.850 --> 00:01:04.140
We're getting that number and storing it in a variable called favorite number.

17
00:01:04.290 --> 00:01:08.450
And then we're just saying amazing That's my favorite number two but it's really really simple program.

18
00:01:08.880 --> 00:01:10.500
And we've already compiled it.

19
00:01:10.500 --> 00:01:12.300
There's a couple of ways to compile.

20
00:01:12.300 --> 00:01:21.090
One is you can come to the source file itself right click compile or you can come up to build compile

21
00:01:21.090 --> 00:01:25.870
current file and that's only taking care of the compilation.

22
00:01:25.870 --> 00:01:30.130
There's also a lot of things you could do at the project level right here so if I select a project and

23
00:01:30.130 --> 00:01:35.980
right click you can see that it says build rebuild clean stop build and so forth.

24
00:01:35.980 --> 00:01:38.830
Let's talk about clean first.

25
00:01:38.870 --> 00:01:40.460
Now think about this.

26
00:01:40.510 --> 00:01:47.350
When I compile a C++ program I'm converting the source code.

27
00:01:47.350 --> 00:01:55.330
This source code you see here to an object format right a machine language or a binary format that's

28
00:01:55.330 --> 00:02:00.590
going to create a dot o file or a dot RBJ file as we mentioned in previous lectures.

29
00:02:01.090 --> 00:02:04.120
That's the purpose of compiling.

30
00:02:04.120 --> 00:02:10.240
Now as your programs are compiled there you have many of these dot object files.

31
00:02:10.240 --> 00:02:17.260
The clean process removes all those object files and puts your project in a clean state.

32
00:02:17.260 --> 00:02:21.070
In other words source code only no object files.

33
00:02:21.070 --> 00:02:23.150
Now why is this important.

34
00:02:23.170 --> 00:02:29.230
It's important because when you compile your programs and build your programs sometimes you want to

35
00:02:29.230 --> 00:02:31.150
do a clean build.

36
00:02:31.210 --> 00:02:36.640
What that means is I want to start from a position where nothing has been billed as want to clean everything

37
00:02:36.640 --> 00:02:37.190
up.

38
00:02:37.240 --> 00:02:43.630
Now when we're working with a single file like here it's pretty much a moot point because it's just

39
00:02:43.630 --> 00:02:50.550
one file but typically C++ programs are very large and you've got a lot of C++ files.

40
00:02:50.770 --> 00:02:58.080
Each one of them is being compiled to an object format and when you say hey compiler built forming the

41
00:02:58.080 --> 00:03:01.520
compiler is only going to build exactly what it needs to build.

42
00:03:01.650 --> 00:03:08.790
So if it realizes that this source code already has an object file associated with it and the source

43
00:03:08.790 --> 00:03:11.700
code hasn't changed then why bother building it again right.

44
00:03:12.000 --> 00:03:16.580
So it's not going to build it and it does that to be efficient which makes a lot of sense.

45
00:03:16.980 --> 00:03:21.390
But occasionally you want to do a clean that removes all of that stuff.

46
00:03:21.390 --> 00:03:25.740
It removes the X-C that was created and then you want to build again.

47
00:03:25.750 --> 00:03:28.600
So now we're going to get a clean build again.

48
00:03:28.680 --> 00:03:34.290
This is really not an issue here when we've got one C.P. file but if you've got thousands and thousands

49
00:03:34.290 --> 00:03:40.260
and thousands of files there can be a significant difference in the amount of time that it takes to

50
00:03:40.260 --> 00:03:41.240
do that build.

51
00:03:41.600 --> 00:03:45.650
OK so in this case I can come over here to the project.

52
00:03:45.810 --> 00:03:51.020
I could right click and I can say clean and you'll see here that clean is complete.

53
00:03:51.330 --> 00:03:55.890
All it did was remove any object files on the X Files.

54
00:03:55.890 --> 00:04:05.670
Then I can say Build Now when I say build by saying build project here pressing f7 or on Mac whatever

55
00:04:05.670 --> 00:04:11.820
the option command option is work and right click on the project and say build now what's going to happen

56
00:04:11.820 --> 00:04:14.400
here is it's going to go through your project.

57
00:04:14.400 --> 00:04:18.900
Looking at all the C++ files and only build what it needs to build.

58
00:04:19.020 --> 00:04:19.470
OK.

59
00:04:19.530 --> 00:04:22.800
Now in this case it's going to build everything because it's just the one file and I haven't built it

60
00:04:22.800 --> 00:04:25.420
yet but it's going to not build.

61
00:04:25.440 --> 00:04:31.560
What it does it need to build and that's important to understand rebuild is the combination of a clean

62
00:04:31.860 --> 00:04:33.020
and a build.

63
00:04:33.030 --> 00:04:37.110
So when you say hey rebuild the project it's going to do a clean it's going to clean everything out

64
00:04:37.160 --> 00:04:41.650
and then it's going to build it again for the beginning of this course.

65
00:04:41.670 --> 00:04:43.140
All of these are going to be just fine.

66
00:04:43.140 --> 00:04:45.850
You can use rebuilds because we're going to be pretty quick.

67
00:04:45.990 --> 00:04:50.070
Finally once we get a build we can run the project the way we do that is we come up.

68
00:04:50.100 --> 00:04:52.670
Again remember we've got the active project here.

69
00:04:52.780 --> 00:04:55.860
I can come up to build and run.

70
00:04:55.860 --> 00:04:59.320
Now if I do that now we have an option.

71
00:04:59.370 --> 00:05:07.330
We can simply execute the EFC file if there if there is one there or we can choose to build and execute.

72
00:05:07.380 --> 00:05:11.850
I would generally tell you to select build and execute and probably remember my answer.

73
00:05:11.850 --> 00:05:17.070
Don't ask me again would be a pretty good idea because most of the time our files are going to be fairly

74
00:05:17.070 --> 00:05:19.460
small and a build is not going to take any time at all.

75
00:05:19.500 --> 00:05:21.660
So we can build and execute.

76
00:05:21.810 --> 00:05:23.830
So that's how you run.

77
00:05:24.100 --> 00:05:29.990
But say I want to do that now I want to say build and execute and there's my program.

78
00:05:30.000 --> 00:05:36.690
It says enter your favorite number between 1 and 100 that say I type in 24 press center.

79
00:05:36.940 --> 00:05:39.730
It says amazing That's my favorite number two.

80
00:05:40.080 --> 00:05:43.890
Now this time elapsed is how long the program took to run.

81
00:05:43.890 --> 00:05:48.480
This is being displayed in the latest version of Code light prior to this last version you didn't see

82
00:05:48.490 --> 00:05:50.870
that and I think it's Windows the it's being displayed.

83
00:05:50.880 --> 00:05:52.900
I didn't see that display on a Mac.

84
00:05:53.100 --> 00:05:57.070
When you run the taxi filed it's created from the command line you don't see that.

85
00:05:57.070 --> 00:06:01.690
That's just mostly for a flyby so that you can tell as a developer.

86
00:06:01.980 --> 00:06:04.510
You know if there's something wrong and how quick your programs write.

87
00:06:04.800 --> 00:06:07.600
Press any key to continue I'm done.

88
00:06:07.760 --> 00:06:12.750
Now one of the things that I want to show you notice this workspace view which is where I'm at right

89
00:06:12.750 --> 00:06:15.740
now and again I've got three projects here.

90
00:06:15.750 --> 00:06:21.000
Each one has a main Where's the X Files were the object files.

91
00:06:21.000 --> 00:06:24.010
Where is all that stuff that they should be there right.

92
00:06:24.420 --> 00:06:27.240
Absolutely there they should be there they are there.

93
00:06:27.300 --> 00:06:33.200
The Ids generally hide that information from you because you don't need to know about it really.

94
00:06:33.230 --> 00:06:37.830
I mean do you care that there's an object file or an easy file really what you care about is these error

95
00:06:37.830 --> 00:06:39.480
messages and and so forth.

96
00:06:39.600 --> 00:06:43.170
But we have this explorer tab and that will let you see all that.

97
00:06:43.170 --> 00:06:45.050
I want to show you what that looks like.

98
00:06:45.060 --> 00:06:50.460
You can click on the Explorer tab and then you can drag any folder from your operating system from your

99
00:06:50.460 --> 00:06:57.180
file system on to here so I can just right click open folder and I'm going to select from my desktop

100
00:06:57.180 --> 00:07:03.820
C-p examples that section for for do that's where my workspace is selected.

101
00:07:03.940 --> 00:07:07.340
So you can see if I expand this.

102
00:07:07.480 --> 00:07:09.070
You could see a bunch more stuff.

103
00:07:09.070 --> 00:07:15.970
Now I've got a dot code like folder that has things that are related to my favorites and compilation

104
00:07:15.970 --> 00:07:18.250
and refactoring and so forth.

105
00:07:18.250 --> 00:07:22.310
I've also got my three projects first program project one project to.

106
00:07:22.360 --> 00:07:24.880
I've got to make file I've got my workspace file.

107
00:07:25.000 --> 00:07:27.660
But let's look at first program for a second.

108
00:07:28.360 --> 00:07:33.280
Now you can see a little extra stuff going on right before all we saw was main C.P. And now we see all

109
00:07:33.280 --> 00:07:34.810
this other stuff.

110
00:07:34.810 --> 00:07:40.090
These are the files and the configuration files that code light is using behind the scenes.

111
00:07:40.090 --> 00:07:46.150
The ideal workspace here abstracts that out since you don't really need to know all that information

112
00:07:46.540 --> 00:07:47.760
to build your system.

113
00:07:47.770 --> 00:07:49.090
It's building it for you.

114
00:07:49.240 --> 00:07:53.730
But if you really want to see them you can or you can just look right in your file system.

115
00:07:53.920 --> 00:08:00.610
Now if I look in my first program debug folder you'll see that there's my X-C first program doddy you

116
00:08:00.610 --> 00:08:06.310
see it right here and there you can see my dot object files and data files and all kinds of stuff that's

117
00:08:06.310 --> 00:08:07.410
going on.

118
00:08:07.490 --> 00:08:08.820
Now you'll see it first again.

119
00:08:08.830 --> 00:08:10.260
First program debug.

120
00:08:10.510 --> 00:08:16.690
Now what I'm going to do now is I'm going to clean first program and all of this stuff should be removed.

121
00:08:16.870 --> 00:08:26.530
So again I'm going to go to build clean project now if I refreshed this view by right clicking appear

122
00:08:26.740 --> 00:08:33.430
refresh and go back to first program you can see it's all gone the entire debug folder is gone the object

123
00:08:33.430 --> 00:08:36.950
files are gone the files are gone everything's gone.

124
00:08:36.970 --> 00:08:42.960
So now when I rebuild all that will be created again and I noticed that debug folder right.

125
00:08:43.150 --> 00:08:47.200
If I come back to my workspace There's my first program.

126
00:08:47.410 --> 00:08:51.100
Notice that we've got build configurations here and there's a couple.

127
00:08:51.100 --> 00:08:53.140
You've got debug and release.

128
00:08:53.140 --> 00:08:54.850
You can choose either one.

129
00:08:54.910 --> 00:08:59.080
We're going to use Debug through out the entire course because that's what we're doing we're basically

130
00:08:59.080 --> 00:09:04.240
developing right here release is when you want to release the file from two productions for users to

131
00:09:04.240 --> 00:09:04.890
use.

132
00:09:04.900 --> 00:09:09.470
So in this case debug creates that debug folder that you solve that a bit ago.

133
00:09:09.610 --> 00:09:13.950
If we do this in release mode we'll get a release folder as well so we'll have to eat xes.

134
00:09:13.960 --> 00:09:20.680
Now the difference is the debug configuration creates object files that has debugging information in

135
00:09:20.680 --> 00:09:21.100
them.

136
00:09:21.100 --> 00:09:25.930
It's got all those variable names and stuff so later on when we debug our program we can have all that

137
00:09:25.930 --> 00:09:31.750
information available to us and it makes us very very productive and really helps us debug and test

138
00:09:31.750 --> 00:09:32.760
our code.

139
00:09:33.110 --> 00:09:38.950
The release configuration removes all of that stuff and it does more optimizations and it just makes

140
00:09:38.950 --> 00:09:44.320
your Ex-Sea leaner and meaner so you don't need all that debugging information at runtime.

141
00:09:44.320 --> 00:09:46.200
So like I said we're going to use Debug.

142
00:09:46.210 --> 00:09:48.200
You can certainly use this if you like.

143
00:09:48.280 --> 00:09:53.290
If you do use this because you're curious or you want to see what's going on don't modify anything from

144
00:09:53.290 --> 00:09:53.950
in here.

145
00:09:53.960 --> 00:09:59.500
I mean as a matter of fact if I try to open up this makefile you'll see it says auto generated by code

146
00:09:59.500 --> 00:10:03.610
like don't change it or even if you do change it we're going to blow it away anyway.

147
00:10:03.700 --> 00:10:05.720
And so you really don't need any of that.

148
00:10:05.740 --> 00:10:08.180
This is where we're going to be working in the workspace mode.

149
00:10:08.290 --> 00:10:11.980
But I just wanted to show you how that clean really really works.

150
00:10:12.250 --> 00:10:14.400
OK so again let's recap here.

151
00:10:14.410 --> 00:10:21.520
I can select first program right click clean that will remove all my object files in the file.

152
00:10:21.730 --> 00:10:28.690
I can rebuild in which case it will clean and build or I can simply build and that will only build what

153
00:10:28.690 --> 00:10:30.350
needs to be built.

154
00:10:30.520 --> 00:10:34.600
Hopefully that makes sense it's little difference between them but it said you should understand it's

155
00:10:34.600 --> 00:10:36.170
not that big that big a difference.

156
00:10:36.190 --> 00:10:37.960
Now finally we want to run.

157
00:10:37.960 --> 00:10:39.270
We come here to run.

158
00:10:39.610 --> 00:10:43.350
So let's do this one more time build and execute.

159
00:10:44.630 --> 00:10:48.760
And your favorite number my favorite number is 100 does time.

160
00:10:48.800 --> 00:10:50.510
Amazing That's my favorite number too.

161
00:10:50.510 --> 00:10:53.080
That's exactly what our program is supposed to do.

162
00:10:53.660 --> 00:10:55.760
Now you'll notice a couple of things here.

163
00:10:55.820 --> 00:10:58.660
One is we're really not using favorite number are we.

164
00:10:58.660 --> 00:11:05.930
I mean the users typing it in but we're not really saying wow that's a great number 13 that you answer

165
00:11:05.940 --> 00:11:09.850
or 100 that you enter that you'll do that in the challenge exercise in this section.

166
00:11:09.980 --> 00:11:15.140
But right now we were grabbing at we're storing it into that variable but we're not really using it

167
00:11:15.140 --> 00:11:15.970
afterward.

168
00:11:15.980 --> 00:11:18.700
And like I said in the Challenge video you will use it.

169
00:11:18.800 --> 00:11:19.380
So that's it.

170
00:11:19.400 --> 00:11:23.780
That's pretty much the build process the compile process the run process.

171
00:11:23.780 --> 00:11:30.050
It's fairly straightforward if you've got the toolbar you can click on buttons to do this but in this

172
00:11:30.050 --> 00:11:34.160
course I'll come up here and do these things are all just right click here and do what I need to do

173
00:11:34.160 --> 00:11:35.130
here as well.

174
00:11:35.510 --> 00:11:35.900
That's it.

175
00:11:35.900 --> 00:11:43.070
Remember you can also come up to the workspace and right click on the workspace you can build the entire

176
00:11:43.070 --> 00:11:50.090
workspace or clean the entire workspace and create the files for all the projects all in one shot.

177
00:11:50.810 --> 00:11:52.410
OK that's it for that.

178
00:11:52.490 --> 00:11:57.770
Now in the next video what we'll do is we'll talk about compiler errors and compiler warnings and we'll

179
00:11:57.770 --> 00:12:01.910
mess around with this program a little bit and I'll show you some of the common errors and some of the

180
00:12:01.910 --> 00:12:06.950
common warnings that you could get as well as why they happen throughout the course.

181
00:12:06.950 --> 00:12:10.100
We're obviously going to see a lot of compiler errors.

182
00:12:10.100 --> 00:12:14.390
I make it a point that when I teach I'm just coding along with you.

183
00:12:14.480 --> 00:12:19.570
So I hope I make some mistakes so you can see some of the common compiler errors.

184
00:12:19.580 --> 00:12:23.720
I'm not trying to make them intentionally but sometimes you know you forget a semi-colon or you forget

185
00:12:23.720 --> 00:12:24.400
to do this.

186
00:12:24.410 --> 00:12:25.690
This is the wrong type.

187
00:12:25.760 --> 00:12:31.270
So that's important that you see these types of errors happening and you can know how to fix them.

188
00:12:31.280 --> 00:12:32.730
All right so I'll see you in the next video.
