1
00:00:05,340 --> 00:00:10,650
In this video we'll learn a little bit more about the Konst qualifier in the context of class methods.

2
00:00:10,950 --> 00:00:15,270
We've already learned that we can create Konst variables which can't be changed.

3
00:00:15,270 --> 00:00:20,850
And we've also seen how we can pass references and pointers into functions as Konst and they can be

4
00:00:20,850 --> 00:00:26,630
modified while in the function well and this video will learn how to create Konst objects and see what

5
00:00:26,630 --> 00:00:32,480
happens when we pass constant objects to methods that don't expect to Konst using Konst correctly in

6
00:00:32,480 --> 00:00:37,900
parameters as well as method declarations is the basis for Konst correctness in a program.

7
00:00:39,700 --> 00:00:43,230
In this example we're creating a concept object named villain.

8
00:00:43,300 --> 00:00:46,720
Now once villain is created we can't change any of attachable.

9
00:00:46,720 --> 00:00:49,540
So that's the whole idea with it being Konst.

10
00:00:49,570 --> 00:00:54,040
So what happens if we call member methods on a Konst object.

11
00:00:54,070 --> 00:00:57,300
Let's look at calling a setter method that changes the object.

12
00:00:57,580 --> 00:01:01,390
Obviously this can't be allowed since the object is declared as contest.

13
00:01:01,600 --> 00:01:04,120
And in fact this produces a compiler error.

14
00:01:04,120 --> 00:01:09,690
The compiler complains that you're passing a concert object as this to a method that could change it.

15
00:01:10,060 --> 00:01:12,130
But what about the output statement.

16
00:01:12,130 --> 00:01:14,740
In this case I'm not modifying the Konst object.

17
00:01:14,740 --> 00:01:17,760
I'm simply getting a copy of its name for display.

18
00:01:17,770 --> 00:01:19,420
While this won't compile either.

19
00:01:19,420 --> 00:01:22,600
In fact you get the same error that you get when you called Set name.

20
00:01:22,720 --> 00:01:23,670
So what's up.

21
00:01:23,920 --> 00:01:29,050
Well the compiler assumes that the get named function could potentially change the object so it gives

22
00:01:29,050 --> 00:01:34,720
an error but we need a solution to this problem since we would like to call the getter methods and other

23
00:01:34,720 --> 00:01:37,780
methods that are public that don't modify the object.

24
00:01:38,260 --> 00:01:39,570
Here's another example.

25
00:01:39,580 --> 00:01:43,910
Again we define the villain object and its a constant so it can't change.

26
00:01:43,930 --> 00:01:49,200
Now we have a display player named function that expects a reference to a contest object.

27
00:01:49,220 --> 00:01:55,130
Again we get a compiler error here the problem is that when we call P-doc get name in the displayed

28
00:01:55,140 --> 00:01:59,890
player name function this pointer isn't expecting a cost object.

29
00:02:00,110 --> 00:02:03,280
So get name could potentially change the object.

30
00:02:03,560 --> 00:02:08,820
The compiler is being very careful not to allow a concert object to lose its constants.

31
00:02:09,110 --> 00:02:10,470
So what's the solution.

32
00:02:11,600 --> 00:02:13,610
The solution is actually very simple.

33
00:02:13,610 --> 00:02:19,220
We need to tell the compiler that specific methods will not modify the object and all we have to do

34
00:02:19,220 --> 00:02:23,600
is put the Konst modifier before the semi-colon and the method prototype.

35
00:02:23,670 --> 00:02:24,720
That's it.

36
00:02:24,720 --> 00:02:29,070
Now the compiler will not only allow this method to be called on const objects.

37
00:02:29,070 --> 00:02:34,200
It will also produce a compiler error if you try to modify any of the object attributes in the method

38
00:02:35,400 --> 00:02:41,070
the idea of class methods having conc qualifiers is part of what's referred to as Konst correctness

39
00:02:41,560 --> 00:02:44,050
Konst correct this can get pretty complicated.

40
00:02:44,100 --> 00:02:48,510
But this video serves to give you a basic idea of what it is and how important it is.

41
00:02:50,430 --> 00:02:53,430
Now you can see that the call to get name works just fine.

42
00:02:53,610 --> 00:03:01,110
But the call to set name is still not allowed to set name is not a Konst function remember since you're

43
00:03:01,110 --> 00:03:04,890
telling the compiler that get name is a Konst member function.

44
00:03:05,040 --> 00:03:10,290
Then if you write code in the body of get name that modifies the object you'll get a compiler that's

45
00:03:10,290 --> 00:03:12,150
conc correctness in action.

46
00:03:12,150 --> 00:03:16,680
Let's go to the idea and see this example in code.

47
00:03:16,690 --> 00:03:25,710
Ok so I'm in the IDM in the section 13 workspace in the concert in classes project and this is basically

48
00:03:25,710 --> 00:03:30,870
the player class again you can see we've got our private attributes some public methods and so forth.

49
00:03:30,870 --> 00:03:34,450
And this is the real method that we're interested in in this example right here.

50
00:03:34,470 --> 00:03:36,880
It's a simple getter that returns the name.

51
00:03:37,020 --> 00:03:41,550
So you could see get name is the name of the method it returns name which is a string.

52
00:03:41,550 --> 00:03:42,690
Simple as that.

53
00:03:42,930 --> 00:03:48,170
That's the one we're going to have to fix so that we achieve Conn's correctness with this program.

54
00:03:48,180 --> 00:03:54,060
So let me go down to and you can see I've got constructor copy constructor all the normal stuff.

55
00:03:54,060 --> 00:03:58,470
I'm going to come at this function because we're going to use that one in a minute but this is what

56
00:03:58,470 --> 00:03:59,390
I've got so far.

57
00:03:59,430 --> 00:04:05,130
I've created a villain object that is a player type and it's constant.

58
00:04:05,160 --> 00:04:09,900
I've also created a hero which is a player type Pierro is not constant.

59
00:04:09,900 --> 00:04:11,460
So what does this mean.

60
00:04:11,460 --> 00:04:14,740
This means that I cannot change any of villain's attributes.

61
00:04:14,880 --> 00:04:19,240
So here's a real simple way to tell that this actually works.

62
00:04:19,440 --> 00:04:27,180
If I take that Expwy attribute that's private and just make it public for a minute and then I come down

63
00:04:27,180 --> 00:04:31,300
here again and I'm just going to say something really simple like villain.

64
00:04:31,650 --> 00:04:34,270
XP is a thousand.

65
00:04:34,470 --> 00:04:39,150
It should let me do that right because XP is public but it won't because villaine is constant so if

66
00:04:39,150 --> 00:04:46,230
I try to compile this i'll an right here is this assignment of member player XP in a read only object.

67
00:04:46,230 --> 00:04:47,390
Makes a lot of sense.

68
00:04:47,400 --> 00:04:49,200
That's actually a really good compiler error.

69
00:04:49,410 --> 00:04:53,130
It's telling you that that object villain is read only you can't change any of it right.

70
00:04:53,130 --> 00:04:55,560
That's what that construct does.

71
00:04:55,560 --> 00:05:02,120
So let me undo what I just did here and I'll make XP private again.

72
00:05:03,100 --> 00:05:03,780
OK.

73
00:05:03,900 --> 00:05:06,270
So let's do a couple of things.

74
00:05:06,270 --> 00:05:11,180
Now let's come down again to our main here and I'll remove that line right here.

75
00:05:11,220 --> 00:05:15,510
So we're back to where we started we've got the villain and we've got the hero now.

76
00:05:15,630 --> 00:05:18,020
Obviously I should never be allowed to change villain.

77
00:05:18,020 --> 00:05:25,570
Right so doing something like villain does set name to no super villain.

78
00:05:26,730 --> 00:05:31,980
That should never be allowed because if you look at the set named Melville right up here it is actually

79
00:05:32,190 --> 00:05:34,590
changing that name attribute.

80
00:05:34,590 --> 00:05:40,830
So if you try to compile this you would expect an error and you do get an error and the error message

81
00:05:40,830 --> 00:05:47,520
is saying passing Consta player and that's what this is right here villaine as this argument discards

82
00:05:47,520 --> 00:05:48,340
qualifier.

83
00:05:48,480 --> 00:05:52,170
So what it's telling you is that you're passing this in as a constant.

84
00:05:52,170 --> 00:05:56,550
But the class is not expecting a constant and it's going to be able to change it.

85
00:05:56,550 --> 00:05:59,040
Now you'd get the same error if you called the get named function.

86
00:05:59,040 --> 00:06:02,920
So let's try that on villaine.

87
00:06:03,240 --> 00:06:04,260
You may not.

88
00:06:04,320 --> 00:06:10,650
This one may not seem so obvious as to why but let's say we did something like that.

89
00:06:10,860 --> 00:06:13,210
Just put that in an output statement.

90
00:06:13,260 --> 00:06:17,210
So we'll say something to see out area or something like that.

91
00:06:17,210 --> 00:06:21,900
I'll come at this one out because we know that once that one should never work right ever not even once

92
00:06:21,900 --> 00:06:24,240
we're Konst correct that that should never be allowed.

93
00:06:24,480 --> 00:06:25,730
But now we're here.

94
00:06:25,800 --> 00:06:29,210
So I'm saying villaine give me your name.

95
00:06:29,280 --> 00:06:30,340
That should work.

96
00:06:30,370 --> 00:06:35,250
You really think about it right because it's not changing the object it's simply returning that string

97
00:06:35,280 --> 00:06:37,510
and display it but it won't work.

98
00:06:37,590 --> 00:06:42,360
It's going to give you an error and the error is again same error passing Konst player as this argument

99
00:06:42,390 --> 00:06:43,720
discards qualifier.

100
00:06:44,010 --> 00:06:45,890
So what's going on.

101
00:06:46,200 --> 00:06:52,020
Well that get name method could change the object right.

102
00:06:52,020 --> 00:06:57,900
There's no reason I couldn't write some code in the get method right here that change one of those attributes

103
00:06:58,260 --> 00:07:02,350
and the compiler can't guarantee that at this point so it's going to throw the error.

104
00:07:02,400 --> 00:07:12,420
The fix will come up in a little bit but now what if I did something like this when if I did the same

105
00:07:12,540 --> 00:07:14,210
output statement.

106
00:07:14,790 --> 00:07:18,210
But I did it with hero instead of villain.

107
00:07:18,720 --> 00:07:20,560
Let's compile that.

108
00:07:20,560 --> 00:07:22,230
How are you going to get a clean run right.

109
00:07:22,230 --> 00:07:27,960
That makes sense because hero is not Konst so the compiler doesn't really care if you change hero in

110
00:07:27,960 --> 00:07:29,250
that method or not.

111
00:07:29,760 --> 00:07:33,220
OK so what would make all these concert correct them a little bit.

112
00:07:33,450 --> 00:07:35,870
So there you can see some of the issues here.

113
00:07:36,060 --> 00:07:40,050
Now suppose that I'm going to comment all this out and then I'll uncommented it a little bit.

114
00:07:40,050 --> 00:07:44,820
But now suppose we have this function right here and this is not a member function it's just a regular

115
00:07:44,820 --> 00:07:51,860
function it's called display player name and it expects P which is a reference to a concert player object.

116
00:07:51,900 --> 00:07:52,420
Right.

117
00:07:52,500 --> 00:07:56,720
And all we're doing is getting up that player objects name or displaying it.

118
00:07:56,730 --> 00:07:59,730
So let's call that method.

119
00:08:00,060 --> 00:08:09,010
So we'll call display player name it will pass in villaine And what would expect it is to print up villaine

120
00:08:09,010 --> 00:08:09,330
right.

121
00:08:09,370 --> 00:08:15,670
So let's compile that we get an error Error passing Konst player this argument discards qualifiers like

122
00:08:15,970 --> 00:08:18,190
the problems right here right there.

123
00:08:18,410 --> 00:08:21,370
And OK you know we can sort of understand that air.

124
00:08:21,520 --> 00:08:23,800
But now let's try this with Hero

125
00:08:27,200 --> 00:08:31,940
and we'll just replace Villiam with hero here and I'll comment this line out.

126
00:08:31,950 --> 00:08:36,280
So we're definitely sure what's causing any errors if we get any.

127
00:08:36,290 --> 00:08:37,760
So look what's happening here.

128
00:08:37,760 --> 00:08:39,520
Hero is not a construct.

129
00:08:39,530 --> 00:08:44,510
Someone to pass hero into Display player as a contest that means this function can't change it.

130
00:08:44,510 --> 00:08:45,500
Right.

131
00:08:45,620 --> 00:08:46,720
That's the problem.

132
00:08:46,850 --> 00:08:52,770
When I call up get name as far as P-doc get name is concerned that's a contest.

133
00:08:52,820 --> 00:08:53,990
It can't change it.

134
00:08:53,990 --> 00:08:54,300
Right.

135
00:08:54,320 --> 00:08:55,880
But there's no way to guarantee that.

136
00:08:55,880 --> 00:08:59,300
So this is going to give me the same error as before.

137
00:08:59,300 --> 00:09:02,180
There's the air again.

138
00:09:02,190 --> 00:09:03,820
So what's the fix.

139
00:09:03,930 --> 00:09:09,150
Well the fix is pretty simple the fix is we come up here to our class and we come to that method get

140
00:09:09,150 --> 00:09:16,500
name and we want to tell the compiler Hey compiler I guarantee and you double check for me that this

141
00:09:16,590 --> 00:09:20,680
method get name is not modifying the object at all.

142
00:09:20,760 --> 00:09:27,120
You do that with the conc qualifier right there you put a cons right after the parameter list.

143
00:09:27,340 --> 00:09:31,360
If you've just got a prototype you just put it like right before the prototype right in there before

144
00:09:31,360 --> 00:09:32,540
the semicolon.

145
00:09:33,070 --> 00:09:33,820
That's it.

146
00:09:33,820 --> 00:09:38,840
Now you've just told the compiler I guarantee that I'm not changing that object in this method.

147
00:09:38,980 --> 00:09:42,320
So now the compiler is happy and all of this stuff will work now.

148
00:09:42,380 --> 00:09:42,850
Right.

149
00:09:43,020 --> 00:09:51,320
Let's uncomment all these out and uncomment this guy out as well because that should work as well.

150
00:09:51,790 --> 00:09:52,800
And that's it.

151
00:09:52,810 --> 00:09:59,650
So now we run this we should get a clean run villain hero villain hero just what we expect.

152
00:09:59,780 --> 00:10:03,530
Obviously this will never work.

153
00:10:04,190 --> 00:10:09,110
That should never work because it's we don't want to set anything and Villette which that should never

154
00:10:09,110 --> 00:10:09,830
be allowed.

155
00:10:09,860 --> 00:10:12,160
So I'll just leave that comment out.

156
00:10:12,560 --> 00:10:19,190
And then the other thing that's important I understand is once you define a method here as Konst you

157
00:10:19,190 --> 00:10:25,730
can't mess around with those attributes in here I can't say XP equals 100 right because now it's you're

158
00:10:25,730 --> 00:10:30,740
just violating what you just said you were going to do is no longer Kotz So if I compile and when you

159
00:10:30,740 --> 00:10:32,420
get an error right there on that line.

160
00:10:32,480 --> 00:10:33,040
Right.

161
00:10:33,130 --> 00:10:35,950
You're changing something in a read only object.

162
00:10:35,960 --> 00:10:41,320
So this is conc correctness it can get pretty complicated when you're passing things all over the place

163
00:10:41,350 --> 00:10:44,140
as Konst to non-contest here and so forth.

164
00:10:44,150 --> 00:10:50,750
But the rule of thumb is all your getters should be Cotts basically any method that you have in your

165
00:10:50,750 --> 00:10:55,370
class that doesn't modify the object should be Konst.

166
00:10:55,390 --> 00:10:58,380
OK so that's it for the Konst correctness.
