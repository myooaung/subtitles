1
00:00:05,390 --> 00:00:09,510
This video I'd like to go over some live examples of how to use iterators.

2
00:00:09,620 --> 00:00:13,520
There'll be a bunch of examples here and I'll go through them one at a time so that you can really understand

3
00:00:13,520 --> 00:00:14,810
what's going on.

4
00:00:14,840 --> 00:00:22,730
I'm in the Section 20 workspace in the iterators project and first things first so notice them I'm including

5
00:00:23,450 --> 00:00:25,950
a bunch of header files here.

6
00:00:26,140 --> 00:00:27,310
Set map and list.

7
00:00:27,320 --> 00:00:29,770
These are all containers in the SPL.

8
00:00:29,780 --> 00:00:34,190
We haven't really talked about set map and list too much but that's the whole point we really don't

9
00:00:34,190 --> 00:00:37,670
need to know that much about them to be able to iterate through them.

10
00:00:37,670 --> 00:00:40,420
We'll talk about them in detail in future videos.

11
00:00:40,640 --> 00:00:44,900
So the first thing we'll do is we'll have a couple of functions and here's a function that we're going

12
00:00:44,900 --> 00:00:46,650
to use and we're going to use it too much.

13
00:00:46,760 --> 00:00:51,440
But if we ever need to display a vector of integers we're going to call this function it's just going

14
00:00:51,440 --> 00:00:53,150
to display a nice little format.

15
00:00:53,320 --> 00:00:53,830
OK.

16
00:00:53,890 --> 00:00:57,050
Someone to close that up and that way you know what it is.

17
00:00:57,230 --> 00:01:02,880
So here's my first function and what I did was I broke this up into I think five different functions.

18
00:01:02,990 --> 00:01:08,270
That way it's all more self-contained rather than having one just huge main with all the examples in

19
00:01:08,270 --> 00:01:08,980
it.

20
00:01:08,990 --> 00:01:11,690
So in this case let's walk through this.

21
00:01:11,690 --> 00:01:17,660
We're creating a vector right here of integers called Numbers 1 and we're putting 1 2 3 4 and 5 into

22
00:01:17,660 --> 00:01:18,610
that vector.

23
00:01:18,620 --> 00:01:23,180
So this is where we're at right now 1 2 three four and five.

24
00:01:23,570 --> 00:01:28,110
And remember the end of the vectors after the last element.

25
00:01:28,130 --> 00:01:32,250
So we want to create an iterator now and that's what I'm doing right here.

26
00:01:32,300 --> 00:01:33,730
I'm using I-T.

27
00:01:34,040 --> 00:01:39,170
And notice I'm using Auto I'm letting the compiler deduce the type of the iterator obvious it's going

28
00:01:39,170 --> 00:01:42,170
to be an iterator that iterates over vectors of integers right.

29
00:01:42,200 --> 00:01:43,320
That's the idea here.

30
00:01:43,400 --> 00:01:45,550
So I'm going to call numbers 1 began.

31
00:01:45,560 --> 00:01:50,600
That's going to give me the iterator to the first element and assign it to I-T.

32
00:01:50,600 --> 00:01:54,670
So I t's here and it's going to be pointing there.

33
00:01:54,680 --> 00:01:57,210
I remember is not a real pointer.

34
00:01:57,260 --> 00:01:58,470
This is an object.

35
00:01:58,520 --> 00:02:03,760
OK but the syntax and the way it feels is very pointier like and that's by design.

36
00:02:03,800 --> 00:02:10,100
So that's pointing to the one in order to get to the one I need to dereference that iterator right there.

37
00:02:10,100 --> 00:02:14,000
And what that's meant to do is it's going to give me the one the the object in the container.

38
00:02:14,240 --> 00:02:16,230
And in this case I'm going to display it.

39
00:02:16,580 --> 00:02:16,900
OK.

40
00:02:16,910 --> 00:02:18,620
So it's as simple as that.

41
00:02:18,620 --> 00:02:24,380
Now what I want to do is move this iterator so I'm incrementing the iterator right here and I'm incrementing

42
00:02:24,380 --> 00:02:25,510
it by 1.

43
00:02:25,550 --> 00:02:32,560
So what's going to happen the iterator now will be pointing to two.

44
00:02:32,600 --> 00:02:33,590
What do we do.

45
00:02:33,590 --> 00:02:35,060
We're displaying it again.

46
00:02:35,060 --> 00:02:39,920
So I want to display it to not notice what's happening in the next line I'm saying.

47
00:02:39,920 --> 00:02:43,910
Iterator plus equals to some increment the iterator by 2.

48
00:02:44,000 --> 00:02:46,070
Was it to someone to go 1 2.

49
00:02:46,070 --> 00:02:51,650
Now it's going to be pointing to the limit number four what do I do.

50
00:02:51,650 --> 00:02:53,280
Display it.

51
00:02:53,500 --> 00:02:57,160
Now I'm going to move it right back down by to someone to move it back to the two

52
00:03:01,000 --> 00:03:07,030
and display that and then the last thing I'll do is I'll city iterator to point to the element.

53
00:03:07,040 --> 00:03:08,090
That's not a dn.

54
00:03:08,090 --> 00:03:11,220
Remember there is no element in the end just means you're at the end of the list.

55
00:03:11,420 --> 00:03:13,670
But I want to go one back from it.

56
00:03:13,670 --> 00:03:16,860
So I really want to point to the end of the list the five in this case.

57
00:03:16,880 --> 00:03:23,630
So what we're doing is in this case we're going over here and there we're back and up one so that.

58
00:03:23,630 --> 00:03:29,140
So if I run this this test function right here there should be the output 1 2 4 to 5.

59
00:03:29,360 --> 00:03:34,410
And what's interesting here is you can see how these integrators feel just like pointers right.

60
00:03:34,610 --> 00:03:36,680
And that's real handy.

61
00:03:36,680 --> 00:03:40,440
I'm using the auto here it saves a lot of makes it a lot easier read.

62
00:03:40,490 --> 00:03:42,410
I'll use it in some places I won't use.

63
00:03:42,410 --> 00:03:45,140
Another is that where you can actually see both styles.

64
00:03:45,350 --> 00:03:46,040
So that's it.

65
00:03:46,040 --> 00:03:52,790
If I run this program now let me go through my main and make sure that I'm calling tests 1 am right

66
00:03:52,820 --> 00:03:53,320
there.

67
00:03:53,480 --> 00:04:00,010
So if I run this now what I've got is I should get one to 4 to 5 exactly like we thought.

68
00:04:00,420 --> 00:04:06,310
So let's test once let me collapse this guy will move on to test to and I'll go down to my main and

69
00:04:06,310 --> 00:04:12,180
I'll just make sure that I comment about tests 1 and uncomment test to perfect.

70
00:04:12,190 --> 00:04:15,620
So now let's take a look at a test to see what's going on in there.

71
00:04:15,640 --> 00:04:20,860
So here's test two who we're doing the same thing we're creating a vector of integers and initializing

72
00:04:20,860 --> 00:04:22,070
it from 1 to 5.

73
00:04:22,180 --> 00:04:25,920
So we've got one two three four five.

74
00:04:25,960 --> 00:04:27,950
And here is the end right here.

75
00:04:28,800 --> 00:04:33,430
Croak created another iterator I'm calling it again this way and this time I'm doing it long style I'm

76
00:04:33,430 --> 00:04:38,430
not using auto and you can see it's really pretty straightforward it's just a lot of extra typing.

77
00:04:38,590 --> 00:04:45,100
So we're creating a stood vector of integers and that's the iterator and we're calling it I-T and we're

78
00:04:45,100 --> 00:04:50,590
initialising it comes one dot began which is the first element in this vector which is that one right

79
00:04:50,590 --> 00:04:51,700
there.

80
00:04:51,820 --> 00:04:53,050
So that's where we're at now.

81
00:04:53,300 --> 00:04:57,190
And now you can see what's happening here I've got a while it gets really simple I'm saying while the

82
00:04:57,190 --> 00:05:01,960
iterator is not pointing to this guy over here the end.

83
00:05:01,960 --> 00:05:08,050
In other words while the iterators in the real list in the container in this case a vector what I want

84
00:05:08,050 --> 00:05:11,770
to do is display what is pointing to and then increment.

85
00:05:11,920 --> 00:05:16,060
So you can see what this is doing is just going here and then here and then here and then here and then

86
00:05:16,060 --> 00:05:16,850
it says stop.

87
00:05:16,960 --> 00:05:23,410
So this will print out one two three four and five write just like that.

88
00:05:23,980 --> 00:05:26,860
So let's take a look at this loop right here.

89
00:05:27,280 --> 00:05:30,250
What we're doing here it's really the same thing I remember this iterator.

90
00:05:30,320 --> 00:05:32,300
Now it is over here.

91
00:05:32,410 --> 00:05:34,030
It's pointing to the end.

92
00:05:34,060 --> 00:05:38,870
So if I want to go back to the beginning I could just simply say it's equals numbers 1.

93
00:05:38,930 --> 00:05:43,450
Begin right from resetting that iterator to points in the beginning of this container.

94
00:05:43,450 --> 00:05:44,890
This vector.

95
00:05:45,090 --> 00:05:50,580
So what I'm doing is Acemoglu while I'm not at the end of the list this time I'm doing this right here.

96
00:05:50,580 --> 00:05:52,180
Now that's an interesting statement.

97
00:05:52,180 --> 00:05:56,720
Members dereference the iterator equals zero.

98
00:05:57,210 --> 00:05:59,230
Just like we did with pointers.

99
00:05:59,580 --> 00:06:03,590
What are we doing we're storing 0 where the iterators pointing here were looping through.

100
00:06:03,590 --> 00:06:05,880
So what we're doing is we're doing this.

101
00:06:06,070 --> 00:06:09,820
We're changing all of those values in that vector to zero.

102
00:06:10,060 --> 00:06:13,650
And then I'm just calling display Nom's which should display a bunch of zeros.

103
00:06:13,660 --> 00:06:22,010
All right so let me raise this and give this a run and see what we get there is our output 1 2 3 4 5

104
00:06:22,030 --> 00:06:23,200
just like we expected.

105
00:06:23,230 --> 00:06:27,240
And then a bunch of zeros when we call the display function.

106
00:06:27,280 --> 00:06:28,740
Hopefully you all are with me.

107
00:06:28,780 --> 00:06:32,920
These iterators are pretty straightforward but it's important to understand them because we really need

108
00:06:32,920 --> 00:06:37,240
to use them with the algorithms so we have to be able to make sure that what we're getting is what we

109
00:06:37,240 --> 00:06:37,870
want.

110
00:06:37,870 --> 00:06:40,170
So let's take a look at test three.

111
00:06:40,180 --> 00:06:44,970
Let me take care of main real quick and I'll comment this one out so we can run test three.

112
00:06:45,070 --> 00:06:46,290
And here's test three.

113
00:06:46,300 --> 00:06:52,110
Now what we're going to do here is a constant iterator all the concentrator is is an iterator by it

114
00:06:52,120 --> 00:06:54,950
can't change what it's pointing to it's constant.

115
00:06:55,120 --> 00:06:57,010
So we can do this a couple of different ways.

116
00:06:57,010 --> 00:07:00,060
We're doing the same declaration here of number ones.

117
00:07:00,070 --> 00:07:01,480
That's my vector of integers.

118
00:07:01,480 --> 00:07:04,040
Again one two three four five.

119
00:07:04,060 --> 00:07:11,790
Now what I'm doing here is I'm saying I-T one is a contest iterator noticed Konst underscore iterator.

120
00:07:11,790 --> 00:07:17,500
What that's doing is it's creating a constant iterator not just an iterator again a constant iterator

121
00:07:17,890 --> 00:07:19,630
and it's starting at the 1 again.

122
00:07:19,660 --> 00:07:20,770
Number one to begin.

123
00:07:20,770 --> 00:07:24,250
And I'm not going to write that again because you guys kind of know what's going on.

124
00:07:24,340 --> 00:07:28,990
Now if I wanted to not use this long style I just use the auto.

125
00:07:29,230 --> 00:07:32,960
I can't just say auto I-T one equals numbers one dot begin.

126
00:07:32,980 --> 00:07:36,860
Because I'll give me a regular iterator I have to say See begin.

127
00:07:37,000 --> 00:07:39,370
That's going to give me the constant iterator.

128
00:07:39,370 --> 00:07:42,680
So these two lines would be equivalent.

129
00:07:43,600 --> 00:07:45,430
Hey we could do it either way.

130
00:07:45,430 --> 00:07:49,850
Now what we're doing here is we're just looping through and printing out again one through 5.

131
00:07:50,110 --> 00:07:54,390
But let's see if we can change things right member here.

132
00:07:54,430 --> 00:07:58,900
We're trying to change each one of those elements to zero just like we did in test two a little while

133
00:07:58,900 --> 00:07:59,500
ago.

134
00:07:59,500 --> 00:08:04,580
I can't do that and I'm not allowed to do that because it's a Konst iterator right here.

135
00:08:04,810 --> 00:08:13,030
So if I try to do that let me comment that line out right here if I try to do that I should get a compiler

136
00:08:13,840 --> 00:08:15,320
and it's exactly right.

137
00:08:15,370 --> 00:08:20,200
This is one of the things that you'll notice about compiler errors for the standard template library.

138
00:08:20,260 --> 00:08:21,950
They're not exactly readable compiler.

139
00:08:21,950 --> 00:08:26,400
Here are some of them are really really nasty or hard to understand but this one is not too bad.

140
00:08:26,410 --> 00:08:29,970
It says error assignment of read only location that gives you a clue.

141
00:08:29,980 --> 00:08:30,540
Right.

142
00:08:30,610 --> 00:08:34,300
We've got a constant iterator here you're trying to write through it.

143
00:08:34,330 --> 00:08:40,780
So that's the rest of the error message which is kind of nasty to read so I'll comment this back out

144
00:08:41,040 --> 00:08:45,310
and if I run it now I should just get the one through the five just like we did before.

145
00:08:45,310 --> 00:08:46,060
Perfect.

146
00:08:46,060 --> 00:08:50,130
Now let's take a look test for which adds a few more little things to the mix.

147
00:08:50,280 --> 00:08:53,630
Well we'll use some containers that we haven't used yet.

148
00:08:54,370 --> 00:08:57,050
So any comment tests for.

149
00:08:57,130 --> 00:08:58,710
And let's take a look at test for this.

150
00:08:58,720 --> 00:09:00,670
A lot going on here.

151
00:09:00,700 --> 00:09:04,800
First thing is we're going to use a reverse iterator first.

152
00:09:04,840 --> 00:09:07,450
So what we're doing here we've got a vector.

153
00:09:07,450 --> 00:09:08,660
One two three four.

154
00:09:08,850 --> 00:09:10,850
Probably should put the 5 in there I forgot.

155
00:09:10,960 --> 00:09:12,010
So but doesn't matter.

156
00:09:12,010 --> 00:09:14,580
We've got a vector one two three four and it's vec.

157
00:09:14,590 --> 00:09:16,600
It's a vector of integers.

158
00:09:16,610 --> 00:09:20,380
Now I'm creating i t one is my iterator.

159
00:09:20,380 --> 00:09:25,230
And notice that I'm using auto and I'm using R begin right there.

160
00:09:25,360 --> 00:09:27,330
That's a reverse iterator.

161
00:09:27,460 --> 00:09:29,420
That's what the R stands for.

162
00:09:29,650 --> 00:09:35,060
And then what I'm doing is while I-T one is not equal to Veck dot our end.

163
00:09:35,380 --> 00:09:37,290
So now we're just going the other way around.

164
00:09:37,390 --> 00:09:44,650
So we're going for three to one and the end is actually over here now and we're simply displaying and

165
00:09:44,650 --> 00:09:50,080
notice I'm incrementing right you may want to decrements and you're going the other way but we're using

166
00:09:50,080 --> 00:09:54,960
a reverse iterator so incrementing here really means detrimental here.

167
00:09:54,970 --> 00:09:56,980
And the other way around as well.

168
00:09:57,010 --> 00:10:02,930
Now let's look at a couple of more examples here what we've got is a container we haven't used yet.

169
00:10:03,040 --> 00:10:06,340
We'll use it a lot later on watching and do a nice little challenge with it.

170
00:10:06,340 --> 00:10:10,960
It's a list a list is basically a doubly linked list.

171
00:10:10,960 --> 00:10:15,870
So remember how a vector was a bunch of data contiguous in memory.

172
00:10:16,120 --> 00:10:20,740
Well a list is some items that kind of look like that are elements.

173
00:10:20,890 --> 00:10:27,780
And then we've got pointers back and forth so that we can move from one to the next one really easily.

174
00:10:27,910 --> 00:10:28,880
So that's all it is.

175
00:10:28,870 --> 00:10:32,830
We don't really have to worry too much about how it's implemented behind the scenes to use it which

176
00:10:32,830 --> 00:10:33,850
is really cool.

177
00:10:33,850 --> 00:10:43,900
So what I'm doing here declaring name I should call that names but that's ok name is a list of strings

178
00:10:44,860 --> 00:10:47,380
and then initializing it to Larry Moe and Curly.

179
00:10:47,740 --> 00:10:49,190
Now what I'm doing is I'm setting.

180
00:10:49,320 --> 00:10:50,880
Teach and this would be Larry here.

181
00:10:50,890 --> 00:10:54,880
This would be moe here and this would be curly over here.

182
00:10:55,120 --> 00:11:02,320
Then I'm saying I T-2 is a constant reverse iterator.

183
00:11:02,320 --> 00:11:03,760
That's the C R.

184
00:11:03,760 --> 00:11:10,720
So right now I T-2 is pointing right over here and it's its reverse iterator.

185
00:11:10,720 --> 00:11:16,330
If I dereference it it's going to print out curly.

186
00:11:16,330 --> 00:11:22,870
Now I'm going to increment it which simply means move it over here incrementing means going reverse.

187
00:11:23,110 --> 00:11:31,790
So in this case I'm coming over here in a mo and right here I'm going to display Mo over here I displayed

188
00:11:31,790 --> 00:11:34,280
Curly.

189
00:11:34,470 --> 00:11:36,270
So that takes care of that one.

190
00:11:36,360 --> 00:11:39,430
And then let's do a few more.

191
00:11:39,690 --> 00:11:43,160
Now this is a data structure that we haven't used yet a container we haven't used.

192
00:11:43,330 --> 00:11:45,000
It's a map.

193
00:11:45,000 --> 00:11:46,080
What is a map.

194
00:11:46,080 --> 00:11:51,390
A map is a map is a key and a value.

195
00:11:52,050 --> 00:11:55,200
So it's a pear and I talked about this earlier.

196
00:11:55,200 --> 00:11:59,990
There's a class called stood pear and that's basically what's happening.

197
00:12:00,030 --> 00:12:06,070
The first item in there is called first and the second item in the pair is called second.

198
00:12:06,480 --> 00:12:08,230
And we can access them directly.

199
00:12:08,460 --> 00:12:16,480
So look what I'm doing here I'm creating favorites and favorites is a map of string string pairs.

200
00:12:16,680 --> 00:12:18,260
And I would just say initializing them.

201
00:12:18,270 --> 00:12:23,420
So all we're doing here is creating an association between two strings of Frank like C++.

202
00:12:23,490 --> 00:12:24,420
Bill likes Java.

203
00:12:24,420 --> 00:12:27,210
James likes Haskell or Frank hate C++.

204
00:12:27,210 --> 00:12:29,190
Bill hates just whatever makes sense here.

205
00:12:29,190 --> 00:12:30,490
So that's the map.

206
00:12:30,570 --> 00:12:36,450
You know what we're going to do we're going to have another iterator in this case I T-3 and it's favorite's

207
00:12:36,450 --> 00:12:37,290
not began.

208
00:12:37,290 --> 00:12:42,550
So it's going to go to the first item in that map which in this case is phrenic.

209
00:12:43,890 --> 00:12:50,700
And I'm going to loop while I T-3 while that iterator is not pointing to the end of that map.

210
00:12:50,700 --> 00:12:53,290
Now how is a map stored behind the scenes.

211
00:12:53,310 --> 00:12:55,060
It's a complex data structure.

212
00:12:55,080 --> 00:12:56,050
It doesn't matter.

213
00:12:56,070 --> 00:12:58,730
I don't need to know that to use this kind of logic.

214
00:12:58,980 --> 00:13:00,120
That's the beauty of this.

215
00:13:00,120 --> 00:13:02,390
I don't really doesn't matter what and how it's implemented.

216
00:13:02,390 --> 00:13:03,480
Behind the scenes.

217
00:13:03,480 --> 00:13:09,540
So in this case while I haven't hit the end of that map for each one of those guys I'm going to take

218
00:13:09,750 --> 00:13:14,030
83 first and 83 second make sense right.

219
00:13:14,040 --> 00:13:19,650
So we're basically using the arrow operator dereferencing the iterator getting to that pair and then

220
00:13:19,650 --> 00:13:22,010
taking the first item and the second item in the pair.

221
00:13:22,110 --> 00:13:25,040
And then we're incrementing the out in the iterator.

222
00:13:25,110 --> 00:13:27,630
So let's run this.

223
00:13:28,020 --> 00:13:29,620
And here are results.

224
00:13:29,620 --> 00:13:31,600
Let me scroll up just a little bit here.

225
00:13:31,680 --> 00:13:34,380
Here we're displaying this reverse iterator.

226
00:13:34,380 --> 00:13:39,740
We're using the reverse iterator to display this vector VEC and we're getting four three two one.

227
00:13:39,840 --> 00:13:43,950
Over here we got curly and Moe remember we're starting at the back so we're getting curly and then we're

228
00:13:43,950 --> 00:13:47,390
incrementing which means move to the left and I've got mo.

229
00:13:47,850 --> 00:13:54,390
And then I'm just iterating over this map so I'm getting built Java Frank C++ James Haskell.

230
00:13:54,390 --> 00:13:56,310
Now notice the order here.

231
00:13:56,430 --> 00:13:58,000
It's not the order I put them in.

232
00:13:58,050 --> 00:14:05,670
The last one we'll do is we'll do test 5 and test 5 is pretty easy so far everything we've done we've

233
00:14:05,820 --> 00:14:08,380
iterated through an entire container.

234
00:14:08,400 --> 00:14:12,440
Well we're going to do here was just going to iterate over a subset of the container.

235
00:14:12,570 --> 00:14:15,210
So we have a vector of integers.

236
00:14:15,240 --> 00:14:21,640
Again one two three four five six seven eight nine and 10.

237
00:14:21,720 --> 00:14:23,410
And here's the end.

238
00:14:24,270 --> 00:14:30,500
And now I've got two iterators I'm using auto for both so the compiler can figure out the type and I'm

239
00:14:30,510 --> 00:14:38,700
saying start that's the name of my iterator is equal to VEC that begin plus two vector begin is this

240
00:14:38,700 --> 00:14:44,820
guy plus two would be the three and finish

241
00:14:47,670 --> 00:14:49,200
vector and minus three.

242
00:14:49,210 --> 00:14:55,080
Well here's Vicot end minus one two three.

243
00:14:55,150 --> 00:14:57,630
That's what we've got that's starting to finish.

244
00:14:57,640 --> 00:15:00,580
So now what I want to do is I just want to display the elements between them.

245
00:15:00,580 --> 00:15:05,470
So right there is the logic while start is not equal to finish.

246
00:15:05,470 --> 00:15:07,520
Display what start is pointing to.

247
00:15:07,520 --> 00:15:10,620
So it's going to display three and then increments start.

248
00:15:10,900 --> 00:15:14,320
Display for display five display six display seven.

249
00:15:14,320 --> 00:15:15,430
Now they are equal.

250
00:15:15,430 --> 00:15:16,770
So this fails and we're done.

251
00:15:16,780 --> 00:15:22,870
So this will display this subset of that vector.

252
00:15:22,870 --> 00:15:23,290
Right.

253
00:15:23,290 --> 00:15:25,090
So let's run this.

254
00:15:26,410 --> 00:15:30,330
And you can see three four five six and seven being displayed right here.

255
00:15:30,570 --> 00:15:30,940
OK.

256
00:15:30,960 --> 00:15:32,960
So play with these examples.

257
00:15:32,980 --> 00:15:35,840
I've broken them up into these small test cases.

258
00:15:35,920 --> 00:15:39,910
That way you can tweak them a little bit rather than having one huge man that's going to get really

259
00:15:39,910 --> 00:15:40,810
complicated.

260
00:15:40,990 --> 00:15:43,720
So come in here comment them out add your own logic.

261
00:15:43,720 --> 00:15:48,250
Play around with reverse iterators constant iterators regular iterators.

262
00:15:48,250 --> 00:15:52,550
You saw how I created the map so you can kind of figure out based on my code what I did.

263
00:15:52,660 --> 00:15:59,320
Obviously I'm going to talk about lists and forward lists and maps and vectors and sets and everything

264
00:15:59,320 --> 00:16:01,610
else in the upcoming videos.
