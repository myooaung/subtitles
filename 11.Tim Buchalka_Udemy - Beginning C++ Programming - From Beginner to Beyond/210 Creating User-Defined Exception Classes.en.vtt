WEBVTT
1
00:00:05.380 --> 00:00:12.020
In this field you will see how we can create our own exception classes and throw and catch them.

2
00:00:12.040 --> 00:00:18.640
This has the advantage of making the type of the exception thrown very explicit and also very specific

3
00:00:18.640 --> 00:00:20.080
for our application.

4
00:00:20.080 --> 00:00:24.050
Best practice is to throw objects not primitive types.

5
00:00:24.070 --> 00:00:29.700
Also we want to throw by value and catch by reference or Konst reference.

6
00:00:29.720 --> 00:00:33.260
There are several other best practices that we'll talk about in a few videos.

7
00:00:33.320 --> 00:00:36.650
So let's see how we can create our own exception classes.

8
00:00:37.570 --> 00:00:41.520
Here we create two exception classes for our simple example.

9
00:00:41.560 --> 00:00:45.100
The first is a class called divide by zero exception.

10
00:00:45.100 --> 00:00:47.920
And the second is called negative value exception.

11
00:00:48.680 --> 00:00:49.650
That's it.

12
00:00:49.670 --> 00:00:54.770
Now when we throw an exception or our code we create an object of one of these types and throw it.

13
00:00:55.100 --> 00:01:00.410
Of course we can provide constructors attributes and methods for these classes as we would for any other

14
00:01:00.410 --> 00:01:01.140
class.

15
00:01:01.370 --> 00:01:05.570
And sometimes it's a good idea to provide information about the exception in these attributes.

16
00:01:05.570 --> 00:01:08.510
But as I said let's keep it simple in this example.

17
00:01:08.510 --> 00:01:10.280
So now let's see what our code would look like.

18
00:01:10.280 --> 00:01:12.800
Throwing these exception objects.

19
00:01:13.610 --> 00:01:18.370
Here's the calculate mpg function that we saw earlier in this section.

20
00:01:18.560 --> 00:01:20.820
The code is pretty much what you would expect.

21
00:01:20.840 --> 00:01:27.720
We checked to see if gallons is 0 and if it is we throw a divide by zero exception object by value.

22
00:01:27.780 --> 00:01:31.270
We then check if either miles or gallons are negative.

23
00:01:31.370 --> 00:01:35.180
And if they are we throw a negative value exception object by value.

24
00:01:35.300 --> 00:01:36.970
That's all there is to it.

25
00:01:36.980 --> 00:01:40.340
Now let's see how we'll call this function.

26
00:01:40.610 --> 00:01:42.180
Noticed it in the try block.

27
00:01:42.260 --> 00:01:48.440
We're again calling calculate miles per gallon and the function may or may not throw an exception if

28
00:01:48.440 --> 00:01:52.910
it does not then we simply assign the result of the function two miles per gallon.

29
00:01:52.940 --> 00:01:53.870
Display it.

30
00:01:53.990 --> 00:01:58.450
Transfer control all the way to the bottom and display by and we're done.

31
00:01:58.460 --> 00:02:02.140
However what if calculate miles per gallon does throw an exception.

32
00:02:02.150 --> 00:02:06.830
Remember it could throw a divide by zero exception where a negative value exception.

33
00:02:06.830 --> 00:02:12.620
So we create to catch handlers one for each exception type and we ride our exception handling code and

34
00:02:12.620 --> 00:02:14.020
the catch blocks.

35
00:02:14.510 --> 00:02:18.170
If an exception is thrown then one of these catch handlers will handle it.

36
00:02:18.170 --> 00:02:21.230
Notice how we're catching the exceptions by Konst ref.

37
00:02:21.290 --> 00:02:27.080
If we had provided attributes or methods in the exception classes we would access them here as before

38
00:02:27.080 --> 00:02:32.690
if we don't handle a particular exception type here then C++ will terminate this function and proceed

39
00:02:32.690 --> 00:02:38.030
up the call stack looking for a handler until it finds one or the program terminates.

40
00:02:38.030 --> 00:02:42.770
Let's head over to the IEEE and we'll see this example in action.

41
00:02:42.770 --> 00:02:48.540
All right so I'm back in the ID and what I've got here is the section 18 workspace and I don't mean

42
00:02:48.560 --> 00:02:52.310
the MPG function exception classes project.

43
00:02:52.520 --> 00:02:57.050
And what we're doing here is we're creating a couple of user defined exception classes which we're going

44
00:02:57.050 --> 00:02:58.090
to throw and catch.

45
00:02:58.090 --> 00:02:59.660
Same thing we did in the slides.

46
00:02:59.870 --> 00:03:03.950
You can see here that on lines 5 through 8 we're creating two classes.

47
00:03:03.980 --> 00:03:05.720
One is called divide by zero exception.

48
00:03:05.720 --> 00:03:08.390
The other is called negative value exception.

49
00:03:08.390 --> 00:03:11.790
Notice there are no attributes no methods no constructors nothing.

50
00:03:11.810 --> 00:03:15.950
These are just plain old classes and we're getting the default constructor and that's good enough for

51
00:03:15.950 --> 00:03:17.440
me right now.

52
00:03:17.630 --> 00:03:22.700
We could provide attributes and methods and all kinds of good stuff but the names of the classes in

53
00:03:22.700 --> 00:03:26.030
this case give us all the information we need about the exception.

54
00:03:26.060 --> 00:03:27.530
So what do we do.

55
00:03:27.560 --> 00:03:32.010
What we have to throw these exception objects when we have an error.

56
00:03:32.030 --> 00:03:38.810
So in this case we check to see if gallons is equal to zero and if it is we throw a divide by zero exception

57
00:03:38.900 --> 00:03:44.900
object does cause the default constructor we checked to see if Miles is less than zero or gallons is

58
00:03:44.900 --> 00:03:45.820
less than zero right.

59
00:03:45.830 --> 00:03:48.860
If either one of those is negative then the result won't be valid.

60
00:03:48.860 --> 00:03:55.390
So we can throw a negative value exception object if none of those is true and we're good to go.

61
00:03:55.400 --> 00:03:59.470
We simply do the calculation and we return miles divided by gallons.

62
00:03:59.850 --> 00:04:00.090
OK.

63
00:04:00.110 --> 00:04:01.650
Just like we've done before.

64
00:04:01.670 --> 00:04:09.380
So now down here let's look at our tri block here we're just grabbing the information from the user.

65
00:04:09.470 --> 00:04:11.790
They've typed in the number of miles number of gallons.

66
00:04:11.990 --> 00:04:14.180
And here's our try block right here.

67
00:04:14.210 --> 00:04:17.500
This is the function we're calling calculate miles per gallon.

68
00:04:17.570 --> 00:04:21.300
It could throw an exception if it does not throw an exception.

69
00:04:21.320 --> 00:04:24.580
We simply assigned two miles per gallon the result of that function call.

70
00:04:24.620 --> 00:04:29.420
We print out the result we're done and then we come down here and we're finished with the program and

71
00:04:29.420 --> 00:04:32.730
we terminate normally if it does throw an exception.

72
00:04:32.840 --> 00:04:38.530
Calculate miles per gallon could throw a divide by zero exception or a negative value exception.

73
00:04:38.540 --> 00:04:40.290
So I've got to catch handlers here.

74
00:04:40.310 --> 00:04:44.550
One for each if I get a divide by zero exception it's coming in here.

75
00:04:44.720 --> 00:04:49.510
There's my exception object if my class did have attributes and methods.

76
00:04:49.520 --> 00:04:52.190
I would certainly be able to call them and use them here.

77
00:04:52.340 --> 00:04:56.100
But in this case I'm just saying sorry you can't divide by zero at that point.

78
00:04:56.120 --> 00:05:00.550
I transfer control down to here it says by and I terminate normally.

79
00:05:00.560 --> 00:05:04.310
Same thing with negative value exception if I get a negative value exception.

80
00:05:04.370 --> 00:05:09.440
I catch that object here and notice I'm catching both of these by Konst ref.

81
00:05:09.470 --> 00:05:12.860
Now I just play sorry one of your parameters is negative.

82
00:05:12.860 --> 00:05:16.800
The catch handler completes and I again I come back here and I finish normally.

83
00:05:16.910 --> 00:05:19.850
So I don't have any abnormal termination in this case.

84
00:05:19.850 --> 00:05:22.460
So let's run this and we'll give it a test real quick.

85
00:05:23.380 --> 00:05:28.400
So let's do a normal test case 123 miles and let's say I used 13 gallons.

86
00:05:28.570 --> 00:05:35.470
So my result is nine point four six exactly what we expect that's running again this time we'll say

87
00:05:35.470 --> 00:05:40.340
123 with zero gallons so we expect a divide by zero message.

88
00:05:40.450 --> 00:05:42.100
Sorry you can't divide by zero.

89
00:05:42.100 --> 00:05:48.700
Notice the bi also happens which means our function terminates our program terminates normally that's

90
00:05:48.700 --> 00:05:54.580
run it one more time with negative for miles and something else for gallons.

91
00:05:54.580 --> 00:05:59.050
Sorry one of your parameters is negative and actually we'll do it one more time for the gallons be negative

92
00:05:59.050 --> 00:06:03.500
as the last test case and we'll say negative three.

93
00:06:03.520 --> 00:06:05.070
Sorry one of your primers is native.

94
00:06:05.070 --> 00:06:12.490
So that's handling all the cases that we've got and we're basically creating our own user defined exception

95
00:06:12.490 --> 00:06:13.460
classes.

96
00:06:13.480 --> 00:06:15.000
Now this is pretty common.

97
00:06:15.130 --> 00:06:19.090
And you can see that it's real nice it's far it's very readable you're throwing an object as you're

98
00:06:19.090 --> 00:06:23.320
supposed to you're catching it by Konst ref like you're supposed chip in a few videos.

99
00:06:23.320 --> 00:06:31.510
We'll talk about see post pusses standard exception hierarchy where it's possible for us to derive our

100
00:06:31.510 --> 00:06:35.470
exception classes from one of C++ is exception classes.

101
00:06:35.470 --> 00:06:39.640
If you're coming from the world of Java and other programming languages that's pretty much what you

102
00:06:39.640 --> 00:06:47.170
do in C++ you have the option of creating the standalone exception classes or buying into the standard

103
00:06:47.170 --> 00:06:51.160
exception class hierarchy that's provided by C++.

104
00:06:51.250 --> 00:06:52.810
But we'll talk about that in.
