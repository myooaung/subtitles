WEBVTT
1
00:00:05.400 --> 00:00:11.330
In this video we'll learn about the if else statement adding an ELSE section to an if statement is the

2
00:00:11.330 --> 00:00:15.090
obvious next step to improving control flow in a program.

3
00:00:15.530 --> 00:00:21.280
Many times we want to perform different actions depending on whether the condition is true or false.

4
00:00:21.290 --> 00:00:24.630
Again the syntax for the if statement is very simple.

5
00:00:24.800 --> 00:00:31.100
We had the same syntax test for the IF section as in a simple IF statement but we add the else key word

6
00:00:31.190 --> 00:00:34.880
and the statement we want to execute when the condition is false.

7
00:00:34.880 --> 00:00:39.510
So in this case if the control expression is true we execute statement 1.

8
00:00:39.680 --> 00:00:44.000
And if it's false we execute statement to notice the indentation.

9
00:00:44.000 --> 00:00:49.400
I can't stress enough how important good indentation style is by simply looking at the construct we

10
00:00:49.400 --> 00:00:53.230
can easily see both sections because it's indented properly.

11
00:00:54.290 --> 00:00:59.990
In this slide you can see example code in the flowchart that visually shows the flow of control the

12
00:01:00.000 --> 00:01:02.940
condition numb greater than 10 is evaluated.

13
00:01:03.090 --> 00:01:05.300
If that's true we increment numb.

14
00:01:05.550 --> 00:01:08.640
If it's false we assign 10 to numb.

15
00:01:08.640 --> 00:01:12.220
In both cases we then continue execution to the next statement.

16
00:01:12.600 --> 00:01:14.150
Let's see a few more examples.

17
00:01:15.450 --> 00:01:18.710
In the first statement we check if numb is greater than 10.

18
00:01:18.840 --> 00:01:22.210
If this is true we display numbers greater than 10.

19
00:01:22.320 --> 00:01:26.070
If it's false we display number is not greater than 10.

20
00:01:26.290 --> 00:01:29.830
And the second example we check if health is less than 100.

21
00:01:29.830 --> 00:01:35.030
And real player is true if both these conditions evaluate to true.

22
00:01:35.110 --> 00:01:38.080
Then we assign 100 to the player health.

23
00:01:38.080 --> 00:01:44.840
Otherwise we simply increment the player health here we could see sample code along with a flowchart

24
00:01:44.970 --> 00:01:47.690
that visually shows the flow of control.

25
00:01:47.700 --> 00:01:55.260
Notice that in this example we're using to block statements in the if statement so if numbers greater

26
00:01:55.260 --> 00:02:00.400
than 10 is true we execute both statements in the block we increment.

27
00:02:00.630 --> 00:02:04.790
And we display increment if number is not greater than 10.

28
00:02:04.920 --> 00:02:10.950
Then we assign 10 to numb and display reset regardless of which block statement executes we continue

29
00:02:10.950 --> 00:02:12.300
processing.

30
00:02:12.310 --> 00:02:17.610
Finally let's see another example where we group if else if statements.

31
00:02:17.730 --> 00:02:21.020
In many cases we can group if else statements together.

32
00:02:21.090 --> 00:02:22.850
Here's a common example.

33
00:02:22.860 --> 00:02:27.570
Suppose I wanted to split a student's letter grade given their score on an exam.

34
00:02:27.630 --> 00:02:31.140
In this case we can check if their score is greater than 90.

35
00:02:31.440 --> 00:02:34.090
If it is we display an A and we're done.

36
00:02:34.110 --> 00:02:39.990
No other conditions will be checked so we continue to the last output statement and display done.

37
00:02:39.990 --> 00:02:42.320
Suppose the student scored a 75.

38
00:02:42.780 --> 00:02:45.680
First we checked to see if a Scores greater than 90.

39
00:02:45.720 --> 00:02:46.410
It isn't.

40
00:02:46.470 --> 00:02:47.640
So we go to the next.

41
00:02:47.640 --> 00:02:48.990
Else if.

42
00:02:48.990 --> 00:02:50.930
Score greater than 80.

43
00:02:50.940 --> 00:02:52.480
Again it's not true.

44
00:02:52.620 --> 00:02:54.950
Then we check score greater than 70.

45
00:02:54.990 --> 00:02:58.150
Now it's true so we display's see C and we're done.

46
00:02:58.170 --> 00:03:03.890
No other conditions will be checked so we continue to the last output statement and display done.

47
00:03:03.900 --> 00:03:07.960
Notice that the last else in the construct doesn't have an if associated with it.

48
00:03:08.730 --> 00:03:10.860
This is the catch all else statement.

49
00:03:10.920 --> 00:03:15.140
If none of the previous If statements is true then this L statement will execute.

50
00:03:15.240 --> 00:03:18.100
An F is displayed.

51
00:03:18.140 --> 00:03:21.950
This is a very very common pattern that's often seen in programming.

52
00:03:22.010 --> 00:03:24.920
It's efficient since no extra checks will be performed.

53
00:03:24.920 --> 00:03:30.260
Once we know which condition is true we could obviously change the logic and start with score less than

54
00:03:30.260 --> 00:03:32.920
60 and work our way up to an A.

55
00:03:33.290 --> 00:03:38.300
Let's head over to the ID and see some examples in live code.

56
00:03:38.330 --> 00:03:40.280
I mean the code like ID.

57
00:03:40.280 --> 00:03:45.630
I'm in the section 9 workspace in the if statement project.

58
00:03:45.800 --> 00:03:47.060
This one is really really simple.

59
00:03:47.060 --> 00:03:52.490
The user is going to enter a number and we're going to store it numb and we're going to compare the

60
00:03:52.490 --> 00:03:53.470
number to a target.

61
00:03:53.470 --> 00:03:56.290
In this case I just assign 10 to the target.

62
00:03:56.420 --> 00:04:00.420
So we're asked to enter a number and compare it to 10 in this case.

63
00:04:00.750 --> 00:04:04.580
Ok we get the number from the user and then we've got a real simple if statement.

64
00:04:04.580 --> 00:04:10.250
If the number is greater than or equal to the target we're just going to display this line and then

65
00:04:10.250 --> 00:04:16.310
we're going to display the number they entered is greater than or equal to the target.

66
00:04:16.460 --> 00:04:17.610
That's it.

67
00:04:17.780 --> 00:04:22.100
We're also going to calculate the difference between the number and the target and display the difference.

68
00:04:22.100 --> 00:04:27.460
In this case in this piece right here this is the if statement right there.

69
00:04:27.560 --> 00:04:29.970
That's the section that's the true section.

70
00:04:30.050 --> 00:04:34.210
We're going to say Yeah the number you entered is greater than or equal to the target.

71
00:04:34.240 --> 00:04:37.220
It's so far away from the it's so much greater than the target.

72
00:04:37.220 --> 00:04:38.120
That's it.

73
00:04:38.120 --> 00:04:45.160
Now if the number they enter is not greater than or equal to the target then the else part fires in

74
00:04:45.170 --> 00:04:48.440
which case we're still going to print the line and then we're just going to say the number you entered

75
00:04:48.440 --> 00:04:50.450
is less than the target.

76
00:04:50.450 --> 00:04:54.470
What's the difference between target a number and we're going to display that difference as well.

77
00:04:54.470 --> 00:04:56.890
OK so really really straightforward program.

78
00:04:57.050 --> 00:04:59.330
Let's compile and run this.

79
00:04:59.330 --> 00:05:02.280
So in this case that's entrail number of compared to 10.

80
00:05:02.300 --> 00:05:04.510
Let's say I enter 10.

81
00:05:04.970 --> 00:05:10.050
It says 10 is greater than or equal to 10 which it is and 10 is zero greater than 10.

82
00:05:10.280 --> 00:05:14.330
Because it is 10 perfect so let's run this couple more times.

83
00:05:14.360 --> 00:05:19.340
Let's put in 100 and we get 100 is greater than or equal to 10.

84
00:05:19.460 --> 00:05:21.740
100 is 90 greater than 10 right.

85
00:05:21.740 --> 00:05:27.080
And that's put in print in negative 10.

86
00:05:27.110 --> 00:05:33.300
In this case negative 10 is less than 10 and negative 10 is 20 less than 10 which is again correct.

87
00:05:33.320 --> 00:05:40.350
So you can see real simple program adding an L S. to the if statement is really really simple and actually

88
00:05:40.350 --> 00:05:46.850
it's super powerful because it gives you the ability to have a binary decision and execute code on both

89
00:05:46.850 --> 00:05:48.000
sides of that decision.
