WEBVTT
1
00:00:05.560 --> 00:00:12.820
This video we'll learn about C++ is move constructor and move semantics these features were introduced

2
00:00:12.820 --> 00:00:16.540
in C++ 11 and they can be difficult to understand.

3
00:00:16.570 --> 00:00:22.630
So we'll take it slow and one step at a time while move semantics is not considered a beginning C++

4
00:00:22.630 --> 00:00:23.450
topic.

5
00:00:23.500 --> 00:00:25.700
It's important to understand it conceptually.

6
00:00:25.780 --> 00:00:28.080
So you can identify it in code when you see it.

7
00:00:29.100 --> 00:00:35.370
One of C++ elevons most pervasive features was probably move semantics and to really understand move

8
00:00:35.370 --> 00:00:41.970
semantics it's important to be able to tell whether an expression is an l value or an r value if you

9
00:00:41.970 --> 00:00:44.760
need a refresher about L values and our values.

10
00:00:44.760 --> 00:00:49.350
Please refer to the L values in our values video in Section 12 of this course.

11
00:00:49.710 --> 00:00:55.200
But a useful rule of thumb is that when you can refer to an object by name or you can follow a pointer

12
00:00:55.200 --> 00:01:01.560
to get to an object then that object is addressable and it's an l value and our values are everything

13
00:01:01.560 --> 00:01:02.140
else.

14
00:01:02.370 --> 00:01:08.100
But in the context of move semantics our rallies refer to temporary objects that are created by the

15
00:01:08.100 --> 00:01:11.710
compiler and objects returned from methods.

16
00:01:11.820 --> 00:01:18.780
As you can see in this slide when the expression 100 plus 200 is evaluated the compiler stores 300 and

17
00:01:18.780 --> 00:01:21.090
an unnamed temporary value.

18
00:01:21.090 --> 00:01:28.800
This value is not addressable So it's an r value the R value is then assigned to the l value total.

19
00:01:28.800 --> 00:01:30.490
The same happens with objects.

20
00:01:30.590 --> 00:01:35.640
However with objects that can be a great amount of overhead of copy constructors are called over and

21
00:01:35.670 --> 00:01:36.790
over and over again.

22
00:01:36.960 --> 00:01:39.460
Making copies of these temporary objects.

23
00:01:39.620 --> 00:01:45.030
Then when we have raw pointers and we have to do deep copies then the overhead is even greater.

24
00:01:45.030 --> 00:01:48.750
This is where move semantics and move constructor comes into the picture.

25
00:01:49.170 --> 00:01:54.270
Our value objects are the objects that move semantics addresses.

26
00:01:54.740 --> 00:01:59.410
We know that copy constructors are called whenever the compiler needs to make a copy of an object.

27
00:01:59.480 --> 00:02:04.560
We also know that if our class contains a raw pointer then we must implement deep copy.

28
00:02:04.850 --> 00:02:09.740
However this can be computationally expensive since we have to allocate space for the copy and then

29
00:02:09.740 --> 00:02:16.040
copy the data over to C++ move constructor moves the object rather than copies it.

30
00:02:16.040 --> 00:02:18.490
This can be extremely efficient.

31
00:02:18.770 --> 00:02:23.130
Move constructors are optional if you don't provide them then the copy constructor will be called.

32
00:02:23.210 --> 00:02:27.240
But it's a good idea to use move constructors for efficiency.

33
00:02:27.310 --> 00:02:32.440
Finally when you run your code and step through it in the debugger you might see move constructors being

34
00:02:32.440 --> 00:02:33.580
called.

35
00:02:33.580 --> 00:02:37.190
In fact sometimes you may not even see the copy constructor being called.

36
00:02:37.240 --> 00:02:43.480
If you experience this is probably due to something called copy elision copy elision is a compiler optimization

37
00:02:43.480 --> 00:02:46.930
technique that eliminates unnecessary copying.

38
00:02:47.030 --> 00:02:51.970
Compilers are really smart with their optimizations now and one of the common techniques is called Return

39
00:02:51.970 --> 00:02:53.490
Value optimization.

40
00:02:53.500 --> 00:02:57.940
That's when the compiler generates code that doesn't create a copy of a return value from a function

41
00:02:57.940 --> 00:02:59.750
making the code much more efficient.

42
00:03:02.090 --> 00:03:05.000
So let's start by talking about R-value references.

43
00:03:05.090 --> 00:03:08.870
We've already seen l value references which are references to L values.

44
00:03:08.960 --> 00:03:14.170
Well R-value references are references to our values in the context of move semantics.

45
00:03:14.270 --> 00:03:19.760
Think of our value references as references to those temporary objects that we were talking about.

46
00:03:21.030 --> 00:03:26.680
L value references are declared using a single ampersand like we've done but R-value references are

47
00:03:26.680 --> 00:03:28.900
declared using two ampersands.

48
00:03:28.900 --> 00:03:35.370
Let's see some examples in this example will see the difference between an l value reference and an

49
00:03:35.430 --> 00:03:37.050
r value reference.

50
00:03:37.050 --> 00:03:41.220
First we declare x as an integer and initialize it to 100.

51
00:03:41.310 --> 00:03:46.000
In this case x is an l value it's addressable and it's got a name.

52
00:03:46.020 --> 00:03:54.770
Now we can create l ref as a reference to X and since x is an l value this is an l value reference.

53
00:03:55.080 --> 00:03:57.420
We can use L ref to refer to X..

54
00:03:57.510 --> 00:03:58.080
Nothing new.

55
00:03:58.080 --> 00:04:00.150
This is stuff we've seen already.

56
00:04:00.150 --> 00:04:03.070
But now let's see what an r value reference looks like.

57
00:04:03.910 --> 00:04:10.840
Our ref is declared isn't our value ref to an integer with the double ampersand operator and we set

58
00:04:10.840 --> 00:04:15.360
it to refer to 200 since 200 is an r value.

59
00:04:15.460 --> 00:04:18.340
This makes ref an r value reference.

60
00:04:18.340 --> 00:04:25.540
Now we can actually assign 300 to our ref which stores 300 into the R value of where our ref refers

61
00:04:25.540 --> 00:04:26.250
to.

62
00:04:26.260 --> 00:04:29.170
In other words we just change that temporary variable.

63
00:04:29.170 --> 00:04:34.300
Notice that if we try to assign an l value to an r value reference we get a compiler error which makes

64
00:04:34.300 --> 00:04:35.790
perfect sense.

65
00:04:37.890 --> 00:04:42.690
So now let's look at l value references in the context of function parameters.

66
00:04:42.690 --> 00:04:46.150
This is what we've been doing all along up to this point in the course.

67
00:04:46.470 --> 00:04:51.630
We have an integer x we initialized it to 100 x is an l value.

68
00:04:51.630 --> 00:04:58.570
Now look at the function phunk it expects an l value reference as denoted by the single ampersand.

69
00:04:58.920 --> 00:05:03.080
So it wants an l value if we call func pass in x.

70
00:05:03.150 --> 00:05:08.510
Then this is OK since x is an l value and none will be the reference to an l value.

71
00:05:08.760 --> 00:05:11.740
But what happens if we call func with 200.

72
00:05:11.850 --> 00:05:16.610
Well 200 is not an l value it's an r value and the compiler will generate an error.

73
00:05:17.560 --> 00:05:23.310
You can see the error message below that the compiler generates.

74
00:05:23.310 --> 00:05:27.360
Now let's look at our value references in the context of function parameters.

75
00:05:27.450 --> 00:05:31.160
We again have defined X to be an integer and initialized it to 100.

76
00:05:31.260 --> 00:05:37.020
This time we declare func is a function that expects an r value reference and we did note that with

77
00:05:37.020 --> 00:05:38.860
the double ampersands.

78
00:05:39.060 --> 00:05:40.860
So it wants an r value.

79
00:05:41.250 --> 00:05:46.410
If we call func and pass in 200 This is OK since 200 is at our value.

80
00:05:46.800 --> 00:05:49.480
And now Gnome will be a reference to an r value.

81
00:05:49.800 --> 00:05:55.770
But what happens if we call func with X while we get an error message X is not an r value it's an l

82
00:05:55.770 --> 00:05:56.320
value.

83
00:05:56.370 --> 00:06:00.230
So the compiler generates the error and you can see the message it generates below.

84
00:06:02.370 --> 00:06:06.840
Now we can overload these functions and have both of them in our code at the same time since they have

85
00:06:06.930 --> 00:06:11.610
unique signatures and the compiler will call the correct function depending on whether the parameter

86
00:06:11.610 --> 00:06:13.510
is an l value in our value.

87
00:06:13.620 --> 00:06:18.540
We're going to take advantage of this when we defined the move constructor.

88
00:06:18.540 --> 00:06:23.100
So now let's see how this works with the move constructor in a class here I've created a class named

89
00:06:23.100 --> 00:06:26.460
move and it has a raw pointer as a data member.

90
00:06:26.460 --> 00:06:32.050
This class is similar to the shallow and deep classes we used earlier in the section the rest of the

91
00:06:32.050 --> 00:06:35.130
class methods are pretty standard and we've seen them before.

92
00:06:35.170 --> 00:06:39.100
Notice that we've included a copy constructor that does a deep copy.

93
00:06:39.220 --> 00:06:41.500
We have not defined the move constructor yet.

94
00:06:41.510 --> 00:06:42.600
We'll do that soon.

95
00:06:42.760 --> 00:06:46.870
But first let's look at the copy constructor.

96
00:06:46.890 --> 00:06:48.750
Here's the code for the copy constructor.

97
00:06:48.740 --> 00:06:50.970
Again pretty standard deep copy.

98
00:06:50.970 --> 00:06:55.180
We allocate storage and then we copy the data.

99
00:06:55.880 --> 00:07:01.370
Now we run a simple main that creates a vector of some move objects and we call the vector Veck and

100
00:07:01.370 --> 00:07:02.990
we push back to move object.

101
00:07:02.990 --> 00:07:05.230
Now notice what's happening in the argument list.

102
00:07:05.480 --> 00:07:08.850
Move 10 and move 20 or creating temporary objects.

103
00:07:08.930 --> 00:07:09.720
Unnamed.

104
00:07:09.830 --> 00:07:11.670
So they're going to be our values.

105
00:07:11.960 --> 00:07:18.860
What happens is that the compiler is going to use the copy constructor to make copies of these guys.

106
00:07:18.900 --> 00:07:25.550
So here's the sample output from that program you can see these constructors and destructors and copy

107
00:07:25.550 --> 00:07:27.250
constructor is being called.

108
00:07:27.260 --> 00:07:32.960
In fact you can see that the copy constructor is doing several DB copies which can be inefficient.

109
00:07:32.960 --> 00:07:37.840
Now let's add the move constructor to the class to make it much more efficient.

110
00:07:38.570 --> 00:07:40.960
So what is the move constructor actually do.

111
00:07:41.090 --> 00:07:46.610
Well instead of making a deep copy like the copy constructor does well instead of making a DB copy has

112
00:07:46.610 --> 00:07:50.680
the copy constructor does it simply moves the resource its on the heap.

113
00:07:50.840 --> 00:07:55.650
And the way we do that is just to assign the pointer from the source object to the current object.

114
00:07:55.670 --> 00:08:00.600
You might be thinking isn't that what default member wise copy is and yes it is.

115
00:08:00.680 --> 00:08:05.130
But now the difference is that we know out the pointer in the source object.

116
00:08:05.180 --> 00:08:11.060
So what we have now is an object who owns the data on the heap and then the original object with a pointer

117
00:08:11.060 --> 00:08:12.040
to that data.

118
00:08:12.700 --> 00:08:15.610
This is real efficient since we're not doing a copy at all.

119
00:08:17.270 --> 00:08:20.420
Before we implement the move constructor let's look at its syntax.

120
00:08:20.630 --> 00:08:25.870
As you can see it's very similar to the syntax for a copy constructor but it's got two differences.

121
00:08:25.880 --> 00:08:29.250
First there's no conc qualifier for the parameter source.

122
00:08:29.300 --> 00:08:33.770
There can't be because we need to modify it in order to null out its pointer.

123
00:08:33.770 --> 00:08:40.680
And second the parameter is an r value reference and you can see that with the double ampersands you

124
00:08:40.680 --> 00:08:45.120
can see in the last two declarations what the move constructor prototype might look like for a player

125
00:08:45.120 --> 00:08:47.370
class and the move class.

126
00:08:47.550 --> 00:08:53.250
So here we're adding the move constructor prototype to the move class declaration and now we need to

127
00:08:53.250 --> 00:08:55.560
implement it.

128
00:08:55.560 --> 00:08:58.150
Notice how simple the implementation is.

129
00:08:58.260 --> 00:09:01.440
We simply copy source dot data to data.

130
00:09:01.530 --> 00:09:04.410
That's a simple copy of a pointer data member.

131
00:09:04.410 --> 00:09:06.610
Again we're not copying what it's pointing to.

132
00:09:06.610 --> 00:09:08.250
We're not doing a deep copy.

133
00:09:08.490 --> 00:09:11.600
Then we know our source data.

134
00:09:11.600 --> 00:09:13.110
This step is really important.

135
00:09:13.140 --> 00:09:17.560
Otherwise we end up with the equivalent of a shallow copy and not to move.

136
00:09:17.820 --> 00:09:18.670
That's it.

137
00:09:18.690 --> 00:09:24.660
Many resources that describe the move constructor say that it steals or pilfered the data and then it

138
00:09:24.660 --> 00:09:26.280
nulls out the source pointer.

139
00:09:26.280 --> 00:09:27.810
And that's really a good way to think about it.

140
00:09:27.810 --> 00:09:29.320
That's exactly what it's doing.

141
00:09:30.400 --> 00:09:36.190
Now we've got our same program and when we execute it instead of the copy constructor is being called

142
00:09:36.190 --> 00:09:41.710
for those temporary objects to move constructors will be called because there are values and it's going

143
00:09:41.710 --> 00:09:44.470
to be much more efficient than doing deep copies.

144
00:09:44.470 --> 00:09:46.400
So let's took a look at the output now.

145
00:09:47.660 --> 00:09:50.860
As you can see there are no copy constructor calls at all.

146
00:09:50.930 --> 00:09:53.880
And the move constructor is indeed being called.

147
00:09:53.900 --> 00:09:59.240
You can also see when the destructors are called for no pointer that's destroying the object that we

148
00:09:59.240 --> 00:10:02.300
just moved and said it's data pointer to know.

149
00:10:02.300 --> 00:10:06.990
So there you go that's a basic introduction to R-value references in the move constructor.

150
00:10:07.010 --> 00:10:11.130
I know it's complicated you probably have to watch this video a few times but don't worry.

151
00:10:11.270 --> 00:10:14.730
Everybody goes through this it's a difficult topic to understand.

152
00:10:14.810 --> 00:10:19.940
We'll see move semantics again in the next section of the course when we overload the assignment operator

153
00:10:19.940 --> 00:10:22.520
to do both copy and move.

154
00:10:22.540 --> 00:10:26.530
There's so much more to move semantics in the move constructor that are better left for more advanced

155
00:10:26.530 --> 00:10:30.710
course but now you know the foundations and you'll be fine when you learn about them.

156
00:10:31.000 --> 00:10:35.630
So let's head over to the idea and run this program and see it in action OK.

157
00:10:35.630 --> 00:10:41.330
So I mean the idea again though in this section 13 workspace in the move constructor project and what

158
00:10:41.330 --> 00:10:44.390
I've got here is that class move that we use in the slides.

159
00:10:44.420 --> 00:10:46.610
It's kind of raw pointer to an integer.

160
00:10:46.910 --> 00:10:53.090
It's got get set methods and your typical constructor a copy constructor destructor.

161
00:10:53.100 --> 00:10:57.560
Now you'll notice that I've got a move constructor here but I've commented it out because I'm going

162
00:10:57.560 --> 00:11:01.300
to run this first with only the copy constructor so you can see what's going on.

163
00:11:01.400 --> 00:11:08.150
And you write here's the copy constructor on line 17 Here's my implemented copy constructor again I've

164
00:11:08.150 --> 00:11:11.620
commented out the move constructor will uncomment that at a moment.

165
00:11:11.720 --> 00:11:13.340
And here's my destructor.

166
00:11:13.340 --> 00:11:18.650
My district looks a little different because if my data is not equal to the null pointer then I'm just

167
00:11:18.650 --> 00:11:19.850
saying what I'm destroying.

168
00:11:19.850 --> 00:11:23.930
Otherwise I'm just saying that I'm destroying null pointer and that's important because it will let

169
00:11:23.930 --> 00:11:29.990
us know if we are destroying those objects that we just moved in or be really easy to see when it says

170
00:11:30.020 --> 00:11:31.040
no pointer.

171
00:11:31.040 --> 00:11:32.700
OK so here's my main.

172
00:11:32.750 --> 00:11:39.440
I'm creating a vector of move objects and I'm simply calling pushback and I'm supplying move in here.

173
00:11:39.440 --> 00:11:43.880
Now you'll notice there's no variable name there right so that's going to create a temporary object

174
00:11:44.570 --> 00:11:47.920
and a temporary object is an r value.

175
00:11:47.930 --> 00:11:52.670
So in this case it's going to use the copy constructor once we put the move constructor in it's going

176
00:11:52.670 --> 00:11:53.620
to use that.

177
00:11:53.630 --> 00:11:57.210
So let's walk through this example and go see what's happening.

178
00:11:57.230 --> 00:11:58.780
So I'll start the debugger.

179
00:12:01.010 --> 00:12:04.350
And I move the window over here to the right and this is where we're at right here.

180
00:12:04.350 --> 00:12:10.590
So first thing we need to do is we need to construct this object we need to create that temporary object

181
00:12:10.590 --> 00:12:12.210
and we're going to use the constructor to do that.

182
00:12:12.210 --> 00:12:14.220
So we'll step through here.

183
00:12:14.280 --> 00:12:16.670
You can see the constructor being called here.

184
00:12:16.950 --> 00:12:22.220
It's going to allocate that object on the heap and store whatever we passed it into it.

185
00:12:22.440 --> 00:12:25.580
We're going to display constructor for 10.

186
00:12:25.790 --> 00:12:30.560
And now we're in the copy constructor because remember we just created this temporary right.

187
00:12:30.600 --> 00:12:33.360
So this temporary and needs to be copied into the vector.

188
00:12:33.510 --> 00:12:38.890
So we in the copy constructor we're here we're going to construct the copy.

189
00:12:39.060 --> 00:12:42.390
So we're going right back here we're delegating to the constructor.

190
00:12:42.390 --> 00:12:44.560
We're going to create another 10.

191
00:12:44.850 --> 00:12:48.780
And it says here we just deep copy that 10 which is exactly what we did.

192
00:12:48.780 --> 00:12:52.740
Now we're back here and we need to destroy that copy we made.

193
00:12:52.740 --> 00:12:59.520
So the destructor will be called right now you can see it data will be pointing to 10 and we're going

194
00:12:59.520 --> 00:13:02.940
to destroy that copy of 10.

195
00:13:03.050 --> 00:13:03.890
That's it.

196
00:13:03.890 --> 00:13:06.310
That's pretty much exactly what's happening.

197
00:13:06.320 --> 00:13:10.140
You can see that we're using copy constructors just like we've used all the time.

198
00:13:10.330 --> 00:13:15.660
Now the fact that this is an R-value that comes into play when we use the move constructor.

199
00:13:15.660 --> 00:13:22.710
Now I'm going to stop this and I'm going to uncomment out all of these here you can see what's happening

200
00:13:22.710 --> 00:13:24.810
it might be a little surprising.

201
00:13:24.810 --> 00:13:29.130
So what I've done is I've pushed back 10 20 all the way through 18.

202
00:13:29.120 --> 00:13:31.560
Remember these are all creating temporary objects.

203
00:13:31.680 --> 00:13:36.150
So there are going to be copying copy constructed so that the vector can push them back.

204
00:13:36.150 --> 00:13:41.160
Remember the vector makes copies of these guys so it's going to make a copy of the temp.

205
00:13:41.170 --> 00:13:45.420
That's that's one of the problems that's why it's so inefficient but it's even worse than that because

206
00:13:45.420 --> 00:13:50.240
if we run this without debugging this is build and run.

207
00:13:50.240 --> 00:13:52.420
Let's take a look at what we just got here.

208
00:13:52.430 --> 00:13:55.150
I'm going to scroll all the way to the top.

209
00:13:55.220 --> 00:14:00.080
I'm at the top now so you can see that I've created that 10 right and I've copied it up done a deep

210
00:14:00.080 --> 00:14:03.720
copy that I'm destroying it and doing the same thing for 20.

211
00:14:03.740 --> 00:14:08.990
So you could see all these deep copies but if you count them you've got one two three four five six

212
00:14:08.990 --> 00:14:10.920
seven eight nine down at 10

213
00:14:14.300 --> 00:14:16.990
about 15 deep copies.

214
00:14:17.510 --> 00:14:19.340
That's much more than you would expect.

215
00:14:19.340 --> 00:14:19.550
Right.

216
00:14:19.550 --> 00:14:22.380
When you look at the code I don't think you would expect that many.

217
00:14:22.460 --> 00:14:25.230
I mean there's only 8 pushbacks here.

218
00:14:25.420 --> 00:14:32.480
But what's going on is that the vector is actually growing behind the scenes and when the vector grows

219
00:14:32.480 --> 00:14:34.930
those objects need to be copied to the new storage.

220
00:14:34.940 --> 00:14:37.230
Remember the vector is using contiguous storage.

221
00:14:37.430 --> 00:14:41.030
So it's making copies of the objects behind the scenes as well.

222
00:14:41.030 --> 00:14:45.560
So you can see that a lot of times is a lot of copying going on behind the scenes that we're not aware

223
00:14:45.560 --> 00:14:45.950
of.

224
00:14:45.950 --> 00:14:49.130
So that's the version with the copy constructor.

225
00:14:49.130 --> 00:14:56.170
Now what we'll do is we'll uncomment out the move constructor and you can see what the move constructor

226
00:14:56.170 --> 00:14:58.060
is doing the same thing that we did on the slides.

227
00:14:58.220 --> 00:15:02.750
The move constructor simply copying the source data and knowing that the pointer really really straightforward

228
00:15:03.170 --> 00:15:07.990
and uncomment out the prototype here OK.

229
00:15:08.150 --> 00:15:11.060
Now what we'll do is we'll debug this again.

230
00:15:12.710 --> 00:15:16.430
And we'll walk through that very first once you can see what's happening.

231
00:15:17.410 --> 00:15:19.620
So I'm right here on line 55.

232
00:15:19.690 --> 00:15:21.600
I need to create that move object right.

233
00:15:21.610 --> 00:15:25.920
That's a regular constructor to create that that creates that temporary R-value.

234
00:15:26.110 --> 00:15:27.950
So let's walk through there.

235
00:15:28.080 --> 00:15:32.960
I'm going to create that 10 object that 10 move object.

236
00:15:32.960 --> 00:15:34.250
Now notice what happened.

237
00:15:34.250 --> 00:15:39.190
The move constructor got called that's the move constructor right there with the double ampersand.

238
00:15:39.450 --> 00:15:45.080
So we got called rather than the copy constructor why because this is an R-value temporary.

239
00:15:45.080 --> 00:15:49.610
Now what we're going to do is we're basically mis steal the data and not the pointer to the source object.

240
00:15:49.610 --> 00:15:51.920
Right so we're going to move it rather than copy it.

241
00:15:51.950 --> 00:15:57.830
So we're here and we're sourcing winnowing out the source data and you can see the move constructor

242
00:15:57.830 --> 00:15:58.930
got called.

243
00:15:58.940 --> 00:16:01.630
Now look what happens when I go to delete that object.

244
00:16:01.630 --> 00:16:08.040
Right the one that we just moved the source were here and the destructor just said we would expect.

245
00:16:08.120 --> 00:16:10.640
But if you look at the object we're destroying.

246
00:16:10.760 --> 00:16:14.400
Notice it's unknow the data isn't all that's on we just no doubt.

247
00:16:14.450 --> 00:16:15.000
Right.

248
00:16:15.020 --> 00:16:22.790
So in this case I'm simply saying destructor freen data for null pointer.

249
00:16:22.790 --> 00:16:25.490
So that's really obvious which one is being destroyed.

250
00:16:25.640 --> 00:16:29.560
And then at this point I'm back here.

251
00:16:29.580 --> 00:16:31.730
OK so you can hopefully see the difference here.

252
00:16:31.740 --> 00:16:33.180
How much more efficient this is.

253
00:16:33.210 --> 00:16:38.230
And I think you'll really see the difference in efficiency when we just run it without the debugger.

254
00:16:38.250 --> 00:16:42.900
So let me just run that without the debugger and you can see here I get I'll scroll all the way to the

255
00:16:42.900 --> 00:16:43.590
top.

256
00:16:43.860 --> 00:16:48.510
You can see that as you scroll down here there is not one single copy constructor being called so we're

257
00:16:48.510 --> 00:16:50.030
doing no DB copies.

258
00:16:50.070 --> 00:16:54.460
We're only moving resources using the move constructor.

259
00:16:54.490 --> 00:16:56.170
OK so there you go.

260
00:16:56.190 --> 00:17:00.240
That's a introduction to move constructors and move semantics.

261
00:17:00.480 --> 00:17:04.170
And I think this is a pretty good example that you can walk through and understand what's going on.
