1
00:00:05,460 --> 00:00:07,740
Hello everyone welcome back.

2
00:00:07,740 --> 00:00:13,020
In this video we'll go over the challenge solution to this is the solution for the overloaded operators

3
00:00:13,020 --> 00:00:14,630
using nonmember functions.

4
00:00:14,760 --> 00:00:19,820
So I mean the section 14 workspace and the challenge Dasch solution to project.

5
00:00:20,160 --> 00:00:26,760
And you can see my header file now from the private modifier down it's exactly the same thing that's

6
00:00:26,760 --> 00:00:31,890
changed is that I've declared prototypes for my overloaded operator functions and they are all friend

7
00:00:31,890 --> 00:00:32,860
functions.

8
00:00:32,910 --> 00:00:34,140
Now we don't have to do that.

9
00:00:34,140 --> 00:00:38,940
We can certainly not have front functions and work through getters and setters and so forth but but

10
00:00:38,940 --> 00:00:43,320
for the purposes of this video I'm making everything of friends who have got access to everything that's

11
00:00:43,320 --> 00:00:47,630
private in this class which is really just that string pointer right here.

12
00:00:47,850 --> 00:00:53,040
Now as you can see when we have something like operator minus in this case we're overloading the Yairi

13
00:00:53,040 --> 00:00:53,620
operator.

14
00:00:53,690 --> 00:00:59,280
There is exactly one item in the parameter list and when we have something that's binary We've got two

15
00:00:59,280 --> 00:01:00,850
parameters and parameter list.

16
00:01:00,870 --> 00:01:04,710
So it's a little bit different from using member methods and that's about it.

17
00:01:04,710 --> 00:01:09,770
Now what we do is we basically have to implement these functions and you'll see it's very very straightforward.

18
00:01:09,780 --> 00:01:11,930
Same idea as with the member method.

19
00:01:11,930 --> 00:01:17,890
So let's go to the implementation file here and we'll start with the equality operator.

20
00:01:17,910 --> 00:01:22,570
Now we don't have remembered in all of these cases we no longer have a this pointer.

21
00:01:22,740 --> 00:01:28,620
There's no object dot operator method because there are non member functions so we don't have that this

22
00:01:28,620 --> 00:01:30,980
pointer but we do have another object.

23
00:01:31,020 --> 00:01:35,490
And in this case we have left hand side and right hand side and all we want to do is compare the left

24
00:01:35,490 --> 00:01:40,470
hand side string with the right hand side string and you can see that we're doing that right here in

25
00:01:40,470 --> 00:01:41,790
this string compare function.

26
00:01:41,940 --> 00:01:45,080
We're comparing the left hand side straight to the right hand side straight.

27
00:01:45,240 --> 00:01:48,150
And if we get back to zero do the same and that's what we're returning.

28
00:01:48,150 --> 00:01:55,240
So we're turning to fault's here same exact idea does not equal operator is exactly the same thing except

29
00:01:55,380 --> 00:02:00,480
negating the result right here with the bang for the less than and greater then overloaded operators

30
00:02:00,480 --> 00:02:06,180
you can see that the code is almost exactly like it was in the member method version except that I don't

31
00:02:06,180 --> 00:02:10,690
have this on the left side I've got an L.A. chess or a left hand side object.

32
00:02:10,960 --> 00:02:14,620
OK so let's take a look at make lower case in this case.

33
00:02:14,820 --> 00:02:18,280
In this case this is a urinary function so I've just got one argument right here.

34
00:02:18,480 --> 00:02:24,390
And what I'm doing is something I did before I create an area in memory to copy that string into what

35
00:02:24,390 --> 00:02:26,070
I'm going to do is make it lowercase.

36
00:02:26,190 --> 00:02:31,830
And that's what I'm going to do here I've allocated enough space for that object string's length plus

37
00:02:31,830 --> 00:02:32,610
one.

38
00:02:32,850 --> 00:02:38,780
Then I copy that object string character my character into buff and then I simply loop through buff

39
00:02:38,780 --> 00:02:42,040
and make each character is lowercase equivalent.

40
00:02:42,360 --> 00:02:46,680
When I'm done with that I construct the object that I'm going to return right here in a constructor

41
00:02:46,680 --> 00:02:48,040
based on buff.

42
00:02:48,360 --> 00:02:48,880
Return it.

43
00:02:48,930 --> 00:02:53,160
And don't forget to delete the buffer as we always do so we don't leak memory.

44
00:02:53,160 --> 00:02:57,800
The concatenation operator same idea I've got the left hand side and the right hand side.

45
00:02:57,840 --> 00:03:01,260
So obviously you're going to have left hand side plus right hand side.

46
00:03:01,320 --> 00:03:03,940
So we need to allocate another character buffer here.

47
00:03:04,080 --> 00:03:07,560
That's the length of both those strings added together plus one.

48
00:03:07,590 --> 00:03:09,510
So you can see here we have left hand string.

49
00:03:09,600 --> 00:03:16,030
Here we have Right-Hand string we copy the left hand string over and then we concatenate the right hand

50
00:03:16,030 --> 00:03:17,490
string onto that.

51
00:03:17,800 --> 00:03:22,710
We create the new object here based on that new string that's concatenated now.

52
00:03:22,960 --> 00:03:23,710
And we return it.

53
00:03:23,710 --> 00:03:26,790
And of course we delete the buffer as well.

54
00:03:26,860 --> 00:03:28,150
That's it really straight forward.

55
00:03:28,150 --> 00:03:33,210
Now they get really really simple to implement because we've got to R plus equal right or concatenate

56
00:03:33,210 --> 00:03:39,520
in a sign where we can implement that based on our concatenation because Plus equal simply means left

57
00:03:39,520 --> 00:03:42,410
hand side equals left hand side plus right hand side.

58
00:03:42,520 --> 00:03:46,390
So we can express that directly which leads to very very readable code here.

59
00:03:47,770 --> 00:03:51,180
The repeat operator or the star operator overloading.

60
00:03:51,250 --> 00:03:55,780
Same idea I remember repeating something just means adding it over and over so will take advantage that

61
00:03:55,780 --> 00:04:01,450
we've already overloaded that concatenation operator right here and 9:44 we're using it right there.

62
00:04:01,450 --> 00:04:07,630
So given and we're just simply going a loop that many times and say temp equals 10 plus left hand side

63
00:04:07,960 --> 00:04:12,670
do it again and again and again and we're just basically tacking on that string to itself over and over

64
00:04:12,670 --> 00:04:19,270
and over when we're done we return temp our star equal operator or repeat and assign operator works

65
00:04:19,270 --> 00:04:24,910
the same in this case it's a binary operator it expects an object and then the star and then an integer

66
00:04:24,910 --> 00:04:26,700
is how many times you're going to repeat it.

67
00:04:26,740 --> 00:04:31,930
So we'll do the same thing or take advantage of the fact that we've already overloaded the repeat operator

68
00:04:31,930 --> 00:04:37,300
or the store operator in this case will simply say left hand side equals the left hand side star and

69
00:04:37,700 --> 00:04:38,760
that we'll call this.

70
00:04:38,800 --> 00:04:44,920
It will take care of it and then we return left hand side so we can keep assigning and the last to the

71
00:04:44,920 --> 00:04:50,390
left or the pre-increment and post-increment operators which just make the strings uppercase.

72
00:04:50,410 --> 00:04:55,800
So the semantics for the increment are simply just increment that string is really straightforward.

73
00:04:55,990 --> 00:04:58,250
The stream belongs to RBJ right.

74
00:04:58,300 --> 00:05:04,720
This is a unitary operator will only have one object here in RBJ has an s tr pointer that points to

75
00:05:04,720 --> 00:05:06,250
a character or a rank on the heap.

76
00:05:06,250 --> 00:05:12,190
So what we're doing is just looping through that character array one item at a time one character at

77
00:05:12,190 --> 00:05:17,630
a time and we're setting the item of that object string to the uppercase equivalent of it.

78
00:05:17,980 --> 00:05:20,660
And then we just simply return the object when we're done.

79
00:05:20,680 --> 00:05:27,010
So you can see we're actually modifying RBJ here which is exactly what you would expect with a pre-increment.

80
00:05:27,010 --> 00:05:29,640
So the post-increment is very similar.

81
00:05:29,650 --> 00:05:33,410
We need to keep a copy of the original object so we're doing that right here.

82
00:05:33,430 --> 00:05:39,070
We're creating a copy temp based on an object which is the one that's being incremented then I'm doing

83
00:05:39,070 --> 00:05:43,960
a pre-increment of object which takes care of making all the characters uppercase and then returning

84
00:05:43,960 --> 00:05:45,220
the old object.

85
00:05:45,220 --> 00:05:50,760
So you can see that this line right here actually modifies the current object and this line right here

86
00:05:50,800 --> 00:05:56,740
returns a copy of the original object which is exactly what the semantics are of post-increment.

87
00:05:56,830 --> 00:06:02,580
I wrote a comment here as I mentioned before make sure you call pre-increment and not post-increment

88
00:06:02,590 --> 00:06:07,330
if you call post-increment this method here will be called over and over recursively and you'll never

89
00:06:07,330 --> 00:06:09,120
be able to break out of it.

90
00:06:09,190 --> 00:06:09,900
So that's it.

91
00:06:09,910 --> 00:06:13,510
If we run this we should have exactly the same output as we had before.

92
00:06:13,510 --> 00:06:14,280
Let's try it.

93
00:06:16,440 --> 00:06:23,610
A string to repeat and we'll do the same string I enter before dash three zeros and a dash and I believe

94
00:06:23,610 --> 00:06:24,150
I said five.

95
00:06:24,150 --> 00:06:26,680
Last time I'll do that again.

96
00:06:26,880 --> 00:06:27,720
And there we go.

97
00:06:27,720 --> 00:06:34,410
We've got our 5 000 strain's we've got 60 of these now and the rest of the code is exactly the same

98
00:06:34,650 --> 00:06:36,160
as it was.

99
00:06:36,240 --> 00:06:36,600
All right.

100
00:06:36,610 --> 00:06:41,240
So congratulations I hope you did well on this challenge.

101
00:06:41,340 --> 00:06:45,400
You can say now that you're no longer C++ beginner programmers that's for sure.

102
00:06:45,540 --> 00:06:50,800
Yeah you've learned a lot about the way C++ works behind the scenes operator overloading the constructors.

103
00:06:50,790 --> 00:06:53,340
The move assignments the regular copy assignments.

104
00:06:53,400 --> 00:06:54,450
So you've learned a lot.

105
00:06:54,540 --> 00:06:59,460
The next step is to learn about inheritance and polymorphic functions and that's where we're going to

106
00:06:59,460 --> 00:07:00,290
go.

107
00:07:00,480 --> 00:07:05,480
And I should mention one last thing is when you look at these test cases that I created these aren't

108
00:07:05,490 --> 00:07:10,770
really test cases they're just little pieces of code that exercise some of those methods that we wrote

109
00:07:10,770 --> 00:07:12,290
and functions that we wrote.

110
00:07:12,420 --> 00:07:17,070
When you do testing you really want to do proper testing using unit testing using some frameworks such

111
00:07:17,070 --> 00:07:19,980
as a unit test plus plus or something like that.

112
00:07:19,980 --> 00:07:21,470
So keep that in mind.

113
00:07:21,600 --> 00:07:26,910
We're doing this just to keep it simple and not have to learn other frameworks in order to learn this

114
00:07:26,910 --> 00:07:27,610
framework.

115
00:07:27,810 --> 00:07:29,620
So I'll see you in the inheritance section.
