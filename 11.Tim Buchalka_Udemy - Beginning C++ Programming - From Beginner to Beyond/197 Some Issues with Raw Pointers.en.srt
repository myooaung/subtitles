1
00:00:05,790 --> 00:00:11,820
We've already seen during this course that raw pointers are extremely powerful and C++.

2
00:00:12,270 --> 00:00:17,880
They allow us to have absolute flexibility with memory management with this flexibility however comes

3
00:00:17,880 --> 00:00:19,200
complexity.

4
00:00:19,200 --> 00:00:24,840
We must explicitly allocate and deallocate storage for HEAP dynamic variables as well as manage their

5
00:00:24,840 --> 00:00:25,840
lifetimes.

6
00:00:26,190 --> 00:00:28,330
And that's where we often see problems.

7
00:00:28,350 --> 00:00:34,700
In fact most defects in programs written in programming languages that provide raw pointers are pointers

8
00:00:34,710 --> 00:00:39,290
related defects we've already discussed some of these errors in this course.

9
00:00:39,300 --> 00:00:44,000
Errors such as uninitialized or wild pointers that could be pointing anywhere in memory.

10
00:00:44,070 --> 00:00:48,300
And if you store data to where they're pointing you could have a potentially catastrophic result.

11
00:00:48,630 --> 00:00:53,260
Another error is when we don't deallocate the storage that we previously allocated on the heap.

12
00:00:53,310 --> 00:00:55,040
In this case will leak memory.

13
00:00:55,080 --> 00:00:59,970
We've also seen dangling pointers that's where one pointer is pointing to storage that it thinks is

14
00:00:59,970 --> 00:01:05,910
valid but in fact has already been deallocated using this invalid memory can lead to all sorts of problems

15
00:01:05,910 --> 00:01:09,250
that are sometimes very very difficult to find and fix.

16
00:01:09,270 --> 00:01:14,160
And finally even if we do everything correctly our program could throw an exception and the code that

17
00:01:14,160 --> 00:01:18,490
releases are allocated memory never execute and we leak memory anyway.

18
00:01:18,510 --> 00:01:22,820
We'll talk about exceptions and exception handling in an upcoming section of the course.

19
00:01:22,920 --> 00:01:24,840
That's where smart pointers come in.

20
00:01:24,840 --> 00:01:27,750
Smart pointers can help us prevent these types of errors.

21
00:01:28,080 --> 00:01:32,610
They can help us be more clear about who owns the pointer and when a pointer should be deleted to free

22
00:01:32,610 --> 00:01:38,990
up allocated memory and the good news is that they're pretty intuitive and easy to use in the next video.

23
00:01:39,000 --> 00:01:43,650
We'll see what a smart pointer is and the types of smart pointers provided by C++.
