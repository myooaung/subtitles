1
00:00:05,570 --> 00:00:11,680
In this video we'll look at how we can use both inheritance and composition to reuse existing code and

2
00:00:11,680 --> 00:00:13,270
our projects.

3
00:00:13,540 --> 00:00:18,760
We've already seen what public inheritance is and how it can help us create class hierarchies that provide

4
00:00:19,030 --> 00:00:22,090
general and specialized functionality.

5
00:00:22,090 --> 00:00:28,060
Public inheritance creates an is a relationship between the derived and base classes and with inheritance

6
00:00:28,060 --> 00:00:34,390
we automatically inherit all of our base classes attributes and operations and we can see examples like

7
00:00:34,720 --> 00:00:37,930
an employee is a person a checking account is an account.

8
00:00:37,930 --> 00:00:40,030
A circle is a shape.

9
00:00:40,030 --> 00:00:46,180
However sometimes we want to reuse existing classes but the relationship really doesn't apply.

10
00:00:46,180 --> 00:00:50,050
For example suppose that all persons have an account.

11
00:00:50,050 --> 00:00:54,080
I can't really say that a person is an account or an account is a person.

12
00:00:54,190 --> 00:00:56,260
Since that doesn't make sense.

13
00:00:56,260 --> 00:01:00,370
Instead we can use composition to model this relationship.

14
00:01:00,370 --> 00:01:04,260
Composition creates a has a relationship between classes.

15
00:01:04,300 --> 00:01:07,360
For example a person has an account.

16
00:01:07,360 --> 00:01:09,720
A player has a special attack.

17
00:01:09,820 --> 00:01:12,080
A circle has a location.

18
00:01:12,130 --> 00:01:16,690
You get the idea using a combination of inheritance and composition.

19
00:01:16,690 --> 00:01:21,730
We can express complex relationships between classes and leverage code reuse.

20
00:01:21,880 --> 00:01:28,520
But see an example in this example we have the person hierarchy we saw earlier.

21
00:01:28,830 --> 00:01:34,320
Note the inheritance relationships are modeled with the triangle pointing to the base class of the relationship.

22
00:01:34,930 --> 00:01:39,580
As we mentioned in the last slide it wouldn't make sense to introduce another inheritance relationship

23
00:01:39,610 --> 00:01:44,290
between person and account since it is a relationship just doesn't apply.

24
00:01:44,350 --> 00:01:46,540
So we use composition instead.

25
00:01:46,540 --> 00:01:50,120
Notice the association between person and account.

26
00:01:50,620 --> 00:01:52,290
It's modeled as a solid line.

27
00:01:52,300 --> 00:01:55,060
No inheritance triangled this time.

28
00:01:55,060 --> 00:02:00,910
UML provides several different types of notations to model associated classes that don't have an inheritance

29
00:02:00,910 --> 00:02:02,200
relationship.

30
00:02:02,230 --> 00:02:05,680
These are aggregation Association and composition.

31
00:02:05,680 --> 00:02:10,570
You can learn more about these in an object oriented design course but will use the term composition

32
00:02:10,570 --> 00:02:17,200
to simply mean a has a relationship and we won't be concerned about whether the account object can logically

33
00:02:17,200 --> 00:02:21,100
exist without being associated with the person object.

34
00:02:21,160 --> 00:02:24,380
So what we're describing here is that a person has an account.

35
00:02:24,400 --> 00:02:26,090
That's exactly what we want.

36
00:02:26,440 --> 00:02:28,640
So does a student also have an account.

37
00:02:28,990 --> 00:02:31,780
Yes because a student is a person.

38
00:02:31,780 --> 00:02:33,260
What about a faculty member.

39
00:02:33,520 --> 00:02:36,340
Yes because a faculty member is a person.

40
00:02:36,340 --> 00:02:41,830
Notice that we create the association at the most general class in the hierarchy where it applies.

41
00:02:41,950 --> 00:02:48,370
Since it will also apply to its derived classes we've actually been using composition all along when

42
00:02:48,370 --> 00:02:51,490
we model class data members we're using composition.

43
00:02:51,490 --> 00:02:56,260
Many times the instance variables are primitive types so we don't include them in class diagrams.

44
00:02:56,290 --> 00:02:58,660
But the concept is the same.

45
00:02:58,660 --> 00:03:02,080
So when do you choose inheritance over composition.

46
00:03:02,080 --> 00:03:06,400
Many times it's easy to decide if the is a relationship doesn't make sense.

47
00:03:06,400 --> 00:03:08,360
Then don't use public inheritance.

48
00:03:08,680 --> 00:03:14,440
Other times it's not so clear a rule of thumb when using inheritance is to step back look at your design

49
00:03:14,800 --> 00:03:17,670
and be sure that the inheritance is appropriate.

50
00:03:17,830 --> 00:03:23,590
If you can model the relationship with composition then you should consider doing that first since inheritance

51
00:03:23,650 --> 00:03:25,970
adds more complexity to your design.

52
00:03:26,020 --> 00:03:31,450
In this case an inheritance relationship between student and account simply doesn't make sense.

53
00:03:31,450 --> 00:03:32,680
So we use composition

54
00:03:35,230 --> 00:03:39,040
Here's how the class person might be declared using composition.

55
00:03:39,040 --> 00:03:42,560
Notice that it's pretty much what we've been doing so far in this course.

56
00:03:42,580 --> 00:03:48,520
Composition is a common design pattern for reuse and you'll see it used much more frequently than inheritance

57
00:03:48,880 --> 00:03:54,340
but we can use both inheritance and composition together to create powerful frameworks that allow us

58
00:03:54,340 --> 00:03:56,130
to reuse existing code.

59
00:03:56,540 --> 00:04:01,490
Ok so in the next video we'll see what the syntax of inheritance looks like in C++.
