WEBVTT
1
00:00:05.510 --> 00:00:10.240
In this video we'll learn about C++ expressions and statements.

2
00:00:10.250 --> 00:00:17.270
Let's start with expressions expressions of the most basic building blocks in programming expressions

3
00:00:17.270 --> 00:00:24.830
are defined as follows in the C++ standard a sequence of operators and operands that specifies a computation.

4
00:00:24.860 --> 00:00:29.690
We'll see some examples shortly but for now you can think of an expression as a sequence of operands

5
00:00:29.690 --> 00:00:31.920
and operators that compute a value.

6
00:00:31.970 --> 00:00:37.840
That's a pretty simplistic view but it will serve us well until we learn more advanced C++ features.

7
00:00:37.850 --> 00:00:40.790
Let's see some examples C++ expressions.

8
00:00:41.150 --> 00:00:43.070
Let's start with the literal 34.

9
00:00:43.220 --> 00:00:48.740
That's an expression whose value is simply 3:34 variables such as favorite number in this example are

10
00:00:48.740 --> 00:00:53.270
also expressions since their value is the value of the variable.

11
00:00:53.270 --> 00:01:00.380
We can also have mathematical expressions such as 1.5 plus 2.8 which will add those two numbers and

12
00:01:00.380 --> 00:01:03.160
2 times 5 which will multiply 2 and 5.

13
00:01:03.170 --> 00:01:08.690
There are many many more examples of expressions since there are many operators in C++ and we can combine

14
00:01:08.690 --> 00:01:10.690
them to make any expression we wish.

15
00:01:11.180 --> 00:01:16.640
If we wanted to test to see if a was greater than B where A and B are variables we can use the greater

16
00:01:16.640 --> 00:01:18.960
than sign between the and the B.

17
00:01:18.980 --> 00:01:22.230
This evaluates to a boolean a true false value.

18
00:01:22.670 --> 00:01:24.150
Notice the last example.

19
00:01:24.170 --> 00:01:26.090
This is an assignment expression.

20
00:01:26.150 --> 00:01:28.190
We are assigning be to a.

21
00:01:28.370 --> 00:01:32.730
This is also an expression because the value of this expression is what we just assign.

22
00:01:32.750 --> 00:01:37.580
We'll talk more about this in a few videos when we talk about assignment statements in detail.

23
00:01:37.580 --> 00:01:40.510
Now let's see what makes a statement different from an expression.

24
00:01:40.670 --> 00:01:45.020
A statement is a complete line of code that performs some action.

25
00:01:45.020 --> 00:01:47.810
Statements are usually terminated with a semi-colon.

26
00:01:47.810 --> 00:01:53.450
When you first learn C++ it's a very common error to forget to terminate statements with semi-colons

27
00:01:53.960 --> 00:01:57.560
statements usually contain expressions as you would expect.

28
00:01:57.590 --> 00:02:00.260
C++ has many types of statements.

29
00:02:00.320 --> 00:02:05.390
It has expressions statements the null statement compound statements and more will discuss specific

30
00:02:05.390 --> 00:02:08.230
types of statements in the next several sections of the course.

31
00:02:08.420 --> 00:02:11.190
Let's see some examples see possible statements.

32
00:02:11.300 --> 00:02:15.440
The first statement is a declaration statement which we've already seen in this course when we declared

33
00:02:15.440 --> 00:02:16.310
variables.

34
00:02:16.520 --> 00:02:20.160
In this example we declare x to be of type integer.

35
00:02:20.180 --> 00:02:27.080
The second is a simple assignment statement where we assign the literal expression 12 to favorite number.

36
00:02:27.080 --> 00:02:29.630
The third example is an expression statement.

37
00:02:29.630 --> 00:02:32.860
Note that it's simply an expression with a semi-colon at the end.

38
00:02:33.230 --> 00:02:37.900
It's a pretty useless statement though since we got two numbers but don't do anything with the sum.

39
00:02:37.910 --> 00:02:39.080
The fourth example is.

40
00:02:39.110 --> 00:02:42.230
X equals 2 times 5 is an assignment statement.

41
00:02:42.230 --> 00:02:45.620
First we multiply 2 and 5 and store the product in X..

42
00:02:45.620 --> 00:02:48.920
Notice how expressions are used to make up the statement.

43
00:02:48.950 --> 00:02:54.140
The next example is an if statement if statements give you lots of power to control the flow of your

44
00:02:54.140 --> 00:02:55.050
program.

45
00:02:55.070 --> 00:03:00.710
We'll discuss if statements in detail but you can see that we're comparing a and b and if a is greater

46
00:03:00.710 --> 00:03:04.370
than B then we execute the statement that displays to the console.

47
00:03:04.370 --> 00:03:09.170
So here you can see an example of a statement that contains an other statement within it and is also

48
00:03:09.170 --> 00:03:10.740
made up of expressions.

49
00:03:10.760 --> 00:03:12.980
The final statement is simply a semi-colon.

50
00:03:12.980 --> 00:03:16.000
This is the null statement and performs no actions.

51
00:03:16.280 --> 00:03:19.690
You don't often use the null statement but it can come in handy sometimes.
