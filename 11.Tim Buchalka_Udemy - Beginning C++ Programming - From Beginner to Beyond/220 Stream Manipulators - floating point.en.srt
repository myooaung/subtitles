1
00:00:05,520 --> 00:00:12,150
In this video we'll see some of the stream formatting options available for floating point numbers formatting

2
00:00:12,150 --> 00:00:18,420
floating point numbers focuses mainly on the amount of precision used to display the number by default.

3
00:00:18,450 --> 00:00:25,800
The precision is set to six digits will cover the specifics of what that exactly means in this lecture.

4
00:00:25,870 --> 00:00:30,850
We can also set the number of digits to display to the right side of the decimal point by default.

5
00:00:30,850 --> 00:00:33,890
There is no fixed set size.

6
00:00:33,910 --> 00:00:39,490
We can also choose to show trailing zeros up to a certain number and we can also decide if the floating

7
00:00:39,490 --> 00:00:47,020
point number four should be displayed as four or four point zero or 4.00 and so forth.

8
00:00:47,020 --> 00:00:52,480
But by default these trailing zeros are not displayed and then we have some of the same options that

9
00:00:52,480 --> 00:00:58,380
we had when we used integers by default a lowercase e is use when we're displaying floating point numbers

10
00:00:58,390 --> 00:01:04,420
using scientific notation and the plus sign is not displayed when we display positive floating point

11
00:01:04,420 --> 00:01:05,110
numbers.

12
00:01:06,220 --> 00:01:09,200
All of these manipulators persist once they're set.

13
00:01:09,520 --> 00:01:12,270
So first let's take a look at how precision works.

14
00:01:13,900 --> 00:01:20,780
By default the precision used to display floating point numbers is six digits and rounding always occurs.

15
00:01:21,070 --> 00:01:26,860
In this example we have the number one two three four point five six seven eight.

16
00:01:26,950 --> 00:01:33,430
If we display this number it's C plus plus we use 6 as the default precision and started the most significant

17
00:01:33,430 --> 00:01:37,850
digit which is the one and it will display six digits starting from there.

18
00:01:37,870 --> 00:01:39,370
Rounding at the end.

19
00:01:39,370 --> 00:01:43,850
In this case one two three four point five seven will be displayed.

20
00:01:44,970 --> 00:01:51,010
If C++ can't display the number in the given amount of significance the interval use scientific notation

21
00:01:51,070 --> 00:01:53,810
and we'll see that in a bit.

22
00:01:54,120 --> 00:01:55,500
Here's another example.

23
00:01:55,560 --> 00:01:56,980
We have a large number.

24
00:01:57,060 --> 00:02:02,610
One two three four five six seven eight nine point nine eight seven six five four three two one.

25
00:02:02,620 --> 00:02:06,110
I did it that way just so it's really easy to keep track of these digits.

26
00:02:06,390 --> 00:02:12,690
If we display this number C++ we'll try to do it with six significant digits but this won't work since

27
00:02:12,690 --> 00:02:15,250
it will display one two three four five six.

28
00:02:15,390 --> 00:02:17,340
And the number displayed wouldn't be accurate.

29
00:02:17,340 --> 00:02:23,250
So in this case the number we displayed using scientific notation and notice one point two three four

30
00:02:23,250 --> 00:02:26,330
five seven has got the six digits of precision.

31
00:02:26,460 --> 00:02:33,670
That's the default and notice that we're still using precision 6 but this time using scientific notation.

32
00:02:33,750 --> 00:02:38,340
Suppose we wanted to display the number using precision nine.

33
00:02:38,430 --> 00:02:43,130
We can use the set precision manipulator with the 9 as the argument to do just that.

34
00:02:43,230 --> 00:02:48,760
In this case the number will display as 1 2 3 4 5 6 7 9 D.

35
00:02:48,780 --> 00:02:51,110
Note the rounding at the end.

36
00:02:51,390 --> 00:02:55,020
Also notice how no trailing zeros are displayed in this example.

37
00:02:56,450 --> 00:03:02,020
So that's the way precision works when we're not fixing the number of digits to the right of the decimal.

38
00:03:02,270 --> 00:03:06,040
When we use the fixed manipulator precision is handled differently.

39
00:03:06,790 --> 00:03:10,860
Now we're looking at precision starting from the right side of the decimal point.

40
00:03:10,900 --> 00:03:16,690
In this case we still have a default precision of six but we're also using the fixed manipulator.

41
00:03:16,690 --> 00:03:23,140
This will use a precision of six starting with the digits after the decimal and all round is necessary.

42
00:03:23,140 --> 00:03:30,240
So in this case exactly six digits are displayed after the decimal point and zeros are added if necessary.

43
00:03:30,580 --> 00:03:36,320
As you can guess set precision two and fixed are commonly used to display currency amounts.

44
00:03:36,370 --> 00:03:41,400
We actually did this in a few of the course lessons in this example.

45
00:03:41,400 --> 00:03:45,870
We're still using that very large number but we're setting the precision to three.

46
00:03:45,990 --> 00:03:48,400
And also using the fixed manipulator.

47
00:03:48,660 --> 00:03:54,430
So now this will display exactly three digits after the decimal point and rounding will occur.

48
00:03:54,600 --> 00:03:59,600
So we've got a point nine eight eight after the decimal point.

49
00:03:59,690 --> 00:04:06,020
In this example we want to set precision to 3 and also use scientific notation.

50
00:04:06,020 --> 00:04:10,420
You can see the manipulators being use in the displays exactly as we expect.

51
00:04:10,660 --> 00:04:15,170
One point two three times ten to the eighth notice the precision is three.

52
00:04:15,170 --> 00:04:24,320
We see that with the 1.2 three we can display the E in the scientific notation format as a capital G

53
00:04:24,590 --> 00:04:27,060
by using the uppercase manipulator.

54
00:04:27,350 --> 00:04:31,590
Remember by default it's no upper case.

55
00:04:31,610 --> 00:04:35,490
Now let's see how the show positive manipulator works with floating point numbers.

56
00:04:35,540 --> 00:04:38,360
The behavior is the same as we saw with integers.

57
00:04:38,360 --> 00:04:43,850
If we use to show puzzlement if the later then we'll get a preceding plus sign on positive floating

58
00:04:43,850 --> 00:04:45,370
point numbers.

59
00:04:45,380 --> 00:04:52,940
Note that we can toggle back to not showing the plus sign with the no show pause manipulator with floating

60
00:04:52,940 --> 00:04:53,660
point numbers.

61
00:04:53,660 --> 00:04:56,510
We can also use the sharp point manipulator.

62
00:04:56,510 --> 00:05:00,790
This will display trailing zeros based on the level of precision used.

63
00:05:00,830 --> 00:05:06,380
For example if our number is twelve point thirty four and we display it using only the defaults then

64
00:05:06,410 --> 00:05:08,810
twelve point thirty four with display.

65
00:05:08,960 --> 00:05:13,840
We're using a precision of six but only four digits for display in this case.

66
00:05:14,030 --> 00:05:20,480
If we wanted to add trailing zeros up to precision we can use the show Point manipulator.

67
00:05:20,480 --> 00:05:24,830
Now you can see that two zeros are added to the number being displayed.

68
00:05:24,830 --> 00:05:30,110
Again you can use the no show point to toggle back to the default behavior.

69
00:05:30,110 --> 00:05:35,180
Finally if you want to reset the floating point format back to the general format you can do that in

70
00:05:35,180 --> 00:05:36,260
one of two ways.

71
00:05:36,470 --> 00:05:42,020
You can use the unset F. method or you can use the reset Iowas flag manipulator.

72
00:05:42,020 --> 00:05:43,240
There are a bunch of other flags.

73
00:05:43,250 --> 00:05:45,370
But at this point you know what you would need.

74
00:05:45,380 --> 00:05:50,000
So rather than list them all here I'll refer you to the C++ reference docs.

75
00:05:50,000 --> 00:05:54,240
Now let's head over to the IDC and we'll format some floating point values.

76
00:05:54,350 --> 00:06:00,170
Then in the next video we'll finish off formatting was setting field with justification and filling.

77
00:06:00,540 --> 00:06:07,670
OK so I'm backing the idea again and am and still in the section 19 workspace and I mean the manip underscore

78
00:06:07,670 --> 00:06:13,100
floating project and what we'll do here is we'll play around with some floating point numbers.

79
00:06:13,100 --> 00:06:16,700
Now let's take a look at the numbers that we'll be using for this example.

80
00:06:16,700 --> 00:06:21,290
We've got three numbers right here they're all doubles and you can see I've got one that's going from

81
00:06:21,290 --> 00:06:26,270
one up to nine and then from nine down to one after the decimal point that I just make it really easy

82
00:06:26,270 --> 00:06:29,830
for us to see which digits are being rounded.

83
00:06:29,840 --> 00:06:34,700
I've got another one that's a little smaller one two three four five six seven eight and I've got this

84
00:06:34,700 --> 00:06:37,430
last one right here one two three four point zero.

85
00:06:37,550 --> 00:06:38,200
OK.

86
00:06:38,210 --> 00:06:44,690
And what we'll do first is we'll just do normal displaying these guys out to the console with absolutely

87
00:06:45,020 --> 00:06:48,780
nothing fancy no manipulation of all just using pure defaults.

88
00:06:48,800 --> 00:06:54,460
And that's what's going on right here on lines 14 to 16 I'm displaying them one them to name three.

89
00:06:54,500 --> 00:06:58,830
Now remember by default we've got six digits of precision.

90
00:06:59,210 --> 00:07:01,510
We're not showing the positive sign.

91
00:07:01,550 --> 00:07:07,410
We're not showing trailing zeros and we're not showing uppercase letters in scientific notation.

92
00:07:07,520 --> 00:07:08,840
OK that's the default.

93
00:07:08,960 --> 00:07:11,000
So let's run this first.

94
00:07:11,000 --> 00:07:16,250
Now what do we expect here we expect number 1 to not be able to work right I mean if you think about

95
00:07:16,250 --> 00:07:19,590
this for a second here you can see that no one has.

96
00:07:19,610 --> 00:07:23,040
Let's assume we wanted to display six different figures right here.

97
00:07:23,890 --> 00:07:26,100
We would just play one two three four five six.

98
00:07:26,140 --> 00:07:28,540
And that would really give us problems right.

99
00:07:28,630 --> 00:07:31,120
Because that's not even close to being an accurate number.

100
00:07:31,120 --> 00:07:33,130
So C++ won't do that.

101
00:07:33,130 --> 00:07:38,510
What you will do is it'll display that number in scientific notation and it will still use 6 for precision.

102
00:07:38,510 --> 00:07:40,420
I'll show you how that works in a second.

103
00:07:40,420 --> 00:07:44,290
Now this guy can be right we've got there's four digits right here and then two.

104
00:07:44,320 --> 00:07:49,170
So we expect those six digits to display in those last two would be rounded.

105
00:07:49,300 --> 00:07:53,010
And this guy here remember by default we don't display trailing zeros.

106
00:07:53,020 --> 00:07:54,860
I just get to display one two three four.

107
00:07:55,030 --> 00:07:59,990
So let's run this and we'll verify that we got what we expected.

108
00:08:00,930 --> 00:08:01,480
OK.

109
00:08:01,510 --> 00:08:05,230
Let me move this window over here so we can see what's going on and we do that again.

110
00:08:05,230 --> 00:08:05,620
There we go.

111
00:08:05,620 --> 00:08:08,280
So in this case we're displaying them one right.

112
00:08:08,280 --> 00:08:12,970
And notice what happens one point two three four five seven you can see the rounding you can see all

113
00:08:12,970 --> 00:08:15,190
six digits being displayed here.

114
00:08:15,190 --> 00:08:20,950
But we're using scientific notation because there's no way that it can be properly displayed or accurately

115
00:08:20,950 --> 00:08:23,590
displayed I should say in six digits.

116
00:08:23,590 --> 00:08:25,690
This next one though number two right.

117
00:08:25,690 --> 00:08:28,900
Twelve thirty four point fifty seven that's exactly what we expect.

118
00:08:28,900 --> 00:08:32,060
There you see the six digits and then some three.

119
00:08:32,080 --> 00:08:37,990
One two three four it's ASPI there's no zero or zero zero unless we use a modifier which we use in a

120
00:08:37,990 --> 00:08:38,760
little bit.

121
00:08:38,770 --> 00:08:43,500
So that's the default and it's really important that you understand the default and how it begins.

122
00:08:43,510 --> 00:08:46,380
So that's using the default settings.

123
00:08:46,390 --> 00:08:50,850
Now let's try something let's we're going to set the precision to two.

124
00:08:50,890 --> 00:08:54,160
So what we're asking for is two significant digits.

125
00:08:54,160 --> 00:08:56,220
It can't do that with any of these.

126
00:08:56,250 --> 00:08:56,500
Right.

127
00:08:56,500 --> 00:08:59,760
One point to 12 you know where is it going to stop.

128
00:08:59,890 --> 00:09:05,160
So what it'll do is it'll display all three of them in scientific notation using a precision of two.

129
00:09:05,290 --> 00:09:06,540
So I'll show you how that looks.

130
00:09:07,740 --> 00:09:13,890
And you can see exactly what's going on 1.2 for all of them those are the two significant digits of

131
00:09:13,890 --> 00:09:16,630
precision right times 10 to the eighth.

132
00:09:16,630 --> 00:09:18,170
The third and so forth.

133
00:09:18,180 --> 00:09:23,180
So let's set a precision of five and we'll be able to do some of them with a precision of five others

134
00:09:23,190 --> 00:09:25,430
that was so uncomment this block out

135
00:09:28,490 --> 00:09:31,490
and let's execute that.

136
00:09:31,590 --> 00:09:33,520
And now you can see what's going on.

137
00:09:33,560 --> 00:09:37,920
Number one cannot be displayed in five significant digits here.

138
00:09:37,950 --> 00:09:43,680
So the precision is going to be five digits here but it's going to be a scientific notation.

139
00:09:43,680 --> 00:09:48,480
The other number appears scroll up so you can see it went to three four point five six seven.

140
00:09:48,540 --> 00:09:50,790
There are five significant figures here right.

141
00:09:50,790 --> 00:09:52,240
Your precision is five.

142
00:09:52,290 --> 00:09:57,240
So what it's doing is it's rounding that fifth one from which is point fifty six to six.

143
00:09:57,690 --> 00:10:00,180
And then again the last one is one two three four.

144
00:10:00,180 --> 00:10:02,070
We're not adding any zeros or anything.

145
00:10:02,070 --> 00:10:04,150
So that's the default kind of behavior.

146
00:10:04,150 --> 00:10:07,020
So that really gives you an idea of what's going on in this case.

147
00:10:07,020 --> 00:10:08,960
We're going to set precision to 9.

148
00:10:09,030 --> 00:10:10,560
Everything will fit here.

149
00:10:10,560 --> 00:10:13,960
So that's try that.

150
00:10:14,040 --> 00:10:16,930
And you can see what's happening with precision 9.

151
00:10:17,100 --> 00:10:21,120
I get one two three four five six seven instead of eighty nine I'm getting 90.

152
00:10:21,120 --> 00:10:26,400
It's rounding that this guy is displaying all of it because it can display all of it right.

153
00:10:26,430 --> 00:10:28,610
Twelve thirty four point five six seven eight.

154
00:10:28,770 --> 00:10:32,630
And the one two three four still displays the same way because we're not adding any zeroes.

155
00:10:32,760 --> 00:10:35,570
OK so now now you understand precision.

156
00:10:35,570 --> 00:10:38,970
Now let's talk about fixed and how it changes precision.

157
00:10:38,970 --> 00:10:43,810
So what we're doing here is we're setting precision to three.

158
00:10:43,920 --> 00:10:48,240
You can see that happening right here on line 40 and we're fixing the decimal point.

159
00:10:48,390 --> 00:10:51,920
So now the precision happens after the decimal point.

160
00:10:52,230 --> 00:10:52,660
OK.

161
00:10:52,770 --> 00:10:56,010
So let's run this and take a look at the output.

162
00:10:56,010 --> 00:10:58,080
OK so take a look at the output here.

163
00:10:58,620 --> 00:11:01,320
Again I'll scroll up so we can see these numbers up top.

164
00:11:01,680 --> 00:11:04,740
So now we're just playing one two three four five six seven eight nine.

165
00:11:04,810 --> 00:11:06,310
That would explain all of that.

166
00:11:06,630 --> 00:11:09,840
And the precision now applies after the decimal.

167
00:11:09,840 --> 00:11:15,960
So I noticed that all three of these guys are displaying three digits after the decimal because that's

168
00:11:15,960 --> 00:11:18,600
the precision and we're fixing that size.

169
00:11:18,600 --> 00:11:27,480
So it's going around in this case 9 8 7 6 Get it becomes 9 8 8 and 5 6 7 8 becomes 5 6 8.

170
00:11:27,510 --> 00:11:32,290
And in this case here you can see that it's displaying all the zeros on the end.

171
00:11:32,630 --> 00:11:33,040
OK.

172
00:11:33,270 --> 00:11:36,650
Because we set the fixed formatter.

173
00:11:36,810 --> 00:11:37,440
All right.

174
00:11:37,440 --> 00:11:38,780
So hopefully that makes sense.

175
00:11:38,820 --> 00:11:42,050
Let me stop that and we'll run a couple more.

176
00:11:42,150 --> 00:11:44,180
Let's take a look at this example.

177
00:11:44,640 --> 00:11:49,470
What we're doing here is we're setting the precision to three and we want to do a scientific notation.

178
00:11:49,620 --> 00:11:53,880
So this should be very similar to what happened before with the precision to win stuff wouldn't fit.

179
00:11:53,880 --> 00:11:57,030
So again precision is three and scientific notation.

180
00:11:57,030 --> 00:12:03,120
So what we get is right down here 1 point two three five.

181
00:12:03,120 --> 00:12:05,190
Notice the precision is three right.

182
00:12:05,310 --> 00:12:07,810
But what happened because it's fixed.

183
00:12:07,920 --> 00:12:13,530
I set fixed up here and fixed is persistence so it carries down even though I didn't say fixed right

184
00:12:13,530 --> 00:12:16,520
here it's fixed because I've set it up here.

185
00:12:16,560 --> 00:12:21,600
So this case I get the three decimals after the decimal point the three digits I should say after the

186
00:12:21,600 --> 00:12:28,290
decimal point and it's all in scientific notation and then couple of more examples.

187
00:12:28,290 --> 00:12:34,310
You notice that that E and the exponential notation in scientific notation was lower case.

188
00:12:34,500 --> 00:12:40,320
I can make it a capital E by simply using stood up or case here and this is run that to be sure that

189
00:12:40,320 --> 00:12:41,300
we get it.

190
00:12:41,880 --> 00:12:45,870
And there you go right down here at the bottom you can see one point two three and you can see the e

191
00:12:45,870 --> 00:12:51,050
is capitalized here right it was lowercase here in the previous example.

192
00:12:51,300 --> 00:12:58,440
In this case I'm using the show positive and what I'm doing is I'm just setting with precision three

193
00:12:58,470 --> 00:13:00,390
fixed and show positive.

194
00:13:00,510 --> 00:13:05,860
So this will show a positive plus sign in front of positive numbers.

195
00:13:06,000 --> 00:13:07,010
Let's run that.

196
00:13:07,200 --> 00:13:09,100
And then you can see down here at the bottom again.

197
00:13:09,120 --> 00:13:11,640
Move this up just a little so you can see it a little better.

198
00:13:11,640 --> 00:13:16,410
You can see the plus symbol being displayed in front of all these positive floating point numbers.

199
00:13:16,470 --> 00:13:20,420
If they were negative obviously the negative sign would show.

200
00:13:20,430 --> 00:13:28,080
Now we can set these guys back to the defaults either by doing an unset f calling that method and we

201
00:13:28,080 --> 00:13:31,780
can pass in scientific and fixed setting them back to the defaults.

202
00:13:31,820 --> 00:13:38,730
And what we're doing here is just a binary or or we could use to reset U.S. flags manipulator here and

203
00:13:38,730 --> 00:13:42,370
pass in Show position that will unset that.

204
00:13:42,570 --> 00:13:43,130
All right.

205
00:13:43,230 --> 00:13:46,470
So let me end this up here.

206
00:13:46,470 --> 00:13:51,750
Now notice what I'm doing here I'm setting precision to 10 and I'm telling it to show point.

207
00:13:51,900 --> 00:13:57,370
OK what this is going to do is going to add these trailing zeros up to 10 spaces.

208
00:13:57,600 --> 00:13:59,480
All right we're up to 10 precision.

209
00:13:59,520 --> 00:14:04,760
So let's run that and we can see number one number two and I'm three.

210
00:14:04,830 --> 00:14:05,360
There you go.

211
00:14:05,360 --> 00:14:09,510
You can see right here 1 2 3 4 5 6 7 8 9 0.

212
00:14:09,540 --> 00:14:10,680
It's round here.

213
00:14:10,890 --> 00:14:15,180
And then one two three four point five six seven eight we've got a couple of zeros on the end.

214
00:14:15,210 --> 00:14:19,080
But you notice all of them now are in precision 10 right.

215
00:14:19,080 --> 00:14:24,070
And in this case we have one two three four point and then six zeroes at the end.

216
00:14:24,150 --> 00:14:28,440
We'll set these guys back to the defaults and I'll show you how to do that right here.

217
00:14:28,920 --> 00:14:33,090
And then we'll run one more time when we should get that same behavior we got to the very beginning.

218
00:14:33,090 --> 00:14:37,310
So what I'm doing here is I'm setting this back to the general notation here.

219
00:14:37,410 --> 00:14:43,500
I'm setting the precision to six which was the default and I'm setting show position show positive and

220
00:14:43,710 --> 00:14:48,330
show point back to their defaults and then I'm just displaying them one them to number three at the

221
00:14:48,330 --> 00:14:48,650
end.

222
00:14:48,660 --> 00:14:51,630
And what we should get back is what we got at the beginning.

223
00:14:51,630 --> 00:14:53,250
So down at the bottom here you go.

224
00:14:53,250 --> 00:14:55,540
We get the scientific notation for this guy.

225
00:14:55,680 --> 00:14:58,500
We've got the six precision digits here.

226
00:14:58,590 --> 00:15:01,280
And we've got the 1 2 3 4 right here.

227
00:15:01,800 --> 00:15:02,160
OK.

228
00:15:02,160 --> 00:15:02,720
So that's it.

229
00:15:02,760 --> 00:15:07,470
That's a good example of these floating point formatters.

230
00:15:07,470 --> 00:15:11,610
They're pretty powerful they're pretty easy to use in the next really what we'll do is we'll learn about

231
00:15:11,610 --> 00:15:17,340
setting field widths and justifying things left or right and you can use those along with these to really

232
00:15:17,340 --> 00:15:20,910
format tables and get your format looking really nicely for up.
