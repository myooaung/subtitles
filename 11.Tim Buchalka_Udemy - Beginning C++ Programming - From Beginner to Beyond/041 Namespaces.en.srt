1
00:00:05,460 --> 00:00:13,260
This video we're briefly go over using C++ name spaces C++ name spaces can be a little confusing when

2
00:00:13,260 --> 00:00:18,870
you first see them as our C++ programs become more and more complex.

3
00:00:18,870 --> 00:00:25,440
Our programs become a combination of our own code the C++ standard libraries and their code and libraries

4
00:00:25,440 --> 00:00:27,680
from third party developers and their code.

5
00:00:27,900 --> 00:00:33,660
So as you can imagine sooner or later we're going to run into this situation where Company X named something

6
00:00:33,840 --> 00:00:40,770
the same as Company Y when we use that name in our program the C++ compiler doesn't know which one to

7
00:00:40,770 --> 00:00:41,370
use.

8
00:00:41,400 --> 00:00:44,430
So we have something called the naming conflict.

9
00:00:44,430 --> 00:00:50,050
For example suppose another library that we're using has defined a name called out.

10
00:00:50,370 --> 00:00:55,990
Well that's a big problem right because now C++ doesn't know which C out to use.

11
00:00:56,400 --> 00:01:04,110
C++ allows developers to use name spaces as containers to group their code entities into a namespace

12
00:01:04,110 --> 00:01:05,000
scope.

13
00:01:05,040 --> 00:01:11,120
That means that I could create a namespace called Frank and I could define C out within that namespace.

14
00:01:11,130 --> 00:01:17,400
Now if a programmer wanted to use my version of C out all they had to do is say Frank double colon C

15
00:01:17,480 --> 00:01:19,460
out that's it.

16
00:01:19,530 --> 00:01:23,830
If they wanted to use the one in the standard library they would just say standard double call and see

17
00:01:23,830 --> 00:01:24,040
out.

18
00:01:24,060 --> 00:01:25,590
It's as simple as that.

19
00:01:25,980 --> 00:01:30,680
Name spaces are used to reduce the possibility of naming conflicts.

20
00:01:30,900 --> 00:01:34,690
The double colon operator is called the scope resolution operator.

21
00:01:34,740 --> 00:01:37,640
It's used to resolve which name we want to use.

22
00:01:38,100 --> 00:01:45,240
However many programmers find it tedious to type as t d colon colon all the time when using C in C out

23
00:01:45,540 --> 00:01:47,280
and buy in and so forth.

24
00:01:47,280 --> 00:01:51,860
So C++ provides a few mechanisms to help in that regard.

25
00:01:52,810 --> 00:01:59,080
In this sample code you can see that we're explicitly telling the compiler to use see in C out and N

26
00:01:59,080 --> 00:02:05,290
line from the C++ standard namespace using as Tedi followed by the scope resolution operator.

27
00:02:05,550 --> 00:02:08,460
This is how we've written code to this point.

28
00:02:08,460 --> 00:02:13,450
Now let's take a look at another way we can do this without so much typing.

29
00:02:13,880 --> 00:02:20,450
In this case we can use the using namespace directive followed by the name of the namespace we wish

30
00:02:20,450 --> 00:02:21,550
to use.

31
00:02:21,710 --> 00:02:24,070
In this case the standard namespace.

32
00:02:24,190 --> 00:02:29,280
Notice that I no longer have to use as c d followed by the scope resolution operator.

33
00:02:29,360 --> 00:02:36,680
When I refer to C and C and line the compiler now knows which one to use based on the using namespace

34
00:02:36,680 --> 00:02:38,000
directive.

35
00:02:38,000 --> 00:02:42,620
This is pretty easy to use and it's the way I'll do it in this course from this point forward since

36
00:02:42,620 --> 00:02:46,940
it reduces code clutter and it's better from a teacher's perspective.

37
00:02:46,940 --> 00:02:52,520
However this may not be the best solution for large programs using namespace standard.

38
00:02:52,520 --> 00:02:58,130
Not only brings in C in C out and line it brings in a bunch of other names that are defined in that

39
00:02:58,130 --> 00:02:59,060
namespace.

40
00:02:59,480 --> 00:03:03,900
So the possibility exists that you may still have a naming conflict.

41
00:03:03,950 --> 00:03:07,700
C++ provides another variant of the using namespace directive.

42
00:03:07,790 --> 00:03:09,640
Let's take a look at that.

43
00:03:09,710 --> 00:03:15,440
In this case we have a qualified using namespace variant in which we tell the compiler exactly the names

44
00:03:15,530 --> 00:03:18,860
I want to use from a specific namespace.

45
00:03:18,860 --> 00:03:25,340
In this case you can see am using Threet using directives each qualified for a specific name in a specific

46
00:03:25,340 --> 00:03:26,540
namespace.

47
00:03:26,540 --> 00:03:31,610
The advantage of this approach is that we can still use C in C out and line in our code without the

48
00:03:31,610 --> 00:03:34,130
namespace in scope resolution operator.

49
00:03:34,340 --> 00:03:40,580
And we're not getting any other names from the C plus for standard namespace for the examples in this

50
00:03:40,580 --> 00:03:40,940
course.

51
00:03:40,940 --> 00:03:45,860
You can use the namespace standard directive from the previous slide with no problem but keep in mind

52
00:03:46,100 --> 00:03:49,360
that it may not be the best practice in larger programs.

53
00:03:49,430 --> 00:03:52,070
That wraps up namespace in the next video.

54
00:03:52,100 --> 00:03:55,680
We'll take a quick look at basic IO with C in and see out.
