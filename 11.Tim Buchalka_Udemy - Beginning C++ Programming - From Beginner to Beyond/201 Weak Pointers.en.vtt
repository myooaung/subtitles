WEBVTT
1
00:00:05.450 --> 00:00:11.770
This video we'll learn about the weak pointer the weak pointer provides the non owning or weak reference

2
00:00:11.770 --> 00:00:17.490
to a shared managed object like a shared pointer a weak pointer points to an object on the heap.

3
00:00:17.680 --> 00:00:24.270
But unlike a shared pointer it doesn't participate in the owning relationship weak pointers are always

4
00:00:24.270 --> 00:00:30.420
created from shared pointers and since weak pointers are not only references they do not affect the

5
00:00:30.420 --> 00:00:32.970
reference count for the managed object.

6
00:00:32.970 --> 00:00:36.490
So weak pointers don't affect the lifetime of the objects they're pointing to.

7
00:00:37.480 --> 00:00:39.760
There are a few use cases for the weak pointer.

8
00:00:39.940 --> 00:00:43.500
One is to prevent strong reference cycles between two objects.

9
00:00:43.540 --> 00:00:45.520
We'll see this visually in the next slide.

10
00:00:45.790 --> 00:00:50.890
Another use case is when we have a pointer that we use to temporarily reference another object something

11
00:00:50.890 --> 00:00:56.200
like an iterator pointer that traverses a list of nodes it really doesn't own them just visit's them

12
00:00:56.200 --> 00:00:57.280
temporarily.

13
00:00:57.280 --> 00:00:59.980
Let's see the problem with strong circular references.

14
00:01:01.110 --> 00:01:06.690
Sometimes when we design programs we may have two classes where each class refers to the other.

15
00:01:06.690 --> 00:01:09.650
This implies a one to one relationship between the classes.

16
00:01:09.720 --> 00:01:13.880
And this will be reflected in the class objects when we instantiate them.

17
00:01:13.980 --> 00:01:19.320
In this case we have two objects A and B which are instantiated from two different classes.

18
00:01:19.320 --> 00:01:24.040
Notice that A has a shared pointer to a B and B has a shared pointer today.

19
00:01:24.090 --> 00:01:26.370
Now we have a bit of a chicken and egg problem.

20
00:01:26.640 --> 00:01:30.960
When they go out of scope they will be destroyed from the stack but they're shared resources on the

21
00:01:30.960 --> 00:01:37.000
heap will not be destroyed and will leak memory keeps me alive and keeps alive.

22
00:01:37.020 --> 00:01:39.320
This is exactly where the weak pointer comes in.

23
00:01:39.450 --> 00:01:44.020
Let's see now we need to decide who owns who.

24
00:01:44.080 --> 00:01:46.140
Let's say that a owns B.

25
00:01:46.510 --> 00:01:51.280
Then we replace the shared pointer and B with a weak pointer and now everything works as expected and

26
00:01:51.280 --> 00:01:54.170
we don't need memory in the next video.

27
00:01:54.270 --> 00:01:58.620
We'll complete the section with a brief introduction to custom the leaders for smart pointers.

28
00:01:58.840 --> 00:02:02.260
But first let's head over to the idea and see this example in life code.

29
00:02:03.290 --> 00:02:04.670
Ok so I'm back in the idea.

30
00:02:04.670 --> 00:02:10.970
I mean the Section 17 workspace in the week pointer's project and what we'll do here is we'll do that

31
00:02:10.970 --> 00:02:15.350
Semb example that we did visually in the slides where I've got an A reference A B and A B reference

32
00:02:15.370 --> 00:02:19.270
CNA and we've got that strong circular reference that we can't break.

33
00:02:19.280 --> 00:02:21.690
So let's take a look at how we do this.

34
00:02:21.710 --> 00:02:27.100
First of all you can see that I've got a class A declared right here on line tend to 17.

35
00:02:27.380 --> 00:02:31.540
And the class A has a shared pointer to a B.

36
00:02:31.550 --> 00:02:35.780
Now since we haven't seen the B yet we need to put this forward declaration in here.

37
00:02:35.780 --> 00:02:40.580
I'm not sure if we've done that in class before or not but since the compiler needs to know about A

38
00:02:40.580 --> 00:02:43.120
B we're just simply saying hey you know what compiler.

39
00:02:43.130 --> 00:02:44.710
I've got a class B declared later.

40
00:02:44.720 --> 00:02:45.970
Just assume it's here.

41
00:02:45.980 --> 00:02:50.660
It's similar to a function prototype in a sense that just tells the compiler don't worry about it.

42
00:02:50.660 --> 00:02:51.850
You'll see this later.

43
00:02:51.860 --> 00:02:56.000
So in this case again the class A has a shared pointer to a B.

44
00:02:56.180 --> 00:02:58.960
And here's my set method that just sets that pointer.

45
00:02:59.240 --> 00:03:03.710
It's got a real simple constructor and destructor that just simply display you know when they're called

46
00:03:03.950 --> 00:03:05.910
so we can see them actually being called.

47
00:03:06.080 --> 00:03:11.450
And then my class B is defined down here and the class B has a shared pointer to an A.

48
00:03:11.470 --> 00:03:13.870
So there's that relationship between the two right.

49
00:03:13.940 --> 00:03:15.950
So an aone to B and B owns an age of that.

50
00:03:15.950 --> 00:03:17.760
That's the problem that we have.

51
00:03:17.930 --> 00:03:21.960
And here's my set method that sets that a pointer.

52
00:03:22.160 --> 00:03:23.600
And again my constructor.

53
00:03:23.600 --> 00:03:24.880
So really really simple.

54
00:03:24.890 --> 00:03:31.010
Let's take a look at the main and you can see the main here on line 31.

55
00:03:31.200 --> 00:03:40.560
I create that a shared pointer using make shared and 9:32 I create to be shared pointer using make shared.

56
00:03:40.950 --> 00:03:47.730
Then right here I'm going to say set the be part of a to b and set the A part of b to say that's establishing

57
00:03:47.730 --> 00:03:49.210
that circular reference.

58
00:03:49.230 --> 00:03:50.600
So what happens here is.

59
00:03:50.670 --> 00:03:54.170
Here's my a here's my b remember these are shared pointers.

60
00:03:54.360 --> 00:03:57.620
So we've basically got a pointer here and a pointer here.

61
00:03:57.630 --> 00:04:03.360
Remember it's a shared pointer so this is just an object and this guy's pointing to an object on the

62
00:04:03.360 --> 00:04:04.640
heap.

63
00:04:04.680 --> 00:04:12.020
This guy's pointing to a B object on the heap and what we just did here is we did this.

64
00:04:12.060 --> 00:04:14.940
He points to that one and this guy points to that.

65
00:04:15.330 --> 00:04:16.860
OK so you can see the problem.

66
00:04:16.870 --> 00:04:18.660
This guy has a reference count of one.

67
00:04:18.660 --> 00:04:19.860
Or use count of 1.

68
00:04:19.860 --> 00:04:21.420
This guy has a use count of 1.

69
00:04:21.600 --> 00:04:26.640
So what happens when a and b go out of scope while Ed goes out of scope and he tries to destroy this

70
00:04:26.640 --> 00:04:27.860
piece here right.

71
00:04:28.080 --> 00:04:32.280
But it notices that something else is referencing and so it's not zero.

72
00:04:32.430 --> 00:04:33.870
So it's not going to destroy it.

73
00:04:33.870 --> 00:04:35.100
Same thing with B.

74
00:04:35.130 --> 00:04:42.120
So what ends up happening is what actually gets destroyed is a and b that are on the on the stack right

75
00:04:42.120 --> 00:04:48.270
to shared pointers but not the area on the heap and there is your memory leak right so all this is going

76
00:04:48.270 --> 00:04:51.800
to leak and we've got no way to get to it.

77
00:04:52.020 --> 00:04:57.300
So that's the problem and the problem is because of this implied shared ownership.

78
00:04:57.300 --> 00:04:58.830
So the fix is really simple.

79
00:04:58.830 --> 00:05:00.670
The fix is that using a pointer.

80
00:05:00.750 --> 00:05:02.490
So we determine who owns what.

81
00:05:02.670 --> 00:05:07.170
Let's just assume that we're going to change this guy right here and actually let me run this you can

82
00:05:07.170 --> 00:05:15.020
actually see the leak build and run and there's the run you can see the constructor today I constructed

83
00:05:15.020 --> 00:05:16.290
a beep at the destructors.

84
00:05:16.290 --> 00:05:19.560
Never got called because we leaked the memory.

85
00:05:19.770 --> 00:05:25.110
That's what we want is we want a constructor of B's constructor that we want obviously destructors for

86
00:05:25.110 --> 00:05:26.420
both of them being called.

87
00:05:26.730 --> 00:05:27.940
OK so let's do that.

88
00:05:28.050 --> 00:05:30.580
So what we can do is you can see the comment right here.

89
00:05:30.600 --> 00:05:34.740
Make it weak to break that strong circular reference and that's exactly what we're going to do.

90
00:05:34.920 --> 00:05:35.840
We're going to come right here.

91
00:05:35.840 --> 00:05:41.730
We're going to make this shared pointer a weak pointer that won't affect the reference count.

92
00:05:41.730 --> 00:05:48.380
So now when we run this you can see a constructor that B constructor than the the destructors being

93
00:05:48.380 --> 00:05:49.100
called.

94
00:05:49.100 --> 00:05:55.580
Now we're no longer leaking memory so this is a real real common use case for the weak pointer and this

95
00:05:55.580 --> 00:05:57.900
kind of stuff happens more often than you would think.

96
00:05:58.040 --> 00:06:02.090
When you've got very complex data structures and graphs and you're traversing and doing all kinds of

97
00:06:02.090 --> 00:06:07.940
manipulation it's very possible you can end up with strong circular references like these and the weak

98
00:06:07.940 --> 00:06:08.960
pointers the solution.
