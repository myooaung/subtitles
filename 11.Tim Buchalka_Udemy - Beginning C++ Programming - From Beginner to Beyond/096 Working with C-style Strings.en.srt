1
00:00:05,790 --> 00:00:09,980
In this video we'll go over some examples of using C-style strings.

2
00:00:09,980 --> 00:00:13,350
First thing you'll notice is I'm including C string.

3
00:00:13,400 --> 00:00:16,540
I need to include that header file for the C-style string functions.

4
00:00:16,670 --> 00:00:18,840
And I'm also including CC type.

5
00:00:18,890 --> 00:00:22,410
That's because I'm going to use some of the character based functions in this example.

6
00:00:23,220 --> 00:00:28,950
Ok so I'm using namespace standard and I have declared for C-style string variables which are really

7
00:00:28,950 --> 00:00:32,680
just arrays of characters on lines 9 through 12.

8
00:00:32,700 --> 00:00:38,130
First name last name full name and temp and I've made them to be pretty big 20 20 50 and 50 that should

9
00:00:38,670 --> 00:00:41,420
allow us to put stuff in there without exceeding the bounds.

10
00:00:41,440 --> 00:00:44,330
OK so the first thing we'll do is notice here.

11
00:00:44,340 --> 00:00:46,190
First name is uninitialized.

12
00:00:46,220 --> 00:00:48,290
There are actually all uninitialized.

13
00:00:48,660 --> 00:00:50,220
Let's display first name.

14
00:00:50,220 --> 00:00:53,520
This is a real problem because we've never initialized that array.

15
00:00:53,670 --> 00:00:56,260
So it's very likely we're going to get garbage.

16
00:00:56,280 --> 00:00:58,020
So let's run this.

17
00:00:58,020 --> 00:01:02,820
And by the way I'm in the section 10 workspace in the C style strings project.

18
00:01:02,820 --> 00:01:09,150
So let me run this and there you can see the garbage right up here and see it right in there.

19
00:01:10,470 --> 00:01:11,610
What display's is.

20
00:01:11,610 --> 00:01:12,510
Who knows right.

21
00:01:12,540 --> 00:01:17,190
Whatever characters happen to be in those locations you might get lucky and the null character might

22
00:01:17,190 --> 00:01:22,110
be in the first location and which has nothing will print but more often than not you'll get garbage

23
00:01:22,110 --> 00:01:22,900
like this.

24
00:01:22,980 --> 00:01:24,340
And this is a real common sense.

25
00:01:24,360 --> 00:01:29,070
And whether you displaying to the console or inside a window in Microsoft Windows or X window and you

26
00:01:29,070 --> 00:01:34,380
see something that displays look down on a button or appear on a titlebar is something that's a classic

27
00:01:34,380 --> 00:01:36,530
symptom of uninitialized string.

28
00:01:36,570 --> 00:01:38,450
Let me comment that out.

29
00:01:38,450 --> 00:01:40,440
And we don't want uninitialized streams.

30
00:01:40,500 --> 00:01:46,470
Now obviously we'd want to initialize these guys just like that or to a string if we want.

31
00:01:46,470 --> 00:01:50,920
So let me just go ahead and initialize all of them which is really the best practice

32
00:01:53,610 --> 00:01:55,580
camps and other all initialize.

33
00:01:55,750 --> 00:01:59,360
So the first thing we'll do is uncomment these lines here.

34
00:02:00,730 --> 00:02:02,680
And this is nothing we haven't seen before.

35
00:02:02,680 --> 00:02:03,810
Pretty straightforward.

36
00:02:04,000 --> 00:02:09,990
Enter your first name and we're using the extraction operator to get our first name into that variable

37
00:02:10,000 --> 00:02:11,630
first name which is the array.

38
00:02:11,650 --> 00:02:17,080
So whatever I type in I'm going to use my name in these examples Frank will be stored into first name

39
00:02:17,080 --> 00:02:23,110
and will be f r a and k and then the character will automatically be put in there for us.

40
00:02:23,110 --> 00:02:24,460
Same thing with last name.

41
00:02:24,610 --> 00:02:27,090
OK so again nothing we haven't seen before.

42
00:02:27,100 --> 00:02:29,650
Now here let's talk about these two lines.

43
00:02:29,830 --> 00:02:35,780
In this case that we grab my marker real quick in this case we're saying hello first name.

44
00:02:35,860 --> 00:02:41,470
Now this will be replaced with a value of first name what's the value of first name.

45
00:02:41,500 --> 00:02:47,820
At this point I have Frank in there and remember this is 20 big here.

46
00:02:47,970 --> 00:02:50,900
But in this case as you say I've got them all character.

47
00:02:50,940 --> 00:02:53,060
So how do we determine the value of first name.

48
00:02:53,070 --> 00:02:57,080
Well we start here do we see a no no.

49
00:02:57,330 --> 00:02:59,040
We move over to we see a no no.

50
00:02:59,040 --> 00:03:04,130
And we keep going until we see that no at that point that's what's returned.

51
00:03:04,290 --> 00:03:05,680
So this will display Frank.

52
00:03:05,700 --> 00:03:09,690
That's really what's going on when we're displaying these C-style variables.

53
00:03:09,860 --> 00:03:11,030
So I was going to say Hello Frank.

54
00:03:11,040 --> 00:03:14,920
Your first name has and then we see this function right here.

55
00:03:15,030 --> 00:03:20,760
As to our land or the string length function a function is nothing more than a request for somebody

56
00:03:20,760 --> 00:03:21,920
else to do something for you.

57
00:03:21,950 --> 00:03:22,320
All right.

58
00:03:22,320 --> 00:03:25,120
Functions really soon I think in the next section.

59
00:03:25,140 --> 00:03:31,200
So in this case I'm calling the Charland function I'm passing in that array of characters Frank.

60
00:03:31,350 --> 00:03:32,260
So what's it going to do.

61
00:03:32,260 --> 00:03:33,290
It's going to do the same thing.

62
00:03:33,300 --> 00:03:34,280
We just did here.

63
00:03:34,380 --> 00:03:34,980
Right.

64
00:03:34,980 --> 00:03:38,640
Let me clean this up a little bit and we'll walk through this again.

65
00:03:38,640 --> 00:03:42,020
So in this case how does the string length determine the length of that name.

66
00:03:42,060 --> 00:03:44,270
Well you start here.

67
00:03:44,460 --> 00:03:45,650
Is that a no no.

68
00:03:45,810 --> 00:03:46,540
That's one.

69
00:03:46,560 --> 00:03:47,260
Is that a no.

70
00:03:47,280 --> 00:03:48,870
No that's two.

71
00:03:48,870 --> 00:03:49,710
How about this guy.

72
00:03:49,730 --> 00:03:52,190
No that's 3 the n.

73
00:03:52,440 --> 00:03:52,920
No.

74
00:03:53,120 --> 00:03:53,840
OK.

75
00:03:54,060 --> 00:03:55,190
That's five.

76
00:03:55,200 --> 00:03:56,350
Now we see the No.

77
00:03:56,490 --> 00:03:57,760
The length is five.

78
00:03:58,020 --> 00:04:00,050
That's what's being returned here.

79
00:04:00,530 --> 00:04:05,720
Now as Harlin doesn't return an integer it doesn't really return an unsigned integer.

80
00:04:05,760 --> 00:04:13,080
It returns a type called size t and i haven't talked about that yet but I'm going to now size he really

81
00:04:13,080 --> 00:04:16,830
is an unsigned integer it could be an unsigned long.

82
00:04:16,950 --> 00:04:19,880
You really don't know what it is based on your system.

83
00:04:19,890 --> 00:04:21,070
That's the whole point.

84
00:04:21,120 --> 00:04:26,790
We really should be using size t because regardless of what system you're on this will work.

85
00:04:27,000 --> 00:04:28,850
You can be sure it will be unsigned.

86
00:04:28,860 --> 00:04:34,680
Right because it doesn't make sense to have negative sizes for strings or negative sizes from the for

87
00:04:34,800 --> 00:04:37,110
loop variables and things like that typically.

88
00:04:37,110 --> 00:04:43,170
So from this point forward I'm going to start using size t where appropriate rather than an unsigned

89
00:04:43,200 --> 00:04:44,980
it's the more correct way of doing it.

90
00:04:45,220 --> 00:04:45,650
OK.

91
00:04:45,750 --> 00:04:47,750
So that will return 5 so this will display.

92
00:04:47,760 --> 00:04:48,450
Hello Frank.

93
00:04:48,450 --> 00:04:52,050
Your first name is has five characters and your last name.

94
00:04:52,050 --> 00:04:53,090
Same idea.

95
00:04:53,130 --> 00:04:56,650
It'll print out my last name here and my last name has 11 characters.

96
00:04:56,790 --> 00:04:59,160
So it should display 11 characters.

97
00:04:59,280 --> 00:05:01,500
OK so let's run this example.

98
00:05:04,350 --> 00:05:11,690
My first name is Frank and also put in my last name Metropolis and it says Hello Frank.

99
00:05:11,690 --> 00:05:16,500
Your first name has five characters and your last name Mitropoulos has 11 characters exactly what we

100
00:05:16,500 --> 00:05:17,440
expect.

101
00:05:17,450 --> 00:05:24,450
Now everything I'm talking about in this video is totally dependent on that guy right there.

102
00:05:24,570 --> 00:05:30,200
If for whatever reason those null characters are that no character is not there you can imagine how

103
00:05:30,210 --> 00:05:34,590
we're going to keep counting until we hit one which weight may be you know a thousand characters down

104
00:05:34,590 --> 00:05:36,190
the line in memory.

105
00:05:36,840 --> 00:05:43,000
Typically you don't have to worry about it when you use these functions as Arlen's seen as to your cap.

106
00:05:43,000 --> 00:05:44,380
Mike we'll see it here.

107
00:05:44,400 --> 00:05:45,900
They handle that for you.

108
00:05:45,900 --> 00:05:49,950
But if you're working with strings on your own and you're processing characters and movie characters

109
00:05:49,950 --> 00:05:54,000
around you've got to be aware that you need to null terminate your strings otherwise you're going to

110
00:05:54,000 --> 00:05:55,290
run into problems.

111
00:05:55,290 --> 00:05:55,490
All right.

112
00:05:55,500 --> 00:06:01,820
Let me clear this up real quick and let's do another example down here.

113
00:06:01,890 --> 00:06:05,460
Uncomment this piece of code and we'll talk about that real quick.

114
00:06:05,460 --> 00:06:07,260
So what do we have now.

115
00:06:07,260 --> 00:06:10,100
Well we have Frank the first name right.

116
00:06:10,110 --> 00:06:11,650
So first name is Frank.

117
00:06:11,670 --> 00:06:15,020
I just typed it in and I'll type it in again in the next example.

118
00:06:15,150 --> 00:06:18,680
What we're doing here is we're copying using the string copy function.

119
00:06:18,690 --> 00:06:20,850
We're copying first name to full name.

120
00:06:20,850 --> 00:06:26,160
This is the way it works it's going from this right argument to the left and not the other way around.

121
00:06:26,160 --> 00:06:28,440
This is confusing sometimes for students.

122
00:06:28,500 --> 00:06:30,960
So I'm copying first name into full name.

123
00:06:31,050 --> 00:06:39,590
So again here was first name and it had Frank in it and over here is full name again this is first name

124
00:06:40,500 --> 00:06:48,040
and this is form an how does it copy Well one character Time is going to copy the f the r the A D and

125
00:06:48,040 --> 00:06:52,630
the K and it's going to keep copying until it hits that no character at that point it copies them all

126
00:06:52,630 --> 00:06:54,640
character and it stops.

127
00:06:54,880 --> 00:07:02,320
So at this point fullname will have Frank followed by the null character the TR cat function is the

128
00:07:02,320 --> 00:07:04,080
concatenate function.

129
00:07:04,210 --> 00:07:06,970
In this case what I'm doing is I'm adding space.

130
00:07:06,970 --> 00:07:09,380
You can see the space right there and double quotes.

131
00:07:09,470 --> 00:07:12,180
I'm adding the space to full name.

132
00:07:12,250 --> 00:07:17,690
So now it's putting a space here right in there and then it's putting the null character.

133
00:07:17,710 --> 00:07:21,320
So at this point that's going to be Frank followed by a space.

134
00:07:21,320 --> 00:07:26,590
I'll just use that underscore to denote the space that I'm doing another string cat.

135
00:07:26,590 --> 00:07:33,160
And what I'm doing now is I'm concatenating again this goes this way I'm concatenating the last name

136
00:07:33,160 --> 00:07:34,030
to a full name.

137
00:07:34,060 --> 00:07:40,900
So I'm putting in my last name here and it will also put in the null character DN and then I'm just

138
00:07:40,900 --> 00:07:42,040
displaying.

139
00:07:42,310 --> 00:07:47,860
So notice what we're doing here what we're doing is we're basically building up full name from first

140
00:07:47,860 --> 00:07:56,130
name and last name using as TR cat or string cat Let's run this and what I'll do here is I'll say again

141
00:07:56,130 --> 00:08:00,140
my first name is Frank and my last name is Metropolis.

142
00:08:00,510 --> 00:08:01,210
Hello Frank.

143
00:08:01,230 --> 00:08:04,920
Oh that's the same in that it says here your full name is Frank metropolis.

144
00:08:04,920 --> 00:08:10,160
Notice how it is concatenated the frank the space in the metropolis to one.

145
00:08:10,290 --> 00:08:13,140
So full name now contains that string.

146
00:08:13,200 --> 00:08:17,760
Ok so let's do another example I'm going to comment all of this out so we're fresh every time.

147
00:08:18,000 --> 00:08:25,080
And in this example here this is an example that shows you one of the behaviors of the sea in extraction

148
00:08:25,080 --> 00:08:26,280
operator here.

149
00:08:26,610 --> 00:08:31,200
What I'm doing here is I'm prompting the user me this case for my full name and I'm going to enter the

150
00:08:31,200 --> 00:08:31,720
full name.

151
00:08:31,720 --> 00:08:33,250
I'm going to display the full name.

152
00:08:33,260 --> 00:08:33,630
OK.

153
00:08:33,720 --> 00:08:41,100
So let me run that and I'm just going to say my full name is Frank Mitropoulos But now when I try to

154
00:08:41,100 --> 00:08:44,490
display my full name notice I only get Frank.

155
00:08:44,910 --> 00:08:48,090
That's the normal behavior for that extraction operator.

156
00:08:48,090 --> 00:08:48,870
It's read again.

157
00:08:48,870 --> 00:08:50,880
F R A N K space.

158
00:08:50,940 --> 00:08:52,820
That's a white space so it stops.

159
00:08:52,860 --> 00:08:54,130
That's it.

160
00:08:54,540 --> 00:08:58,370
Sometimes you want to be able to read the entire name right.

161
00:08:58,390 --> 00:08:59,400
The whole line.

162
00:08:59,400 --> 00:09:02,700
So this is what we're doing these next few lines here.

163
00:09:03,240 --> 00:09:09,090
In this case again I'm prompting and to your full name but now I'm using Sian's getline function.

164
00:09:09,180 --> 00:09:09,870
This is.

165
00:09:09,930 --> 00:09:12,560
This works again with C-style strings.

166
00:09:12,570 --> 00:09:18,450
So in this case I'm providing the name of that C-style string of that array name here is full name and

167
00:09:18,510 --> 00:09:19,050
a limit.

168
00:09:19,050 --> 00:09:23,660
This is how many characters maximum you're going to read some saying cnt getline.

169
00:09:23,670 --> 00:09:29,460
So this will stop either at 50 you've reached the max or when the user presses enter.

170
00:09:29,460 --> 00:09:32,200
So in this case it's going to read the whole name right.

171
00:09:32,310 --> 00:09:39,920
So let me run that again and I'll say Frank Metropolis again and press enter you can see the full name.

172
00:09:39,920 --> 00:09:42,270
Now is the first name and the last name.

173
00:09:42,270 --> 00:09:44,160
So it's reading the entire line.

174
00:09:45,650 --> 00:09:49,970
Now let me do a couple of more examples as to a comparison example here.

175
00:09:50,330 --> 00:09:53,390
In this case remember fullname will have my full name in it.

176
00:09:53,390 --> 00:09:59,180
Frank Metropolis and what I'm doing that I'm copying that to temp temp if you recall or scroll up real

177
00:09:59,180 --> 00:09:59,780
quick.

178
00:09:59,990 --> 00:10:02,710
Temp is another array of characters.

179
00:10:02,720 --> 00:10:06,070
Pretty big nice 50 size so my name will definitely fit in there.

180
00:10:06,260 --> 00:10:08,690
And when I say big size my name will fit in there.

181
00:10:08,690 --> 00:10:12,530
That's one of the things you always have to worry about when you're working with C-style Strange's you've

182
00:10:12,530 --> 00:10:16,490
always got to be sure that you've got enough storage if you don't have enough storage going to have

183
00:10:16,490 --> 00:10:20,720
a problem because you're going to run over the balance and probably clobber some other memory location

184
00:10:20,720 --> 00:10:21,480
with something.

185
00:10:21,710 --> 00:10:29,150
OK so again let's assume that I've typed in my name and now I'm going to copy my name to temp that I

186
00:10:29,150 --> 00:10:30,320
want to compare those two.

187
00:10:30,320 --> 00:10:31,280
They should be the same.

188
00:10:31,280 --> 00:10:36,740
Right because I just copied it to another variable name where we can use the string compare function.

189
00:10:36,740 --> 00:10:41,520
We pass in the two strings that we want to compare and this case temp and full name.

190
00:10:41,660 --> 00:10:46,320
And if we get back to zero that means that they're the same if we don't get back to zero.

191
00:10:46,340 --> 00:10:47,930
That means they're not the same.

192
00:10:47,930 --> 00:10:50,910
So in this example I expect to get back to zero.

193
00:10:51,200 --> 00:10:55,680
So let me run this real quick and I'll type in my full name.

194
00:10:58,630 --> 00:11:03,180
They are the same Frank Mitropoulos and Frank Mitropoulos are the same because it's the same string.

195
00:11:03,190 --> 00:11:04,790
So I did get back to zero.

196
00:11:04,890 --> 00:11:08,890
OK so now let's modify that string and then we'll compare it again.

197
00:11:09,070 --> 00:11:13,560
So we'll do this tumbles we'll use a for loop and uncomment this code out real quick.

198
00:11:13,780 --> 00:11:16,720
And you notice what we're doing we're going from equals zero.

199
00:11:16,720 --> 00:11:22,000
And notice I'm using size t here instead of into or unsigned This is the better way to do it the more

200
00:11:22,000 --> 00:11:23,130
correct way to do it.

201
00:11:23,140 --> 00:11:26,100
So I'm going from I zero.

202
00:11:26,410 --> 00:11:32,490
While I is less than the string length of the full name against string length is going to return however

203
00:11:32,500 --> 00:11:33,750
many characters are in there.

204
00:11:33,850 --> 00:11:38,440
I want to be sure I'm going less than that because remember we're going from zero to the size minus

205
00:11:38,440 --> 00:11:42,250
1 and I'm incrementing by 1 each time.

206
00:11:42,250 --> 00:11:46,330
Then I'm using one of the character functions I'm saying full names some I.

207
00:11:46,360 --> 00:11:48,250
That's the specific character right.

208
00:11:48,250 --> 00:11:53,910
So it's going to be F R A and K and so forth that's an alpha character a letter.

209
00:11:54,020 --> 00:11:59,440
Then I'm going to convert that letter to uppercase and put it right back where it was.

210
00:11:59,440 --> 00:12:01,810
So now my name will be all capitalized.

211
00:12:01,900 --> 00:12:02,300
OK.

212
00:12:02,350 --> 00:12:11,320
So let's run that and I'll type in my name with mixed upper or lower case you can see here that it compared

213
00:12:11,320 --> 00:12:12,480
them and they're the same.

214
00:12:12,610 --> 00:12:18,070
And now my name is all uppercase because I use the two upper function.

215
00:12:18,130 --> 00:12:19,600
So now let's compare those two.

216
00:12:19,600 --> 00:12:24,010
Now obviously they're not the same right because I just made one a little bit different.

217
00:12:24,010 --> 00:12:26,720
So let's do this let's comment.

218
00:12:26,740 --> 00:12:28,300
All of this out and walk through it.

219
00:12:28,630 --> 00:12:32,260
And so what's going on here I'm comparing temp and full name.

220
00:12:32,260 --> 00:12:33,710
They're not the same anymore.

221
00:12:33,820 --> 00:12:34,090
Right.

222
00:12:34,090 --> 00:12:39,760
Full name is now all uppercase and temp is not someone to compare them and it's going to say are they

223
00:12:39,760 --> 00:12:41,220
the same or are they different now.

224
00:12:41,260 --> 00:12:45,050
I expect this to be different because this will not be equal to zero.

225
00:12:45,190 --> 00:12:47,170
So what how does this work with the zero.

226
00:12:47,320 --> 00:12:53,020
Well if the two strings are the same and that's character by character lexically the string compare

227
00:12:53,050 --> 00:12:55,110
function will return to zero.

228
00:12:55,240 --> 00:12:59,890
Otherwise it will return a negative number or a positive number depending on which to which of the strings

229
00:12:59,890 --> 00:13:01,090
is larger.

230
00:13:01,090 --> 00:13:01,610
Right.

231
00:13:01,660 --> 00:13:05,890
So in this case I'm comparing them temp and fullname and then fullname attempt so you could see the

232
00:13:05,890 --> 00:13:06,450
result.

233
00:13:06,550 --> 00:13:08,600
So let's run this.

234
00:13:08,620 --> 00:13:13,910
So again I'll use my name and press enter.

235
00:13:14,320 --> 00:13:17,180
So as you can see the two strings are now different.

236
00:13:18,070 --> 00:13:22,380
And destry compare function will return zero if the two strings are the same.

237
00:13:22,390 --> 00:13:27,050
You can see here that we're comparing two different strings that returns less than zero if the first

238
00:13:27,050 --> 00:13:31,600
string lexically comes before the second string or return greater than zero.

239
00:13:31,720 --> 00:13:34,880
If the first string lexically comes after the second string.

240
00:13:35,350 --> 00:13:38,050
Ok so that completes this video.

241
00:13:38,050 --> 00:13:41,870
This gives you a little bit of insight as to how to use C-style strings and their functions.

242
00:13:41,890 --> 00:13:44,410
What we'll do next is we'll talk about C++ strings.
