1
00:00:05,590 --> 00:00:13,920
This video will learn about C++ as size of operator and about the sea limits and see float include files.

2
00:00:13,920 --> 00:00:21,390
C++ has an operator called size of that returns the number of bytes used to represent any type size

3
00:00:21,390 --> 00:00:27,180
of can also be used to determine the size of compound types like arrays structures and objects.

4
00:00:27,270 --> 00:00:33,570
Learn about compound types in a future section in order to determine the size of a specific type.

5
00:00:33,570 --> 00:00:40,480
We provide the name of the type inside the parentheses for example size of it size of double.

6
00:00:40,500 --> 00:00:45,810
This will tell us the size of that type in bytes on the specific machine and compiler that you're running

7
00:00:45,810 --> 00:00:47,560
the program on.

8
00:00:47,580 --> 00:00:50,880
You can also determine the size of variables using their names.

9
00:00:50,880 --> 00:00:56,310
In this case you can use the same syntax or you can omit the parentheses since they're optional for

10
00:00:56,310 --> 00:01:05,160
variables the size of operator gets its information from two C++ include files C limits and C float

11
00:01:05,910 --> 00:01:11,820
see limits provides information about interval types and see float about floating point types.

12
00:01:11,820 --> 00:01:16,830
These include files also provide a bunch of handy defined constants that we can use to determine the

13
00:01:16,830 --> 00:01:20,030
precision of our primitive types for example.

14
00:01:20,200 --> 00:01:25,400
And Max tells us the maximum value we can store in an int on this specific machine.

15
00:01:25,410 --> 00:01:28,630
There are many others and you can see some in the examples in this slide.

16
00:01:28,920 --> 00:01:35,190
Let's head over to the code ID and we'll see what some of these values are in my machine.

17
00:01:35,220 --> 00:01:39,780
I'm into code like ID and I've written some code that uses the size of operator.

18
00:01:39,780 --> 00:01:41,310
Let me walk you through it.

19
00:01:41,310 --> 00:01:46,050
First thing I see is that we're including IO stream and we're also including C limits.

20
00:01:46,050 --> 00:01:48,180
Everything I'm using here will use C limits.

21
00:01:48,180 --> 00:01:50,590
You can get the same information in C float.

22
00:01:50,640 --> 00:01:53,490
I'll leave that as an exercise for you if you like.

23
00:01:53,490 --> 00:01:57,920
First thing we'll do is output size of information for types.

24
00:01:57,960 --> 00:02:03,650
So in this case I would output char followed by size of char in bytes.

25
00:02:03,660 --> 00:02:08,650
Size of int size of unsigned int short long and long long.

26
00:02:08,820 --> 00:02:15,720
Now when I run this I get information about how big or how much storage is necessary to represent a

27
00:02:15,720 --> 00:02:21,650
character an integer and so forth on my specific machine using this specific compiler.

28
00:02:21,900 --> 00:02:24,320
OK now the rest of the code is commented out and again.

29
00:02:24,360 --> 00:02:26,380
Uncomment that as we go through.

30
00:02:26,520 --> 00:02:31,620
So what I'll do is and I've created a project here called size of operator project and you can run this

31
00:02:31,620 --> 00:02:34,010
code on your machine and see what your values look like.

32
00:02:34,230 --> 00:02:40,390
So I build and run and you could see the size of information that's come up.

33
00:02:40,430 --> 00:02:45,530
A character is one byte in integers 4 bytes an unsigned integers also 4 bytes.

34
00:02:45,530 --> 00:02:51,380
That makes sense because the only difference between an int and an unsigned int is that signed bit and

35
00:02:51,380 --> 00:02:58,460
how much precision you can store in a short integer is two bytes along integers 4 bytes long long integers

36
00:02:58,550 --> 00:03:00,890
8 bytes and there you go.

37
00:03:00,920 --> 00:03:05,310
Now I'm running a 32 bit compiler on a 64 bit operating system.

38
00:03:05,330 --> 00:03:11,090
If you're running a 64 bit compiler these numbers will likely be different.

39
00:03:11,100 --> 00:03:15,630
All right so that takes care of the basic size of for the integral types.

40
00:03:15,630 --> 00:03:18,390
Let's look at some of the floating point types.

41
00:03:18,720 --> 00:03:24,540
So in this case you can see that I want the size of the float size of a double and the size of the long

42
00:03:24,540 --> 00:03:25,260
double.

43
00:03:25,620 --> 00:03:32,250
OK so what we can do is we can build and run and you could see now that a float on this particular machine

44
00:03:32,250 --> 00:03:33,930
again is 4 bytes.

45
00:03:33,930 --> 00:03:37,260
A double is 8 bytes and a long double is 12 bytes.

46
00:03:37,260 --> 00:03:44,250
That's the amount of storage that it takes to represent these specific types on this machine.

47
00:03:44,310 --> 00:03:52,150
Ok so now the C limits file contains some pretty nice defined constants and let's use some of them can

48
00:03:52,180 --> 00:03:53,290
see what it's like.

49
00:03:53,520 --> 00:03:59,730
In this case I want minimum values so I want to know what's the minimum value that I can store in a

50
00:03:59,730 --> 00:04:00,540
character.

51
00:04:00,540 --> 00:04:05,900
What's the minimum value that I can store to an integer in a short integer in a long integer and in

52
00:04:05,910 --> 00:04:11,610
a long long integer and you could see that defines are right here and those will default to some integer.

53
00:04:11,600 --> 00:04:13,380
So let's let's run this now.

54
00:04:13,680 --> 00:04:19,410
Again I'll build and run and you can see that the minimum value I can store in a character's negative

55
00:04:19,410 --> 00:04:25,800
1:28 that makes sense because a character is one byte be it an integer you can see the number there

56
00:04:25,800 --> 00:04:31,360
in a short negative 3 to seven six eight long and the long long.

57
00:04:31,510 --> 00:04:35,120
Your numbers may look different on your machine depending on a lot of factors.

58
00:04:36,690 --> 00:04:37,060
All right.

59
00:04:37,080 --> 00:04:44,250
Now we can do the maximum of values and it's exactly the same except we're doing char Max Max instead

60
00:04:44,250 --> 00:04:46,290
of char Minutemen.

61
00:04:46,290 --> 00:04:54,120
I'll run this again in a press control at 5 to run an hour maximum values are for characters 127 for

62
00:04:54,120 --> 00:04:58,790
short three to seven six seven and for long long so you can see that's a pretty big number.

63
00:05:01,230 --> 00:05:06,300
All right so that's the use of see limits and size of with types.

64
00:05:06,300 --> 00:05:12,570
We can also use size of with variable names and I'll show you an example here where what we have here

65
00:05:12,570 --> 00:05:15,570
is here we've got an integer called H.

66
00:05:15,720 --> 00:05:17,420
And we're suddenly 21 to it.

67
00:05:17,670 --> 00:05:19,260
We're not going to use the 21 at all.

68
00:05:19,260 --> 00:05:22,290
All we're interested in is the size of that variable.

69
00:05:22,290 --> 00:05:26,680
So rather than size of int here we're saying size of age.

70
00:05:26,820 --> 00:05:29,010
This is one syntactic variant.

71
00:05:29,010 --> 00:05:32,690
We can also just say size of age without the parentheses.

72
00:05:33,030 --> 00:05:34,880
So I'm doing that for an integer called age.

73
00:05:34,880 --> 00:05:37,860
I'm doing the same for a double called wage.

74
00:05:37,890 --> 00:05:40,950
So obviously we would expect the double to be much bigger.

75
00:05:40,950 --> 00:05:47,700
But again what I'm doing in here is I'm using the variable name instead of type here as well.

76
00:05:47,700 --> 00:05:50,300
All right so let's run this one more time.

77
00:05:50,760 --> 00:05:56,280
And what we've got now at the bottom here is that the size of using variable names.

78
00:05:56,280 --> 00:06:01,980
So age is four bytes and if you recall here we know that age is an integer right.

79
00:06:02,010 --> 00:06:04,500
And integer up top is four bytes.

80
00:06:04,500 --> 00:06:06,480
If you recall that statement at the top.

81
00:06:06,480 --> 00:06:08,780
So age is 4 bytes.

82
00:06:08,850 --> 00:06:14,160
The other syntax variant gives exactly the same result and wages a double which is 8 bytes and you can

83
00:06:14,160 --> 00:06:14,880
see our doubles.

84
00:06:14,880 --> 00:06:16,440
Here is 8 bytes.

85
00:06:16,560 --> 00:06:19,300
You may be wondering why in the world would I ever use this stuff.

86
00:06:19,320 --> 00:06:27,660
Well it's important to understand what the size and precision of your types are on your system.

87
00:06:27,660 --> 00:06:33,600
Later on when we deal with arrays and other data structures sometimes it's nice to be able to understand

88
00:06:33,600 --> 00:06:37,220
how big something is how big each section of it is.

89
00:06:37,260 --> 00:06:43,850
This is one of the big differences between C++ and other languages like Java and Python with those languages.

90
00:06:43,860 --> 00:06:49,950
You're really far removed from the machine so you're programming at a much higher level C++ we're at

91
00:06:49,950 --> 00:06:52,180
a lower level so we've got to deal with this kind of thing.
