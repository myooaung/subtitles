WEBVTT
1
00:00:05.340 --> 00:00:12.970
In this video I'd like to briefly talk about the C plus plus standard exception class hierarchy C++

2
00:00:12.980 --> 00:00:19.070
provides a class hierarchy of exception classes these exception classes are used throughout the C++

3
00:00:19.160 --> 00:00:26.330
standard libraries this exception class is the base class in all other exception classes are ultimately

4
00:00:26.330 --> 00:00:28.190
derived from it.

5
00:00:28.190 --> 00:00:31.180
Exception provides a virtual function named.

6
00:00:31.190 --> 00:00:37.130
What that returns a C-style string with a description of the exception that occurred.

7
00:00:37.130 --> 00:00:43.070
We can create subclasses of the exception classes and then implement the virtual function so that it

8
00:00:43.070 --> 00:00:45.670
displays whatever exception message we want.

9
00:00:46.010 --> 00:00:49.110
Let's take a look at the exception class hierarchy.

10
00:00:50.070 --> 00:00:54.030
Here's the C plus plus standard library exception class hierarchy.

11
00:00:54.030 --> 00:01:00.200
The classes that are in orange are the C++ 17 additions to the class hierarchy.

12
00:01:00.210 --> 00:01:04.240
Notice that the common base class in the center is stood exception.

13
00:01:04.440 --> 00:01:06.640
And then we have many classes derived from it.

14
00:01:07.470 --> 00:01:13.020
Exceptions that are runtime errors logic errors bad allocation errors out of range errors and many more

15
00:01:13.620 --> 00:01:18.540
we aren't going to study these classes in detail but we can create our own user defined classes that

16
00:01:18.540 --> 00:01:21.830
are derived from the exception classes.

17
00:01:21.990 --> 00:01:28.230
This can be very useful in some situations since by being derived publicly from stood exception our

18
00:01:28.230 --> 00:01:34.020
classes are now part of this hierarchy and can be used wherever a good exception is expected since your

19
00:01:34.020 --> 00:01:36.810
class is an exception.

20
00:01:36.810 --> 00:01:39.080
Also thanks to dynamic polymorphism.

21
00:01:39.180 --> 00:01:45.210
All you have to do is implement the what virtual function and it will be bound dynamically at runtime.

22
00:01:45.210 --> 00:01:49.910
Let's see an example of how we could create an illegal balance exception for our account class.

23
00:01:50.070 --> 00:01:54.850
But this time let's derive it from stood exception.

24
00:01:54.880 --> 00:02:00.100
Here's a simple example that shows how we create our user defined exception class named illegal balance

25
00:02:00.100 --> 00:02:05.410
exception and this might be thrown if the account is created with a negative balance.

26
00:02:05.470 --> 00:02:11.830
Notice that we derive the class publicly from stood exception and we simply provide a default constructor

27
00:02:12.040 --> 00:02:14.100
and a default destructor.

28
00:02:14.110 --> 00:02:15.940
Finally we implement the what.

29
00:02:15.940 --> 00:02:20.800
Virtual function and return a C-style string describing the exception.

30
00:02:21.480 --> 00:02:27.150
This is a really simple implementation we could provide all sorts of error information codes descriptions

31
00:02:27.150 --> 00:02:32.430
and so forth as class attributes and initialize them in the constructor when we create and throw the

32
00:02:32.430 --> 00:02:33.600
object.

33
00:02:34.110 --> 00:02:36.450
There's a keyword here that I haven't talked about yet.

34
00:02:36.750 --> 00:02:38.850
That is the No except keyword.

35
00:02:39.180 --> 00:02:43.030
This tells the compiler that the method will not throw an exception.

36
00:02:43.260 --> 00:02:46.070
So don't throw exceptions from these methods.

37
00:02:46.440 --> 00:02:49.440
The destructor is no except by default.

38
00:02:49.440 --> 00:02:53.480
If you do happen to throw an exception from a no throw method the program will terminate.

39
00:02:53.490 --> 00:02:55.990
The exception will not be handled.

40
00:02:56.040 --> 00:03:00.880
Let's see how we might use the account class hierarchy that we've used throughout the course.

41
00:03:01.680 --> 00:03:04.070
Here's the code for our count constructor.

42
00:03:04.260 --> 00:03:08.970
We're checking to see if the account balance is less than zero and if it is we're throwing in a legal

43
00:03:08.970 --> 00:03:15.350
balance exception which is our user defined exception class derived from state exception.

44
00:03:15.360 --> 00:03:19.740
This code should look pretty familiar since it's more or less the same code that we wrote when we created

45
00:03:19.740 --> 00:03:24.900
our own standalone illegal balance exception class.

46
00:03:24.910 --> 00:03:27.270
Now we can try to create an account object.

47
00:03:27.400 --> 00:03:32.840
In this case will create a unique pointer and create a checking account object dynamically.

48
00:03:32.860 --> 00:03:37.330
Notice that we're creating Moze account with a negative 100 balance.

49
00:03:37.360 --> 00:03:42.790
This is not legal so we expect that the account constructor will throw in a legal balance exception

50
00:03:42.850 --> 00:03:46.670
object and that's exactly what we're catching in our catch handler.

51
00:03:47.230 --> 00:03:55.180
In this case the catch handler fires and we call X dot what which will display illegal balance exception.

52
00:03:55.180 --> 00:03:58.590
That's pretty powerful and not too difficult to understand or use.

53
00:03:58.900 --> 00:04:03.450
Well that's it for exception handling the challenge exercise for this section is next.

54
00:04:03.580 --> 00:04:07.960
And although it would involve some more advanced exception handling techniques than you'll find in most

55
00:04:07.960 --> 00:04:10.210
courses I think you'll be able to do it just fine.

56
00:04:10.420 --> 00:04:11.030
Let's get to it.
