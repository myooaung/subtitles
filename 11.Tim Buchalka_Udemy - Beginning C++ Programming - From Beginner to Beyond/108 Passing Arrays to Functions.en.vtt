WEBVTT
1
00:00:05.580 --> 00:00:09.720
This video will learn about passing arrays to C++ functions.

2
00:00:10.070 --> 00:00:15.560
We can pass arrays into functions by providing the square brackets in the parameter information.

3
00:00:15.560 --> 00:00:20.840
So in this case we can have a function named print array that expects an array of integers and returns

4
00:00:20.840 --> 00:00:22.340
nothing.

5
00:00:22.340 --> 00:00:27.500
The idea is that this function iterates through the array and displays the array values.

6
00:00:27.500 --> 00:00:29.010
Pretty handy function right.

7
00:00:29.360 --> 00:00:31.690
But arrays are different in C++.

8
00:00:31.700 --> 00:00:37.220
Remember that an array name evaluates to the address or location in memory of the first element of the

9
00:00:37.220 --> 00:00:38.240
array.

10
00:00:38.240 --> 00:00:40.330
In other words the beginning of the array.

11
00:00:40.850 --> 00:00:46.130
So it's being passed into the function is not a copy of the entire array but only the address of the

12
00:00:46.130 --> 00:00:47.890
first element of the array.

13
00:00:47.900 --> 00:00:51.590
That means that the function has no idea how many elements are in the array.

14
00:00:51.650 --> 00:00:54.510
So the programmer doesn't know how many times to iterate.

15
00:00:54.680 --> 00:01:00.200
So when we pass arrays to functions we also need to pass in the size of the array so that we now know

16
00:01:00.200 --> 00:01:03.000
how many times to iterate Let me show you an example

17
00:01:06.650 --> 00:01:11.480
in this example you can see that both the function prototype and the function definition have square

18
00:01:11.480 --> 00:01:14.910
brackets after the formal parameter name.

19
00:01:14.980 --> 00:01:20.140
This tells the compiler that the function expects an array of integers in this case so far so good.

20
00:01:20.330 --> 00:01:25.520
Then in Main I have an array of five integers called my numbers and it's been initialized to the integers

21
00:01:25.520 --> 00:01:26.980
1 through 5.

22
00:01:27.080 --> 00:01:30.200
So I call the print array function and pass in the array.

23
00:01:30.200 --> 00:01:32.830
My numbers are all good so far.

24
00:01:32.840 --> 00:01:37.830
Now I execute the print array function but I have no idea how many times I need to iterate.

25
00:01:38.000 --> 00:01:42.050
Since the array name has no size information I'm stuck.

26
00:01:42.050 --> 00:01:47.630
If the array has a sentinel value like a C-style string then I can iterate until I see that sensible

27
00:01:47.630 --> 00:01:48.410
value.

28
00:01:48.410 --> 00:01:52.430
But in this case the my numbers array has no such Central Valley.

29
00:01:52.460 --> 00:01:57.090
There's no way I can write this function body in a way that it will work with any array of integers.

30
00:01:57.410 --> 00:02:01.400
So the solution is to pass in the size of the array to the function as well.

31
00:02:01.550 --> 00:02:05.450
Let's do that next.

32
00:02:05.680 --> 00:02:11.860
Now we've added a size parameter to both the function prototype and the function definition in the main.

33
00:02:11.860 --> 00:02:16.270
When I call the function I pass in my numbers and the size of the array which is 5.

34
00:02:16.270 --> 00:02:17.500
In this case.

35
00:02:17.830 --> 00:02:22.630
Now when I execute the body of the printer a function I know the location of the array which is the

36
00:02:22.630 --> 00:02:23.410
array name.

37
00:02:23.590 --> 00:02:25.760
And I know how many elements are in the array.

38
00:02:25.780 --> 00:02:30.700
I can easily write a for loop now that iterates through the array and displays every integer.

39
00:02:30.700 --> 00:02:36.860
This looks great but there is one potential gotcha that you need to be aware of.

40
00:02:36.900 --> 00:02:42.150
Since we're passing into the function the location of the actual array that was declared in main that

41
00:02:42.150 --> 00:02:45.720
means that we can modify that actual array from within the function.

42
00:02:45.720 --> 00:02:50.280
This could be useful in the case of a function like zero array that we can call whenever we want to

43
00:02:50.280 --> 00:02:52.580
zero all the elements in an array.

44
00:02:52.590 --> 00:02:56.100
However in the printer a function we don't want to modify the array.

45
00:02:56.160 --> 00:02:59.400
If we do it's probably an unintentional error.

46
00:02:59.430 --> 00:03:02.770
We'll see how to protect ourselves from this kind of error in the next line.

47
00:03:02.820 --> 00:03:06.730
But first let's see how we could write a useful function like zero array.

48
00:03:06.840 --> 00:03:12.760
In this case the zero array function receives the location of the array and the size of the array.

49
00:03:12.780 --> 00:03:17.370
We could simply iterate through the array and set each array element to zero.

50
00:03:17.370 --> 00:03:22.790
Notice that when we print the array in Main after we call 0 array all the array elements are now 0.

51
00:03:23.190 --> 00:03:27.730
So let's get back to see what we can do to have the compiler help us so we don't change an array we

52
00:03:27.780 --> 00:03:32.880
don't want to we can define function parameters as Konst parameters.

53
00:03:32.880 --> 00:03:37.370
This tells the compiler that these parameters are read only within the function body.

54
00:03:37.380 --> 00:03:40.820
Any attempt to modify them will result in the compiler.

55
00:03:40.860 --> 00:03:46.400
So in this case notice that we included the Konst keyword ret before the array parameter declaration.

56
00:03:46.740 --> 00:03:47.670
That's it.

57
00:03:47.670 --> 00:03:53.280
Now if I try to modify any array element as I do in the assignment statement a compiler error will occur

58
00:03:53.880 --> 00:03:58.260
depending on your compiler the error message will say something like error trying to assign to a read

59
00:03:58.260 --> 00:03:59.440
only value.

60
00:04:00.000 --> 00:04:06.060
The idea of passing the location of a variable to a function instead of the value of a variable is fundamental

61
00:04:06.060 --> 00:04:08.330
in understanding the next topic will talk about.

62
00:04:08.490 --> 00:04:14.500
It's called pass by reference before we talk about pass by reference I want to be sure that you really

63
00:04:14.500 --> 00:04:17.900
understand the whole idea of passing arrays to functions.

64
00:04:17.980 --> 00:04:23.810
So I mean the ID and I mean the section 11 workspace the arrays and functions project.

65
00:04:24.010 --> 00:04:25.650
And let me show you what I've got here.

66
00:04:25.660 --> 00:04:27.250
Let's start at the main.

67
00:04:27.250 --> 00:04:32.690
I've got a real simple array here array of integers called my scores and I've initialized it to 198

68
00:04:32.710 --> 00:04:36.520
1986 and 84 five integers.

69
00:04:36.520 --> 00:04:41.440
Now what I want to do is I want to call a function called Print array and I want to pass into that function

70
00:04:41.680 --> 00:04:45.320
the array and the size of the array as we saw before.

71
00:04:45.460 --> 00:04:46.080
Perfect.

72
00:04:46.180 --> 00:04:50.620
That should print out 198 1986 and 84.

73
00:04:50.710 --> 00:04:53.020
Now I've got a function called Set array.

74
00:04:53.020 --> 00:04:58.470
And what this function will do is it'll set every value of that array to 100.

75
00:04:58.510 --> 00:05:03.370
So when I come back it'll print out one hundred five times so that will actually modify the array.

76
00:05:03.430 --> 00:05:06.350
So let's see what these functions look like they're pretty straightforward.

77
00:05:06.400 --> 00:05:08.070
Are the function prototypes.

78
00:05:08.230 --> 00:05:14.530
That's the function prototype for print to expect an array of integers and the size of the array the

79
00:05:14.620 --> 00:05:19.750
cellaret function expects an array of integers the size of the array and the value that we want to set

80
00:05:19.780 --> 00:05:21.940
each one of those elements too.

81
00:05:21.970 --> 00:05:22.370
All right.

82
00:05:22.480 --> 00:05:28.390
So let's look at the print array and I put Konst here because it's it's something that we need to think

83
00:05:28.390 --> 00:05:32.180
about whenever we write functions that work with the race.

84
00:05:32.200 --> 00:05:33.390
So let's look at this.

85
00:05:33.520 --> 00:05:34.190
What are we doing here.

86
00:05:34.210 --> 00:05:37.370
Well we iterate we iterate for equal to zero.

87
00:05:37.390 --> 00:05:43.150
While it is less than size that's the idiom that we do all the time when we're working with arrays and

88
00:05:43.150 --> 00:05:47.670
we're incrementing by one and then all I'm doing is I'm outputting a race of I.

89
00:05:47.830 --> 00:05:52.160
So I'm going to go from a race of zero race of one race of two all the way to a race.

90
00:05:52.210 --> 00:05:56.410
For in this case and I'm going to print out each one of those integers then I'm just going to print

91
00:05:56.410 --> 00:06:02.870
a new line at the n that will print out 198 1986 and 84 perfect.

92
00:06:02.950 --> 00:06:05.140
So that's that line right here.

93
00:06:05.140 --> 00:06:11.530
Then I'm going to call cellaret and when you pass in again the array the 5 which is the size and 100.

94
00:06:11.530 --> 00:06:17.410
In this case rather than doing any outputting what I want to do is I want to loop through that array

95
00:06:17.410 --> 00:06:19.950
again so the same loop from equal zero.

96
00:06:19.980 --> 00:06:21.800
I less than size by 1.

97
00:06:21.850 --> 00:06:28.840
What I want to do it each iteration of the loop is I want to set a r r so I write the element of that

98
00:06:28.840 --> 00:06:31.710
array to the value that was passed in.

99
00:06:31.720 --> 00:06:35.680
So in this case I'm modifying all five of the array integers to 100.

100
00:06:35.830 --> 00:06:37.350
Then I'm printing it again.

101
00:06:37.390 --> 00:06:43.780
So what I expect from this program is the first print array statement is going to print 198 1986 and

102
00:06:43.780 --> 00:06:50.020
84 then the last print array statement here is going to print 5 100s.

103
00:06:50.050 --> 00:06:50.450
OK.

104
00:06:50.530 --> 00:06:55.030
So let's run this and then we'll walk through this in detail so you can see exactly what's going on.

105
00:06:57.350 --> 00:06:58.710
There you go 198.

106
00:06:58.790 --> 00:07:04.010
1986 84 and then 500 is exactly what we expected.

107
00:07:04.010 --> 00:07:05.300
So let's walk through this.

108
00:07:05.300 --> 00:07:08.510
Let's start with the printer array function first.

109
00:07:08.750 --> 00:07:13.970
And my main has that array right here called my scores and I'm going to draw this visually so he can

110
00:07:13.970 --> 00:07:15.730
see exactly what's going on.

111
00:07:15.910 --> 00:07:17.190
There's my scores.

112
00:07:17.270 --> 00:07:19.380
It's an array of five integers.

113
00:07:21.520 --> 00:07:25.080
Can I put them in here one hundred ninety eight.

114
00:07:25.290 --> 00:07:26.220
Ninety.

115
00:07:26.440 --> 00:07:34.640
86 in 84 the value of the name of an array is the location of that first element in the array.

116
00:07:34.650 --> 00:07:38.950
So let's say that that integer 100 here is that location 2000.

117
00:07:39.120 --> 00:07:40.200
And I'm just making that up.

118
00:07:40.200 --> 00:07:43.730
It could be any location that's 2000.

119
00:07:43.800 --> 00:07:48.060
So whenever the C++ compiler sees an array name.

120
00:07:48.210 --> 00:07:49.550
This is what it's going at.

121
00:07:49.560 --> 00:07:52.820
In this case my scores will evaluate to two thousand.

122
00:07:53.180 --> 00:07:54.080
Okay perfect.

123
00:07:54.300 --> 00:07:57.450
So now I'm going to call printf array right here.

124
00:07:57.450 --> 00:07:59.220
This is what's going on.

125
00:07:59.220 --> 00:08:06.620
So now I'm in my printer array function and print array has several local variables.

126
00:08:06.660 --> 00:08:08.010
It's got array.

127
00:08:08.250 --> 00:08:11.360
It's got size and it's got this I right there.

128
00:08:11.370 --> 00:08:14.900
Let's just worry about the array and the size variables right now.

129
00:08:14.910 --> 00:08:18.630
So there's my A R R I'll just call it array.

130
00:08:18.630 --> 00:08:21.490
And here's my size.

131
00:08:21.630 --> 00:08:25.000
When the function is called the values are copied.

132
00:08:25.050 --> 00:08:27.660
So my scores is two thousand.

133
00:08:27.660 --> 00:08:29.160
It's not the entire array.

134
00:08:29.310 --> 00:08:33.300
It's 2000 so 2000 gets copied over here.

135
00:08:33.330 --> 00:08:34.870
Size is the 5.

136
00:08:34.890 --> 00:08:37.450
So size it's the 5.

137
00:08:37.460 --> 00:08:43.550
Right now I start looping and the first thing I do is it says basically 0.

138
00:08:43.560 --> 00:08:43.980
Right.

139
00:08:44.070 --> 00:08:51.040
So what I'm going to do is I'm going to see out a r r Sub-Zero.

140
00:08:51.450 --> 00:08:52.760
Well what does that mean.

141
00:08:52.780 --> 00:08:55.320
That means the first integer in the array.

142
00:08:55.330 --> 00:08:58.230
Where where is the array right here.

143
00:08:58.450 --> 00:08:59.890
That's that guy right there.

144
00:09:00.040 --> 00:09:06.370
So you can see that this print array function is referring to the actual array in Main because the array

145
00:09:06.370 --> 00:09:07.360
was never copied.

146
00:09:07.360 --> 00:09:12.880
Instead the address of the array was passed in it's going to go through each one of these through the

147
00:09:12.880 --> 00:09:13.220
loop.

148
00:09:13.240 --> 00:09:17.670
It's going to print A-R some one which is that guy right there 98.

149
00:09:17.740 --> 00:09:21.950
So it's going to display them all OK that makes sense.

150
00:09:21.960 --> 00:09:23.420
I hope so so.

151
00:09:23.430 --> 00:09:28.830
So again this will print out right here it will display one hundred ninety eight just like we saw 90

152
00:09:29.310 --> 00:09:31.770
86 and 84.

153
00:09:31.770 --> 00:09:34.110
Now let's look at this function call right here.

154
00:09:34.140 --> 00:09:41.550
I still have my my scores array and it's still the same I haven't changed it.

155
00:09:42.860 --> 00:09:44.460
And when we put those numbers back in here.

156
00:09:44.470 --> 00:09:45.730
Put a 100 in here.

157
00:09:46.030 --> 00:09:53.020
98 90 86 in 84 right now I call cellaret.

158
00:09:53.090 --> 00:09:55.480
Well said array is over here.

159
00:09:57.790 --> 00:09:59.890
And it's got same idea right.

160
00:09:59.900 --> 00:10:02.600
It's got the A-R variable the size and the value.

161
00:10:02.620 --> 00:10:07.790
So it's got a r r It's got size and it's got value.

162
00:10:08.470 --> 00:10:11.560
Let's again assume that this is addressed 2000 right here.

163
00:10:11.560 --> 00:10:13.360
That's that name.

164
00:10:13.390 --> 00:10:19.510
So in this case I'm passing in the 2000 I'm passing and five for size and I'm passing the 100 for the

165
00:10:19.510 --> 00:10:24.610
value and then I'm looping and notice that loop every time in the loop this is what I'm doing right

166
00:10:24.610 --> 00:10:25.050
here.

167
00:10:25.060 --> 00:10:32.320
So the first time through I'm saying are Sub-Zero is value which is 100 is always going to be 100.

168
00:10:32.790 --> 00:10:35.290
Well where is your Sub-Zero.

169
00:10:35.340 --> 00:10:36.700
It's at 2000.

170
00:10:36.700 --> 00:10:43.060
So what I just did was I just came in here and put a 100 in here then I'm going to increment I and it

171
00:10:43.060 --> 00:10:45.880
becomes a r so one equals 100.

172
00:10:45.880 --> 00:10:47.220
So this guys over here.

173
00:10:47.230 --> 00:10:49.090
I just got rid of that one.

174
00:10:49.210 --> 00:10:55.120
And what I'm doing is I'm initializing the entire array to whatever value was passed in which is 100

175
00:10:55.120 --> 00:10:55.930
in this case.

176
00:10:57.470 --> 00:10:57.970
Right.

177
00:10:58.100 --> 00:11:02.190
When this function is finished it's gone.

178
00:11:02.660 --> 00:11:05.110
And what I'm left with is the updated array.

179
00:11:05.150 --> 00:11:10.590
So this will print out five 100s as you saw OK.

180
00:11:10.600 --> 00:11:14.120
So hopefully that makes sense it's really different from pass by volume.

181
00:11:14.320 --> 00:11:20.160
But when you think about it it is still doing pass by value because it's copying the value of 2000.

182
00:11:20.290 --> 00:11:21.120
Right.

183
00:11:21.160 --> 00:11:27.850
It's not copying the entire array but it's copying 2000 which is what my scores defaults to that's its

184
00:11:27.850 --> 00:11:28.700
value.

185
00:11:29.080 --> 00:11:29.410
All right.

186
00:11:29.410 --> 00:11:31.680
So one last thing.

187
00:11:32.050 --> 00:11:37.910
We really don't want to be able to change that array in the print array.

188
00:11:38.020 --> 00:11:40.500
Let's say that we did something like this.

189
00:11:40.720 --> 00:11:47.350
Something really silly we could say are our Sub-Zero is 10000 or you know what I see.

190
00:11:47.350 --> 00:11:50.750
Fifty thousand just so that we could really see the difference.

191
00:11:51.130 --> 00:11:53.390
This is probably a bug.

192
00:11:54.250 --> 00:11:58.390
A print functions don't tend to change anything they just display information.

193
00:11:58.420 --> 00:12:03.460
But let's just say that we've got some bug in our code now right here.

194
00:12:03.570 --> 00:12:12.940
I'll call it print or array again you know I'll call it exactly the same with my scores and five.

195
00:12:13.030 --> 00:12:14.710
So look what happened here.

196
00:12:14.800 --> 00:12:19.150
I called print to read here it printed out the five hundreds but then it changed.

197
00:12:19.150 --> 00:12:22.180
One of them the first one to 50000.

198
00:12:22.270 --> 00:12:23.700
And then I'm calling it again.

199
00:12:24.010 --> 00:12:26.890
So I'm expecting to see that first.

200
00:12:26.890 --> 00:12:33.430
There it is you see that first array element right there just get changed to 50000.

201
00:12:33.430 --> 00:12:34.930
How do I prevent that.

202
00:12:34.940 --> 00:12:40.720
Real easy way to prevent that is to come up to your printer re math function right here and say that

203
00:12:40.720 --> 00:12:48.430
this is a constant array and I can do the same thing in the definition.

204
00:12:48.460 --> 00:12:50.500
Now if you try to compile this.

205
00:12:50.770 --> 00:12:55.910
There's your assignment of read only location A-R.

206
00:12:56.170 --> 00:13:00.750
So in other words this function now print array cannot change array.

207
00:13:00.760 --> 00:13:01.920
That's really what we want.

208
00:13:02.140 --> 00:13:06.690
So we can comment that out and now overrun it just fine.

209
00:13:06.860 --> 00:13:09.420
You can't notice that's exactly what we want.

210
00:13:09.430 --> 00:13:16.000
So when you're writing functions and they're passing around objects especially arrays and vectors and

211
00:13:16.000 --> 00:13:21.640
things like that especially when we talk about pass by reference in the next section you've got to be

212
00:13:21.640 --> 00:13:26.940
really aware of what can change what and if you do have access to the actual.

213
00:13:27.020 --> 00:13:28.450
And you don't want to change it.

214
00:13:28.570 --> 00:13:30.130
Konst is the way to go.

215
00:13:30.370 --> 00:13:33.370
OK we'll talk more about that when we talk about pass by reference.
