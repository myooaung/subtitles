WEBVTT
1
00:00:05.710 --> 00:00:12.310
In this video we'll learn about C++ strings standard string as a class in the C plus plus standard template

2
00:00:12.310 --> 00:00:19.890
library or as T.L. we could do an entire course on GCSE and that course would be very long and complex.

3
00:00:19.900 --> 00:00:25.150
So in this video only talk about the major elements of the C plus plus string class in order to use

4
00:00:25.150 --> 00:00:29.770
C++ strings you must include the string header file.

5
00:00:29.770 --> 00:00:31.760
Strings are in the standard namespace.

6
00:00:31.810 --> 00:00:37.030
So in order to use them without using namespace standard you must prefix them with standard and the

7
00:00:37.030 --> 00:00:39.070
scope resolution operator.

8
00:00:39.070 --> 00:00:46.210
This is also true for the standard string methods that work with C++ strings like C-style strings C++

9
00:00:46.210 --> 00:00:48.760
strings are stored continuously in memory.

10
00:00:48.910 --> 00:00:55.600
However unlike C-style strings which are fixed in size C++ strings are dynamic and can grow and shrink

11
00:00:55.630 --> 00:01:02.470
as needed at runtime C++ strings work with the stream insertion and extraction operators just like most

12
00:01:02.470 --> 00:01:09.010
other types and C++ the C++ string class provides a rich set of methods or functions that allow us to

13
00:01:09.010 --> 00:01:11.110
manipulate strings easily.

14
00:01:11.110 --> 00:01:15.820
Chances are that if you need to do something with a string that functionality is already there for you

15
00:01:15.820 --> 00:01:21.550
without having to rewrite it from scratch C++ traits also work with most of the operators that were

16
00:01:21.550 --> 00:01:24.570
used to for assigning comparing and so forth.

17
00:01:24.580 --> 00:01:30.010
This is a huge advantage over C-style strings since C-style strings don't work well with those operators

18
00:01:30.550 --> 00:01:33.600
even though C++ strings are preferred in most cases.

19
00:01:33.730 --> 00:01:35.920
Sometimes you need to use C-style strings.

20
00:01:36.040 --> 00:01:39.890
Maybe you're interfacing with a library that's been optimized for C-style strings.

21
00:01:40.090 --> 00:01:44.920
Well in this use case you can still use C++ strings and take advantage of them and when you need to

22
00:01:44.920 --> 00:01:52.630
you can easily convert the C++ string into a C-style string and back again like vectors C++ strings

23
00:01:52.630 --> 00:01:57.460
are safer since they provide methods that can bounds check and allow you to find errors in your code

24
00:01:57.460 --> 00:02:00.960
so you can fix them before your program goes into production.

25
00:02:00.970 --> 00:02:06.760
Let's see how we can declare an initialized C++ strings in all the examples in this video.

26
00:02:06.760 --> 00:02:12.780
I'm assuming that the string header file has been included and that we're using the standard namespace.

27
00:02:12.820 --> 00:02:17.800
Here you can see six examples of declaration and initialization of C++ strings.

28
00:02:17.800 --> 00:02:23.230
There are other ways as well using constructor and assignment syntax but I'm mainly using the initializer

29
00:02:23.230 --> 00:02:27.900
syntax in this video in the first example we declare s one is a string.

30
00:02:27.910 --> 00:02:34.770
Notice that the string type is lowercase unlike C-style strings C++ strings are always initialized.

31
00:02:34.900 --> 00:02:38.450
In this case s one is initialized to an empty string.

32
00:02:38.710 --> 00:02:42.200
No garbage in memory to have to worry about in the second example.

33
00:02:42.310 --> 00:02:48.100
I'm declaring an initialising as to the string Frank noticed that Frank is a C-style literal.

34
00:02:48.190 --> 00:02:55.760
That's ok it will be converted to a C++ string in the third example S-3 is initialized from as to.

35
00:02:55.940 --> 00:03:02.510
So a copy of s to is created as two and three will both be frank but different francs in different areas

36
00:03:02.510 --> 00:03:05.380
of memory in the fourth example.

37
00:03:05.390 --> 00:03:11.420
I'm declaring an initializing S-4 from Frank but I'm only using the first three characters of the string

38
00:03:11.420 --> 00:03:12.020
Frank.

39
00:03:12.290 --> 00:03:14.930
So as for will be initialized to the string.

40
00:03:14.930 --> 00:03:21.910
F R A in the fifth example I'm initializing S-5 from S-3 which is Frank.

41
00:03:21.980 --> 00:03:25.740
But notice the two integers that follow the three in the initializer.

42
00:03:25.850 --> 00:03:29.770
The first integer is the starting index and the second is the length.

43
00:03:29.990 --> 00:03:36.530
So in this case we initialize S-5 with the two characters at index 0 and 1 from S 3.

44
00:03:36.740 --> 00:03:39.680
So S-5 will be initialized to f r.

45
00:03:39.680 --> 00:03:44.200
Finally we can initialize a string to a specific number of a specific character.

46
00:03:44.360 --> 00:03:46.520
In this case three x's.

47
00:03:46.550 --> 00:03:51.500
Note that this uses constructor syntax with the parentheses instead of the Curley's.

48
00:03:51.500 --> 00:03:58.370
Now that we've declared some strange That's how we can assign the values to them with C++ strings.

49
00:03:58.400 --> 00:04:00.490
You can use the assignment operator.

50
00:04:00.500 --> 00:04:05.300
This feels much more natural than having to use the string copy function like we would have to in C-style

51
00:04:05.300 --> 00:04:06.500
strings.

52
00:04:06.500 --> 00:04:10.040
In this example I've declared as one and it's empty.

53
00:04:10.040 --> 00:04:14.240
Then I can assign the C-style literal C++ rocks to s one.

54
00:04:14.480 --> 00:04:20.210
Pretty cool and pretty easy as one will grow dynamically as needed in the second example of declared

55
00:04:20.240 --> 00:04:22.800
as to an initialized the two hello.

56
00:04:23.270 --> 00:04:25.580
Then I assign s one to as to.

57
00:04:25.670 --> 00:04:32.310
In this case as to will no longer contain hello It will contain a copy of S1 C++ rocks.

58
00:04:32.720 --> 00:04:39.050
Let's see how we can concatenate strings together concatenation of strings just means building up a

59
00:04:39.050 --> 00:04:41.070
string from two other strings.

60
00:04:41.240 --> 00:04:45.580
We can use the plus operator to concatenate C++ strings.

61
00:04:45.770 --> 00:04:52.600
In this example I created two strings part 1 which is C++ and part 2 which is powerful.

62
00:04:52.700 --> 00:04:55.030
Then I have an empty string sentence.

63
00:04:55.040 --> 00:05:02.660
Notice that I'm assigning two sentences the concatenated result of part 1 plus a space plus part 2 plus

64
00:05:02.720 --> 00:05:05.240
a space plus language.

65
00:05:05.240 --> 00:05:11.030
If I displayed sentence now it would display C++ is a powerful language.

66
00:05:11.030 --> 00:05:14.410
Notice that the last example in the slide will not compile.

67
00:05:14.420 --> 00:05:20.750
This is because we have two C-style literals and you can't concatenate C-style literals.

68
00:05:20.750 --> 00:05:23.210
It only works with C++ strings.

69
00:05:23.390 --> 00:05:28.790
A combination of C++ strings and C-style strings is ok though as we saw in the previous assignments

70
00:05:30.220 --> 00:05:35.140
just like we did with vectors we can use the same operators to access string elements.

71
00:05:35.140 --> 00:05:40.210
In this case the elements of a string are characters so we can use the subscript operator as well as

72
00:05:40.210 --> 00:05:41.540
the method.

73
00:05:41.560 --> 00:05:44.290
Remember the method performs bounds checking.

74
00:05:44.410 --> 00:05:48.190
So if you go over bounds you'll get an exception which you can fix.

75
00:05:48.190 --> 00:05:55.090
Let's see how we can display screen characters one at a time in this example we have a string as one

76
00:05:55.090 --> 00:06:00.230
initialized to Frank we can use the range based for loop to display the string characters.

77
00:06:00.280 --> 00:06:07.030
In this case f r a and k and the null character will be displayed pretty much what you expected right.

78
00:06:07.030 --> 00:06:10.810
Notice that the type of the loop variable is char in this case.

79
00:06:10.810 --> 00:06:14.740
What do you think will happen if we change that to integer.

80
00:06:14.970 --> 00:06:17.010
In this case I've changed it to integer.

81
00:06:17.010 --> 00:06:18.850
Is this what you expected.

82
00:06:18.960 --> 00:06:22.880
We told the compiler to use an integer and that's exactly what it's doing.

83
00:06:22.890 --> 00:06:28.590
So instead of displaying the character value of each element in the string it's displaying the integer

84
00:06:28.590 --> 00:06:30.910
value that represents those characters.

85
00:06:31.080 --> 00:06:38.910
So in this case 70 114 97 110 1 0 7 and 0 which represent f r a and k.

86
00:06:38.910 --> 00:06:41.190
And of course the null character.

87
00:06:41.190 --> 00:06:43.770
These are the ASCII codes for those characters.

88
00:06:45.370 --> 00:06:49.290
Comparing C++ strings couldn't be any easier or more intuitive.

89
00:06:49.330 --> 00:06:53.230
We use the same equality and relational operators that we've been using all along.

90
00:06:54.060 --> 00:06:56.760
We're comparing two string objects so they'll be compared.

91
00:06:56.790 --> 00:07:01.390
Character by character and their character values will be compared lexically.

92
00:07:01.410 --> 00:07:07.630
So a capital A is less than a capital Z and a capital A is less than a lower case a.

93
00:07:07.830 --> 00:07:12.410
That's because the capital letters come before the lower case letters in the ASCII table.

94
00:07:12.450 --> 00:07:17.690
We can't use these operators on two C-style literals but we can use them in the following cases.

95
00:07:17.910 --> 00:07:25.350
If we have to see postponed strings if we have one C++ string and a C-style literal or if we have one

96
00:07:25.350 --> 00:07:28.480
C++ string and one C-style string.

97
00:07:28.620 --> 00:07:29.950
Let's see some examples.

98
00:07:30.730 --> 00:07:36.640
Here we're defining five C++ string variables as one through as five and then we perform some comparison

99
00:07:36.640 --> 00:07:38.650
operations and see the results.

100
00:07:38.650 --> 00:07:43.210
Of course you would normally use these boolean expressions in an IF statement or looping conditional

101
00:07:43.210 --> 00:07:45.600
expressions in the first example.

102
00:07:45.670 --> 00:07:48.600
We check to see if s one is equal to as 5.

103
00:07:48.640 --> 00:07:50.730
This is true since they both contain the string.

104
00:07:50.750 --> 00:07:57.130
Apple s s to is false since as one is Apple and as to his banana.

105
00:07:57.130 --> 00:07:59.800
How about s one not equal to as two.

106
00:07:59.830 --> 00:08:07.010
This is true since apples are not equal to banana in the case of s one less than as two.

107
00:08:07.010 --> 00:08:14.460
This is also true since Apple comes before banana lexically in the ASCII table as to greater than s

108
00:08:14.460 --> 00:08:18.950
one is also true since banana comes before Apple lexically.

109
00:08:18.950 --> 00:08:23.610
Notice that banana has an upper case B whereas Apple has a lowercase.

110
00:08:23.990 --> 00:08:29.390
As for less than S-5 asphalt since Apple with a lower case does not come before Apple with an upper

111
00:08:29.390 --> 00:08:30.800
case.

112
00:08:30.800 --> 00:08:35.000
And then finally a one equal Apple is true because they're the same.

113
00:08:35.090 --> 00:08:43.610
Notice in this case Apple is a C-style string literal the C++ string class has a rich set of very useful

114
00:08:43.610 --> 00:08:44.430
methods.

115
00:08:44.600 --> 00:08:47.120
Many methods to cover in detail in this video.

116
00:08:47.150 --> 00:08:52.520
I encourage you to study the C++ string class since it's going to be a class that you'll use often and

117
00:08:52.520 --> 00:08:57.550
it's important to know what it provides so you don't reinvent the wheel when you need to solve a problem.

118
00:08:57.800 --> 00:09:02.100
The substring method extracts a substring from a C++ string.

119
00:09:02.150 --> 00:09:03.420
It doesn't change the strain.

120
00:09:03.440 --> 00:09:05.290
It simply returns the substring.

121
00:09:05.390 --> 00:09:07.400
And you can do whatever you want with it.

122
00:09:07.490 --> 00:09:09.370
In this case I'm simply displaying it.

123
00:09:09.560 --> 00:09:12.440
But you could easily assign it to a string variable.

124
00:09:12.440 --> 00:09:14.910
Here I've initialized as one too.

125
00:09:14.930 --> 00:09:17.110
This is a string.

126
00:09:17.330 --> 00:09:24.050
The first example takes a substring of the string starting at index 0 and including exactly four characters.

127
00:09:24.050 --> 00:09:28.250
If there are less than four characters left in the original string then all the remaining characters

128
00:09:28.250 --> 00:09:32.000
are included in this case the substring is the first word in the string.

129
00:09:32.000 --> 00:09:39.340
This in the second example we returned the substring starting at index 5 and include two characters.

130
00:09:39.340 --> 00:09:42.040
That's the substring is yes.

131
00:09:42.430 --> 00:09:46.810
Finally the last example starts in index 10 and includes four characters.

132
00:09:46.810 --> 00:09:49.230
This will return the substring test.

133
00:09:49.750 --> 00:09:52.820
Let's see how we can search a string for another.

134
00:09:52.950 --> 00:09:59.230
The C++ string class has a very handy method named find find works with characters and strings.

135
00:09:59.230 --> 00:10:04.900
It expects a string or character and returns the index or position of the beginning of that string or

136
00:10:04.900 --> 00:10:06.870
character in the original string.

137
00:10:06.880 --> 00:10:09.240
So if you have a string as one that's initialized to.

138
00:10:09.240 --> 00:10:10.780
This is a test.

139
00:10:10.780 --> 00:10:18.470
And we want to find the string this we'd get back in zero since this starts and index 0 in the second

140
00:10:18.470 --> 00:10:24.800
example we're looking for the string is in this case it would return to since the first is starts at

141
00:10:24.800 --> 00:10:32.300
index 2 into 30 sample we're finding this string test and we get back a 10 in the fourth example we're

142
00:10:32.300 --> 00:10:39.110
searching for a single character the lowercase E which is found at index 11 in the example we use a

143
00:10:39.110 --> 00:10:43.780
variant of the method that also allows the index where you want to start to search from.

144
00:10:43.940 --> 00:10:49.140
In this case I want to find the is substring again but I want to start an index for.

145
00:10:49.160 --> 00:10:53.520
So this time it finds the is that's located at index 5.

146
00:10:53.540 --> 00:10:57.660
Finally what happens if the string or character we want to find just isn't there.

147
00:10:57.680 --> 00:11:04.930
Well in this case the method returns the end position which means no position information available.

148
00:11:04.990 --> 00:11:08.110
You can check for this value in an if statement and if true.

149
00:11:08.110 --> 00:11:10.640
You know what you were searching for wasn't there.

150
00:11:10.690 --> 00:11:12.790
Very easy very powerful.

151
00:11:12.790 --> 00:11:18.100
There's also an R find method that starts searching from the end of the stream to the beginning of the

152
00:11:18.100 --> 00:11:19.940
string.

153
00:11:19.960 --> 00:11:24.890
We can also remove characters from a C++ string using the erase and clear methods.

154
00:11:25.730 --> 00:11:31.190
For the erase method you provide the starting index and how many characters to delete the clear method

155
00:11:31.190 --> 00:11:34.840
deletes all the characters in the strings of the string becomes the empty string.

156
00:11:36.020 --> 00:11:40.550
We've seen a lot of string methods and you can see how powerful this class is let's look at one more

157
00:11:40.550 --> 00:11:44.010
useful method and one more useful OPERATOR They're commonly used.

158
00:11:44.030 --> 00:11:45.730
The method is the length method.

159
00:11:45.980 --> 00:11:49.900
It returns the number of characters currently in the string object.

160
00:11:50.030 --> 00:11:52.070
In this example as one is Frank.

161
00:11:52.220 --> 00:11:55.240
So it's one dot length will return to five.

162
00:11:55.250 --> 00:11:58.970
This is so easy and something that's impossible to do is see substrings.

163
00:11:59.090 --> 00:12:05.520
Since they don't contain size information the operator I want to cover is the compound concatenation

164
00:12:05.520 --> 00:12:06.880
assignment operator.

165
00:12:07.170 --> 00:12:12.300
In this case s one is Frank and I can say s one plus equals James.

166
00:12:12.810 --> 00:12:19.550
And James will be concatenated to Frank and the entire result string will be assigned back to s one.

167
00:12:19.560 --> 00:12:24.330
This is really handy and works very much the same way that the compound assignment operators worked

168
00:12:24.330 --> 00:12:27.420
with integers and doubles and so forth.

169
00:12:27.470 --> 00:12:33.270
There are also many more methods in the C++ string class for you to discover as you study C++.

170
00:12:33.710 --> 00:12:39.620
OK there's one more thing I'd like to talk about before we end this video input with C++ strings.

171
00:12:40.830 --> 00:12:44.380
C++ strings worked great with input and output streams.

172
00:12:44.730 --> 00:12:51.120
As you've seen inserting C++ variables to an output stream like C out is pretty easy and works just

173
00:12:51.120 --> 00:12:52.990
like we've been doing all along.

174
00:12:53.070 --> 00:12:59.900
Extracting a C++ tree from an input stream like C in also works the same way we expect.

175
00:12:59.910 --> 00:13:03.930
However there's one issue that's also true for C-style strings.

176
00:13:03.930 --> 00:13:10.350
Suppose we've defined as one as a C++ string and we extract a stream from C in as usual.

177
00:13:10.350 --> 00:13:13.710
Now suppose I type in Hello space there.

178
00:13:13.890 --> 00:13:17.020
When I display S1 I will only see Hello.

179
00:13:17.310 --> 00:13:19.710
There was not extracted.

180
00:13:19.770 --> 00:13:24.340
This is because the extraction operator stops when it sees whitespace.

181
00:13:24.420 --> 00:13:30.260
In many cases we want to read an entire line of text up to when the user presses enter.

182
00:13:30.270 --> 00:13:34.090
For example I want the stream to be hello there.

183
00:13:34.090 --> 00:13:36.380
Suppose I asked you to enter your full name.

184
00:13:36.400 --> 00:13:42.640
I want to be able to read William Smith not just William in this case we can use the getline function

185
00:13:43.080 --> 00:13:46.120
to getline function has a couple of variants.

186
00:13:46.120 --> 00:13:49.720
The first variant expects two elements inside the parentheses.

187
00:13:49.720 --> 00:13:52.170
The first element is the input stream.

188
00:13:52.210 --> 00:13:55.990
In this case we're using C in which defaults to the keyboard.

189
00:13:56.380 --> 00:14:01.560
The second element is the name of the C++ string where you want the text that the user enters.

190
00:14:01.600 --> 00:14:04.220
Stuart gets it very easy.

191
00:14:04.510 --> 00:14:08.620
In the example I'm saying get line c in S one.

192
00:14:08.830 --> 00:14:12.720
Now everything the user types is stored into s one.

193
00:14:12.990 --> 00:14:17.710
Getline stops reading when it sees the new line and doesn't include the newline in the string it just

194
00:14:17.710 --> 00:14:23.260
discards it the other variant of getline has another element in the parentheses.

195
00:14:23.260 --> 00:14:28.520
The first two are the same as before the input stream and the C++ string variable name.

196
00:14:28.570 --> 00:14:30.420
The third is called the delimiter.

197
00:14:30.430 --> 00:14:34.680
This is the character that you want getline to stop reading input at.

198
00:14:34.900 --> 00:14:39.700
So as long as the user doesn't enter this character everything will be stored in the string variable.

199
00:14:39.910 --> 00:14:45.820
Once the delimiter is seen it's not included in the stream variable and it's discarded in the last example.

200
00:14:45.820 --> 00:14:48.830
I'm using a lowercase X as the delimiter.

201
00:14:49.150 --> 00:14:56.820
So if I type this is X then the strings stored in s one will be this is and the X is discarded.

202
00:14:57.460 --> 00:15:01.800
Well we've covered a lot of material in this video and there is much more in the String class to learn

203
00:15:02.170 --> 00:15:07.090
but this gives you a good starting point so you can use the C++ string class effectively.

204
00:15:07.090 --> 00:15:12.400
Also you've now been introduced to object oriented programming with both vectors and strings.

205
00:15:12.400 --> 00:15:15.790
Pretty soon we'll be developing our own classes which is pretty cool.

206
00:15:16.090 --> 00:15:17.520
That completes this video.

207
00:15:17.590 --> 00:15:22.870
Please play with the string class create examples assigned to lead display and try out some of the methods

208
00:15:22.870 --> 00:15:23.860
in this video.

209
00:15:23.860 --> 00:15:27.670
It won't take long before you're really comfortable working with C++ strings.
