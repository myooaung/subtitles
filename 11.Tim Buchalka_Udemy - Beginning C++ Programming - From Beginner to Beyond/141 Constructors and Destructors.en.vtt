WEBVTT
1
00:00:05.330 --> 00:00:11.670
In this video we'll learn about constructors and destructors constructors are special member methods

2
00:00:11.670 --> 00:00:14.240
that are invoked during object creation.

3
00:00:14.340 --> 00:00:19.350
They're commonly used for initialization constructors are easy to recognize since they have the same

4
00:00:19.350 --> 00:00:20.700
name as the class.

5
00:00:20.790 --> 00:00:25.650
Constructors do not specify a return type and like other methods they can be overloaded.

6
00:00:25.650 --> 00:00:31.070
Let's see how we can declare constructors for the player class in the slide we have the player class

7
00:00:31.070 --> 00:00:36.160
that we've defined previously but we want to concentrate specifically on a constructors.

8
00:00:36.530 --> 00:00:42.490
In this example we have three overloaded constructors in the public section of the class declaration.

9
00:00:42.500 --> 00:00:47.240
Notice that the constructors have the same name as the class and they don't specify a return type.

10
00:00:48.130 --> 00:00:52.690
The first constructor is in no args constructor and expects no arguments.

11
00:00:52.840 --> 00:00:58.570
The second constructor expects a single standard string object as an argument and the third constructor

12
00:00:58.570 --> 00:00:59.980
expects three arguments.

13
00:00:59.980 --> 00:01:06.300
A standard string and two integers that represent health and Expwy overloading constructors is very

14
00:01:06.300 --> 00:01:08.080
common in C plus plus classes.

15
00:01:08.220 --> 00:01:12.320
It really gives you a lot of flexibility when initializing objects.

16
00:01:12.320 --> 00:01:14.750
Now let's see some constructors for the account class.

17
00:01:16.040 --> 00:01:19.390
In this slide we can see the declaration for the account class.

18
00:01:19.400 --> 00:01:23.790
Notice that we have 4 overloaded constructors in the public section of the class.

19
00:01:23.840 --> 00:01:26.870
The first constructor is the no args constructor.

20
00:01:26.870 --> 00:01:32.540
The second constructor expects two arguments a string representing the account name and a double representing

21
00:01:32.540 --> 00:01:34.160
the account balance.

22
00:01:34.160 --> 00:01:39.830
The third constructor Expo's just distrain and the last constructor just to double will get into much

23
00:01:39.830 --> 00:01:42.560
more detail about constructors in the next several videos.

24
00:01:42.740 --> 00:01:44.560
But let's see what a destructor is.

25
00:01:46.740 --> 00:01:51.000
Destructors are also special member methods that have the same name as the class.

26
00:01:51.000 --> 00:01:58.260
However destructors have a Tildy preceding their name destructors are invoked automatically by C++ when

27
00:01:58.260 --> 00:02:04.160
an object is destroyed and its a great place to release memory closed files and free up any other resources.

28
00:02:05.180 --> 00:02:11.710
It makes no sense to allow overloaded destructors since the destructor is called automatically by C++.

29
00:02:11.720 --> 00:02:15.950
If there were multiple destructors and C++ would have to determine which one to call.

30
00:02:16.010 --> 00:02:17.500
So that's not an option.

31
00:02:18.310 --> 00:02:25.320
So you can only specify one destructor per class and that destructor has no return type and no parameters.

32
00:02:26.330 --> 00:02:29.410
Let's see how a destructor would be declared for the player class.

33
00:02:30.530 --> 00:02:34.080
Here is the declaration for the player class as we've seen before.

34
00:02:34.090 --> 00:02:38.500
Notice that the last declaration is the declaration for the class destructor.

35
00:02:38.530 --> 00:02:42.110
It has the same name as the class and it's preceded by a Tildy.

36
00:02:42.160 --> 00:02:44.760
It has no return type and no parameters.

37
00:02:44.830 --> 00:02:49.070
This destructor will be called automatically when a local object goes out of scope.

38
00:02:49.270 --> 00:02:55.540
Or when we delete a pointer to an object as you would expect the destructor for the account class is

39
00:02:55.540 --> 00:02:59.730
declared exactly the same way except that the name is a count.

40
00:02:59.920 --> 00:03:03.140
So how and when are constructors and destructors called.

41
00:03:03.190 --> 00:03:08.040
Here's a very simple example in the code block we're creating for player objects.

42
00:03:08.140 --> 00:03:10.230
The first player object is called Slayer.

43
00:03:10.450 --> 00:03:16.780
Since no initialization information is provided the no args constructor is called the second player

44
00:03:16.780 --> 00:03:18.110
object is called Frank.

45
00:03:18.250 --> 00:03:22.110
And we're providing a string and two integers during initialization.

46
00:03:22.120 --> 00:03:27.640
This means that the constructor that expects a string into integers will be called the third and fourth

47
00:03:27.700 --> 00:03:32.590
objects will be initialized using the overloaded constructor that expects a single string object.

48
00:03:33.510 --> 00:03:37.600
Note that all of these objects are local objects and they'll be created on the stack.

49
00:03:37.800 --> 00:03:39.790
We can use them as we would any object.

50
00:03:40.110 --> 00:03:46.010
But then when the block ends these objects go out of scope and their destructors will be called automatically.

51
00:03:46.020 --> 00:03:50.970
So in this case all four destructors will be called and whatever code we provide in the destructors

52
00:03:50.970 --> 00:03:54.080
will be executed before the objects are destroyed.

53
00:03:55.140 --> 00:04:00.240
In the case of enemy we have a pointer to a player object and we use the constructor that expects a

54
00:04:00.240 --> 00:04:02.760
string and two integers to initialize it.

55
00:04:02.790 --> 00:04:05.680
We'll use it then when we're done we delete it.

56
00:04:05.700 --> 00:04:08.520
This will cause the enemy object's destructor.

57
00:04:08.520 --> 00:04:14.970
If you provide no constructors and no destructor C++ will automatically provide a default constructor

58
00:04:15.240 --> 00:04:18.140
and a default destructor that are empty.

59
00:04:18.150 --> 00:04:19.840
Ok so I'm backing the idea.

60
00:04:19.870 --> 00:04:26.460
I'm in the section 13 workspace in the constructors and destructors project what I've done here is I've

61
00:04:26.460 --> 00:04:32.340
taken the player class and I've written some constructors for it just like we did in the slides except

62
00:04:32.340 --> 00:04:35.950
I have implemented them and they really don't do any initialization.

63
00:04:35.970 --> 00:04:38.520
Learn how to do that properly in the next few videos.

64
00:04:38.520 --> 00:04:42.770
They simply do an output statement that say which constructor is being called.

65
00:04:42.780 --> 00:04:44.820
So let me show you what I've got going on here.

66
00:04:44.850 --> 00:04:50.610
We've got the player class just like we had before and we've got these private attributes here.

67
00:04:50.610 --> 00:04:53.320
Name health and XP again just like we had before.

68
00:04:53.340 --> 00:04:58.480
I've created a method right here called Set name that simply sets the name of the player to whatever

69
00:04:58.480 --> 00:05:00.660
is being passed in here named Val.

70
00:05:00.660 --> 00:05:04.960
The reason we're doing that is so that we can see which objects are being destroyed by name.

71
00:05:04.990 --> 00:05:06.770
It would be really easy to follow.

72
00:05:07.020 --> 00:05:12.090
Then we've got our three overloaded constructors here you can see that they've got the same name as

73
00:05:12.090 --> 00:05:14.370
the class that's their constructors.

74
00:05:14.490 --> 00:05:17.730
They're overloaded so we've got three of them with three different signatures.

75
00:05:17.730 --> 00:05:24.360
This first one will be called when there is no information provided for initialization and all it's

76
00:05:24.360 --> 00:05:26.400
going to do is just say no args constructor call.

77
00:05:26.400 --> 00:05:27.120
That's it.

78
00:05:27.120 --> 00:05:29.160
It's not going to do any initialization or anything.

79
00:05:29.160 --> 00:05:32.260
As I said we'll learn how to do that in the next few videos.

80
00:05:32.280 --> 00:05:37.550
This constructor expects a single string and it will just say string our constructor called.

81
00:05:37.830 --> 00:05:42.660
And then the last constructor expects a string to health and an XP and it will simply display three

82
00:05:42.690 --> 00:05:44.620
args constructor called ok.

83
00:05:44.790 --> 00:05:48.280
Then when the object is destroyed this destructor down here gets called.

84
00:05:48.330 --> 00:05:51.870
Notice it's the same name as the class with that Tildy right in front.

85
00:05:51.870 --> 00:05:52.950
That's very important.

86
00:05:52.950 --> 00:05:55.850
No return type and nothing in here.

87
00:05:56.370 --> 00:05:59.210
And that's simply going to say destructor called for name.

88
00:05:59.250 --> 00:06:02.400
So to say destructor called for hero for Frank for Slayer.

89
00:06:02.460 --> 00:06:06.810
Whatever the name of the object is that what we can see the order in which this stuff is happening.

90
00:06:07.100 --> 00:06:13.290
OK so that's it pretty straightforward and what I want to do now is I've got my main and I've got some

91
00:06:13.290 --> 00:06:14.830
breakpoints in here.

92
00:06:14.850 --> 00:06:16.960
I've established these blocks now.

93
00:06:17.040 --> 00:06:21.360
The idea behind these little blocks here is normally you wouldn't write code like this but it's important

94
00:06:21.360 --> 00:06:29.310
because this Slayer object right here is within the scope of this block so when it goes out of scope

95
00:06:29.400 --> 00:06:34.230
the destructor will be called automatically some forcing that issue here so that you can see how this

96
00:06:34.230 --> 00:06:35.040
works.

97
00:06:35.040 --> 00:06:37.930
So what I'm doing is that I'm doing the Slayer.

98
00:06:38.010 --> 00:06:42.900
I'm creating some other players and let's just debug this one walk through it so you can see exactly

99
00:06:42.900 --> 00:06:43.800
what's happening.

100
00:06:44.070 --> 00:06:45.590
So I'll start the debugger.

101
00:06:46.630 --> 00:06:52.590
And I'll put the output window over here in the right so that we can see our output OK.

102
00:06:52.600 --> 00:06:53.140
Perfect.

103
00:06:53.230 --> 00:06:59.350
So now we're on line 37 that's where we're starting and what we're doing is we're creating Slayer Slayer

104
00:06:59.350 --> 00:07:00.770
is a player object.

105
00:07:00.790 --> 00:07:03.920
It's local to this Bloch's going to be created on the stack.

106
00:07:04.390 --> 00:07:09.070
So I'm going to select next notice that I'm creating it with no information.

107
00:07:09.070 --> 00:07:12.150
So what's going to happen here is that no args constructor will be called.

108
00:07:12.160 --> 00:07:14.390
And that's what we expect to display up here.

109
00:07:14.510 --> 00:07:18.400
So let me scroll up a little bit here and let's do that let's go next.

110
00:07:18.400 --> 00:07:21.400
You can see the no args constructor just got called.

111
00:07:21.640 --> 00:07:23.950
That object has not been created.

112
00:07:23.980 --> 00:07:31.150
I want to set the name for that object to Slayer saw execute that line now that object goes out of scope

113
00:07:31.150 --> 00:07:32.610
we're done with this block.

114
00:07:32.740 --> 00:07:38.650
So the object needs to be destroyed since it's no longer needed the way that happens is that destructor

115
00:07:38.650 --> 00:07:41.020
will be called right before the object is destroyed.

116
00:07:41.140 --> 00:07:46.030
So I expect this destructor right here to be called and say destructor called for Slayer.

117
00:07:46.030 --> 00:07:52.060
So let's see that exactly what happened destructor call for Slayer.

118
00:07:52.060 --> 00:07:53.460
Now we've got another block here.

119
00:07:53.650 --> 00:07:59.070
And what we're doing here is we're creating three player objects Frank hero and villain.

120
00:07:59.410 --> 00:08:02.140
In the case of Frank it's no args constructor.

121
00:08:02.170 --> 00:08:07.420
Right I'm not providing any information in the place of hero it's a single string and in the case of

122
00:08:07.440 --> 00:08:09.580
villains I've got the string and the two integers.

123
00:08:09.580 --> 00:08:15.550
So I expect this to say that the no args constructor has been called then the single string constructor

124
00:08:15.550 --> 00:08:18.320
has been called and then the 3R constructor has been called.

125
00:08:18.430 --> 00:08:22.350
Ok but what's interesting about this is not so much that that's pretty intuitive.

126
00:08:22.540 --> 00:08:24.490
It's the way that the destructors are called.

127
00:08:24.490 --> 00:08:26.650
So let's walk through this little block here.

128
00:08:26.680 --> 00:08:32.890
So the first thing we expect is Frank to be created with no args and there it is no args constructor.

129
00:08:32.950 --> 00:08:38.170
I'm going to set the name to Frank here it will be called with a single string constructor.

130
00:08:38.500 --> 00:08:44.500
So you can see that that correct constructors being called here I've set the name to here and now villaine

131
00:08:44.500 --> 00:08:47.920
with the three args constructor.

132
00:08:48.170 --> 00:08:52.760
Now once I execute the set name method sets the name for a villain.

133
00:08:52.760 --> 00:08:57.790
We're out of the block right so these objects are not out of scope they need to be destroyed.

134
00:08:57.800 --> 00:09:03.410
What's interesting is Notice the order that we created them and we created them as Frank hero and the

135
00:09:03.410 --> 00:09:04.090
villain.

136
00:09:04.280 --> 00:09:07.490
And you'll see the order of destruction is the reverse order.

137
00:09:07.520 --> 00:09:09.710
So let's walk through this.

138
00:09:09.800 --> 00:09:12.310
We just called the destructor for a villain.

139
00:09:12.320 --> 00:09:14.680
Now we're going to call the destructor for hero.

140
00:09:14.840 --> 00:09:20.360
And finally for Frank so you could see that when objects go out of scope the destructors are called

141
00:09:20.360 --> 00:09:24.800
in the order in reverse order which they were created.

142
00:09:24.910 --> 00:09:29.490
Finally down here we've got some pointers to player objects in this case.

143
00:09:29.500 --> 00:09:31.400
Enemy is a new player.

144
00:09:31.450 --> 00:09:33.720
Again I'm providing no initialization here.

145
00:09:33.730 --> 00:09:38.120
So it's going to call the no args constructor so let's do that real quick.

146
00:09:38.410 --> 00:09:40.850
No args constructor call just like we expect.

147
00:09:40.960 --> 00:09:44.250
I'm going to set that name to enemy.

148
00:09:44.430 --> 00:09:49.710
Now here I've got a level boss object which is really I've got a level boss pointer rather to an object

149
00:09:50.250 --> 00:09:54.900
and I'm creating it using the three arg constructor right here the string and the two integers.

150
00:09:54.900 --> 00:09:58.170
So that's the constructor that I expect to be called.

151
00:09:58.340 --> 00:10:01.460
And that's exactly what happened is three args constructor called.

152
00:10:01.540 --> 00:10:04.130
I'm going to set that name to level boss.

153
00:10:04.160 --> 00:10:07.910
Now I want to delete those objects that were created dynamically on the heap.

154
00:10:08.060 --> 00:10:12.710
In this case I can explicitly delete them and the destructors will be called.

155
00:10:12.710 --> 00:10:18.920
So in this case we expect the enemy destructor to be called and then the level boss destructor would

156
00:10:18.920 --> 00:10:21.350
be called to that's it.

157
00:10:21.350 --> 00:10:26.120
In the next video what we'll do is we'll learn about default constructors and we'll learn how to really

158
00:10:26.120 --> 00:10:28.510
initialize things correctly and efficiently.
