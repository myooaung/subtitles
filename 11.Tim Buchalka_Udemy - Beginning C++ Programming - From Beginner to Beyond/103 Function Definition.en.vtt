WEBVTT
1
00:00:05.360 --> 00:00:12.130
In this video we're learning how to define our own functions function definitions have four main parts.

2
00:00:12.260 --> 00:00:14.810
We'll look at the syntax of functions and the next slide.

3
00:00:14.930 --> 00:00:17.570
But for now let's look at what these parts are.

4
00:00:17.630 --> 00:00:22.880
The function has to have a name the name of the function follows the same rules we use for naming variables

5
00:00:23.630 --> 00:00:27.760
function names should be meaningful and provide the reader the intent of the function.

6
00:00:27.770 --> 00:00:34.040
For example a function called func one and another function called func to maybe OK when teaching functions

7
00:00:34.040 --> 00:00:34.980
in my slides.

8
00:00:35.120 --> 00:00:39.830
But what if I read some production code with function names like that I'd have no idea what these functions

9
00:00:39.830 --> 00:00:43.900
are doing based on those names functions perform operations.

10
00:00:43.970 --> 00:00:47.390
So usually you see function names as verb or verb phrases.

11
00:00:47.390 --> 00:00:53.120
This is it always the case but it's a good habit to get into the second part of a function is the parameter

12
00:00:53.120 --> 00:00:53.750
list.

13
00:00:53.780 --> 00:00:57.650
This is the list of variables that the function expects from you when you call it.

14
00:00:57.710 --> 00:01:02.780
For example if you're calling a function that adds to integers then the two integers are in the parameter

15
00:01:02.780 --> 00:01:03.680
list.

16
00:01:03.680 --> 00:01:06.310
Sometimes functions don't need any parameters at all.

17
00:01:06.320 --> 00:01:11.090
Suppose I have a function that simply displays hello or a function that returns a system time.

18
00:01:11.090 --> 00:01:17.480
To me these functions can be called with an empty parameter list of functions have the ability to return

19
00:01:17.480 --> 00:01:22.880
information to the caller of the function in order to return information we must specify the type of

20
00:01:23.040 --> 00:01:24.010
information.

21
00:01:24.080 --> 00:01:27.800
So I might return a boolean or an integer or a double or a string.

22
00:01:27.800 --> 00:01:30.530
Also it's possible that a function returns nothing.

23
00:01:30.530 --> 00:01:35.420
For example if I need a function to just display Hello I really don't expect anything back from that

24
00:01:35.420 --> 00:01:36.210
function.

25
00:01:36.290 --> 00:01:40.250
In this case we say that the return type is the keyword void.

26
00:01:40.460 --> 00:01:42.400
Finally functions have bodies.

27
00:01:42.410 --> 00:01:46.200
These are statements to be executed and they're enclosed in curly braces.

28
00:01:46.220 --> 00:01:49.170
You've already seen an example of this in the main function.

29
00:01:49.310 --> 00:01:52.470
So as you can see a function definition is pretty logical.

30
00:01:52.490 --> 00:01:56.450
The name of the function where it expects what it returns and what it does.

31
00:01:56.750 --> 00:02:01.930
Let's see how this looks in C++ syntax.

32
00:02:02.030 --> 00:02:04.340
Here we have a simple function definition.

33
00:02:04.340 --> 00:02:09.830
Notice the name of the function is function underscore name and after the function name we have open

34
00:02:09.830 --> 00:02:11.390
and closed parentheses.

35
00:02:11.450 --> 00:02:13.850
In this case this function expects no parameters.

36
00:02:13.910 --> 00:02:16.440
So there's nothing inside the parentheses.

37
00:02:16.790 --> 00:02:18.530
This function returns an integer.

38
00:02:18.560 --> 00:02:23.820
We specify that by providing the type of the return value before the function name.

39
00:02:23.840 --> 00:02:28.700
Finally we have the body of the function which consists of statements inside curly braces.

40
00:02:28.760 --> 00:02:32.970
You can see that this is the same syntax as we've used in our main function.

41
00:02:32.990 --> 00:02:35.450
Of course we can have functions that return nothing.

42
00:02:35.450 --> 00:02:37.730
Expect many parameters and so forth.

43
00:02:37.760 --> 00:02:41.810
The syntax for all of them is very regular and exactly what you would expect.

44
00:02:41.810 --> 00:02:42.670
Let's see another one.

45
00:02:44.840 --> 00:02:48.110
In this case we have the same function named function name.

46
00:02:48.110 --> 00:02:50.870
But this time it expects exactly one parameter.

47
00:02:51.020 --> 00:02:57.600
That parameter is an integer type and it's available for us to use in the body of the function.

48
00:02:57.660 --> 00:03:01.290
In this example we have a function that returns nothing when called.

49
00:03:01.290 --> 00:03:05.100
In this case we provide the key word void before the function name.

50
00:03:05.100 --> 00:03:11.460
This tells the compiler that there is no return type with void functions we can still have simple return

51
00:03:11.460 --> 00:03:16.420
statements in the body of the function but they're totally optional and not often written.

52
00:03:16.560 --> 00:03:21.210
If there is no return statement it's understood that the function returns after the last statement is

53
00:03:21.210 --> 00:03:22.180
executed.

54
00:03:22.200 --> 00:03:23.720
Pretty simple syntax.

55
00:03:23.910 --> 00:03:31.150
Let's look at one more in this example we see a function definition for function name that expects multiple

56
00:03:31.150 --> 00:03:32.150
parameters.

57
00:03:32.200 --> 00:03:38.890
In this case the function expects two parameters an integer and a standard string when the function

58
00:03:38.890 --> 00:03:39.650
is called.

59
00:03:39.700 --> 00:03:45.260
These two parameters must be provided as arguments in the same order as specified in the parameter list.

60
00:03:48.220 --> 00:03:51.510
Suppose we're going to write a function that displays hello followed by an end line.

61
00:03:51.520 --> 00:03:57.320
Every time it's call we could easily define that function as follows the function name is say hello.

62
00:03:57.490 --> 00:04:01.660
It expects no parameters and returns nothing in the body of the function.

63
00:04:01.660 --> 00:04:04.680
We have an output statement that just displays Hello.

64
00:04:05.050 --> 00:04:12.200
Notice that in this case there is no return statement required since the function doesn't return anything.

65
00:04:12.340 --> 00:04:18.240
Once the say hello function is defined we can call it from Main or from any other function.

66
00:04:18.250 --> 00:04:23.470
In this example you see the function say hello defined above and you also see that it's being called

67
00:04:23.470 --> 00:04:25.350
by the main function below.

68
00:04:25.360 --> 00:04:29.470
This program will display Hello.

69
00:04:29.530 --> 00:04:34.570
In this example we're calling to say hello function ten times inside a for loop and the main function

70
00:04:35.140 --> 00:04:38.060
will display Hello 10 times once per line.

71
00:04:40.830 --> 00:04:46.680
Of course we can define as many functions as we need in our applications to help modularize our program.

72
00:04:46.680 --> 00:04:49.620
In this case I'm defining three functions say world.

73
00:04:49.620 --> 00:04:51.600
Say hello and Main.

74
00:04:51.600 --> 00:04:54.350
Execution always begins with the main function.

75
00:04:54.360 --> 00:04:56.620
So in this case main calls say hello.

76
00:04:56.730 --> 00:05:03.950
So we execute say hello and we display hello to the console but then say hello calls say world and we

77
00:05:03.960 --> 00:05:05.230
display world.

78
00:05:05.340 --> 00:05:08.210
So this program displays Hello World to the console.

79
00:05:12.110 --> 00:05:15.640
Here's the same example with some other output statement sprinkled in.

80
00:05:16.010 --> 00:05:18.910
Again execution always begins with the main function.

81
00:05:18.920 --> 00:05:21.320
So in this case main calls say hello.

82
00:05:21.350 --> 00:05:22.930
So we execute say hello.

83
00:05:23.000 --> 00:05:28.310
Remember that when say hello is finished we need to complete the code in main So we display hello to

84
00:05:28.310 --> 00:05:30.430
the console then say hello calls.

85
00:05:30.440 --> 00:05:31.350
Say world.

86
00:05:31.610 --> 00:05:34.840
And when say world is done we complete the code and say hello.

87
00:05:35.120 --> 00:05:40.190
So we execute SeaWorld and it displays word to the console followed by by from say world.

88
00:05:40.190 --> 00:05:44.790
Then we go back to where we left off and say hello and execute by from say hello.

89
00:05:45.110 --> 00:05:50.410
Then we go back to where we left off and main and execute by remain in our program terminates.

90
00:05:50.420 --> 00:05:56.710
You can walk through this code you'll see exactly what's happening there is one caveat about function

91
00:05:56.710 --> 00:05:57.820
definitions.

92
00:05:58.030 --> 00:06:04.540
The compiler must know the function details that is the function name the parameters and so forth before

93
00:06:04.540 --> 00:06:06.480
the function is called.

94
00:06:06.490 --> 00:06:08.350
So look at the simple example.

95
00:06:08.350 --> 00:06:14.190
I'm calling say hello in main but the compiler hasn't seen the definition of say hello yet.

96
00:06:14.770 --> 00:06:20.530
In this case you'll get a compiler error telling you that say hello has not been declared in this scope.

97
00:06:20.620 --> 00:06:24.510
We'll talk about how to solve this issue with function prototypes in the next video.

98
00:06:24.610 --> 00:06:28.550
But before we do that let's head over to the idea and write a few functions.

99
00:06:30.020 --> 00:06:31.570
Ok so I mean the ID.

100
00:06:31.760 --> 00:06:36.410
I mean the section 11 workspace in the function definitions project.

101
00:06:36.890 --> 00:06:41.420
What I want to do here is I want to write a program that calculates the area of a circle and the volume

102
00:06:41.420 --> 00:06:42.580
of a cylinder.

103
00:06:42.590 --> 00:06:44.620
Pretty easy calculations.

104
00:06:44.690 --> 00:06:47.580
But I want to break everything up into functions that we define.

105
00:06:47.600 --> 00:06:49.910
We create our own user defined functions.

106
00:06:49.910 --> 00:06:55.610
And this is what I want my main to look like to simple function calls area of the circle volume of the

107
00:06:55.610 --> 00:06:56.270
cylinder.

108
00:06:56.270 --> 00:06:57.140
That's it.

109
00:06:57.140 --> 00:07:01.280
Now within those functions we can prompt the user Trenche of the radius the height whatever else we

110
00:07:01.280 --> 00:07:01.740
need.

111
00:07:01.950 --> 00:07:02.440
OK.

112
00:07:02.540 --> 00:07:07.540
So let's get started let's write that area circle function first.

113
00:07:07.550 --> 00:07:12.200
Now in this case I don't want to pass anything into the function or return anything from the function.

114
00:07:12.200 --> 00:07:16.340
This function is simply going to ask the user to cut it to enter the radius of the circle.

115
00:07:16.400 --> 00:07:21.620
It's going to call another function that will actually calculate the area and it will print the result.

116
00:07:21.890 --> 00:07:23.620
OK so let's write that function.

117
00:07:23.720 --> 00:07:29.410
We'll start with voyde since it returns nothing and the name of the function is area of the circle.

118
00:07:30.500 --> 00:07:31.070
That's it.

119
00:07:31.100 --> 00:07:31.820
Simple as that.

120
00:07:31.820 --> 00:07:35.870
Nothing in the parameter list right now because we're not passing anything in as you can see here in

121
00:07:35.870 --> 00:07:36.590
the call.

122
00:07:36.890 --> 00:07:37.880
OK so what do we need.

123
00:07:37.880 --> 00:07:40.600
What we need to ask the user for the radius of the circle right.

124
00:07:40.610 --> 00:07:48.410
So we need a variable here and we'll just call it radius and double is perfect we'll initialize it to

125
00:07:48.410 --> 00:07:49.080
zero.

126
00:07:49.370 --> 00:07:54.060
And most say it will prompt the user will put a new line at the beginning.

127
00:07:54.140 --> 00:07:58.110
Well just say enter the radius of the circle

128
00:08:01.500 --> 00:08:07.350
that's it and we'll read the input into the variable we just created.

129
00:08:07.420 --> 00:08:09.560
You can see this pattern happening over and over again.

130
00:08:09.570 --> 00:08:10.730
It's pretty standard.

131
00:08:11.070 --> 00:08:11.400
OK.

132
00:08:11.400 --> 00:08:12.520
Now what do I want to do.

133
00:08:12.650 --> 00:08:18.810
Well now I want to call another function that actually calculates the area that function again you remember

134
00:08:18.810 --> 00:08:21.410
the area for a circle is pi squared.

135
00:08:21.660 --> 00:08:26.100
That function needs to know the radius in order to calculate the area.

136
00:08:26.100 --> 00:08:28.330
Let's write the function call first.

137
00:08:28.350 --> 00:08:33.270
We'll say something like C out and we'll do something like.

138
00:08:33.270 --> 00:08:45.660
Again the area of a circle with radius whatever they typed in which was radius in this case and then

139
00:08:45.660 --> 00:08:50.770
we'll say is now what do we do.

140
00:08:50.820 --> 00:08:55.650
Now we need to call a function that actually calculates that area gives me back the double that I can

141
00:08:55.650 --> 00:08:56.860
display here.

142
00:08:57.090 --> 00:09:06.900
So let's call that function Kelk area circle and that function expects the radius.

143
00:09:06.900 --> 00:09:07.350
Right.

144
00:09:07.550 --> 00:09:10.850
And it will produce a new line at the end.

145
00:09:12.240 --> 00:09:13.830
And really that's it for this function.

146
00:09:13.830 --> 00:09:15.530
We clean that space up right here.

147
00:09:15.640 --> 00:09:15.960
Right.

148
00:09:15.990 --> 00:09:19.590
So now we need to write the other function this function right here.

149
00:09:19.620 --> 00:09:21.510
Area of the circle.

150
00:09:21.510 --> 00:09:24.560
Obviously we need to return something from that function right.

151
00:09:24.610 --> 00:09:29.010
The function is calculating the area so it needs to return something to me so that I can display it

152
00:09:29.010 --> 00:09:29.600
here.

153
00:09:29.610 --> 00:09:34.270
So in this case I want to return a double let's call it Calgarian circle.

154
00:09:34.560 --> 00:09:39.780
And what does it expect it expects the radius which is a double

155
00:09:42.990 --> 00:09:45.600
What does it do now it just returns pi are squared right.

156
00:09:45.600 --> 00:09:46.450
Simple as that.

157
00:09:46.620 --> 00:09:55.050
But we haven't defined PI let's define it up here we'll say Konst double PI and we'll set it to three

158
00:09:55.050 --> 00:09:57.350
point 1 4 1 5 9.

159
00:09:57.360 --> 00:09:59.830
That's close enough for this example.

160
00:10:00.480 --> 00:10:04.730
So there's my pieds constant which is what we want we don't want to be changing pi.

161
00:10:05.310 --> 00:10:14.820
And in the function body here all we need to do really is to say return pi times the radius squared.

162
00:10:15.290 --> 00:10:21.350
We could use the power function or we could just say radius times radius which is what I'll do right

163
00:10:21.350 --> 00:10:22.810
here.

164
00:10:22.940 --> 00:10:23.740
That's it.

165
00:10:23.780 --> 00:10:24.560
That should do it.

166
00:10:24.560 --> 00:10:25.400
Let's walk through this.

167
00:10:25.410 --> 00:10:30.290
We call area the circle transfers control over to this function.

168
00:10:30.370 --> 00:10:34.930
We have a radius variable right here we're asking the user to enter the radius of the circle.

169
00:10:34.930 --> 00:10:39.150
We're reading it and then we're passing that value into this function.

170
00:10:39.310 --> 00:10:43.750
Calculate the area of the circle and it's going to calculate the area of the circle and return that

171
00:10:43.750 --> 00:10:46.720
value back to me which I'm going to print right in here.

172
00:10:46.750 --> 00:10:49.870
Now I could store that into a variable or do anything I want with it.

173
00:10:49.870 --> 00:10:50.340
Right.

174
00:10:50.530 --> 00:10:54.800
So let's run this and test it out.

175
00:10:55.370 --> 00:10:58.780
Whoops I mean come at top volume of the cylinder because we haven't written that one yet.

176
00:10:58.780 --> 00:10:59.420
That's the next one.

177
00:10:59.440 --> 00:10:59.990
Right.

178
00:11:00.160 --> 00:11:03.110
So the radius of the circle 2.5.

179
00:11:03.430 --> 00:11:08.120
It says here the area of a circle with radius twelve point five is for ninety point seventy three.

180
00:11:08.260 --> 00:11:08.600
OK.

181
00:11:08.620 --> 00:11:11.940
Obviously we'd want to test that to be sure that that's correct.

182
00:11:12.460 --> 00:11:14.110
And that's pretty much it.

183
00:11:14.110 --> 00:11:14.480
Right.

184
00:11:14.500 --> 00:11:15.610
Pretty straightforward.

185
00:11:15.610 --> 00:11:18.570
Now let's write this one right here the volume of a cylinder.

186
00:11:19.120 --> 00:11:21.460
Well how do you calculate the volume of a cylinder.

187
00:11:21.700 --> 00:11:26.510
Well the volume of a cylinder is pi r squared times the height of the cylinder right.

188
00:11:26.620 --> 00:11:31.290
And I'm not using any units he can think of this as inches or centimeters or meters wherever you like.

189
00:11:31.290 --> 00:11:32.640
It doesn't really matter too much.

190
00:11:32.890 --> 00:11:37.150
So we need to write this volume cylinder function.

191
00:11:37.150 --> 00:11:40.060
This is going to be very similar to the area circle function right.

192
00:11:40.060 --> 00:11:44.320
Is this going to prompt the user for some information and this case is going to prompt the user for

193
00:11:44.320 --> 00:11:46.960
the radius of the cylinder and the height of the cylinder.

194
00:11:47.020 --> 00:11:53.730
So let's write it will say void volume of a cylinder.

195
00:11:53.980 --> 00:11:57.460
And the reason that that's popping up in the completion is because they had that in there before and

196
00:11:57.460 --> 00:12:00.010
I guess it remembered which is kind of handy.

197
00:12:00.010 --> 00:12:00.220
All right.

198
00:12:00.220 --> 00:12:02.550
So we need the radius of the cylinder.

199
00:12:03.880 --> 00:12:05.860
It will initialize that to zero.

200
00:12:05.860 --> 00:12:11.750
And we also need the height of the cylinder wall initialized to zero as well.

201
00:12:11.860 --> 00:12:19.390
So let's ask the user to just cut and copy and paste this to save a little typing time.

202
00:12:19.420 --> 00:12:23.470
So what is the radius of the cylinder in this case.

203
00:12:24.190 --> 00:12:26.020
And we'll read that into radius

204
00:12:28.970 --> 00:12:29.600
perfect.

205
00:12:29.650 --> 00:12:33.110
And then what would you hear is we'll copy these guys as well.

206
00:12:36.580 --> 00:12:38.900
And we'll ask them for the height of the cylinder

207
00:12:41.950 --> 00:12:45.460
into the height of the cylinder will read that into the height variable.

208
00:12:45.480 --> 00:12:47.240
So now we've got everything we need.

209
00:12:47.250 --> 00:12:48.440
So what do we do now.

210
00:12:48.750 --> 00:12:50.910
Well let's do the put statement right.

211
00:12:50.910 --> 00:13:00.030
We'll say see out and we'll say the volume of a cylinder with radius

212
00:13:03.000 --> 00:13:08.030
and will provide the radius value here and then will say something like.

213
00:13:08.040 --> 00:13:14.720
And height and will put the height here.

214
00:13:15.110 --> 00:13:21.920
And finally we'll just say just like before is now we need to call a function which you haven't written

215
00:13:21.920 --> 00:13:22.070
yet.

216
00:13:22.070 --> 00:13:22.370
Right.

217
00:13:22.370 --> 00:13:29.910
So let's call it calque volume of the cylinder will write that function in a minute.

218
00:13:29.910 --> 00:13:35.750
Now what do we pass into it when we need to pass in the radius and the height doesn't matter what order

219
00:13:35.750 --> 00:13:36.390
you put it in.

220
00:13:36.380 --> 00:13:38.330
But that's the way you have to provide the variables.

221
00:13:38.330 --> 00:13:41.630
I could have set height radius and just sent in the correct ones.

222
00:13:41.630 --> 00:13:46.000
So in this case I'm going to write that's what expects a radius first and then the height and then we'll

223
00:13:46.010 --> 00:13:49.290
print a new line at the end and that'll be it.

224
00:13:50.800 --> 00:13:51.360
OK.

225
00:13:51.500 --> 00:13:53.770
So that's where we're at with this function.

226
00:13:53.780 --> 00:13:58.440
It's finished now so we've cleaned up some of the space right here.

227
00:13:58.550 --> 00:14:02.120
Now what we need to do is write that function cap volume cylinder.

228
00:14:02.120 --> 00:14:05.370
So let's do that and we'll do it right here.

229
00:14:05.660 --> 00:14:11.810
We'll say I sure will do it a couple of minds up right under the other calculation right here.

230
00:14:11.870 --> 00:14:17.850
So we'll say double because it returns a double calc volume of the cylinder.

231
00:14:18.050 --> 00:14:26.280
It expects the radius which is a double and it expects the height which is also a double.

232
00:14:27.040 --> 00:14:27.290
Right.

233
00:14:27.290 --> 00:14:29.760
So in this case what do we do we return.

234
00:14:30.170 --> 00:14:34.070
PI radius squared

235
00:14:36.950 --> 00:14:42.170
times the height and that gives the volume of the cylinder.

236
00:14:42.680 --> 00:14:44.510
That should do it.

237
00:14:44.960 --> 00:14:47.660
Calling volume Szilard announcer would do it two times.

238
00:14:47.660 --> 00:14:49.840
Now we get the area of the circle What's that say.

239
00:14:49.880 --> 00:14:53.560
Again this is say 10 and that's correct.

240
00:14:53.570 --> 00:14:56.240
That's what we expect right pi times 100.

241
00:14:56.240 --> 00:15:00.650
So what's the radius of the cylinder this time want to say it's twelve point one.

242
00:15:00.650 --> 00:15:01.520
And what's the height.

243
00:15:01.540 --> 00:15:04.890
Say it's a really tall cylinder twenty five point two.

244
00:15:05.390 --> 00:15:10.550
So the volume of the cylinder with radius twelve point one in height twenty five point two is eleven

245
00:15:10.640 --> 00:15:11.530
91.

246
00:15:11.570 --> 00:15:15.070
We just need to put a little space after it is there.

247
00:15:15.090 --> 00:15:17.840
Cannot is one thing that we could do to make this a little better.

248
00:15:17.840 --> 00:15:22.130
You'll notice that this calculation right here Pyaar squared.

249
00:15:22.130 --> 00:15:23.900
We're doing it again right here.

250
00:15:24.110 --> 00:15:29.590
So what we could do is we could refactor this code just sort a little better and we could say return

251
00:15:31.210 --> 00:15:37.070
and we can do we can calculate the area of the circle and pass in the radius to it and then multiply

252
00:15:37.070 --> 00:15:41.580
that by the height that we were reducing that function.

253
00:15:41.600 --> 00:15:48.440
So hopefully you can see what's going on here cap the volume of a cylinder is the areas the area of

254
00:15:48.440 --> 00:15:50.290
the circle times its height.

255
00:15:50.330 --> 00:15:53.420
So we may as well just call that function to do it for us.

256
00:15:53.420 --> 00:15:55.780
You can see the repeated code.

257
00:15:55.870 --> 00:15:56.210
OK.

258
00:15:56.210 --> 00:15:58.410
So there you go that's it we've created.

259
00:15:58.400 --> 00:16:01.270
And let me run that again just to be sure that we're working correctly.

260
00:16:01.550 --> 00:16:02.530
See twelve point one.

261
00:16:02.530 --> 00:16:05.170
So what's the radius of the cylinder ten point two.

262
00:16:05.510 --> 00:16:08.160
And let's say it's thirty point one.

263
00:16:08.450 --> 00:16:09.440
And there we go.

264
00:16:11.560 --> 00:16:12.370
OK so that's it.

265
00:16:12.370 --> 00:16:14.710
You can see how really straightforward it is.

266
00:16:14.710 --> 00:16:17.920
And the nice thing about this is when you read your code you can see your main.

267
00:16:17.920 --> 00:16:22.440
It's really easy to follow right before in our main We had all of this stuff in there.

268
00:16:22.450 --> 00:16:24.160
Now we're just seeing area of the circle.

269
00:16:24.160 --> 00:16:24.860
OK.

270
00:16:24.910 --> 00:16:29.920
And remember that Macaulay's as many times as I want in this case it's going to ask me two times that

271
00:16:29.920 --> 00:16:31.890
I could put them in loops I can do anything I want.

272
00:16:31.900 --> 00:16:34.620
So what's the radius of a circle ten point one.

273
00:16:34.970 --> 00:16:35.810
OK.

274
00:16:35.830 --> 00:16:38.010
It's asking me again as I called it again.

275
00:16:38.020 --> 00:16:42.970
Ten point two this time that it goes to the radius of the cylinder.

276
00:16:44.330 --> 00:16:46.830
OK so let's finish this off this video.

277
00:16:46.870 --> 00:16:50.650
You can see how easy it is to create these user defined functions.

278
00:16:50.650 --> 00:16:51.850
And this is really what you want.

279
00:16:51.850 --> 00:16:57.670
You want your program to be modularized and have these small well-defined units that do what you'd want

280
00:16:57.670 --> 00:16:59.980
it to do and just do one thing really really well.
