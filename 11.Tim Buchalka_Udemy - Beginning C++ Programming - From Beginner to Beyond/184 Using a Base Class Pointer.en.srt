1
00:00:05,500 --> 00:00:12,040
We've already seen that in order for the C++ compiler to use dynamic binding of method calls we must

2
00:00:12,040 --> 00:00:14,230
have an inheritance hierarchy.

3
00:00:14,230 --> 00:00:20,410
We must be using a base class pointer or a base class reference and we must declare the methods we want

4
00:00:20,410 --> 00:00:22,950
dynamically bound is virtual.

5
00:00:23,260 --> 00:00:29,170
In this video we'll look at the base pointer requirement and see why it's so useful and so powerful.

6
00:00:31,740 --> 00:00:35,950
We'll use the account class hierarchy on the right side of the slide as our example.

7
00:00:36,510 --> 00:00:41,380
Let's also assume that this class hierarchy is now using dynamic polymorphism.

8
00:00:41,460 --> 00:00:43,810
We're learning how to do that in this section of the course.

9
00:00:43,830 --> 00:00:48,390
For now let's just concentrate on the effects and the power it gives us.

10
00:00:48,390 --> 00:00:54,600
So we'll create four pointers to account objects and we'll initialize each one to a different type of

11
00:00:54,600 --> 00:00:56,940
account created on the heap.

12
00:00:56,940 --> 00:01:00,870
So as you can see P1 holds the address of an account object.

13
00:01:00,870 --> 00:01:04,000
P2 holds the address of a savings account object.

14
00:01:03,990 --> 00:01:10,820
P3 holds the address of a checking account object and P4 holds the address of a trust account object.

15
00:01:11,010 --> 00:01:15,950
We've already seen that this is valid semantically since there are all accounts due to the public is

16
00:01:15,940 --> 00:01:17,920
a inheritance we're using.

17
00:01:18,420 --> 00:01:24,720
Now we can call the withdraw method using the base class pointers and C++ will figure out which method

18
00:01:24,720 --> 00:01:30,450
to bind at runtime based on the type of the object being pointed to by each pointer.

19
00:01:30,450 --> 00:01:31,690
This is pretty cool.

20
00:01:31,710 --> 00:01:33,240
There's nothing else you need to do.

21
00:01:33,240 --> 00:01:38,610
Once the hierarchy is set up of course we need to delete the storage allocated by the point is when

22
00:01:38,610 --> 00:01:40,080
we're done with them.

23
00:01:40,080 --> 00:01:44,420
OK so now let's see a more compelling use case for using base class pointers.

24
00:01:47,160 --> 00:01:52,860
In this case we have the same four pointers we created in the previous slide but I've declared an array

25
00:01:52,890 --> 00:01:55,860
that holds pointers to account objects.

26
00:01:55,860 --> 00:01:58,440
These will be the base class pointers.

27
00:01:58,450 --> 00:02:03,330
I then initialize the array to hold the four pointers we declared previously.

28
00:02:03,330 --> 00:02:08,670
Now I can simply loop through the array and call the withdraw method for each element in the array and

29
00:02:08,670 --> 00:02:13,740
the correct withdraw method will be called based on the type of the object that each pointer points

30
00:02:13,740 --> 00:02:14,940
to.

31
00:02:14,940 --> 00:02:16,810
You can see how powerful this is.

32
00:02:16,980 --> 00:02:21,810
It doesn't matter how many base class pointers initialized the array with or what type of accounts they're

33
00:02:21,810 --> 00:02:22,860
pointing to.

34
00:02:22,860 --> 00:02:24,860
It will work as expected.

35
00:02:24,960 --> 00:02:29,660
Also if we replace one array element for another it will also work as expected.

36
00:02:29,670 --> 00:02:34,710
This is what I was talking about when I said programming more abstractly or more generally.

37
00:02:34,710 --> 00:02:39,250
Here I'm simply thinking call the withdraw method for each account in the array.

38
00:02:39,330 --> 00:02:39,840
That's it.

39
00:02:39,840 --> 00:02:41,980
No more details required.

40
00:02:43,970 --> 00:02:48,080
Of course this also works with other collections such as a vector.

41
00:02:48,080 --> 00:02:50,030
Here we have the same four pointers.

42
00:02:50,030 --> 00:02:52,880
And then we create a vector of pointers to account.

43
00:02:53,180 --> 00:02:54,290
So the vector holds.

44
00:02:54,290 --> 00:03:00,680
Base class pointers we can then initialize the vector to P1 P2P 3 and 4.

45
00:03:01,190 --> 00:03:06,110
Then we can simply loop through the vector using a range based for loop or an iterator and call the

46
00:03:06,110 --> 00:03:09,160
withdraw method for each vector element.

47
00:03:09,170 --> 00:03:13,990
Think about what would happen if we added another class to our account hierarchy say a bond account.

48
00:03:14,480 --> 00:03:20,000
None of the code that we have that works where the count objects needs to be changed since a bond account

49
00:03:20,120 --> 00:03:21,100
is an account.

50
00:03:21,260 --> 00:03:24,850
It will automatically work with our existing code.

51
00:03:25,010 --> 00:03:26,180
A little note here though.

52
00:03:26,270 --> 00:03:30,110
Be careful when you use raw pointers in collections such as vectors.

53
00:03:30,140 --> 00:03:32,900
It's better to use smart pointers in this type of example.

54
00:03:32,990 --> 00:03:34,700
But you haven't really learned about them yet.

55
00:03:34,700 --> 00:03:35,750
We will soon.

56
00:03:35,750 --> 00:03:36,650
So there you go.

57
00:03:36,770 --> 00:03:41,510
I hope you can see the power of the base pointer and how much more abstractly we can think when writing

58
00:03:41,510 --> 00:03:42,620
our code.

59
00:03:42,620 --> 00:03:47,930
Let's head over to the idea and we'll run these examples so you can see firsthand.

60
00:03:48,080 --> 00:03:54,890
OK so I mean the ID I'm in the U.S. 16 workspace in the base class pointer's project.

61
00:03:54,920 --> 00:03:56,990
Now let me explain what's going on this project.

62
00:03:56,990 --> 00:04:03,170
I've already gone ahead and taken that account hierarchy account checking account savings account and

63
00:04:03,170 --> 00:04:07,700
trustee account and I've made it so that it works with dynamic polymorphism.

64
00:04:07,700 --> 00:04:10,910
So I've done the virtual functions I've done all that already.

65
00:04:10,910 --> 00:04:15,320
I just want to show you how to use this and see how powerful it is in the next video will learn about

66
00:04:15,320 --> 00:04:18,070
virtual functions and will start implementing it ourselves.

67
00:04:18,080 --> 00:04:20,290
But let's take a look at the main.

68
00:04:20,390 --> 00:04:22,570
This is really what the point of this video is.

69
00:04:22,640 --> 00:04:26,330
If you look at the main You can see that first we're going to do the pointers and we'll deal with the

70
00:04:26,330 --> 00:04:29,520
Rays and vectors but it's just plain pointers first US.

71
00:04:29,740 --> 00:04:36,410
Here you can see that I've got the four pointers P1 P2P 3 MP for each one points to a different type

72
00:04:36,410 --> 00:04:37,210
of account.

73
00:04:37,340 --> 00:04:41,560
But they are all accounts right because we've got public inheritance in our hierarchy.

74
00:04:41,990 --> 00:04:46,270
And then what we're doing is we're calling the withdraw method for each one of those objects.

75
00:04:46,490 --> 00:04:53,390
And the idea is if we've done our dynamic polymorphism Correct p one we'll call the account withdraw

76
00:04:53,390 --> 00:04:59,650
P2 we'll call the savings withdraw P3 we'll call the checking withdraw and P4 we'll call the trust withdraw.

77
00:04:59,870 --> 00:05:05,150
OK so let's give this build and run and you can see the output right here I'll just move it over so

78
00:05:05,150 --> 00:05:09,620
we can see it we can see pointers and then the withdrawal methods are called right down here and you

79
00:05:09,620 --> 00:05:12,540
can see that we're calling the accounts withdraw.

80
00:05:12,590 --> 00:05:14,930
Then the savings withdraw and the checking is withdrawn.

81
00:05:14,930 --> 00:05:16,500
And finally a trust withdraw.

82
00:05:16,610 --> 00:05:18,670
So exactly what we expected.

83
00:05:18,710 --> 00:05:21,370
We've got a binding now happening at run time.

84
00:05:21,440 --> 00:05:24,160
That's really really powerful stuff.

85
00:05:24,170 --> 00:05:28,690
We also have the cleanup here I'll show you what that looks like that's just deleting those four pointers.

86
00:05:28,790 --> 00:05:32,320
So we free up the storage that we allocated for them.

87
00:05:32,330 --> 00:05:37,580
All right so now let's take a look at how this would work with a raise and uncomment this out.

88
00:05:38,010 --> 00:05:42,560
And in this case I'm just putting out a line that says array so we know what's going on and what I'm

89
00:05:42,560 --> 00:05:44,760
doing here I'm creating an array.

90
00:05:44,750 --> 00:05:46,590
And this is the declaration right here.

91
00:05:46,640 --> 00:05:47,810
I'm creating an array.

92
00:05:47,810 --> 00:05:52,840
That's what the brackets say of pointers to accounts.

93
00:05:52,850 --> 00:05:58,340
So when you create an array in this case and it's going to have four pointers in it each one of these

94
00:05:58,340 --> 00:06:02,240
pointers is going to point to an account object.

95
00:06:02,240 --> 00:06:03,590
So that's what it looks like.

96
00:06:03,640 --> 00:06:05,170
P1 here.

97
00:06:05,630 --> 00:06:06,070
Right.

98
00:06:06,080 --> 00:06:08,480
The one is the account so this will be an account

99
00:06:11,170 --> 00:06:14,280
P2 will be a savings account you get the idea right.

100
00:06:14,290 --> 00:06:16,670
That's a checking account and a trust account.

101
00:06:16,750 --> 00:06:22,180
And then what I'm doing is I'm simply looping through this array right here and I'm calling the withdraw

102
00:06:22,270 --> 00:06:25,160
method for each one of those pointers.

103
00:06:25,390 --> 00:06:29,620
So this will call the account this will call the savings this will call the checking and this will cover

104
00:06:29,620 --> 00:06:31,500
the trust withdrawal methods.

105
00:06:31,720 --> 00:06:32,160
OK.

106
00:06:32,320 --> 00:06:38,940
So the real powerful piece here is that as you can see I don't have to worry about that in the loop.

107
00:06:38,950 --> 00:06:44,680
All I'm doing here is simply calling the withdrawal method for each one of those guys and whatever happens

108
00:06:44,680 --> 00:06:51,400
to be there will be dynamically bound and it'll be called the correct method which is super super powerful.

109
00:06:51,430 --> 00:07:01,000
So let's give this one a run and we can see that here's the run and you can see the array right here.

110
00:07:01,300 --> 00:07:02,710
And notice what's happening here.

111
00:07:02,740 --> 00:07:05,250
I put people in P2 P3 MP for the array.

112
00:07:05,250 --> 00:07:06,970
Those are base class pointers.

113
00:07:07,030 --> 00:07:11,780
I'm not putting a count objects in the array and putting pointers to count objects in the array.

114
00:07:11,920 --> 00:07:13,930
And they all happen to be base class pointers.

115
00:07:13,930 --> 00:07:15,420
That's why this works.

116
00:07:15,490 --> 00:07:18,040
So in this case I'm calling this four times right.

117
00:07:18,040 --> 00:07:19,750
0 1 2 and 3.

118
00:07:20,110 --> 00:07:23,950
And you can see here in a count in savings in checking and interest.

119
00:07:23,980 --> 00:07:26,620
So we're getting the exact behavior that we want.

120
00:07:26,980 --> 00:07:33,280
So let's modify this just slightly and what we can do is we can take and I'll just copy this again so

121
00:07:33,280 --> 00:07:39,280
we can see that output one more times we can separate it and keep it keep it nice and clean.

122
00:07:39,370 --> 00:07:45,000
What I want to do here is I simply want to say let's set Auray Sub-Zero.

123
00:07:45,010 --> 00:07:46,810
That first item in the array.

124
00:07:46,900 --> 00:07:54,970
Let's set that to p for p for is a pointer to a trust account and then let's just loop again and call

125
00:07:54,970 --> 00:07:57,330
the withdraw method for all of those guys.

126
00:07:57,340 --> 00:07:59,490
Now her output should be a little different now right.

127
00:07:59,500 --> 00:08:06,000
Because our first array element that one at index 0 is no longer an account that was appeared when he

128
00:08:06,040 --> 00:08:06,760
won in there.

129
00:08:06,760 --> 00:08:08,060
Now it's a trust account.

130
00:08:08,230 --> 00:08:12,290
So what we expect in the output now would be trust savings checking.

131
00:08:12,290 --> 00:08:13,270
Trust right.

132
00:08:13,540 --> 00:08:14,750
So let's try that out.

133
00:08:16,190 --> 00:08:18,230
And let's see what we get here.

134
00:08:18,290 --> 00:08:24,230
Trust savings checking trust you see that's exactly what we wanted really doesn't matter what these

135
00:08:24,230 --> 00:08:25,650
pointers point to.

136
00:08:25,880 --> 00:08:27,560
It will get bound correctly.

137
00:08:27,740 --> 00:08:31,220
And the real powerful thing here is I never really changed that loop right.

138
00:08:31,220 --> 00:08:33,640
The loop was exactly the same as it was before.

139
00:08:33,680 --> 00:08:36,760
I didn't have to do any checking for anything.

140
00:08:36,770 --> 00:08:39,590
All right so now let's take a look at the vector version.

141
00:08:40,370 --> 00:08:45,830
And as I mentioned in the slides be really really careful when you use raw pointers and any kind of

142
00:08:45,830 --> 00:08:50,390
collection but especially a vector what you want to do is if you're going to use them use them this

143
00:08:50,390 --> 00:08:54,110
way where you create your initialize the vector this way.

144
00:08:54,110 --> 00:09:00,770
Don't put like something like a new account or something in here because that could be problematic when

145
00:09:00,770 --> 00:09:03,050
it comes to destroying those objects.

146
00:09:03,050 --> 00:09:05,780
You'd have to loop through the vector and destroy them yourself.

147
00:09:05,870 --> 00:09:06,390
But anyway.

148
00:09:06,570 --> 00:09:08,670
But just go look at this example real quick.

149
00:09:08,690 --> 00:09:09,980
So here's my vector.

150
00:09:09,980 --> 00:09:11,060
What am I doing.

151
00:09:11,090 --> 00:09:17,540
Well in this case I'm creating a vector and what is the vector of write my template parameter is a pointer

152
00:09:17,540 --> 00:09:18,420
to an account.

153
00:09:18,560 --> 00:09:20,910
So what if I got decide we had an array right.

154
00:09:20,930 --> 00:09:24,410
We have a vector of pointers to accounts.

155
00:09:24,440 --> 00:09:26,360
That's my base class pointer.

156
00:09:26,560 --> 00:09:29,910
I'm initializing it to P1 P2P 3 P4.

157
00:09:30,080 --> 00:09:35,650
And at this point all I'm doing is a range based for loop right here and it just using the auto keyword

158
00:09:35,670 --> 00:09:41,120
is going to figure out that that's an account pointer and I'm looping through there and that's it.

159
00:09:41,120 --> 00:09:46,010
I'm just calling the withdraw method for each one of those pointers that's in the vector.

160
00:09:46,040 --> 00:09:53,540
Again what we expect here because we've got P1 P2 P3 P4 we expect a count let me go back up and make

161
00:09:53,540 --> 00:09:54,910
sure I get this right.

162
00:09:54,980 --> 00:09:57,260
We expect a count savings checking.

163
00:09:57,260 --> 00:09:59,440
Trust that's where we're putting them in.

164
00:09:59,450 --> 00:10:01,880
So when this runs that's what we expect.

165
00:10:02,030 --> 00:10:12,350
Let's give this a run and there is our vector case right here and in here we've got a count savings

166
00:10:12,350 --> 00:10:15,790
checking trust exactly what we wanted.

167
00:10:15,800 --> 00:10:16,270
All right.

168
00:10:16,310 --> 00:10:21,920
So let's just do one more little quick change here and what we can do is let's add two more items to

169
00:10:21,920 --> 00:10:27,320
that vector and what we can do is we can add that trust point to again we can get it two times at the

170
00:10:27,320 --> 00:10:27,930
back.

171
00:10:27,950 --> 00:10:29,300
So why don't we do that.

172
00:10:29,300 --> 00:10:36,100
Let me copy you this again just so we have some separation in the output and we can better follow it.

173
00:10:36,110 --> 00:10:39,750
So what we'll do here is we'll just say my vector's is called accounts.

174
00:10:39,980 --> 00:10:46,880
So I'm going to say accounts push back and let's push back p 4 so we're adding P for the end and let's

175
00:10:46,880 --> 00:10:50,380
do it again and we'll add P4 again.

176
00:10:50,750 --> 00:10:56,390
So now when we loop through that vector this time we expect those first four output statements to be

177
00:10:56,390 --> 00:11:02,150
the same but we expect to more output statements at the end for the trust withdraw being called right

178
00:11:02,270 --> 00:11:04,770
because now we've got six items in this vector.

179
00:11:04,790 --> 00:11:06,400
So let's keep that around.

180
00:11:07,160 --> 00:11:13,520
And here we go you can see one two three four five six items in the vector we're calling the withdraw

181
00:11:13,520 --> 00:11:17,470
for each one of them and you can see how the last three are trust right.

182
00:11:17,750 --> 00:11:23,300
The fourth one was one that was already in there and then the two that I just added right here as I

183
00:11:23,300 --> 00:11:27,780
said be really careful when you're using raw pointers in these things it's better to use smart pointers.

184
00:11:27,800 --> 00:11:30,470
Well talk about smart pointers in the next section.

185
00:11:30,470 --> 00:11:35,870
We could have used a shared pointer here even a unique pointer which would make things a lot more safe.

186
00:11:35,870 --> 00:11:36,890
All right so there you go.

187
00:11:36,890 --> 00:11:39,110
Hopefully you can see the power here.

188
00:11:39,110 --> 00:11:44,800
Remember if I come up here and I've got my accounts and I decide to add a new account here and some

189
00:11:44,960 --> 00:11:51,440
like I said a bond account or something any kind of account as long as I tied into this hierarchy and

190
00:11:51,440 --> 00:11:56,720
make sure that the methods that are being called are virtual there as well then I can create an account

191
00:11:57,050 --> 00:12:01,570
count object right here P5 that set a bond account and all this will work right.

192
00:12:01,580 --> 00:12:03,860
All these loops everything will work exactly the same.

193
00:12:03,860 --> 00:12:10,100
I won't have to modify any code because that's the point I can think generally I can think of strategy.

194
00:12:10,250 --> 00:12:13,920
If you think of this vector right here this code right here what does this say.

195
00:12:13,940 --> 00:12:19,050
It's basically saying loop through the vector and call the withdraw for everything in the vector.

196
00:12:19,250 --> 00:12:23,690
That's pretty high level thinking and that's pretty powerful if I've got a drawing program that's drawing

197
00:12:23,690 --> 00:12:29,540
shapes I can just loop through all my shapes and ask each shape to draw itself or move itself or transform

198
00:12:29,540 --> 00:12:30,470
itself.

199
00:12:30,500 --> 00:12:34,940
So I'm really able to think abstractly and not get bogged down with details.

200
00:12:35,090 --> 00:12:37,530
And that's the power of dynamic polymorphism.
