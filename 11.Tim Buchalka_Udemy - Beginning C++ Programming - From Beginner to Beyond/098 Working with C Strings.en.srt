1
00:00:05,440 --> 00:00:10,350
In this video I'd like to go over using the C++ string class and some examples there.

2
00:00:10,610 --> 00:00:16,250
So I'm in the section 10 workspace in the strings project.

3
00:00:16,250 --> 00:00:21,080
Now remember the String class is a class when we create strings in this case.

4
00:00:21,080 --> 00:00:26,840
Here you see him creating eight strings from zero to 7 on lines nine to 16.

5
00:00:26,840 --> 00:00:28,130
These are objects.

6
00:00:28,130 --> 00:00:33,470
We'll talk about exactly what objects are in the world of object oriented programming in a future video.

7
00:00:33,650 --> 00:00:39,380
But we are using object oriented programming here to work with the C++ String objects.

8
00:00:39,460 --> 00:00:39,890
OK.

9
00:00:40,040 --> 00:00:42,980
It's important that you include the string library.

10
00:00:43,160 --> 00:00:47,810
Otherwise you'll get a lot of compiler errors and I'm using the standard namespace.

11
00:00:47,840 --> 00:00:52,100
First thing is let's declare and initialize some of these string objects.

12
00:00:52,100 --> 00:00:55,650
Here I'm declaring as 0 through 7 you can see as 0.

13
00:00:55,670 --> 00:00:57,610
I'm just saying string a 0.

14
00:00:57,620 --> 00:01:04,720
It's important to understand that with classes and objects in this case 0 is an object.

15
00:01:04,760 --> 00:01:09,740
I am getting an initialized object is not going to be any garbage in there and will display that in

16
00:01:09,740 --> 00:01:10,220
a second.

17
00:01:10,210 --> 00:01:16,340
Just so you can see what that looks like then I'm declaring other string objects here so as one is being

18
00:01:16,340 --> 00:01:21,690
initialized to Apple as to the banana as three to Kiwi As for the apple and so forth.

19
00:01:21,740 --> 00:01:25,230
S-5 is being initialized to us one well as one is Apple.

20
00:01:25,340 --> 00:01:32,830
So a copy of that string is going to be put into S-5 so S-5 is going to be its own version of Apple.

21
00:01:32,840 --> 00:01:36,280
So if I change this one it's not going to affect us five.

22
00:01:36,860 --> 00:01:43,400
There's also a couple of other initializers there's a bunch of initializers and constructor style initializers

23
00:01:43,400 --> 00:01:45,260
a whole bunch of examples that you can use.

24
00:01:45,260 --> 00:01:49,150
But I'm just sticking to the commonly used ones in modern C++.

25
00:01:49,160 --> 00:01:56,090
In this case Essex is as one of initializing it from s one which is Apple but I'm only using a part

26
00:01:56,090 --> 00:01:56,480
of it.

27
00:01:56,570 --> 00:01:59,530
I'm starting at index 0 and I want three characters.

28
00:01:59,630 --> 00:02:05,720
So it's only going to be initialized to the string a P-P and then in this case as 7 I'm initializing

29
00:02:06,080 --> 00:02:08,360
that string to 10 x characters.

30
00:02:08,360 --> 00:02:10,430
Notice the Xs in single quotes here.

31
00:02:10,460 --> 00:02:11,950
So that's a character.

32
00:02:12,080 --> 00:02:15,970
And also notice that I'm using parentheses here and not Curley's.

33
00:02:16,010 --> 00:02:20,760
This is a constructor style initialization and that's the one that works with this example.

34
00:02:20,960 --> 00:02:24,200
Before we look at the initialization of values let's look at this right here.

35
00:02:24,200 --> 00:02:28,130
Notice that I declared that string object is zero.

36
00:02:28,400 --> 00:02:33,560
If this had been what we the example that we saw using C-style strings and we never initialized it.

37
00:02:33,560 --> 00:02:35,180
You remember we saw that garbage.

38
00:02:35,180 --> 00:02:36,510
You're not going to get that here.

39
00:02:36,530 --> 00:02:40,130
So if I display zero you won't see anything because it's empty.

40
00:02:40,430 --> 00:02:42,760
And if I ask as 0 What's your length.

41
00:02:42,770 --> 00:02:44,040
This is a method.

42
00:02:44,090 --> 00:02:47,780
This is an object and this is what Object-Oriented Programming is all about.

43
00:02:47,780 --> 00:02:50,460
I'm asking the as zero object.

44
00:02:50,480 --> 00:02:52,050
In other words this string right here.

45
00:02:52,070 --> 00:02:53,420
Hey what's your length.

46
00:02:53,720 --> 00:02:55,760
And it's going to return to its length.

47
00:02:55,760 --> 00:02:58,820
In this case I expect back to zero because it's an empty string.

48
00:02:58,950 --> 00:03:04,710
So let me run this and you can see that nothing printed out because the string is empty and I get back

49
00:03:04,730 --> 00:03:07,770
as 0 which says that the string has no length that's empty.

50
00:03:08,060 --> 00:03:10,190
So you can see that it is being initialized.

51
00:03:10,190 --> 00:03:12,220
That's really important to other objects.

52
00:03:12,520 --> 00:03:18,400
OK I'm going to comment that out and then let's look at some of these initialization examples.

53
00:03:18,780 --> 00:03:22,160
I've just initialized those objects right up here where I declared them.

54
00:03:22,160 --> 00:03:27,660
Now I'm just going to display them and you can see that we're getting exactly what we expected.

55
00:03:27,660 --> 00:03:29,930
Here we scroll up just a little bit.

56
00:03:29,930 --> 00:03:35,540
So as one is as to his banana then I've got Kiwi apple with a lowercase a apple.

57
00:03:35,570 --> 00:03:42,100
An app that's that three the initialiser where we only wanted the first three characters and then I've

58
00:03:42,110 --> 00:03:48,520
got 10 x's because you can see really powerful really easy way to initialize these string objects.

59
00:03:48,530 --> 00:03:55,850
So now it's come at this out again and work with some of the operators and methods of the string class.

60
00:03:55,850 --> 00:04:03,320
In this case I'm comparing If you recall using C-style strings we had to use the RCMP or the string

61
00:04:03,320 --> 00:04:09,410
compare function pass into strings and get back either zero or a positive value or negative value and

62
00:04:09,410 --> 00:04:11,140
then we'd have to check things like that.

63
00:04:11,150 --> 00:04:14,320
Well here we can just use the operators that we're used to.

64
00:04:14,720 --> 00:04:20,130
And I'm using the bool Alpha IO manipulator just so it displays the words true and false.

65
00:04:20,290 --> 00:04:24,230
And you can see I've got a whole bunch of examples that it's actually easier to run it than to read

66
00:04:24,230 --> 00:04:24,980
on that code.

67
00:04:25,160 --> 00:04:30,870
But you can see here that I'm comparing apple with Apple and I get that true.

68
00:04:30,920 --> 00:04:32,560
I'm comparing apple with banana.

69
00:04:32,570 --> 00:04:34,670
I get back false then I'm asking.

70
00:04:34,670 --> 00:04:36,410
Is Apple not equal to banana.

71
00:04:36,410 --> 00:04:38,510
That's true because they're not equal.

72
00:04:38,600 --> 00:04:40,670
Is Apple less than banana.

73
00:04:40,670 --> 00:04:46,490
True because the capital A comes before the capital B in the ASCII table.

74
00:04:46,850 --> 00:04:48,740
What about banana greater than Apple.

75
00:04:48,740 --> 00:04:49,100
Yes.

76
00:04:49,100 --> 00:04:52,250
Again I just flip the sign and flip the strings.

77
00:04:52,250 --> 00:04:53,990
What about Apple with a lowercase.

78
00:04:54,000 --> 00:04:56,420
Is that less than Apple with an upper case.

79
00:04:56,420 --> 00:05:02,440
A It is not because the uppercase characters come before the lowercase characters in the ASCII table.

80
00:05:02,870 --> 00:05:09,190
And then the last one I'm using is right here where I'm actually comparing an object as one with a C-style

81
00:05:09,300 --> 00:05:10,780
string literal Apple.

82
00:05:11,040 --> 00:05:15,840
And that works perfectly fine because what happens is this string literal right here gets converted

83
00:05:15,840 --> 00:05:19,350
to an object and then we're doing Object object comparison.

84
00:05:19,350 --> 00:05:20,720
So that's true.

85
00:05:21,040 --> 00:05:23,690
Remember it's doing character by character comparison.

86
00:05:24,120 --> 00:05:28,000
OK so real familiar real intuitive very easy to use.

87
00:05:28,240 --> 00:05:35,160
Let me come at that out and let's do assignment if again if you recall with the seesaw strings we had

88
00:05:35,160 --> 00:05:42,480
to do as TR RCP Y or string copy using C++ String objects we just use the assignment operator just like

89
00:05:42,480 --> 00:05:43,190
we're used to.

90
00:05:43,350 --> 00:05:47,580
So they feel like they're really part of the language just like you would with integers and doubles

91
00:05:47,580 --> 00:05:49,050
and characters and so forth.

92
00:05:49,050 --> 00:05:56,590
So in this case I'm assigning watermelon to S1 whatever was in S1 before is now gone.

93
00:05:56,860 --> 00:06:02,770
I've overwritten it with watermelon and then I'm out putting as one is now and then obviously I expect

94
00:06:02,770 --> 00:06:08,700
back watermelon when I say a sign as one as one is watermelon to two as two.

95
00:06:08,860 --> 00:06:11,670
I'm going to get a copy of that watermelon object right.

96
00:06:11,680 --> 00:06:14,770
So I'm not going to that they're not pointing to the same watermelon.

97
00:06:14,890 --> 00:06:20,110
I'm going to get two copies that are individual so if I change this one it won't affect us too and vice

98
00:06:20,110 --> 00:06:20,830
versa.

99
00:06:21,190 --> 00:06:25,260
And if I displace two I also expect watermelon here.

100
00:06:25,510 --> 00:06:31,450
Here I'm saying as three is Frank some assigning the string Frank to us three and that should also display

101
00:06:31,450 --> 00:06:32,740
Frank.

102
00:06:32,800 --> 00:06:35,950
Now once I've assigned these strings I can manipulate them.

103
00:06:35,950 --> 00:06:42,610
So in this case I can say change to zero with character in as three while that's the F in frank right

104
00:06:42,610 --> 00:06:43,730
here.

105
00:06:43,750 --> 00:06:48,510
Change that to a capital C and notice single quotes because I'm changing character.

106
00:06:48,670 --> 00:06:56,090
So I'm saying assign the capital C to the first element of that string right to one at the zero index.

107
00:06:56,110 --> 00:07:00,520
So this would change it to a crank which will print out C R and K.

108
00:07:00,850 --> 00:07:03,120
I can also use the at method.

109
00:07:03,340 --> 00:07:09,820
Again this is the whole idea of Object-Oriented Programming him saying hey S-3 change the character

110
00:07:09,910 --> 00:07:12,900
at position 0 to a capital P.

111
00:07:12,910 --> 00:07:15,690
So when I display that it should display prank.

112
00:07:15,700 --> 00:07:18,070
Let's run that and double check.

113
00:07:18,160 --> 00:07:23,530
So you can see here that one is watermelon as two as watermelon as three is Frank.

114
00:07:23,530 --> 00:07:29,470
And then I'm changing the first letter of Frank to crank to see Saryan displaying crank and then I'm

115
00:07:29,470 --> 00:07:32,550
changing it to a P and displaying prank.

116
00:07:32,570 --> 00:07:37,890
All right I'll comment this out and let's look at concatenation.

117
00:07:38,050 --> 00:07:45,300
Again I'll compare this to the C-style string where we had to use the string cat function as TR C.A.T.

118
00:07:45,310 --> 00:07:46,960
to concatenate two strings.

119
00:07:46,960 --> 00:07:54,490
Here we could just simply use the plus operator and in this case I'm saying assign watermelon to us

120
00:07:54,490 --> 00:07:55,360
3.

121
00:07:55,360 --> 00:07:56,470
OK that's easy.

122
00:07:56,560 --> 00:08:00,710
But now I'm saying s three equals as 5.

123
00:08:00,790 --> 00:08:13,180
Well as 5 is Apple and as too is banana and juice some concatenating these one two three four strings

124
00:08:13,180 --> 00:08:20,380
together by simply using the plus operator the plus operator is it's considered overloaded that means

125
00:08:20,380 --> 00:08:22,720
it works with integers it works with doubles.

126
00:08:22,720 --> 00:08:25,670
And in this case it works with string objects.

127
00:08:25,840 --> 00:08:30,790
So what we're going to do here is we're going to say apple and banana juice and assign that to S3.

128
00:08:30,790 --> 00:08:32,670
So in this case watermelon is gone.

129
00:08:32,710 --> 00:08:34,210
We're overwriting that.

130
00:08:34,570 --> 00:08:38,050
And then when we display history it should say apple and banana juice.

131
00:08:38,100 --> 00:08:41,630
Right so let me run that quickly and there you go.

132
00:08:41,660 --> 00:08:44,990
Three is now apple and banana juice just like we expect.

133
00:08:44,990 --> 00:08:48,510
If you try something like this you're going to get a compiler error.

134
00:08:48,530 --> 00:08:56,240
The problem here is that we've got a C style string literal and another C-style string literal and the

135
00:08:56,240 --> 00:09:02,240
plus operator C-style strings don't work with the plus operator if you wanted to do something like this

136
00:09:02,240 --> 00:09:06,040
you would have to use your cat and concatenate them together.

137
00:09:06,320 --> 00:09:11,510
In this case you're going to get a compiler error saying something about I don't know what to do with

138
00:09:11,510 --> 00:09:18,500
these two character arrays in this binary operator so keep that in mind if you're trying to use the

139
00:09:18,500 --> 00:09:21,510
plus operator you've got to use it on at least one of the objects.

140
00:09:21,500 --> 00:09:25,450
Notice over here we're using an object and a string literal.

141
00:09:25,460 --> 00:09:30,440
That's OK because it'll convert but when you've got to C-style string literals like this it doesn't

142
00:09:30,440 --> 00:09:31,450
know what to do.

143
00:09:32,000 --> 00:09:35,240
Let's move on and talk about looping.

144
00:09:35,240 --> 00:09:42,200
In this case we're going to use a for loop to loop through a string and remember a string is simply

145
00:09:42,200 --> 00:09:44,300
a collection right a bunch of characters.

146
00:09:44,300 --> 00:09:47,540
So we can easily loop through them and we'll loop through them two different ways.

147
00:09:47,540 --> 00:09:51,480
First we'll use a regular for loop and then we'll use the range based loop.

148
00:09:51,800 --> 00:09:58,560
In this case I'm assigning Apple to S1 just so we have something to start with right here and I'm initializing

149
00:09:58,820 --> 00:09:59,540
to zero.

150
00:09:59,540 --> 00:10:02,580
Notice that the type of II is size t.

151
00:10:02,600 --> 00:10:04,670
This is really the proper way to do this.

152
00:10:04,670 --> 00:10:09,830
It's always going to be a non-negative number right because we're looping through a string.

153
00:10:09,830 --> 00:10:14,330
Now if you've got looping variables that need to go negative you don't want to use size t you just want

154
00:10:14,330 --> 00:10:16,910
to use irregular integers or something that's signed.

155
00:10:17,060 --> 00:10:21,350
But in these kinds of examples size is the proper type to use.

156
00:10:21,410 --> 00:10:26,990
So I'm initializing to zero and I'm going to loop while I is less than the strings the length.

157
00:10:26,990 --> 00:10:29,910
Remember we're going from zero to the length minus 1.

158
00:10:30,080 --> 00:10:36,540
So in this case I'm asking the S1 object What's your length and it's returning 5 because it's Apple.

159
00:10:36,650 --> 00:10:39,920
So I'm going to loop 0 1 2 3 4 and then I'm going to stop.

160
00:10:39,920 --> 00:10:42,760
And as you see I'm incrementing one each time.

161
00:10:42,950 --> 00:10:50,440
So every time through the loop all I'm doing is just simply outputting that character at the IFE location.

162
00:10:50,660 --> 00:10:53,840
So see out as one dot at.

163
00:10:53,850 --> 00:10:57,670
I could use array subscript syntax.

164
00:10:57,680 --> 00:10:59,030
They both work.

165
00:10:59,090 --> 00:11:03,410
The method does bounds checking the subscript method does not.

166
00:11:03,540 --> 00:11:07,190
So when I run this I should see Apple print out across the screen.

167
00:11:08,080 --> 00:11:11,960
And there it is just displaying one letter at a time.

168
00:11:11,980 --> 00:11:18,460
I can also do this using the range based for loop in which case I'm just saying for every character

169
00:11:18,460 --> 00:11:24,480
c in S one put it right so it's going to go a p p l E-stop.

170
00:11:24,490 --> 00:11:26,540
So in this case I showed up a Schappell twice.

171
00:11:26,540 --> 00:11:32,620
Now it was for the for loop and once for the range based loop you can see some of these are very very

172
00:11:32,620 --> 00:11:34,000
intuitive and easy to use.

173
00:11:34,000 --> 00:11:34,850
There's a couple left.

174
00:11:34,840 --> 00:11:37,240
Let's talk about substring here.

175
00:11:37,270 --> 00:11:39,450
This one again is very intuitive.

176
00:11:39,460 --> 00:11:47,770
Suppose S One is this is a test I've just assigned that string to S1 and I want the substring that starts

177
00:11:47,770 --> 00:11:55,950
at 0 and it's four long so it's going to go t h i s right the t the capital T is index 0.

178
00:11:56,170 --> 00:12:00,060
So that's going to return the word this string.

179
00:12:00,100 --> 00:12:09,880
This in the second substring example I'm starting at index 5 which is 0 1 2 3 4 5 so it's starting at

180
00:12:09,880 --> 00:12:11,610
the high end is.

181
00:12:11,760 --> 00:12:13,020
And I want two characters.

182
00:12:13,090 --> 00:12:14,110
So it's grabbing.

183
00:12:14,110 --> 00:12:18,150
This is right there and that's what it's returning.

184
00:12:18,190 --> 00:12:19,560
And then the last one I'm starting it.

185
00:12:19,560 --> 00:12:26,000
Index 10 which is lowercase T and test and I just want four back and it's giving me test.

186
00:12:26,170 --> 00:12:28,650
So you can see it's very very easy.

187
00:12:28,810 --> 00:12:33,000
And of course all these you can see here it's explained this is a test.

188
00:12:33,070 --> 00:12:38,950
All of these are hard coded but you can certainly use very variables for these integers and loop through

189
00:12:38,950 --> 00:12:43,650
and loops and grab pieces of substrings and you can do a lot of really cool stuff.

190
00:12:43,870 --> 00:12:50,440
We can erase characters in this example I'm saying as one again I'm assigning this is a test to it.

191
00:12:50,800 --> 00:12:53,840
And I'm erasing from S1 again.

192
00:12:53,890 --> 00:12:56,000
Notice the Object-Oriented style.

193
00:12:56,110 --> 00:13:00,390
Think of this almost as you're asking the one object right.

194
00:13:00,390 --> 00:13:02,350
Because notice it's as one dot.

195
00:13:02,560 --> 00:13:08,950
So you're saying the erase method is going to execute on that object as one because we could have asked

196
00:13:08,950 --> 00:13:12,010
to doddy race as a study race anything to race right.

197
00:13:12,010 --> 00:13:17,370
But in this case it's happening on esp one which is this is a test right here.

198
00:13:17,380 --> 00:13:20,930
So what I'm saying here is the race starting at zero.

199
00:13:21,100 --> 00:13:23,190
Any race of characters.

200
00:13:23,380 --> 00:13:32,250
So it's going to be a race the capital T H the I s and the space when I display that this one is now

201
00:13:32,620 --> 00:13:34,150
just the is a test part.

202
00:13:34,150 --> 00:13:38,470
I got rid of this and the space from the beginning.

203
00:13:38,750 --> 00:13:39,110
All right.

204
00:13:39,110 --> 00:13:40,490
Let's do a couple of more.

205
00:13:40,520 --> 00:13:45,960
The getline is a little bit different from the get line that we saw with C strings if you remember we

206
00:13:45,960 --> 00:13:50,280
see strings we said C in getline and we had a length.

207
00:13:50,300 --> 00:13:55,970
Well we're not worried about a length here because the C plus plus string class handles likes for us.

208
00:13:56,030 --> 00:13:59,300
So it looks a little different but it's the same basic effect.

209
00:13:59,540 --> 00:14:04,190
Here I've got a new string that I'm declaring called full name and initializing it to empty.

210
00:14:04,190 --> 00:14:09,950
I'm asking the user to enter their full name and then I'm using the getline function here and I'm passing

211
00:14:09,950 --> 00:14:16,130
in where I want to get the input from in this case the keyboard or C in and where I want to store the

212
00:14:16,130 --> 00:14:18,040
result fullname.

213
00:14:18,320 --> 00:14:22,980
This will get an entire line up until I press enter.

214
00:14:23,090 --> 00:14:24,770
So and then I just display the name.

215
00:14:24,770 --> 00:14:27,560
So in this case if I run this and type my name

216
00:14:30,620 --> 00:14:37,520
notice full name is Frank Metropolis my entire name it doesn't stop at the space the same way that the

217
00:14:37,790 --> 00:14:39,930
extraction operator does.

218
00:14:39,980 --> 00:14:45,070
The last thing we'll do is look at the find method which is a real handy method.

219
00:14:45,560 --> 00:14:49,560
So in this case here's the secret word the secret word is boo.

220
00:14:49,640 --> 00:14:55,560
That's the string and I've got a word variable here which is a string object.

221
00:14:55,580 --> 00:15:00,560
I'm asking the user to enter the war to find the idea is they're going to type one of these words in

222
00:15:00,560 --> 00:15:01,300
here right.

223
00:15:01,430 --> 00:15:06,170
And I'm going to tell them where that word is in the string what position it begins at.

224
00:15:06,170 --> 00:15:15,100
So if I typed in the I'm saying hey s want again the as one object find that word within you.

225
00:15:15,380 --> 00:15:20,780
So it's going to find the word though within it and it's going to return 0 because it starts at the

226
00:15:20,780 --> 00:15:22,450
zero index right there.

227
00:15:22,610 --> 00:15:24,330
That's the t again.

228
00:15:24,350 --> 00:15:30,750
I'm using a size t for the type because it's always going to be right zero or greater or an error.

229
00:15:30,770 --> 00:15:32,650
And we'll talk about the error in a second.

230
00:15:32,660 --> 00:15:39,170
So at this point I'm looking for that word in the string and position holds its position whether it

231
00:15:39,170 --> 00:15:40,280
was found or not.

232
00:15:40,280 --> 00:15:42,120
How do I know whether it was found or not.

233
00:15:42,260 --> 00:15:48,560
I need to see if the position returned was that value right string and position no position.

234
00:15:48,560 --> 00:15:53,640
So in this case if the position I got back is not equal to that then I found it.

235
00:15:53,680 --> 00:15:57,080
So I'm simply going to dispel any found word at position whatever.

236
00:15:57,170 --> 00:15:58,680
Otherwise it wasn't found.

237
00:15:58,760 --> 00:15:59,630
So let's run this.

238
00:15:59,630 --> 00:16:02,180
And remember the string is the secret word is blue.

239
00:16:02,420 --> 00:16:04,970
So I'm going to run this and search for Boo.

240
00:16:06,290 --> 00:16:09,040
And it says I found it a position 19.

241
00:16:09,220 --> 00:16:11,210
Read it again and we used the word secret.

242
00:16:11,210 --> 00:16:13,850
This time it founded it.

243
00:16:13,850 --> 00:16:15,140
Position 4.

244
00:16:15,190 --> 00:16:18,880
And you could see there it is right there position 4.

245
00:16:19,190 --> 00:16:22,220
And we could try to find something that's not there like hello.

246
00:16:22,730 --> 00:16:23,920
And it says hello.

247
00:16:24,080 --> 00:16:25,020
Now found.

248
00:16:25,520 --> 00:16:31,260
OK so the wrap up this video now you have all the elements you need for the challenge.

249
00:16:31,260 --> 00:16:32,570
It's coming up next.

250
00:16:32,750 --> 00:16:37,380
You could certainly try the challenge using C-style strings and then C++ strings.

251
00:16:37,490 --> 00:16:43,220
But I'm just going to do it using C++ strings because we really should be using C++ strings going forward.

252
00:16:43,340 --> 00:16:45,380
All right so head off to the challenge.
