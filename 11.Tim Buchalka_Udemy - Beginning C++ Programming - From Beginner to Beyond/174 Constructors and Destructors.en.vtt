WEBVTT
1
00:00:05.640 --> 00:00:10.740
In this video we'll learn about how constructors work when we use inheritance.

2
00:00:10.740 --> 00:00:16.920
We know that a derived class inherits data and methods from its base class before C++ can initialize

3
00:00:16.920 --> 00:00:18.210
the derived object.

4
00:00:18.360 --> 00:00:21.800
It must initialize the base part of the derived object.

5
00:00:22.290 --> 00:00:29.100
This makes sense since the derived class might use base class information during its own initialization.

6
00:00:29.310 --> 00:00:35.970
So since constructors are responsible for object initialization when a Derived object is created first

7
00:00:35.970 --> 00:00:41.370
the base class constructor executes and then the derived constructor executes.

8
00:00:41.370 --> 00:00:44.250
Let's see a simple example with no arms constructors

9
00:00:47.100 --> 00:00:47.940
in this example.

10
00:00:47.940 --> 00:00:54.630
We have a base class that has a no args constructor that simply displays base constructor and we have

11
00:00:54.630 --> 00:00:59.430
a derived class that inherits publicly from base to drive.

12
00:00:59.430 --> 00:01:04.380
Class also has no args constructor and it displays derived constructor.

13
00:01:04.380 --> 00:01:11.950
Now let's create a base class object and a derived class object and see how the constructors are called.

14
00:01:11.970 --> 00:01:15.430
First let's create a base object from the base class.

15
00:01:15.540 --> 00:01:20.810
In this case there is no inheritance involved so we expect the base class constructor to be invoked.

16
00:01:20.820 --> 00:01:23.520
And that's exactly what happens.

17
00:01:23.520 --> 00:01:26.230
Now if we created derived class object.

18
00:01:26.310 --> 00:01:28.150
This is where things change.

19
00:01:28.200 --> 00:01:30.090
In this case we have inheritance.

20
00:01:30.090 --> 00:01:36.930
Since the derived class is a base class so C plus initialize is the base part of the derived object

21
00:01:36.930 --> 00:01:42.840
first and you can see on the right hand side of the slide that the base constructor is invoked first

22
00:01:43.200 --> 00:01:48.290
and then the derived constructor is invoked.

23
00:01:48.430 --> 00:01:54.430
Now let's look at how destructors are handled class destructors are invoked in the reverse order as

24
00:01:54.430 --> 00:02:01.770
the constructors so the derived part of the class must be destroyed before the base part is.

25
00:02:01.900 --> 00:02:03.310
Again this makes sense.

26
00:02:03.490 --> 00:02:10.240
So when a Derived object is destroyed first the derived class destructor executes then the base class

27
00:02:10.240 --> 00:02:19.530
destructor executes each destructor should free any resources that its own class constructor is allocated.

28
00:02:19.790 --> 00:02:24.570
In this slide we added destructors to the base and derived classes.

29
00:02:24.660 --> 00:02:29.410
The destructor simply display base destructor or derived destructor when there and vote.

30
00:02:29.780 --> 00:02:36.270
So let's create those to same base and derived objects now and see the output.

31
00:02:36.380 --> 00:02:38.820
First let's look at the base class object.

32
00:02:38.930 --> 00:02:41.500
In this case again we're not using inheritance at all.

33
00:02:41.720 --> 00:02:45.470
So the output on the right side of the slide is exactly what we expect.

34
00:02:45.470 --> 00:02:52.190
First the base constructor is invoked and then the base destructor is invoked and the object is destroyed.

35
00:02:52.190 --> 00:02:58.490
Now let's see what happens when we create a Derived object first the derived object must be initialized

36
00:02:58.670 --> 00:03:02.330
and we know that the base part must be initialized before the derived part.

37
00:03:02.540 --> 00:03:08.360
So you can see that the base constructor is invoked and then the derived constructor is invoked.

38
00:03:08.450 --> 00:03:11.500
Now when the object is destroyed the opposite happens.

39
00:03:11.540 --> 00:03:17.310
First the derived destructor is invoked and then the base destructor is invoked.

40
00:03:17.330 --> 00:03:22.400
This order of construction and destruction occurs in the same manner whether you have two classes or

41
00:03:22.400 --> 00:03:26.030
ten classes in the hierarchy.

42
00:03:26.030 --> 00:03:31.820
Finally let's talk about a few important topics in inheritance and what is not inherited automatically

43
00:03:32.720 --> 00:03:38.630
a derived class does not inherit base class constructors base class destructor.

44
00:03:38.780 --> 00:03:43.260
The base class overloaded assignment operators and base class friends.

45
00:03:43.580 --> 00:03:47.610
However we can invoke base class constructors destructors.

46
00:03:47.630 --> 00:03:51.380
An overloaded assignment operators from the derived classes.

47
00:03:52.040 --> 00:03:58.200
Sometimes you will see a using base scope operator base directive in the body of a derived class.

48
00:03:58.220 --> 00:04:04.810
This was introduced in C++ 11 to allow explicit inheritance of base class constructors.

49
00:04:04.820 --> 00:04:07.330
There are lots of rules associated with this.

50
00:04:07.400 --> 00:04:12.170
For example default copy and move constructors are not included.

51
00:04:12.170 --> 00:04:18.710
Each inherited constructor has the same access specifier as its corresponding base class constructor.

52
00:04:18.710 --> 00:04:23.480
If you provide an overloaded constructor in the derived class then the base class overloaded constructor

53
00:04:23.480 --> 00:04:24.790
is not inherited.

54
00:04:24.950 --> 00:04:28.120
A base class constructor default arguments are not inherited.

55
00:04:28.280 --> 00:04:29.900
So you can see it as a bunch of rules.

56
00:04:29.900 --> 00:04:31.650
These are just a few.

57
00:04:31.730 --> 00:04:37.430
However the using statement can be useful and save a bit of typing but I prefer not to use this feature

58
00:04:37.430 --> 00:04:42.710
and write out the constructors I need in my derived classes and invoke the base class constructors as

59
00:04:42.710 --> 00:04:43.620
needed.

60
00:04:43.640 --> 00:04:48.590
It isn't that much more typing and it's very clear to programmers that come after you to modify your

61
00:04:48.590 --> 00:04:50.620
code exactly what you're doing.

62
00:04:50.990 --> 00:04:55.260
Let's head over to the ID and I'll show you how this works in live code.

63
00:04:56.180 --> 00:04:56.480
Hello.

64
00:04:56.480 --> 00:05:04.070
So I'm in the section 15 workspace and I'm in the constructors and destructors project and what we'll

65
00:05:04.070 --> 00:05:08.880
do is we'll step through the debugger and will see exactly when these constructors are called.

66
00:05:09.080 --> 00:05:13.790
We absolutely understand you know the order that things happen in and what and what isn't inherited

67
00:05:13.790 --> 00:05:14.700
in this case.

68
00:05:14.870 --> 00:05:22.280
So here I've got a base class that has an integer attribute named vallium and it's got a simple no args

69
00:05:22.280 --> 00:05:24.600
constructor here that sets value to 0.

70
00:05:24.800 --> 00:05:29.780
It's got an overloaded constructor that expects an integer and sets the value to that integer and it's

71
00:05:29.780 --> 00:05:33.520
got a simple destructor and all of these just say what they're doing.

72
00:05:33.510 --> 00:05:37.000
Base no args base and base destructor.

73
00:05:37.040 --> 00:05:43.400
We also have a derived class which is derived publicly from base and it adds its own attribute doubles

74
00:05:43.400 --> 00:05:46.490
value which is just that value double two times the value.

75
00:05:46.910 --> 00:05:49.190
And it's got its own constructors here destructor.

76
00:05:49.190 --> 00:05:53.810
But I've commented all of them out for now and what we'll do is we'll uncomment them as we go.

77
00:05:53.810 --> 00:05:56.160
So let's start with the simple example.

78
00:05:56.240 --> 00:05:59.720
We're here in the main and let's create a base object and we'll just call it.

79
00:05:59.720 --> 00:06:01.910
Be really really straightforward.

80
00:06:01.940 --> 00:06:04.630
We're not using any inheritance at all here we're not using derived.

81
00:06:04.630 --> 00:06:09.080
We're only dealing with base so let's review that and make sure that that's very clear what's going

82
00:06:09.080 --> 00:06:09.600
on.

83
00:06:09.620 --> 00:06:14.960
So if I step through the debugger here what we've got going on is let me move this screen over here

84
00:06:14.960 --> 00:06:15.800
to the right.

85
00:06:15.830 --> 00:06:18.460
So what we've got going on here is we're right here on line 26.

86
00:06:18.460 --> 00:06:21.500
We're just about to create that base object.

87
00:06:21.530 --> 00:06:26.540
Now what we expect is for the base no args constructor be called to set that value to zero and then

88
00:06:26.540 --> 00:06:28.550
to display no Ark's right.

89
00:06:28.700 --> 00:06:32.730
And then when he goes out of scope we expect a base destructor to be called to clean it up.

90
00:06:32.870 --> 00:06:35.750
That's really what we've seen up to this point in the course.

91
00:06:35.780 --> 00:06:38.000
And it should be pretty straightforward at this point.

92
00:06:38.000 --> 00:06:42.290
So let's step through and you can see right now we're on line 26 right here.

93
00:06:42.470 --> 00:06:43.430
As I step through.

94
00:06:43.450 --> 00:06:46.190
Now I'm coming up to line 11 which is our base.

95
00:06:46.190 --> 00:06:47.610
No args constructor.

96
00:06:47.990 --> 00:06:53.780
It's going to initialize value to 0 and then just simply display base no args constructor and that's

97
00:06:53.780 --> 00:06:55.090
exactly what happened.

98
00:06:55.140 --> 00:06:56.810
Now Bigos out of scope.

99
00:06:56.870 --> 00:07:01.550
So we expect the base class destructor recalled.

100
00:07:01.550 --> 00:07:02.930
And let me step through here.

101
00:07:02.930 --> 00:07:03.490
There we go.

102
00:07:03.500 --> 00:07:04.890
Number on line 13.

103
00:07:04.900 --> 00:07:09.620
You can see the destructor is being called and obviously the value is 0 and right.

104
00:07:09.620 --> 00:07:12.510
It was set to 0 by the constructor here.

105
00:07:12.590 --> 00:07:16.110
So at this point we get the destructor called and our program is complete.

106
00:07:16.340 --> 00:07:22.230
OK that's pretty straightforward that what we can do is we can just change this just a little bit and

107
00:07:22.380 --> 00:07:27.480
what we'll do is I'll comment this out just to keep it in the code so when you guys can play with it

108
00:07:27.480 --> 00:07:34.810
on your own what would you hear and I would just say base Bill Cosby again and this time with 100 and

109
00:07:34.910 --> 00:07:37.200
I'll move the breakpoint down to here.

110
00:07:37.380 --> 00:07:42.630
So what we're doing is we're creating a B object which is a base class object and we're providing the

111
00:07:42.990 --> 00:07:44.590
100 as an initialiser.

112
00:07:44.820 --> 00:07:46.880
So what happens here.

113
00:07:47.100 --> 00:07:51.210
Well in this case again we're not working with derived Yes we're not using inheritance.

114
00:07:51.300 --> 00:07:56.430
We expect the overloaded constructor here on line 12 to execute which expects an integer.

115
00:07:56.430 --> 00:08:02.670
We expect it to set the value to 100 in this case and then just display base int overloaded constructor

116
00:08:03.060 --> 00:08:04.790
when the object is goes out of scope.

117
00:08:04.800 --> 00:08:06.870
We expect the destructor to be called.

118
00:08:07.260 --> 00:08:13.590
OK so let's do that and we'll get these these base examples out of the way so that we can definitely

119
00:08:13.590 --> 00:08:16.320
work on the derived examples and understand it better.

120
00:08:16.560 --> 00:08:18.210
Ok so I'm here in 9:27.

121
00:08:18.210 --> 00:08:22.290
I'm going to step through here I am on line 12.

122
00:08:22.290 --> 00:08:24.270
That's exactly what I expected.

123
00:08:24.270 --> 00:08:29.410
I'm providing an integer so that overloaded constructor right here that expects an integer is called.

124
00:08:29.850 --> 00:08:36.680
It's going to initialize value to 100 which is what I'm passing in and if I look at B's value.

125
00:08:36.680 --> 00:08:38.820
There you go you can see the hundred.

126
00:08:38.850 --> 00:08:43.930
Now the object goes out of scope and the destructor is called right there.

127
00:08:43.960 --> 00:08:46.340
So you see the base class destructor is called.

128
00:08:47.070 --> 00:08:50.730
OK so that's real simple examples using base object.

129
00:08:50.730 --> 00:08:53.810
Now let's create some derived objects.

130
00:08:54.210 --> 00:08:59.640
So for our first example what we'll do is we'll come at that line out and what we'll do is we'll just

131
00:08:59.640 --> 00:09:06.580
simply create a derived object we'll just call it D and we'll provide no initialization information.

132
00:09:06.720 --> 00:09:08.400
So what do we expect to happen.

133
00:09:08.400 --> 00:09:10.370
Well look at all these constructors here.

134
00:09:10.380 --> 00:09:12.470
They're all commented out.

135
00:09:12.690 --> 00:09:17.580
So when we don't provide a constructor we get a default constructor right at default.

136
00:09:17.580 --> 00:09:21.450
No args constructor that's going to be called in derived.

137
00:09:21.690 --> 00:09:26.940
But because we're in derived and it's derived from base we need to create our base part.

138
00:09:27.030 --> 00:09:32.230
So automatically the base class is a default constructor right here will be called.

139
00:09:32.250 --> 00:09:37.350
So in this case what's going to happen is that this value will be set in my base part but this double

140
00:09:37.350 --> 00:09:41.540
value will never be set because I'm not using my own version of this.

141
00:09:41.550 --> 00:09:43.360
No args constructor OK.

142
00:09:43.470 --> 00:09:46.940
So let's run through this one and we'll run the debugger here.

143
00:09:47.640 --> 00:09:49.350
And you can see what's going on here.

144
00:09:49.350 --> 00:09:50.670
I'm right on line 28.

145
00:09:50.670 --> 00:09:53.400
I'm just about to create that derived object.

146
00:09:53.400 --> 00:09:55.910
Now obviously the derived objects.

147
00:09:55.920 --> 00:09:58.490
Default constructor is going to get called It's not here right.

148
00:09:58.500 --> 00:10:03.210
That's because it's compiler provided and it's going to call the base class constructor.

149
00:10:03.210 --> 00:10:08.480
You can see right there because you heard almost really just skipped our own default constructor of

150
00:10:08.490 --> 00:10:09.480
the derived class.

151
00:10:09.540 --> 00:10:13.390
It didn't really skip it it actually got called it's just not doing anything because it's precompiler

152
00:10:13.410 --> 00:10:14.250
provided.

153
00:10:14.250 --> 00:10:20.790
So in this case I'm setting value to zero and saying Based no args constructor right here and now I'm

154
00:10:20.790 --> 00:10:21.170
back.

155
00:10:21.180 --> 00:10:26.440
But now look at the state that derived design you see derives base has a value zero.

156
00:10:26.460 --> 00:10:26.700
Right.

157
00:10:26.700 --> 00:10:31.020
That's exactly what we expected because the base default constructor was called.

158
00:10:31.230 --> 00:10:33.540
But this doubled value was never set.

159
00:10:33.540 --> 00:10:35.020
So I've got garbage here.

160
00:10:36.710 --> 00:10:37.050
OK.

161
00:10:37.070 --> 00:10:38.420
So hopefully that makes sense.

162
00:10:38.420 --> 00:10:45.810
Now what we can do is to fix this is we can uncomment out this guy right here.

163
00:10:45.980 --> 00:10:49.100
So now we've just uncommented our own.

164
00:10:49.130 --> 00:10:50.430
No args destructor.

165
00:10:50.540 --> 00:10:54.080
So let's run this again now and you'll see exactly what happens.

166
00:10:54.740 --> 00:11:00.050
OK so now in this case again I'm on line 28 I'm just about to create that derived object again with

167
00:11:00.050 --> 00:11:01.190
no information here.

168
00:11:01.190 --> 00:11:03.170
No and no initialization information.

169
00:11:03.230 --> 00:11:04.370
So I step through.

170
00:11:04.820 --> 00:11:09.770
This time our own version of our no args constructor gets called Right.

171
00:11:09.950 --> 00:11:15.290
And what's going to happen right now is the base constructor gets called because before it started executing

172
00:11:15.290 --> 00:11:20.120
anything in this derived constructor the base part of me must be initialized.

173
00:11:20.180 --> 00:11:22.810
So you can see when I select the step here.

174
00:11:22.890 --> 00:11:25.900
Now invoke that base class default constructor.

175
00:11:26.180 --> 00:11:33.410
It's going to set value to 0 and say based no args constructor then I come back down here to the constructor

176
00:11:33.740 --> 00:11:38.320
which sets my doubled value to 0 and then displays that message that happened kind of quick.

177
00:11:38.330 --> 00:11:39.530
I think I double clicked.

178
00:11:39.530 --> 00:11:46.920
So what happens here is look at my object now the base part is 0 and the doubled value part is zero.

179
00:11:47.570 --> 00:11:52.190
OK so there you can see that we are really chaining here and we're taking care of our own attributes

180
00:11:52.190 --> 00:11:53.570
and that's what you really want.

181
00:11:53.570 --> 00:11:55.480
You want the base class to handle its value.

182
00:11:55.490 --> 00:11:58.120
You want to derive class to handle its double value.

183
00:11:59.450 --> 00:12:02.420
OK so now let's do another example here.

184
00:12:02.480 --> 00:12:06.340
And again I'll comment this out so I'll leave it in there so that you can play with it.

185
00:12:06.410 --> 00:12:08.160
Create a Derived object.

186
00:12:08.480 --> 00:12:14.270
And let's pass in 2002 a move the breakpoint down here.

187
00:12:14.780 --> 00:12:16.220
OK so now what do we expect.

188
00:12:16.220 --> 00:12:24.230
Well we expect are derived classes overloaded integer constructor to be called this guy right here.

189
00:12:24.380 --> 00:12:26.110
It's commented out right now.

190
00:12:26.360 --> 00:12:30.960
So this won't compile right as far as the compiler is concerned.

191
00:12:31.040 --> 00:12:32.900
It doesn't know anything about this.

192
00:12:33.050 --> 00:12:36.240
And remember these constructors are not inherited.

193
00:12:36.350 --> 00:12:41.090
If this constructor appear on 9:12 was inherited then that would be called and will force that in a

194
00:12:41.090 --> 00:12:41.360
minute.

195
00:12:41.390 --> 00:12:47.480
But for now it's just compiled in a single C that we do get a compiler error right here that says no

196
00:12:47.480 --> 00:12:48.750
matching function call.

197
00:12:48.750 --> 00:12:52.910
So basically it can't find that constructor because it's not there.

198
00:12:53.030 --> 00:12:57.900
So let's uncomment that out and tell it that it's there.

199
00:12:57.950 --> 00:13:02.660
Now what do we expect when that what we expect is that we execute this line here on line 29 and we want

200
00:13:02.660 --> 00:13:04.300
to create that object.

201
00:13:04.490 --> 00:13:12.020
What's going to happen is the constructor here on 9:21 executes but what's going to execute up here

202
00:13:12.800 --> 00:13:18.130
what we really want is for this guy to execute right this one on line 12 the overloaded integer constructor

203
00:13:18.440 --> 00:13:21.700
but that's not going to happen because I'm not explicitly calling it.

204
00:13:21.890 --> 00:13:23.960
We'll learn how to do that in the next video.

205
00:13:23.990 --> 00:13:28.340
What's going to happen here is that the base class default constructor right here is called.

206
00:13:28.630 --> 00:13:30.880
OK so let's walk through this.

207
00:13:31.760 --> 00:13:38.300
OK so again I'm on 9:29 I'm just about to create that object and you can see now that line 21 executes

208
00:13:38.300 --> 00:13:38.560
right.

209
00:13:38.560 --> 00:13:41.460
That's my overloaded constructor that expects an integer.

210
00:13:41.480 --> 00:13:43.010
That's exactly right.

211
00:13:43.010 --> 00:13:47.060
So now the base part of me needs to be initialized the compiler is not going to guess as to which one

212
00:13:47.060 --> 00:13:47.980
of these to call.

213
00:13:47.990 --> 00:13:53.050
So it's simply going to call the no args version and set that value to zero.

214
00:13:53.240 --> 00:13:57.710
And when I step through this you can see right there that no args version of the constructor is being

215
00:13:57.710 --> 00:13:58.320
called.

216
00:13:58.520 --> 00:14:00.540
It set the value to zero.

217
00:14:00.590 --> 00:14:06.530
You can see right there based no args then the derived constructor gets called and finishes off by initializing

218
00:14:06.530 --> 00:14:09.460
its its double value to two times x.

219
00:14:09.740 --> 00:14:14.690
And if you look right now at the state of this object right here you can see that the base is indeed

220
00:14:14.690 --> 00:14:17.250
zero because that constructor took care of it.

221
00:14:17.660 --> 00:14:19.990
And the double value is two thousand.

222
00:14:20.090 --> 00:14:25.610
We probably wanted the value to be 1000 not 0 but we didn't do that because we really don't know how

223
00:14:25.610 --> 00:14:27.020
to call these constructors yet.

224
00:14:27.020 --> 00:14:29.100
Like I said we'll do that in the next video.

225
00:14:29.880 --> 00:14:30.270
OK.

226
00:14:30.290 --> 00:14:33.450
And then obviously the destructors get called.

227
00:14:33.590 --> 00:14:38.600
All right so what if we didn't have this right here I'll comment that out.

228
00:14:38.600 --> 00:14:40.650
We saw that didn't compile a second ago.

229
00:14:40.850 --> 00:14:47.050
But what we could do is we can use a using statement and we could just say using base base and what

230
00:14:47.150 --> 00:14:53.270
that will do is it will allow us to inherit the non-special constructor's from my base class.

231
00:14:53.300 --> 00:14:58.670
And this is a non-special constructor you can think of the special constructors as a default as a copy

232
00:14:58.670 --> 00:14:59.280
constructor.

233
00:14:59.270 --> 00:15:00.750
That kind of thing.

234
00:15:00.770 --> 00:15:02.830
So now this will be inherited.

235
00:15:02.840 --> 00:15:05.000
So this line right here.

236
00:15:05.600 --> 00:15:09.070
What it will do is since that's inherited it matches.

237
00:15:09.080 --> 00:15:14.000
So this will be called and again that has a problem right because it's not going to deal with the double

238
00:15:14.000 --> 00:15:14.840
value.

239
00:15:14.870 --> 00:15:20.450
So let's run this through the debugger and we'll walk through this and we're right here now we're creating

240
00:15:20.450 --> 00:15:21.570
that derived object.

241
00:15:21.560 --> 00:15:26.510
You notice it compiled right before didn't compile Well this time it compiled because I'm inheriting

242
00:15:26.510 --> 00:15:27.390
this one.

243
00:15:27.650 --> 00:15:32.160
So it's available in my derived so it does match that integer right.

244
00:15:32.210 --> 00:15:38.770
So when I execute this you'll see what happens is that this guy gets called right here on line 12.

245
00:15:38.780 --> 00:15:39.650
There you go.

246
00:15:39.650 --> 00:15:41.450
So control is right here now.

247
00:15:41.450 --> 00:15:45.750
So I'm going to initialize the base part of me to a thousand.

248
00:15:46.550 --> 00:15:48.690
But now look at the state of D.

249
00:15:49.250 --> 00:15:55.760
My base is correct the vows of my doubled value never got initialized right because I simply inherited

250
00:15:55.760 --> 00:15:56.160
that.

251
00:15:56.240 --> 00:16:01.280
And that's one of the issues with using automatically inheriting your non-special constructors.

252
00:16:01.280 --> 00:16:07.080
It'll take care of initializing the base part of you but it won't take care of initializing the derive

253
00:16:07.100 --> 00:16:07.590
part of it.

254
00:16:07.600 --> 00:16:09.370
So you really should do that yourself.

255
00:16:09.500 --> 00:16:11.660
Unless I said learn how to do all that in the next video.

256
00:16:11.720 --> 00:16:17.240
But it's important that you understand this behavior first and then I'll just uncomment these last two

257
00:16:17.240 --> 00:16:20.880
out and then you'll see the whole thing happening.

258
00:16:20.900 --> 00:16:25.680
So at this point let's run this one final time.

259
00:16:25.940 --> 00:16:30.780
So right here we're creating a derived object with a thousand as an initializer.

260
00:16:31.160 --> 00:16:34.370
And what we expect is to 9:22 to be called.

261
00:16:34.400 --> 00:16:36.140
That's exactly correct.

262
00:16:36.140 --> 00:16:42.500
Now obviously behind the scenes what's going to happen is we were not going to guess as to which constructor

263
00:16:42.500 --> 00:16:45.650
to call in the base class so it's going to call the no args.

264
00:16:45.890 --> 00:16:47.860
You can see that happening right here.

265
00:16:48.180 --> 00:16:50.030
That'll set value to 0.

266
00:16:50.030 --> 00:16:51.320
Display the message.

267
00:16:51.500 --> 00:16:55.160
Then we come back and that will set double the value to x times too.

268
00:16:55.160 --> 00:17:01.400
So in this case you can see I've got zero in 2000 again which is not what I want but then the destructors

269
00:17:01.400 --> 00:17:03.960
get called and you'll see what happens here.

270
00:17:04.040 --> 00:17:08.050
First the destructor for the derived gets called.

271
00:17:08.510 --> 00:17:11.050
And then the destructor for the base gets called.

272
00:17:11.060 --> 00:17:15.350
So the destructors happen in the order opposite from the constructors.

273
00:17:15.800 --> 00:17:16.180
OK.

274
00:17:16.260 --> 00:17:17.880
Now this isn't really what we want.

275
00:17:17.940 --> 00:17:22.940
We really would like this to be a thousand value 1000 double value 2000.

276
00:17:23.040 --> 00:17:27.690
And like I said we'll learn how to do them the next video when we learn about calling our base class

277
00:17:27.690 --> 00:17:30.840
constructors explicitly from the derived constructors.
