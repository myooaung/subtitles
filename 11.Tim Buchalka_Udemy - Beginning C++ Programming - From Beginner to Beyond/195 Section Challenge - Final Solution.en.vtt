WEBVTT
1
00:00:05.410 --> 00:00:06.130
Welcome back.

2
00:00:06.130 --> 00:00:09.900
We're in the last part of the solution to the challenge for Section 16.

3
00:00:09.910 --> 00:00:14.350
The other thing we've got left to do is clean up those account Udal files so that we don't have all

4
00:00:14.350 --> 00:00:15.940
this duplicated code.

5
00:00:15.970 --> 00:00:22.360
So I mean the challenge solution project and this challenge solution project right now is exactly like

6
00:00:22.360 --> 00:00:24.240
we left off part 2.

7
00:00:24.340 --> 00:00:28.480
So the first thing we want to do is want to look at these helper functions and we really want to get

8
00:00:28.480 --> 00:00:34.630
rid of all of them except what we absolutely need and what we absolutely do need is remember we're going

9
00:00:34.630 --> 00:00:37.230
to come at these things now with base class pointers.

10
00:00:37.360 --> 00:00:41.220
So that way we can just use dynamic binding and only have one version of them.

11
00:00:41.260 --> 00:00:42.460
So that's what we're going to do.

12
00:00:42.460 --> 00:00:44.670
We're going to keep display deposit and withdraw.

13
00:00:44.830 --> 00:00:49.390
But instead of having a vector of account objects we're going to have a vector of pointers to account

14
00:00:49.390 --> 00:00:50.420
objects.

15
00:00:50.500 --> 00:00:52.030
That's my base class pointer.

16
00:00:52.030 --> 00:00:54.940
That's what really gives me the power of dynamic polymorphism.

17
00:00:54.970 --> 00:01:02.230
So that's what I need to do all of these down here I can get rid of I don't need specialized versions

18
00:01:02.230 --> 00:01:07.660
of these things because the whole point of dynamic polymorphism is to let the runtime system figure

19
00:01:07.660 --> 00:01:09.250
out which one to use.

20
00:01:09.430 --> 00:01:12.160
So this is what we want to reduce it to.

21
00:01:12.370 --> 00:01:18.340
I'm going to modify that to say pointer classes because that's where we are and also these include files.

22
00:01:18.340 --> 00:01:20.860
Notice the only thing we really care about his account.

23
00:01:21.040 --> 00:01:25.710
So we don't need all these include files we can get rid of them we only need the account.

24
00:01:26.440 --> 00:01:27.960
OK so that's where we're at now.

25
00:01:27.970 --> 00:01:32.400
Now the implementation for all of those functions that go to that file.

26
00:01:33.130 --> 00:01:35.660
So in the account you will see Peepy file.

27
00:01:35.800 --> 00:01:39.490
We only want to keep the first three and we're going to modify them slightly.

28
00:01:39.490 --> 00:01:44.020
The rest of them we can just get rid of because those are the specialized versions for savings checking

29
00:01:44.020 --> 00:01:48.400
account and trust account and those we're assuming static binding so we're not doing static binding

30
00:01:48.400 --> 00:01:50.150
anymore so we don't need them at all.

31
00:01:50.170 --> 00:01:54.190
So let's get rid of them and this is what I got.

32
00:01:54.190 --> 00:01:58.870
Now I've got three functions displayed deposit and withdraw.

33
00:01:58.900 --> 00:02:04.310
Now we do need to modify them slightly because our prototypes now expect pointer's right here.

34
00:02:04.960 --> 00:02:06.910
So that's a pointer.

35
00:02:07.430 --> 00:02:11.470
And I'm just going to say a count object pointers because that's really what we are.

36
00:02:12.010 --> 00:02:16.780
So let's take a look at this for a second and understand what's going on here.

37
00:02:16.990 --> 00:02:20.870
In this case I've got four Konst Otto.

38
00:02:21.400 --> 00:02:25.370
There's my count right now this is this needs to change a little bit.

39
00:02:25.570 --> 00:02:26.770
I don't really want a reference.

40
00:02:26.770 --> 00:02:29.520
I already have a pointer so I don't need that at all.

41
00:02:29.590 --> 00:02:35.170
I just need to get rid of that and then now since Autor will be a pointer I just need to dereference

42
00:02:35.170 --> 00:02:36.700
the pointer here.

43
00:02:36.700 --> 00:02:42.010
That's an object and that we'll call the overloaded operator that we just created the insertion operator.

44
00:02:42.010 --> 00:02:44.130
So that's just a really precise change.

45
00:02:44.140 --> 00:02:46.070
But that's all we need to do here.

46
00:02:46.070 --> 00:02:50.610
The same with deposit in deposit we've got account pointers again.

47
00:02:50.800 --> 00:02:53.620
So we'll change that because the vector is a little different.

48
00:02:54.280 --> 00:02:59.330
And we don't need the reference here because we've got a pointer but what do we do now.

49
00:02:59.380 --> 00:03:01.250
But we've got to call the deposit method right.

50
00:03:01.270 --> 00:03:02.100
But we have a pointer.

51
00:03:02.110 --> 00:03:05.910
So we just need to change the operator to the arrow operator.

52
00:03:06.280 --> 00:03:07.280
That's it.

53
00:03:07.750 --> 00:03:14.430
And then here with withdraw last step again we've got pointers to accounts in the vector.

54
00:03:14.470 --> 00:03:15.530
So what do we do here.

55
00:03:15.550 --> 00:03:20.980
Same idea get rid of the reference because we've got pointers there and we call account withdraw from

56
00:03:20.980 --> 00:03:22.920
the Pointer.

57
00:03:23.110 --> 00:03:25.880
We also need to make a couple of changes right here.

58
00:03:26.080 --> 00:03:30.700
We need to dereference that pointer to get the account here as well.

59
00:03:30.850 --> 00:03:33.810
That will also call the overloaded insertion operator.

60
00:03:33.970 --> 00:03:36.900
We need to dereference the pointer here to get the object.

61
00:03:36.940 --> 00:03:38.470
And here as well.

62
00:03:39.490 --> 00:03:40.760
And that should do it.

63
00:03:40.780 --> 00:03:46.720
You can see how much code we got rid of we got rid of a ton of code and we've simplified our our project

64
00:03:46.750 --> 00:03:52.660
we've simplified our thinking we can come at these now with base class pointers and let the runtime

65
00:03:52.660 --> 00:03:55.300
system figure out which method to bind.

66
00:03:55.720 --> 00:03:58.240
All right so now let's go to our main and take a look.

67
00:03:58.660 --> 00:04:01.030
Here's our main is a whole bunch of stuff in here.

68
00:04:01.030 --> 00:04:04.420
Let's give it a run and see what happens.

69
00:04:04.450 --> 00:04:05.060
There we go.

70
00:04:05.080 --> 00:04:06.050
There's our run.

71
00:04:06.130 --> 00:04:09.170
You can see here I'm creating a checking account.

72
00:04:09.280 --> 00:04:10.650
Again this is not a pointer.

73
00:04:10.660 --> 00:04:13.290
This is just creating a plain object on the stack.

74
00:04:13.300 --> 00:04:15.740
Frank with 5000 there it is.

75
00:04:15.790 --> 00:04:20.830
Now I'm creating a trust account and I'm creating that account dynamically through a base class pointer

76
00:04:21.130 --> 00:04:22.130
and there's James.

77
00:04:22.300 --> 00:04:25.560
No balance no interest and no withdrawals.

78
00:04:26.020 --> 00:04:30.790
And notice how we were able to print that on the street just because we're using our overloaded operators

79
00:04:30.790 --> 00:04:32.260
and it's printed correctly.

80
00:04:32.650 --> 00:04:37.410
Now we're creating Larry Moe and Curly as three pointers to accounts.

81
00:04:37.420 --> 00:04:41.890
And again where we create We're instantiating a checking account a savings account and a trust account

82
00:04:42.490 --> 00:04:46.770
and then we're adding those three pointers to this Vektor accounts.

83
00:04:46.810 --> 00:04:52.060
Now we're calling display accounts that's that function that we just updated in the account utile and

84
00:04:52.060 --> 00:04:57.340
it's going to display the three accounts and I expect dynamic binding and that's exactly what happens.

85
00:04:57.340 --> 00:05:02.280
You could see right here checking savings and trust that's pretty cool.

86
00:05:02.440 --> 00:05:07.850
Then we deposit $1000 into one of those accounts you can see right here I'm depositing a thousand to

87
00:05:07.870 --> 00:05:10.940
checking to savings into to trust.

88
00:05:11.020 --> 00:05:13.900
Finally we're withdrawing 2000.

89
00:05:13.960 --> 00:05:17.810
That's this code right here you see the last one fails because it's not of balance.

90
00:05:18.100 --> 00:05:23.710
And then finally we display the accounts one less time and we see the balances we clean up our pointers

91
00:05:23.860 --> 00:05:25.630
and we're done now.

92
00:05:25.690 --> 00:05:26.350
We're done.

93
00:05:26.350 --> 00:05:27.510
The challenge is over.

94
00:05:27.520 --> 00:05:29.980
I hope you had a fun time doing it.

95
00:05:29.980 --> 00:05:32.360
If you had trouble with it don't worry.

96
00:05:32.440 --> 00:05:34.560
This was not an easy challenge this was.

97
00:05:34.660 --> 00:05:37.640
This was a very very challenging exercise.

98
00:05:37.690 --> 00:05:40.880
Go back and understand what I did compared to what you did.

99
00:05:40.930 --> 00:05:44.720
Maybe you just forgot to dereference a pointer and it was as simple as that.

100
00:05:44.740 --> 00:05:48.390
For example if you're in the account you will see the file.

101
00:05:48.790 --> 00:05:56.410
And if we forgot to dereference these pointers right here let's just do the withdraw and you'll see

102
00:05:56.410 --> 00:05:57.880
the difference when I run this again.

103
00:05:57.910 --> 00:06:00.360
You'll see the difference when I run this again.

104
00:06:00.360 --> 00:06:01.690
It prints out here on the withdraw.

105
00:06:01.690 --> 00:06:05.030
Right there you see that that's the pointers.

106
00:06:05.230 --> 00:06:06.670
Those are the addresses.

107
00:06:06.730 --> 00:06:07.800
So that's a clue right.

108
00:06:07.810 --> 00:06:10.230
I'm printing the pointer of course I'm printing the pointer.

109
00:06:10.230 --> 00:06:11.560
I don't want to print the pointer.

110
00:06:11.560 --> 00:06:13.270
I want to print when it's pointing to.

111
00:06:13.270 --> 00:06:18.700
So that's where you have to go back here and now dereference that pointer and get what it's pointing

112
00:06:18.700 --> 00:06:19.340
to.

113
00:06:19.630 --> 00:06:22.190
And that'll get you exactly what you got.

114
00:06:23.070 --> 00:06:23.460
All right.

115
00:06:23.460 --> 00:06:28.570
So congratulations on finishing the section this was a very complex section and this really takes your

116
00:06:28.570 --> 00:06:30.760
C++ knowledge to another level.

117
00:06:30.850 --> 00:06:35.140
What we'll do in the next section is we'll talk about smart pointers and we'll be able to finally get

118
00:06:35.140 --> 00:06:41.500
rid of all these raw pointers in modern C++ need to understand raw pointers we must understand raw pointers.

119
00:06:41.620 --> 00:06:47.290
But we really want to develop using smart pointers and never ever having to worry about allocating storage

120
00:06:47.290 --> 00:06:47.890
with delete.
