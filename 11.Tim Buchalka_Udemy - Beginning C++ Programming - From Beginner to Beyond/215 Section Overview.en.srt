1
00:00:05,390 --> 00:00:12,890
In this section of the Course will look at how C++ uses streams for IO first will learn what streams

2
00:00:12,890 --> 00:00:18,590
are and how they help abstract the complexity away from working with different types of input and output

3
00:00:18,590 --> 00:00:20,050
devices.

4
00:00:20,240 --> 00:00:23,390
Then we'll learn about some of C++ history manipulators.

5
00:00:23,390 --> 00:00:28,940
These are functions that can affect how we read and write data to and from streams them will learn about

6
00:00:28,940 --> 00:00:31,520
some of C++ history manipulators.

7
00:00:31,550 --> 00:00:36,860
These are functions that can affect how we read and write data to and from streams will learn about

8
00:00:36,860 --> 00:00:42,650
stream manipulators that affect boolean integer and floating point values and then we'll use some manipulators

9
00:00:42,650 --> 00:00:48,230
that work with any type of data to help us format or output these manipulators give us the ability to

10
00:00:48,230 --> 00:00:54,510
align text fill blank areas with specific characters and set the width of output fields.

11
00:00:54,640 --> 00:00:59,020
Then we'll do a challenge where we'll use the manipulators to format a report containing information

12
00:00:59,230 --> 00:01:05,540
about tours to South America after the stream manipulators will learn about input files how to open

13
00:01:05,540 --> 00:01:10,060
them check to see if they were open successfully read from them and then close them.

14
00:01:10,370 --> 00:01:16,830
Read from using both formatted and an formatted IO and we'll do two challenges using input files.

15
00:01:16,850 --> 00:01:21,830
The first is to create an automated grader that would grade student quiz responses from a text file

16
00:01:21,830 --> 00:01:25,580
and produce a report of the results for the second challenge.

17
00:01:25,580 --> 00:01:30,980
Well as a user for a word and see how many times that word appears in Shakespeare's play Romeo and Juliet

18
00:01:31,220 --> 00:01:36,530
which is stored on a file and disk then we'll learn about output files and how they work well or to

19
00:01:36,530 --> 00:01:42,930
open them right to them in both formatted and informatic modes and close them and then we'll do another

20
00:01:42,930 --> 00:01:48,600
challenge that creates a copy of Romeo and Juliet but adds like numbers to the play that will wrap up

21
00:01:48,600 --> 00:01:51,270
this section by looking at string streams.

22
00:01:51,270 --> 00:01:58,020
This allows us to use in-memory strings as streams and use the same techniques that we use with files

23
00:01:58,200 --> 00:01:59,460
with in-memory strings.

24
00:01:59,460 --> 00:02:00,960
It's very powerful.

25
00:02:00,960 --> 00:02:06,290
And we'll also see how we can use string streams for Data Validation as you'll see in this section.

26
00:02:06,330 --> 00:02:10,800
IDS differ in where they store files for use within the IEEE.

27
00:02:10,800 --> 00:02:15,660
In the last video of the section I'll show you how to set up external text files for reading and Visual

28
00:02:15,660 --> 00:02:19,020
Studio code blocks Sea-Lion and X code.

29
00:02:19,300 --> 00:02:20,650
OK we've got a lot to get to.

30
00:02:20,670 --> 00:02:21,510
Let's get going.
