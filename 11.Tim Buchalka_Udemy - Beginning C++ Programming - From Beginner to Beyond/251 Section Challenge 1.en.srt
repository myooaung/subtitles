1
00:00:05,430 --> 00:00:09,510
Hello welcome to the first challenge of the tail section of the course.

2
00:00:09,540 --> 00:00:13,500
Now I didn't give you any vector challenges because you've done quite a lot of vector challenges in

3
00:00:13,500 --> 00:00:14,170
the course.

4
00:00:14,250 --> 00:00:17,360
So we're going to start with a deck and I know a deck is new to most of you.

5
00:00:17,550 --> 00:00:23,430
So I mean the Section 20 workspace and here you can see the challenge underscore one project and the

6
00:00:23,430 --> 00:00:28,860
challenge under square one solution project the solution project obviously has my solution to this problem.

7
00:00:29,040 --> 00:00:33,470
And the challenge under square one has the source code to get you started.

8
00:00:33,480 --> 00:00:35,360
So let's talk about the challenge.

9
00:00:35,460 --> 00:00:40,230
The challenge is all about using a deck so we know what a palindrome is some of you may not know what

10
00:00:40,230 --> 00:00:45,260
a palindrome is a palindrome is a string that reads the same backwards or forwards.

11
00:00:45,270 --> 00:00:47,750
So a simple example is Mme.

12
00:00:47,790 --> 00:00:51,170
Bob Tuite radar and there's many many many more.

13
00:00:51,240 --> 00:00:54,180
So these are words that read the same forwards or backwards.

14
00:00:54,180 --> 00:01:01,290
Now we can have entire phrases can be palindromes for example a Toyota a Toyota a Santa at NASA a man

15
00:01:01,290 --> 00:01:05,020
a plan a cad a ham a yak yam a hat a canal Panama.

16
00:01:05,310 --> 00:01:10,940
All these are great examples of entire phrases that are palindromes for the purposes of this assignment

17
00:01:10,950 --> 00:01:13,420
we're only going to consider alpha characters.

18
00:01:13,470 --> 00:01:15,990
We're going to omit everything else so spaces.

19
00:01:16,050 --> 00:01:23,890
Commas exclamation points and so forth that apostrophes as we see here will all be eliminated or omitted.

20
00:01:24,120 --> 00:01:31,100
So when we read something like a Santa at NASA what we're going to convert that to is a Santa at NASA

21
00:01:31,110 --> 00:01:34,930
like that all uppercase and get rid of all the special characters.

22
00:01:35,040 --> 00:01:36,630
And obviously you know what to use.

23
00:01:36,630 --> 00:01:39,890
You can use the CC type header file for that.

24
00:01:40,290 --> 00:01:41,670
So how do you solve this problem.

25
00:01:41,670 --> 00:01:47,540
Well a common method to solve the problem is to process the string you end up with something like that.

26
00:01:47,700 --> 00:01:50,510
And then you reverse that string and you compare the two strings.

27
00:01:50,520 --> 00:01:53,050
Obviously if the two strings are the same.

28
00:01:53,070 --> 00:01:53,340
Right.

29
00:01:53,340 --> 00:01:57,000
The one that's normal and the one reversed then it must be a palindrome.

30
00:01:57,000 --> 00:01:59,540
But we're not going to do it that way we're going to use a deck.

31
00:01:59,910 --> 00:02:05,490
I'm providing a main driver for you that will automatically run a bunch of test cases and your challenge

32
00:02:05,490 --> 00:02:06,910
is to write one function.

33
00:02:06,990 --> 00:02:09,310
The function is called is palindrome.

34
00:02:09,330 --> 00:02:13,040
It returns a true false value and it expects a string.

35
00:02:13,440 --> 00:02:19,380
So I'm going to send you a string and you're going to return true or false the function as I said determines

36
00:02:19,380 --> 00:02:24,990
whether that string is a palindrome that function must take care of removing any spaces in any special

37
00:02:24,990 --> 00:02:25,760
characters.

38
00:02:25,770 --> 00:02:27,430
So here's a couple of examples.

39
00:02:27,690 --> 00:02:31,070
Is palindrome a center at NASA that will return true.

40
00:02:31,480 --> 00:02:32,250
Is palindrome.

41
00:02:32,250 --> 00:02:32,760
Hello.

42
00:02:32,790 --> 00:02:35,490
Should return false because hello is not a palindrome.

43
00:02:35,900 --> 00:02:39,100
And what I'd like you to do is to use a deck to solve the problem.

44
00:02:39,120 --> 00:02:44,850
After all that's the section we're in the ACL section of the end the deck is a perfect container to

45
00:02:44,850 --> 00:02:47,500
help us solve this.

46
00:02:47,870 --> 00:02:51,760
If you need a hint please post something in the Q and A forum.

47
00:02:51,770 --> 00:02:57,130
This is a very common question that's used in coding interviews and a lot of times they'll start decoding

48
00:02:57,140 --> 00:02:58,020
interview with.

49
00:02:58,160 --> 00:02:59,630
Solve this problem.

50
00:02:59,660 --> 00:03:06,200
The majority of the applicants will try to come up with the string reversal and compare and at that

51
00:03:06,200 --> 00:03:10,310
point the interviewer will say could you use a data structure like a deck to do it.

52
00:03:10,400 --> 00:03:14,740
And that gets a lot of people because all the books show you how to do it with reversing the string.

53
00:03:14,840 --> 00:03:17,120
But it's interesting to do it with a deck.

54
00:03:17,120 --> 00:03:21,180
Let me run my solution so you can see the sample output.

55
00:03:21,660 --> 00:03:23,420
And here's a sample output.

56
00:03:23,450 --> 00:03:25,600
I've got a result and I've got the string.

57
00:03:25,590 --> 00:03:28,690
So in this case you could see a lowercase letter A is true.

58
00:03:28,910 --> 00:03:32,810
A is true a B.A is true A B B is true.

59
00:03:32,810 --> 00:03:39,110
These are all palindromes But obviously the A B is not a palindrome nor is the ABC radar and Bob and

60
00:03:39,140 --> 00:03:44,530
Anna are as are all these more complicated phrases even C++ is.

61
00:03:44,660 --> 00:03:47,300
Once we get rid of the plus plus we're left with a C.

62
00:03:47,300 --> 00:03:49,420
That's definitely a palindrome.

63
00:03:49,460 --> 00:03:53,730
OK so there's your test cases let me show you what your main would look like.

64
00:03:54,110 --> 00:03:57,500
And this is the code that I'm providing for you.

65
00:03:57,500 --> 00:03:59,240
This is the function you have to write.

66
00:03:59,240 --> 00:04:04,430
Right here it's called is palindrome expects a stood string returns a boolean right now just returning

67
00:04:04,430 --> 00:04:04,910
false.

68
00:04:04,910 --> 00:04:06,170
You have to write this.

69
00:04:06,560 --> 00:04:08,510
And here's the main.

70
00:04:08,510 --> 00:04:14,270
I've got a vector of a bunch of strings and the strings are my test cases and that's it.

71
00:04:14,270 --> 00:04:17,990
You shouldn't have to do anything in the main the main is basically going to loop through all of these

72
00:04:17,990 --> 00:04:23,930
strings and call the palindrome method right there and pass the string into it you'll return TRUE and

73
00:04:23,930 --> 00:04:25,540
FALSE in the main or display it.

74
00:04:25,610 --> 00:04:28,750
So your job is to implement this function right here.

75
00:04:28,940 --> 00:04:30,490
Remember use a deck.

76
00:04:30,660 --> 00:04:32,540
OK so have fun.

77
00:04:32,810 --> 00:04:37,160
Think about it it's actually a pretty simple problem and don't go crazy with iterators you don't have

78
00:04:37,160 --> 00:04:38,720
to use any of that stuff.

79
00:04:38,750 --> 00:04:41,140
Just use the front and the back of the deck.

80
00:04:41,150 --> 00:04:45,260
That's what it's all about and when you're done you can come over to challenge one solution and meet

81
00:04:45,260 --> 00:04:46,180
me in the next video.
