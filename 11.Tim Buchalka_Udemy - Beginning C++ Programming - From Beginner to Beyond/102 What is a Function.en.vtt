WEBVTT
1
00:00:05.540 --> 00:00:09.610
In this video we'll learn about what functions are in C++.

2
00:00:09.980 --> 00:00:16.220
When we develop C++ programs we typically use the predefined functions in classes in the C plus plus

3
00:00:16.220 --> 00:00:17.710
standard libraries.

4
00:00:17.750 --> 00:00:21.920
These are functions and classes that have already been written for us and tested and they're available

5
00:00:21.920 --> 00:00:23.440
for us to use.

6
00:00:23.450 --> 00:00:27.980
We've already seen how useful the standard vector and standard string classes can be.

7
00:00:27.980 --> 00:00:33.310
C++ has many other libraries that we can use in the same way depending on our application.

8
00:00:33.320 --> 00:00:36.150
We may also use third party functions in libraries.

9
00:00:36.170 --> 00:00:41.120
These may be open source commercial or other types of libraries that have been developed by other programmers

10
00:00:41.420 --> 00:00:43.940
and are available to use in our applications.

11
00:00:45.340 --> 00:00:50.860
So if we want to develop games in C++ we'd very likely use third party libraries or frameworks such

12
00:00:50.860 --> 00:00:55.970
as Cocoa's to DX unreal springe cry engine or others.

13
00:00:56.050 --> 00:00:57.850
What would we use third party libraries.

14
00:00:57.850 --> 00:01:02.420
Well that's pretty easy because these libraries take a tremendous amount of effort to develop.

15
00:01:02.590 --> 00:01:07.270
And chances are high that the functionality you need has already been implemented and tested and ready

16
00:01:07.270 --> 00:01:08.260
to use.

17
00:01:08.290 --> 00:01:10.060
So why reinvent the wheel.

18
00:01:10.270 --> 00:01:15.790
Reusing existing functions in classes from existing libraries is great but even then you still need

19
00:01:15.790 --> 00:01:20.940
to write your own C++ functions in classes that are specific to the problem you're trying to solve.

20
00:01:21.220 --> 00:01:24.400
What talk about classes and object oriented programming soon.

21
00:01:24.700 --> 00:01:30.370
In this section we'll focus on functions functions allow us to modularize our program.

22
00:01:30.430 --> 00:01:35.530
This is a big deal since we can divide our program into logical self-contained units of code that we

23
00:01:35.530 --> 00:01:37.110
can reuse whenever we need to.

24
00:01:37.180 --> 00:01:39.790
Let's see a simple example.

25
00:01:40.070 --> 00:01:43.490
On the left hand side of the screen you can see a program written in the way we've been writing them

26
00:01:43.490 --> 00:01:44.850
up to this point.

27
00:01:44.900 --> 00:01:46.820
Lots of statements one after the other.

28
00:01:46.820 --> 00:01:51.320
Some of these statements might be if statement so might be looping statements but you can see that this

29
00:01:51.320 --> 00:01:56.440
program has three logical sections one for input one for processing and one for output.

30
00:01:56.630 --> 00:01:58.840
But everything in the main function.

31
00:01:58.880 --> 00:02:03.920
This is OK for relatively small programs like the ones we've written but his programs get larger more

32
00:02:03.920 --> 00:02:04.520
complex.

33
00:02:04.520 --> 00:02:08.270
This breaks down quickly and the code becomes difficult to manage.

34
00:02:08.300 --> 00:02:13.460
Also we tend to copy and paste code a lot since we may need the same functionality in different places

35
00:02:13.460 --> 00:02:14.990
in the program.

36
00:02:14.990 --> 00:02:19.670
There's a field in computer science called Software Engineering suffer engineering is all about designing

37
00:02:19.670 --> 00:02:25.270
your solutions and writing your code in a way that can be easily understood debugged and extended.

38
00:02:25.370 --> 00:02:29.010
One of the fundamental principles in software engineering is abstraction.

39
00:02:29.060 --> 00:02:32.180
Abstraction is exactly what functions help us achieve.

40
00:02:32.180 --> 00:02:34.910
Let's look at the example on the right side of the screen.

41
00:02:34.970 --> 00:02:37.840
In this case we've replaced 10 statements with three.

42
00:02:37.970 --> 00:02:40.260
These three statements are function calls.

43
00:02:40.340 --> 00:02:45.020
Now when we look at our main function we see less detail more abstraction.

44
00:02:45.020 --> 00:02:48.770
We can now see read input process input and provide output.

45
00:02:48.830 --> 00:02:50.810
So we've modularized our program.

46
00:02:51.050 --> 00:02:55.430
We know that we still have to execute all the code we had before but we've removed it from Maine and

47
00:02:55.430 --> 00:02:58.190
replaced it with a call to functions in each case.

48
00:02:58.550 --> 00:03:00.140
Let's see what these functions look like.

49
00:03:01.260 --> 00:03:05.520
On the left side of the screen we see the same main function with the three function calls and on the

50
00:03:05.520 --> 00:03:11.570
right side of the screen we see the implemented functions read input process input and provide output.

51
00:03:11.580 --> 00:03:16.110
Notice that each of these functions executes the same statements that we were executing previously in

52
00:03:16.110 --> 00:03:17.690
the main function.

53
00:03:17.700 --> 00:03:22.940
This makes our code more modular more readable more maintainable easily dwell and easier to reuse.

54
00:03:23.310 --> 00:03:25.580
Let's see how this can help us develop programs.

55
00:03:26.810 --> 00:03:31.670
A common analogy that's used when learning about functions is the boss worker analogy.

56
00:03:32.060 --> 00:03:34.920
Let's assume you're the boss and you need to get a task done.

57
00:03:34.940 --> 00:03:41.060
This task involves several subtasks and your job is not to perform the individual subtasks but to coordinate

58
00:03:41.060 --> 00:03:46.190
the execution of those subtasks and report the synthesized results back to your own boss.

59
00:03:46.250 --> 00:03:50.330
So you've hired three workers that have expertise in each of those subtasks.

60
00:03:50.720 --> 00:03:55.570
So you assign a subtasks each worker and provide each of them whatever information they need to perform

61
00:03:55.570 --> 00:03:56.410
it.

62
00:03:56.540 --> 00:04:01.370
Since each of the workers knows exactly what to do when they complete their subtask they report their

63
00:04:01.370 --> 00:04:02.810
results back to you.

64
00:04:02.810 --> 00:04:08.030
This may simply be a comment that says I'm done or could be a complex report that they created and provide

65
00:04:08.030 --> 00:04:08.710
to you.

66
00:04:09.230 --> 00:04:13.760
Now that all said tests are complete and you look at the individual results synthesize a report and

67
00:04:13.760 --> 00:04:15.200
get to your boss.

68
00:04:15.380 --> 00:04:17.760
Sounds like an easy job being a boss right.

69
00:04:17.780 --> 00:04:23.060
Actually no the boss needs to know what worker to assign the specific subtask to the order to do them

70
00:04:23.060 --> 00:04:28.430
in the information to provide to each of them so they can do their job and the boss needs to know what

71
00:04:28.430 --> 00:04:32.710
he or she is getting back in order to synthesize it and report back.

72
00:04:32.720 --> 00:04:37.580
This is a great analogy to using functions if you need to call functions you write your code to the

73
00:04:37.580 --> 00:04:39.340
function specification.

74
00:04:39.560 --> 00:04:41.510
You need to understand what the function does.

75
00:04:41.570 --> 00:04:44.120
You need to understand what information the function needs.

76
00:04:44.270 --> 00:04:46.680
You need to understand what the function returns to you.

77
00:04:46.880 --> 00:04:51.920
You need to understand any errors that the function may produce and why you need to understand the performance

78
00:04:51.920 --> 00:04:57.930
constraints and so on what you don't need to worry about is how the function works internally.

79
00:04:58.070 --> 00:05:01.030
Unless of course you the programmer coding the function.

80
00:05:01.130 --> 00:05:07.400
This is super important to understand when we use string vectors math functions complex image processing

81
00:05:07.400 --> 00:05:10.270
libraries collision detection and games.

82
00:05:10.310 --> 00:05:12.850
We don't need to know how those algorithms work.

83
00:05:12.860 --> 00:05:18.110
This concept is called information hiding and we revisit this again when we talk about object oriented

84
00:05:18.110 --> 00:05:19.050
classes.

85
00:05:19.220 --> 00:05:21.170
Let's see an example of this.

86
00:05:21.350 --> 00:05:28.220
C++ has many libraries one library is a mathematics library in order to use this library we must include

87
00:05:28.300 --> 00:05:35.480
sci math the math library has many mathematical functions including trig exponential logarithmic power

88
00:05:35.480 --> 00:05:37.830
rounding and many more kinds of functions.

89
00:05:37.880 --> 00:05:42.300
These functions are global functions which means they are available to the entire program.

90
00:05:42.320 --> 00:05:47.240
We call these functions by using their name followed by a series of arguments in the output statement

91
00:05:47.240 --> 00:05:51.510
on this slide we're calling square root and we're passing in four hundred point zero to it.

92
00:05:51.530 --> 00:05:55.850
The square root function will calculate the square root of 400 and we turn the result which is printin

93
00:05:56.530 --> 00:06:02.150
in the last example we're calling the power power function which expects two arguments in this case

94
00:06:02.150 --> 00:06:05.930
we're calculating 2.0 raised to the 3.0 power.

95
00:06:05.930 --> 00:06:10.700
Notice that to use these functions we need to know is what they do their name what they expect from

96
00:06:10.700 --> 00:06:15.620
us and what they return to us how the square root or the power is being calculated.

97
00:06:15.770 --> 00:06:18.080
Isn't something I need to know to use them.

98
00:06:18.080 --> 00:06:20.550
That's classic abstraction.

99
00:06:20.560 --> 00:06:23.890
There are many built in functions and classes and C++.

100
00:06:23.890 --> 00:06:26.550
However we need to learn to design and write our own.

101
00:06:26.710 --> 00:06:29.330
In this section we'll learn to write our own functions.

102
00:06:29.500 --> 00:06:33.220
Here's a preview of a very simple function so you can see where we're going.

103
00:06:33.280 --> 00:06:34.520
Don't worry about the syntax.

104
00:06:34.540 --> 00:06:36.290
I'll cover all that later.

105
00:06:36.370 --> 00:06:41.950
In this case I have a function called add numbers and it expects to integers named A and B.

106
00:06:42.280 --> 00:06:45.630
The body of the function simply returns a plus b.

107
00:06:45.670 --> 00:06:50.020
So we take the sum of a post B and return the result to the caller.

108
00:06:50.110 --> 00:06:54.870
Notice the event to the left of the function name that tells you what the function returns.

109
00:06:54.880 --> 00:06:56.620
In this case an integer.

110
00:06:56.620 --> 00:07:01.810
Pretty easy right now every time we need to add to integers we can call add numbers and supply the two

111
00:07:01.810 --> 00:07:04.400
arguments that the function expects.

112
00:07:04.480 --> 00:07:06.790
Then I can do whatever I want with the result I get back.

113
00:07:06.790 --> 00:07:08.260
In this case I'm displaying it.

114
00:07:08.350 --> 00:07:12.640
I know what you're probably thinking why in the world would I write a function that adds two numbers

115
00:07:12.850 --> 00:07:15.130
when I can just use the plus operator.

116
00:07:15.130 --> 00:07:16.260
Well normally you wouldn't.

117
00:07:16.360 --> 00:07:21.800
But suppose we had a requirement that if any of those numbers is negative then we must return 0.

118
00:07:21.820 --> 00:07:27.260
Let's see how we can modify this function so this is what the function might look like if we had to

119
00:07:27.260 --> 00:07:30.150
return 0 if either A or B is negative.

120
00:07:30.290 --> 00:07:34.670
It would probably be a good idea to give this function a better name but hopefully this preview example

121
00:07:34.940 --> 00:07:38.350
gives you a good high level view of a simple user defined function.

122
00:07:38.600 --> 00:07:44.930
Let's head over to the ID and use some of the functions in the C plus plus standard library before we

123
00:07:44.930 --> 00:07:47.710
learned to write and define our own functions.

124
00:07:47.810 --> 00:07:51.950
It's important to understand to use functions that are already defined for us.

125
00:07:52.010 --> 00:07:55.650
I've opened up a browser and I've gone to see Peepy reference dot com.

126
00:07:55.670 --> 00:08:00.380
I'm going to show you three pages within this Web site and I'll provide you are Elle's and the resources

127
00:08:00.380 --> 00:08:05.930
for the course here I'm going to the C++ standard library header files here all the standard header

128
00:08:05.930 --> 00:08:10.330
files in C++ and you can see there's a whole bunch of them.

129
00:08:10.370 --> 00:08:14.250
This would become your next learning experience in C++.

130
00:08:14.300 --> 00:08:19.310
Once you understand the basics of the programming language once you understand object orientation within

131
00:08:19.340 --> 00:08:23.690
C++ then it's a matter of learning what's out there and available to you.

132
00:08:23.750 --> 00:08:26.170
There's a lot of stuff out there and there's a lot to learn.

133
00:08:26.180 --> 00:08:31.030
But don't worry you won't learn it all at once you'll learn it little by little as you use C++.

134
00:08:31.040 --> 00:08:35.450
What I want to do here is I want to talk about a couple of libraries and we'll run a couple of example

135
00:08:35.450 --> 00:08:40.040
programs using those libraries will use some of the functions in those libraries.

136
00:08:40.040 --> 00:08:45.950
The first library will use the math library and I've got a pane open right here to the C math standard

137
00:08:45.950 --> 00:08:47.530
library Hetter.

138
00:08:47.540 --> 00:08:49.260
Now we're going to use some of the functions in here.

139
00:08:49.260 --> 00:08:53.180
You can see that there's they're all defined and if you need information about any of them you can just

140
00:08:53.180 --> 00:08:55.620
click on here and you can learn about them.

141
00:08:55.670 --> 00:09:01.010
We're going to use the square root the cube root the power function there just like what you would think

142
00:09:01.010 --> 00:09:02.870
right use pass in a number you get the square root.

143
00:09:02.870 --> 00:09:04.880
You pass it a number you get the cube root.

144
00:09:04.880 --> 00:09:10.760
And in this case I pass in two numbers to the power function and it will raise the base to some exponent.

145
00:09:10.760 --> 00:09:13.640
And here's a whole bunch of information about those functions.

146
00:09:13.840 --> 00:09:14.420
OK.

147
00:09:14.480 --> 00:09:19.450
We're also going to do sign and cosign and a couple of other interesting and very useful functions.

148
00:09:19.490 --> 00:09:24.740
The ceiling the floor and round the ceiling of a floating point number is the next integer.

149
00:09:24.740 --> 00:09:29.050
So if my number is twelve point four the ceiling would be 13.

150
00:09:29.060 --> 00:09:31.080
The floor is the other way around.

151
00:09:31.160 --> 00:09:34.670
So if I have twelve point four then the four would be 12.

152
00:09:34.700 --> 00:09:40.070
And rounding works just like you would expect twelve point five rounds up to 13 twelve point four rounds

153
00:09:40.070 --> 00:09:41.330
down to 12.

154
00:09:41.330 --> 00:09:42.350
So that's what we'll do.

155
00:09:42.440 --> 00:09:46.610
And then in the next little program All right we'll come to the C standard library and I'll open up

156
00:09:46.610 --> 00:09:48.590
that web site for you as well.

157
00:09:48.620 --> 00:09:50.240
This is C standard lib.

158
00:09:50.240 --> 00:09:52.810
That's the name of the library Hetter that's what you need to include.

159
00:09:52.900 --> 00:09:56.240
And here's a couple of functions in here that we'll use and I'll scroll down just a little bit there

160
00:09:56.240 --> 00:09:57.130
right here.

161
00:09:57.170 --> 00:10:03.320
It's Rand and Rand Rand generates a random number a pseudo random number and I'll explain what that

162
00:10:03.320 --> 00:10:04.530
means in a little bit.

163
00:10:04.580 --> 00:10:10.820
And as Rand sees in the random number generator what we'll do is we'll use this function rand to generate

164
00:10:10.820 --> 00:10:11.150
the number.

165
00:10:11.150 --> 00:10:15.280
Let's say we're rolling a six sided die and we can get something between 1 and 6.

166
00:10:15.350 --> 00:10:19.190
We could really make that between anything and anything and I'll show you how to do that and then we'll

167
00:10:19.190 --> 00:10:23.950
see that random number generators so that the patterns of numbers we get will differ every time.

168
00:10:23.990 --> 00:10:27.670
So I'm going to head over to the I-T now and we'll start with the math functions.

169
00:10:29.430 --> 00:10:36.630
Ok so I'm back in the idea and I'm in the section 11 workspace in the math project and here we're just

170
00:10:36.630 --> 00:10:40.430
doing some real simple math examples to show you how to use these functions.

171
00:10:40.800 --> 00:10:44.880
First of all we're including C math that's required otherwise you're going to get a lot of compiler

172
00:10:44.880 --> 00:10:49.770
errors because the compiler won't know about square root of one about sign or anything else in this

173
00:10:49.770 --> 00:10:50.810
little example.

174
00:10:50.820 --> 00:10:55.650
I'm declaring a double called name and I'm asking the user to enter that number.

175
00:10:55.650 --> 00:10:59.910
Once the user enters the number I'm simply calling the square root function that will return the square

176
00:10:59.910 --> 00:11:02.570
root of the number and will display it right in line.

177
00:11:02.610 --> 00:11:07.190
The cube root the sign to cosign the ceiling the floor and we'll round that number.

178
00:11:07.320 --> 00:11:11.180
Then after that I'll ask the user for another number which I've defined called power.

179
00:11:11.340 --> 00:11:16.890
In this case we'll raise that number that they typed into this power so if they typed in 2.5 we'll raise

180
00:11:16.890 --> 00:11:18.560
it to whatever power they want to take.

181
00:11:18.570 --> 00:11:22.770
And again here what we're doing is we're calling the power function right here and we're passing in

182
00:11:22.770 --> 00:11:25.130
the number and the power to raise it to.

183
00:11:25.260 --> 00:11:26.370
Pretty simple.

184
00:11:26.370 --> 00:11:31.780
You can see from this code I don't know how square root works or cube root works or sign or cosign or

185
00:11:31.790 --> 00:11:32.280
power.

186
00:11:32.310 --> 00:11:33.980
I don't know how this stuff is implemented.

187
00:11:33.980 --> 00:11:36.330
Behind the scenes that's the whole point.

188
00:11:36.360 --> 00:11:37.920
I don't care I don't need to know.

189
00:11:38.040 --> 00:11:42.570
And this is where abstraction really shines because we're just trying to solve a problem and I know

190
00:11:42.570 --> 00:11:44.520
I need to raise something with power.

191
00:11:44.570 --> 00:11:46.290
I know I need a sign or cosign.

192
00:11:46.380 --> 00:11:51.870
I can simply look up the library understand how that function is being called understand what that function

193
00:11:51.870 --> 00:11:52.460
returns.

194
00:11:52.470 --> 00:11:54.170
And then just use it and use the result.

195
00:11:54.180 --> 00:12:02.280
So let's run this program and let's say the number we enter is one twenty five point six and I center.

196
00:12:02.320 --> 00:12:06.560
So the square root of twenty five point six is eleven point twenty seventy one.

197
00:12:06.670 --> 00:12:12.080
The cube root we expect to be right around five is five times five is twenty five times five is 125.

198
00:12:12.090 --> 00:12:17.260
So that gives us it's not a formal test case but it's a pretty informal test case that makes us feel

199
00:12:17.260 --> 00:12:19.360
good that our code is working.

200
00:12:19.720 --> 00:12:24.100
Here's the sign of the number the cosigned of the number now the ceiling of one twenty five point six

201
00:12:24.370 --> 00:12:27.340
is the next integer up which is 126.

202
00:12:27.460 --> 00:12:30.700
The floor would be the integer down which is 125.

203
00:12:30.700 --> 00:12:33.640
And in this case we round one twenty five point six.

204
00:12:33.640 --> 00:12:35.160
Up to 126.

205
00:12:35.170 --> 00:12:42.140
So let's enter a power let's raise this to the 4.2 power you go that's a pretty big number.

206
00:12:42.150 --> 00:12:48.090
So one twenty five point six raise to the four point two power is six point five four to six nine times

207
00:12:48.090 --> 00:12:49.420
ten to the eighth.

208
00:12:49.470 --> 00:12:50.230
There you go.

209
00:12:50.250 --> 00:12:54.720
We've used the math functions without knowing anything about how they're implemented.

210
00:12:54.720 --> 00:12:57.760
That's a real real powerful place to be.

211
00:12:57.780 --> 00:13:01.650
Let me go back to the idea now and we'll create some random numbers.

212
00:13:03.530 --> 00:13:07.330
OK so I'm back in the ID and I'm still in the section 11 workspace.

213
00:13:07.340 --> 00:13:09.540
This time I'm in the random project.

214
00:13:09.800 --> 00:13:15.230
Now in order to use random numbers I'm using the rand function or the rand function has been used a

215
00:13:15.230 --> 00:13:18.110
long time and c plus plus and in C as well.

216
00:13:18.380 --> 00:13:23.240
But there's a better way to create random numbers if you're really doing statistical processing and

217
00:13:23.240 --> 00:13:25.380
that's the random header file.

218
00:13:25.400 --> 00:13:26.260
I'm not going to cover that.

219
00:13:26.260 --> 00:13:28.750
I'm just going to use rand since that's what we're learning about.

220
00:13:28.750 --> 00:13:34.820
Calling functions but if you really need very precise distributions consider using the random header

221
00:13:34.820 --> 00:13:35.290
file.

222
00:13:35.360 --> 00:13:41.930
Ok so in this case we're including the C standard library that gives us the rand function and we're

223
00:13:41.930 --> 00:13:44.690
also including the C time library.

224
00:13:44.700 --> 00:13:46.220
I'll talk about that in a minute.

225
00:13:46.220 --> 00:13:50.970
In order to use random numbers we really need to seed a random number generator.

226
00:13:50.970 --> 00:13:55.610
Now what's a random number generator a random number generator is just a generator that creates random

227
00:13:55.610 --> 00:13:56.330
numbers.

228
00:13:56.330 --> 00:13:59.060
Computers are real bad with random numbers.

229
00:13:59.060 --> 00:14:01.130
We have what are called pseudo random numbers.

230
00:14:01.130 --> 00:14:06.320
What that means is that the numbers themselves are random but the sequence that they're generated in

231
00:14:06.380 --> 00:14:07.220
is not.

232
00:14:07.220 --> 00:14:12.680
So in order to create more real random numbers we want to see that random number generator with a different

233
00:14:12.680 --> 00:14:16.750
value each time that we create different sequences of values.

234
00:14:16.850 --> 00:14:17.990
So we'll do that in a second.

235
00:14:17.990 --> 00:14:20.760
I'll do it without seeding and with seeding so you can see the difference.

236
00:14:20.900 --> 00:14:22.570
But let's talk about what's going on here.

237
00:14:22.580 --> 00:14:24.410
I need a random number generated right.

238
00:14:24.410 --> 00:14:28.320
So I'm going to create a variable called random number and I'm initializing it to zero.

239
00:14:28.520 --> 00:14:33.320
And then what I want to do is just one of the loop and create 10 random numbers and that's what my count

240
00:14:33.320 --> 00:14:34.290
variable is.

241
00:14:34.370 --> 00:14:36.260
I can make that as whatever I like.

242
00:14:36.260 --> 00:14:38.000
But in this case it's a 10.

243
00:14:38.150 --> 00:14:41.030
And then in this case assuming we're rolling a die.

244
00:14:41.030 --> 00:14:45.230
So I want to return a random number between 1 and 6 inclusive.

245
00:14:45.320 --> 00:14:47.560
So one two three four or five or six.

246
00:14:47.720 --> 00:14:48.980
This can be one to 10.

247
00:14:48.980 --> 00:14:52.030
This could be one in one or two if you're flipping a coin.

248
00:14:52.070 --> 00:14:54.770
This could be anything you like whatever range you like.

249
00:14:54.830 --> 00:14:59.720
This is how you would create that range and I'm just going to create min and max to be one in six you

250
00:14:59.720 --> 00:15:04.020
can modify those to whatever you like to create whatever range you need.

251
00:15:04.610 --> 00:15:10.730
Now the rand if you look at the RAND function and the documentation that says that it returns a random

252
00:15:10.730 --> 00:15:17.570
number between zero and random Max I have no idea what Rand Max is on my system it will probably differ

253
00:15:17.610 --> 00:15:22.290
on your system but it's guaranteed to be at least 3 to 7 6 7.

254
00:15:22.370 --> 00:15:24.480
So I'll run it here and we'll see what we get.

255
00:15:24.530 --> 00:15:28.770
Now this function right here is the one that seeding the random number generator.

256
00:15:28.790 --> 00:15:33.170
Remember we want to see this random number generator with a different number every time that we run

257
00:15:33.170 --> 00:15:34.130
this program.

258
00:15:34.130 --> 00:15:36.830
So what better way to see them with the system time.

259
00:15:36.950 --> 00:15:38.700
And that's what's going on right here.

260
00:15:38.720 --> 00:15:41.340
I'm seeing the random number generator too.

261
00:15:41.530 --> 00:15:45.110
I'm calling the time function and passing in a null pointer which is zero.

262
00:15:45.140 --> 00:15:50.090
This line of code right here you can see an example of that in the docs that I showed you earlier it

263
00:15:50.090 --> 00:15:52.880
shows you exactly how to seed the random number generator.

264
00:15:52.880 --> 00:15:55.460
So now we've seeded the random number generator.

265
00:15:55.460 --> 00:15:59.900
And what we want to do is we want to generate 10 random numbers.

266
00:15:59.900 --> 00:16:07.040
So I'm going to start from I was 1 while I less Center equal to count so I'm going from 1 to 10 by 1

267
00:16:07.040 --> 00:16:08.110
here's my increment.

268
00:16:08.570 --> 00:16:12.330
And then each iteration of the loop I'm going to call Rand.

269
00:16:12.680 --> 00:16:17.870
Rand returns the number between 0 and 3 2 7 6 7 or higher in this case.

270
00:16:17.870 --> 00:16:20.150
I have no idea what Rand Max is on my system.

271
00:16:20.180 --> 00:16:21.170
We'll see in a minute.

272
00:16:21.170 --> 00:16:25.430
I need to really scale that number down because I only want numbers between 1 and 6.

273
00:16:25.430 --> 00:16:30.540
So if I take Rand and I take the modulus of it based on max right.

274
00:16:30.650 --> 00:16:31.750
So take Rand.

275
00:16:31.780 --> 00:16:36.750
Divide it by 6 and whatever the remainder is I've scaled that number down now.

276
00:16:36.790 --> 00:16:42.360
So in this case if I divide that number by 6 the remainders are they're going to be 0 1 2 3 4 or 5 right.

277
00:16:42.360 --> 00:16:44.000
Those are the only options I have.

278
00:16:44.210 --> 00:16:49.160
But since I want to go 1 to 6 I just add into it and it's as simple as that.

279
00:16:49.160 --> 00:16:55.510
So that's going to give me a number 1 through 6 inclusive and I'm going to output it.

280
00:16:55.530 --> 00:17:02.760
So let's run this program and see how it runs here build and run and ran max on my system is 3 2 7 6

281
00:17:02.760 --> 00:17:03.120
7.

282
00:17:03.120 --> 00:17:04.680
So now we know what it is.

283
00:17:04.680 --> 00:17:11.520
And here you can see that I'm generating 10 random numbers 1 through 6 I'm getting 2 2 5 3 1 or 2 and

284
00:17:11.520 --> 00:17:12.210
so forth.

285
00:17:12.300 --> 00:17:15.780
If I run this remember that the first sequence there is two to five.

286
00:17:15.780 --> 00:17:17.270
So let's run this again.

287
00:17:18.110 --> 00:17:22.640
And now I've got four six three is the first three numbers and I'll run this again.

288
00:17:22.640 --> 00:17:24.980
And now I've got two to one and so forth.

289
00:17:25.020 --> 00:17:30.430
If we did not see that random number generator let me comment that line out right here.

290
00:17:30.550 --> 00:17:32.340
I don't see that and run it again.

291
00:17:32.510 --> 00:17:35.230
You can see 6 6 5 5 6.

292
00:17:35.270 --> 00:17:36.080
OK.

293
00:17:36.400 --> 00:17:44.210
We run it again 6 6 5 5 6 so we see the numbers are random but the sequence that we're getting is not

294
00:17:44.210 --> 00:17:47.100
we're always going to get the same sequence of numbers.

295
00:17:47.110 --> 00:17:51.200
Now that could be useful sometimes if you're trying to repeat experiments and so forth but usually you

296
00:17:51.200 --> 00:17:52.030
don't want that.

297
00:17:52.190 --> 00:17:54.880
And that's why we see the random number generator here.

298
00:17:55.010 --> 00:18:00.260
So there you go you see a couple of examples of using some built in functions we use the math library

299
00:18:00.590 --> 00:18:06.260
and we're using the random number generation library and we're using the C standard library to generate

300
00:18:06.260 --> 00:18:07.610
random numbers.

301
00:18:07.610 --> 00:18:11.440
None of us do we really care about how the random number generator works on us.

302
00:18:11.480 --> 00:18:17.540
That's what really interests you and you can dig into the libraries and see exactly what algorithms

303
00:18:17.540 --> 00:18:18.080
they use.

304
00:18:18.080 --> 00:18:21.350
But if I need to create random numbers this is how I do it.

305
00:18:21.410 --> 00:18:22.110
Really easy.
