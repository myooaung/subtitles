1
00:00:05,410 --> 00:00:12,550
In this video we'll learn about the C++ while loop the while loop as an example of a pretest loop because

2
00:00:12,550 --> 00:00:15,040
the test is done at the beginning of the loop.

3
00:00:15,190 --> 00:00:21,850
So it's possible that if the test fails immediately then the loop body will never execute the syntax

4
00:00:21,850 --> 00:00:26,980
for the while loop is the key word while followed by an expression in parentheses.

5
00:00:27,250 --> 00:00:31,040
This expression has to evaluate to a boolean value.

6
00:00:31,120 --> 00:00:36,470
This is followed by the statement or statement block to execute if the expression evaluates to true.

7
00:00:37,180 --> 00:00:41,100
In this slide we can see a simple while loop that simply counting.

8
00:00:41,440 --> 00:00:45,060
We have a looping variable named I and we initialize it to 1.

9
00:00:45,430 --> 00:00:48,350
The loop condition is I less than or equal to 5.

10
00:00:48,490 --> 00:00:55,070
So as long as I is less Center equal to 5 we continue executing the loop body in the body of the loop.

11
00:00:55,150 --> 00:00:58,640
We display the variable by and then increment it by one.

12
00:00:58,870 --> 00:01:03,520
Eventually I become six and the loop condition fails and the loop terminates.

13
00:01:03,940 --> 00:01:07,130
It's important that we increment it in the body of the loop.

14
00:01:07,360 --> 00:01:09,800
If we don't then the loop will never terminate.

15
00:01:09,850 --> 00:01:15,340
Since I will always be one which is less than or equal to 5 This is called an infinite loop and it's

16
00:01:15,340 --> 00:01:17,050
not usually what we want.

17
00:01:17,050 --> 00:01:21,970
I'll talk about an infinite loops in a later video in this section because sometimes they can be useful.

18
00:01:22,270 --> 00:01:29,470
Let's see another example let's write a while loop that displays the even numbers between 1 and 10 just

19
00:01:29,470 --> 00:01:31,300
as we did with the for loop.

20
00:01:31,750 --> 00:01:34,960
In this case we declare and initialize it to 1.

21
00:01:34,960 --> 00:01:40,810
Since this is where we want to start looping then in the loop condition we'll check to see if it is

22
00:01:40,810 --> 00:01:42,370
less than or equal to 10.

23
00:01:42,370 --> 00:01:46,780
So in other words we will loop while I as less Center equal to 10.

24
00:01:47,200 --> 00:01:50,410
And then at each iteration we execute the body of the loop.

25
00:01:50,800 --> 00:01:56,410
In this case we have an if statement that uses the module operator to see if it's an even number if

26
00:01:56,410 --> 00:01:58,360
it is then we display it.

27
00:01:58,360 --> 00:02:00,370
Then we increment it.

28
00:02:00,460 --> 00:02:04,240
Note that we increment i regardless of whether it's even or not.

29
00:02:04,370 --> 00:02:07,770
Eventually becomes 11 and the loop terminates.

30
00:02:08,440 --> 00:02:12,800
Let's see another example of using a while loop with an array.

31
00:02:13,100 --> 00:02:16,830
In this example we're using a while loop to iterate over an array.

32
00:02:17,030 --> 00:02:21,230
The array is named scores and it's an array of three integers.

33
00:02:21,230 --> 00:02:28,280
We set the integer to zero since array indexes begin at zero and we loop while I's less than three as

34
00:02:28,280 --> 00:02:32,600
we've done an other array code in the loop body we display scores.

35
00:02:32,600 --> 00:02:40,250
So by then increment i when i becomes 3 the condition fails and the loop terminates.

36
00:02:40,250 --> 00:02:44,570
Loops are commonly used in programming to provide input validation.

37
00:02:44,570 --> 00:02:48,400
In this example we want to use her to enter an integer less than 100.

38
00:02:48,710 --> 00:02:49,550
If they don't.

39
00:02:49,640 --> 00:02:54,740
We want to ask them again and again and again until they enter a valid integer.

40
00:02:54,740 --> 00:02:58,900
So we declare a variable named number and initialize it to 0.

41
00:02:58,910 --> 00:03:05,390
Notice now how we prompt the user for the integer and read it from the console before the loop begins.

42
00:03:05,390 --> 00:03:07,860
Now we have the value they entered in number.

43
00:03:08,150 --> 00:03:10,000
The loop condition is now evaluated.

44
00:03:10,010 --> 00:03:15,680
And if the user's number is not greater than or equal to 100 then we have a valid number and we never

45
00:03:15,680 --> 00:03:16,490
go into the loop.

46
00:03:16,580 --> 00:03:19,550
We simply print the thanks message at the end.

47
00:03:19,580 --> 00:03:25,280
However if the user enters an integer that is greater than or equal to 100 we go into the loop and ask

48
00:03:25,280 --> 00:03:26,600
for another integer.

49
00:03:26,600 --> 00:03:29,440
Read it in and then we test again.

50
00:03:29,510 --> 00:03:33,890
This will continue until the user enters a number less than 100.

51
00:03:33,920 --> 00:03:36,350
Notice that we have some duplicated code here.

52
00:03:36,530 --> 00:03:41,020
We have the same output and input statements outside the loop and inside the loop.

53
00:03:41,420 --> 00:03:44,420
This is usually a clue that the code could be better.

54
00:03:44,540 --> 00:03:48,830
We'll make this code better in the next video when we discuss the do while loop.

55
00:03:48,830 --> 00:03:51,450
But this kind of code is commonly seen.

56
00:03:51,470 --> 00:03:58,100
Let's see another example in this example we asked the user to enter a number between 1 and 5.

57
00:03:58,100 --> 00:04:03,730
Notice the code is very similar to our previous example with the exception of the condition in the loop.

58
00:04:03,890 --> 00:04:06,050
In this case we're testing both ends.

59
00:04:06,110 --> 00:04:09,330
So if the number is less than or equal to one it's not valid.

60
00:04:09,500 --> 00:04:13,630
We also test number greater than equal to 5 which is also invalid.

61
00:04:14,030 --> 00:04:17,510
If either of these conditions is true then the number is invalid.

62
00:04:17,510 --> 00:04:25,160
So that's why we use the logical or here in this example we use a boolean flag to control our while

63
00:04:25,160 --> 00:04:25,940
loop.

64
00:04:25,940 --> 00:04:30,500
First we declare a boolean variable named done and we set it initially to false.

65
00:04:30,530 --> 00:04:35,640
The idea is that when this variable becomes true then the user entered a valid number.

66
00:04:36,020 --> 00:04:42,530
So the loop test while not done not done will be true since we set it to false so we enter the loop

67
00:04:43,250 --> 00:04:44,240
in the body of the loop.

68
00:04:44,240 --> 00:04:46,610
We prompt the user for a number and read it.

69
00:04:46,880 --> 00:04:53,080
If the number is not valid we display an error message and loop again since done is still false.

70
00:04:53,210 --> 00:04:58,550
If the number is valid we display thanks and said the done flag to true.

71
00:04:58,550 --> 00:05:01,920
Now the loop condition will fail and we exit the loop.

72
00:05:01,940 --> 00:05:05,540
There are many ways to write logic and to achieve the same outcome.

73
00:05:05,570 --> 00:05:08,060
Always remind yourself of the KISS principle.

74
00:05:08,060 --> 00:05:12,840
Keep it simple stupid or keep it short and simple or keep it simple and straightforward.

75
00:05:12,860 --> 00:05:14,330
However you want to think of it.

76
00:05:14,420 --> 00:05:16,210
Basically don't be too clever.

77
00:05:16,280 --> 00:05:18,530
Keep your code as simple as possible.

78
00:05:18,920 --> 00:05:23,280
Let's head over to the ID see some other examples of the wild.

79
00:05:23,400 --> 00:05:27,970
I'm in the section 9 workspace in the wild loop project.

80
00:05:28,510 --> 00:05:33,830
What I want to do is write a couple of wild loops some day count down when that counts up in a couple

81
00:05:33,830 --> 00:05:35,920
of more and more complicated ones.

82
00:05:35,990 --> 00:05:39,430
In this case I've already written one that counts down.

83
00:05:39,440 --> 00:05:45,230
So the idea is we ask the user to enter positive integer to start the count down and then we start the

84
00:05:45,230 --> 00:05:47,710
countdown and we blast off when we get to 1.

85
00:05:47,720 --> 00:05:51,970
So if they type in 5 we'll say five four three two one blastoff.

86
00:05:52,130 --> 00:05:55,580
OK so let's walk through this code so you can understand it.

87
00:05:55,610 --> 00:06:00,890
First thing we're doing is we're defining that name right up here that's where the use is going to enter

88
00:06:00,890 --> 00:06:04,570
the number into and let's say they entered a three.

89
00:06:04,610 --> 00:06:07,370
So they're going to enter the three and we're going to store it in.

90
00:06:07,520 --> 00:06:13,040
So I've gotten over here and it's value is three right now.

91
00:06:13,040 --> 00:06:18,210
Now we checked this condition is three greater than zero.

92
00:06:18,380 --> 00:06:19,590
Well that's true.

93
00:06:19,850 --> 00:06:25,880
So we execute the output statement which says just displayed Nahm and I'll do that over here on the

94
00:06:25,880 --> 00:06:27,220
display of three.

95
00:06:27,620 --> 00:06:32,790
And then I decremented Um remember when it's all alone on a line like this the predicament in a post

96
00:06:32,790 --> 00:06:34,920
that means exactly the same thing.

97
00:06:35,120 --> 00:06:38,770
So I just changed from a three to a two.

98
00:06:38,840 --> 00:06:43,660
I go back up and test the condition again is to greater than zero.

99
00:06:44,000 --> 00:06:51,000
It is I output the number which is 2 and then I decremented to 1.

100
00:06:51,100 --> 00:06:57,580
I'll check the condition again is one greater than zero it is so display the one then I decrement this

101
00:06:57,580 --> 00:07:04,090
to a zero and I check the condition one final time in this case zero greater than zero is not true.

102
00:07:04,420 --> 00:07:09,820
So I stop and I end up executing that line right after the loop blastoff.

103
00:07:09,940 --> 00:07:13,190
So what we end up with is three two one blastoff.

104
00:07:13,200 --> 00:07:13,570
OK.

105
00:07:13,600 --> 00:07:16,240
So that's a good way to walk through it.

106
00:07:16,240 --> 00:07:21,380
And what we'll do is we'll run this and let's do it with a 10.

107
00:07:22,050 --> 00:07:28,190
And then you can see the code going ten nine eight seven six five four three two one blastoff.

108
00:07:28,230 --> 00:07:37,190
OK so now let's write a while loop that counts up soil comment this coda right here and I'll paste some

109
00:07:37,190 --> 00:07:39,500
code that I've already written to save a little time.

110
00:07:39,590 --> 00:07:41,320
And let's walk through this code.

111
00:07:42,140 --> 00:07:50,960
In this case notice that I'm defining again declaring and defining this same variable name to be an

112
00:07:50,960 --> 00:07:52,110
integer.

113
00:07:52,130 --> 00:07:56,120
I asked the user to enter a positive integer to count up to.

114
00:07:56,120 --> 00:08:00,460
So in this case I want to count from 1 to whatever they typed in.

115
00:08:00,650 --> 00:08:01,670
And I'm reading that.

116
00:08:01,670 --> 00:08:04,900
So again suppose they typed in a three.

117
00:08:04,970 --> 00:08:09,910
So now I've gotten some and it's value here is three.

118
00:08:10,130 --> 00:08:14,830
I can't do what I did up here with just a single variable because I don't want to change numb.

119
00:08:14,840 --> 00:08:17,710
Numb is my target as to where I'm going to stop.

120
00:08:17,930 --> 00:08:21,800
So I need another counting variable or looping variable in this case.

121
00:08:21,800 --> 00:08:22,980
I want to use I.

122
00:08:23,210 --> 00:08:29,790
So I've got I over here and I'm initialising I one because that's where I want to start counting at.

123
00:08:29,960 --> 00:08:32,100
So I becomes one.

124
00:08:32,120 --> 00:08:32,900
All right.

125
00:08:32,900 --> 00:08:37,910
Now we do the loop we test the condition is none greater than the equal to I.

126
00:08:37,970 --> 00:08:43,400
So is three greater than or equal to 1 in this case.

127
00:08:43,520 --> 00:08:44,770
This is true.

128
00:08:44,810 --> 00:08:51,500
So what we do is we display I and I'll do the display over here will display I which is 1 and then we

129
00:08:51,500 --> 00:08:52,340
increment I.

130
00:08:52,340 --> 00:08:54,320
So now it is 2.

131
00:08:54,770 --> 00:09:02,880
We do the loop condition again is numb which is three greater than or equal to two.

132
00:09:02,940 --> 00:09:11,200
It is we execute the body of the loop so we print out which is now 2 k.

133
00:09:11,210 --> 00:09:12,340
Hope you guys are with me.

134
00:09:12,500 --> 00:09:15,670
I increment I I now becomes three.

135
00:09:15,770 --> 00:09:18,250
Then I go back up and I test the loop again.

136
00:09:18,720 --> 00:09:24,090
Is numb which is always going to be three is number greater than or equal to three.

137
00:09:24,160 --> 00:09:24,850
It is right.

138
00:09:24,850 --> 00:09:26,660
Three is equal to three.

139
00:09:26,660 --> 00:09:36,590
I want to output I again I use three and then I increment I now becomes four will test one more time

140
00:09:36,650 --> 00:09:40,040
is for greater than

141
00:09:42,950 --> 00:09:46,490
or sorry is three greater than or equal to

142
00:09:49,490 --> 00:09:50,750
it is not.

143
00:09:51,080 --> 00:09:53,210
So it fails at this point.

144
00:09:53,210 --> 00:09:57,030
Now we come down here and whatever statement would be here we would execute.

145
00:09:57,380 --> 00:09:57,930
OK.

146
00:09:58,070 --> 00:10:04,100
So you can see that walking through these examples is pretty easy to do it's kind of time consuming

147
00:10:04,100 --> 00:10:08,240
but once you get used to the logic you can pretty much do a lot of it in your head.

148
00:10:08,840 --> 00:10:15,920
OK so let's do another one now and clear this up and I'll comment this all out again.

149
00:10:20,960 --> 00:10:25,160
So in this case what we want to do is we want to do some input validation.

150
00:10:25,160 --> 00:10:29,960
And I've written the code again let me paste it in and let me indent all this.

151
00:10:29,960 --> 00:10:32,770
I don't know why it puts all flush left.

152
00:10:32,780 --> 00:10:33,710
There we go.

153
00:10:34,040 --> 00:10:40,670
OK so we've got an integer here called number that we've declared and we've initialized it to zero and

154
00:10:40,670 --> 00:10:43,940
we're asking the user to enter an integer less than 100.

155
00:10:44,270 --> 00:10:47,030
And we're reading that into that variable number.

156
00:10:47,300 --> 00:10:49,180
Right now we want to loop.

157
00:10:49,220 --> 00:10:51,870
Remember we want an integer less than 100.

158
00:10:52,010 --> 00:10:57,710
So we want to loop while that number they entered is not less than 100 so we could say not less than

159
00:10:57,710 --> 00:11:00,020
100 or greater than or equal to 100.

160
00:11:00,020 --> 00:11:02,240
Either case will work here.

161
00:11:02,240 --> 00:11:07,610
So in other words if the number they entered is greater than or equal to 100 it's not valid.

162
00:11:07,640 --> 00:11:13,190
So in that case we'll just ask them to enter an integer less than 100 again or prompting them to enter

163
00:11:13,190 --> 00:11:18,370
it and we're reading it and then we're just checking that while statement over and over and over.

164
00:11:18,530 --> 00:11:22,400
When this condition fails that's when we have a valid number.

165
00:11:22,720 --> 00:11:23,200
OK.

166
00:11:23,300 --> 00:11:25,390
So let's run this and we'll print out.

167
00:11:25,400 --> 00:11:27,410
Thanks when we have a valid number at the end.

168
00:11:27,410 --> 00:11:30,320
So let's run this and see what it looks like.

169
00:11:30,320 --> 00:11:33,820
Let's see I want to injure less than 100 let's let's do it correctly.

170
00:11:33,830 --> 00:11:42,290
We'll type in 50 and we get a thanks but if we run it and type in a number that's not less than 100

171
00:11:42,290 --> 00:11:45,110
or so we typed in 120.

172
00:11:45,110 --> 00:11:52,630
It prompts me again I'm in the loop now so say 100 15 thousand.

173
00:11:52,800 --> 00:11:57,270
It'll just keep going forever until I type in a valid number.

174
00:11:57,270 --> 00:12:00,780
And basically this is the basics of input validation.

175
00:12:00,780 --> 00:12:03,120
So ninety nine that's valid.

176
00:12:03,120 --> 00:12:03,940
Thanks.

177
00:12:04,110 --> 00:12:04,950
OK.

178
00:12:04,950 --> 00:12:08,970
So there you go you can walk through this the same way that I walk through the other one.

179
00:12:08,970 --> 00:12:11,380
Notice that you can write this condition in here.

180
00:12:11,430 --> 00:12:16,520
A lot of different ways because greater than or equal to 100 or not less than 100.

181
00:12:16,710 --> 00:12:20,910
So there's different ways that you can write that condition and you'll see it all kinds of ways out

182
00:12:20,910 --> 00:12:21,570
there.

183
00:12:21,570 --> 00:12:21,830
All right.

184
00:12:21,840 --> 00:12:28,230
So the last example I want to do is one using a flag a boolean flag to do input validation.

185
00:12:28,230 --> 00:12:32,920
So let me come at this out and copy that code in real quick.

186
00:12:33,750 --> 00:12:39,120
OK so there's the code and I will walk through this real slow and in detail so you can see what's going

187
00:12:39,120 --> 00:12:39,330
on.

188
00:12:39,330 --> 00:12:43,180
This is a common use case and this is a kind of code you see out there a lot.

189
00:12:43,200 --> 00:12:49,740
So in this case we've got a flag called done and we're initializing it to faults.

190
00:12:49,770 --> 00:12:52,240
Faults means that we're not done right.

191
00:12:52,290 --> 00:12:57,210
We still need to get more input from the user for whatever reason either we haven't started yet or they've

192
00:12:57,210 --> 00:13:00,510
entered something illegal or out of range.

193
00:13:00,840 --> 00:13:05,150
And I've got this variable right here that I've declared here called number that's the integer.

194
00:13:05,160 --> 00:13:06,980
That's what we're going to read into.

195
00:13:06,990 --> 00:13:12,780
Now it's important that we set that flag to false to begin because that's how we're getting into this

196
00:13:12,780 --> 00:13:13,230
loop.

197
00:13:13,350 --> 00:13:15,220
The first time.

198
00:13:15,360 --> 00:13:21,100
So don't just leave that to true or just don't leave it at nothing and take a chance that it is false.

199
00:13:21,190 --> 00:13:25,490
Explicitly said it's a false because that's going to get us in that loop the first time.

200
00:13:25,650 --> 00:13:30,790
So the first time we're going to say while not done well it isn't done right it's false.

201
00:13:30,810 --> 00:13:38,640
So we're in here and we ask to use to enter an integer between 1 and 5 and they type the number right

202
00:13:38,640 --> 00:13:38,910
there.

203
00:13:38,910 --> 00:13:41,660
We're going to store it in the variable number.

204
00:13:41,670 --> 00:13:45,600
Now we do a check if the number is less than or equal to one.

205
00:13:45,600 --> 00:13:47,400
Remember we want numbers.

206
00:13:47,410 --> 00:13:49,800
There's the one Here's the five.

207
00:13:49,890 --> 00:13:51,620
So we want numbers between there.

208
00:13:51,630 --> 00:13:52,320
Right.

209
00:13:52,350 --> 00:13:57,270
So we want 2 3 or 4 1 and 5 are not valid in this case.

210
00:13:57,450 --> 00:14:02,210
So if the number is less than or equal to 1 in other words the number is over here somewhere.

211
00:14:03,650 --> 00:14:06,080
Or the number is greater than or equal to 5.

212
00:14:06,080 --> 00:14:10,490
So the numbers over here somewhere then it's out of range.

213
00:14:10,490 --> 00:14:12,350
So we simply display out of range.

214
00:14:12,350 --> 00:14:13,580
Try again.

215
00:14:13,580 --> 00:14:16,280
Notice how we didn't change the Dunn flag.

216
00:14:16,430 --> 00:14:18,920
Dunn is still fault's right.

217
00:14:18,920 --> 00:14:22,490
So at this point we just executed that statement.

218
00:14:22,490 --> 00:14:27,020
We don't do the else part and we loop right back up to here.

219
00:14:27,930 --> 00:14:28,230
Right.

220
00:14:28,230 --> 00:14:33,210
Dunn is still false so we're going to go right back into the loop and output again and try an integer

221
00:14:33,210 --> 00:14:34,630
between 1 and 5.

222
00:14:34,650 --> 00:14:36,880
Grab the integer and so forth.

223
00:14:37,110 --> 00:14:39,540
Now when you do type an integer that's in range.

224
00:14:39,540 --> 00:14:47,540
Suppose we typed in a three then this if statement fails here and we go to the else and all we're doing

225
00:14:47,540 --> 00:14:52,460
here is saying thanks and then we set that flag to true.

226
00:14:52,460 --> 00:14:56,870
This is like super super important here don't forget to do that.

227
00:14:56,960 --> 00:14:58,850
That means we are done.

228
00:14:59,030 --> 00:15:06,140
So when we loop back up again here that condition fails and we're out of the loop.

229
00:15:06,410 --> 00:15:06,950
OK.

230
00:15:07,040 --> 00:15:11,820
So hopefully you can walk through this and just take it a step at a time and really understand it.

231
00:15:11,930 --> 00:15:18,920
The challenge exercise at the end of this section is pretty tricky and hard challenge but it uses this

232
00:15:18,920 --> 00:15:24,500
kind of logic to ensure that you know you've got input validation and you're going to prompt the user

233
00:15:24,500 --> 00:15:26,670
every time that they are not in range.

234
00:15:26,670 --> 00:15:34,990
Right so let me clear this and let's run this example.

235
00:15:35,040 --> 00:15:37,680
So we're going to enter an integer between 1 and 5.

236
00:15:37,710 --> 00:15:41,160
Let's say we type 1 1 is not valid.

237
00:15:41,160 --> 00:15:44,440
We want it to be between 1 and 5 again to 3 or 4.

238
00:15:44,520 --> 00:15:45,720
So that's no good.

239
00:15:45,780 --> 00:15:47,730
Five is no good.

240
00:15:47,730 --> 00:15:49,450
70 is no good.

241
00:15:49,490 --> 00:15:49,770
Right.

242
00:15:49,770 --> 00:15:51,990
Negative 12 is no good.

243
00:15:51,990 --> 00:15:56,430
So let's give it something good just give it a three something that's right in the middle.

244
00:15:56,430 --> 00:15:58,370
Thanks.

245
00:15:58,460 --> 00:16:05,690
So you can see that and using this kind of logic is better than using this sort of logic where you've

246
00:16:05,690 --> 00:16:11,130
got a statement repeated here and then the same statement over here and you've got duplicated code.

247
00:16:11,210 --> 00:16:13,280
We don't have that here.

248
00:16:13,310 --> 00:16:18,410
And the reason we don't have that here is because we're using that flag to really decide whether we're

249
00:16:18,410 --> 00:16:20,180
in the loop or not.

250
00:16:20,210 --> 00:16:25,850
Now in the next video we'll talk about a do while loop where we're doing the condition at the end and

251
00:16:25,850 --> 00:16:28,270
that makes this kind of code even nicer.

252
00:16:28,660 --> 00:16:31,300
OK so that's the end of this video.

253
00:16:31,460 --> 00:16:36,560
Please try these examples yourself come up with your own versions of them and walk through them so that

254
00:16:36,560 --> 00:16:39,270
you really understand the logic and what's going on.
