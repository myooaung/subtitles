WEBVTT
1
00:00:05.550 --> 00:00:07.400
Hello welcome back to the challenge.

2
00:00:07.410 --> 00:00:09.690
3 solution for Section 19.

3
00:00:09.810 --> 00:00:12.240
I am in the section 19 workspace in the challenge.

4
00:00:12.240 --> 00:00:18.030
Underscore 3 on his core solution project and this is the project where we try to find the word matches

5
00:00:18.030 --> 00:00:20.090
in Romeo and Juliet play.

6
00:00:20.130 --> 00:00:24.540
So let me go over my solution and I wrote a simple function to help me with the solution and we'll talk

7
00:00:24.540 --> 00:00:28.650
about the function in just a second but let's just go through the solution at the beginning here.

8
00:00:28.650 --> 00:00:29.710
Here's my main.

9
00:00:29.850 --> 00:00:32.950
I've got my input file stream right here called infile.

10
00:00:32.970 --> 00:00:37.050
Here's the word that I want to find That's what the users want to give us.

11
00:00:37.050 --> 00:00:38.450
Here is the word that I've read.

12
00:00:38.460 --> 00:00:42.540
So each time I loop through that file I'm going to read a word and then I've got the word count and

13
00:00:42.540 --> 00:00:48.720
match count which just counters that were going to increase when we see a word and when we see a matching

14
00:00:48.720 --> 00:00:49.270
word.

15
00:00:49.530 --> 00:00:50.480
OK so that's it.

16
00:00:50.490 --> 00:00:52.140
That's the preamble there.

17
00:00:52.290 --> 00:00:56.050
And here's the good old recipe that we always adhere to right.

18
00:00:56.250 --> 00:00:59.080
I want to open the file Romeo and Juliet if it's not open.

19
00:00:59.080 --> 00:01:01.100
I display an error and I leave.

20
00:01:01.380 --> 00:01:05.550
So let's get to the part of the program that's doing all the work here.

21
00:01:05.550 --> 00:01:10.610
So right here on 9:29 I'm asking the user to enter the substring to search for.

22
00:01:10.620 --> 00:01:14.270
Suppose they enter love.

23
00:01:14.640 --> 00:01:18.240
I'm reading that in from standard input and then I'm in my loop here.

24
00:01:18.240 --> 00:01:23.020
So while I want to read a word from infile.

25
00:01:23.130 --> 00:01:25.380
OK so I'm going to stop at any whitespace.

26
00:01:25.380 --> 00:01:32.520
I'm using the extraction operator here so I'm going to read a word into Word read and if it didn't fail

27
00:01:32.520 --> 00:01:36.880
and if it didn't give me an entire file I've got to word someone to increment the word count.

28
00:01:37.100 --> 00:01:41.150
I've seen a word and then I'm going to call a function which I'm going to show you in a minute that

29
00:01:41.250 --> 00:01:48.960
I wrote called Find underscores substring and the idea here is I send into this function the word that

30
00:01:48.960 --> 00:01:52.200
I want to find and the word that was read from the file.

31
00:01:52.410 --> 00:01:59.250
And if this word happens to be a substring in that word it's going to return true when it returns true.

32
00:01:59.250 --> 00:02:02.210
I increment the match count for doesn't return true.

33
00:02:02.220 --> 00:02:06.510
I don't increment the match count and I just simply go back up and loop again.

34
00:02:06.570 --> 00:02:08.180
That's it pretty straightforward.

35
00:02:08.310 --> 00:02:14.820
When I'm done with the loop I've hit the end of file I simply display how many words were searched and

36
00:02:14.820 --> 00:02:16.900
how many times my matching word was found.

37
00:02:17.810 --> 00:02:18.530
OK that's it.

38
00:02:18.530 --> 00:02:25.230
So let's talk about that fine street substring function now which I wrote a peer and here it is this

39
00:02:25.230 --> 00:02:29.690
function as I said expects two parameters two strings and they're both Konst refs.

40
00:02:29.910 --> 00:02:30.610
In this case.

41
00:02:30.660 --> 00:02:37.360
What's the word to find the word to find is that the user gave us love which is being passed into this.

42
00:02:37.530 --> 00:02:38.820
And what's the target.

43
00:02:38.820 --> 00:02:43.250
The target is the word that we just read from the file so maybe we read the word lovely.

44
00:02:43.380 --> 00:02:48.180
Well we word there we read the word Romeo or whatever word we read.

45
00:02:48.340 --> 00:02:54.640
So what we're going to do is we're going to use the find method in the String class which says hey target

46
00:02:54.940 --> 00:03:03.730
which is this guy find that substring or to find within you and give me back the index of where you

47
00:03:03.730 --> 00:03:04.660
found it.

48
00:03:04.780 --> 00:03:06.870
If I really don't care about the index I just wanted that.

49
00:03:06.880 --> 00:03:08.590
I just wondered if it was there or not.

50
00:03:08.600 --> 00:03:15.270
So if it returns stood string no position that means that it was not in the word and I return false

51
00:03:15.310 --> 00:03:16.980
otherwise I return true.

52
00:03:17.080 --> 00:03:19.510
Like I said I really don't care what position it's in.

53
00:03:19.510 --> 00:03:23.480
I just want to know whether the substring exists in that target or not.

54
00:03:23.530 --> 00:03:25.760
That's it really really simple.

55
00:03:25.780 --> 00:03:26.680
Let's run this

56
00:03:29.350 --> 00:03:35.720
and that search for again the search for Romeo I said search for Juliet.

57
00:03:35.720 --> 00:03:38.700
It's time Juliet.

58
00:03:39.030 --> 00:03:39.940
Forty nine times.

59
00:03:39.940 --> 00:03:41.680
We found the word Juliet.

60
00:03:41.690 --> 00:03:41.940
All right.

61
00:03:41.950 --> 00:03:42.580
That's it.

62
00:03:42.580 --> 00:03:47.050
Now suppose we're trying to debug this along the way we really want to see what word was actually read

63
00:03:47.050 --> 00:03:48.220
from the file.

64
00:03:48.220 --> 00:03:53.110
So what we could do here or even better let's just see the words that match we know other words that

65
00:03:53.110 --> 00:03:55.030
match right in this statement right here right.

66
00:03:55.030 --> 00:03:56.850
That's why we're incrementing match count.

67
00:03:56.860 --> 00:04:02.800
So what we could do is write in here we could States that stood out and we could display the word that

68
00:04:02.800 --> 00:04:09.190
we just matched right which was the word that we read so we could display a word read followed by a

69
00:04:09.190 --> 00:04:13.310
space and new lines that we would just display them one after the other.

70
00:04:13.330 --> 00:04:15.580
So let's try running this again now.

71
00:04:15.580 --> 00:04:17.870
And let's look for the word love.

72
00:04:17.890 --> 00:04:18.370
There we go.

73
00:04:18.370 --> 00:04:25.210
Those are all the matches that we found lovers love love with a question mark punctuation love performing.

74
00:04:25.210 --> 00:04:28.350
You can see here love song Dear Loved.

75
00:04:28.360 --> 00:04:28.820
There you go.

76
00:04:28.820 --> 00:04:33.250
So it gives us a pretty good gauge as to the correctness of our program.

77
00:04:33.250 --> 00:04:37.690
Obviously we would have to do some real testing and absolutely know ahead of time how many times this

78
00:04:37.690 --> 00:04:39.080
word exists.

79
00:04:39.100 --> 00:04:44.370
Let's try it again with a capital L would love four times.

80
00:04:44.410 --> 00:04:44.960
OK.

81
00:04:45.310 --> 00:04:47.190
So there you go.

82
00:04:48.850 --> 00:04:49.900
And let's see.

83
00:04:49.900 --> 00:04:52.520
How about Romeo.

84
00:04:52.660 --> 00:04:58.300
You can see Romeo was found 132 times and it was found with a period at the end a period at the end

85
00:04:58.300 --> 00:05:03.120
again at the end of a sentence with question marks Romeos with an apostrophe.

86
00:05:03.110 --> 00:05:04.600
So that's it.

87
00:05:04.600 --> 00:05:05.890
That's the solution.

88
00:05:05.890 --> 00:05:09.940
If you came up with another solution as you figured out a way to do it by reading a whole line of time

89
00:05:09.940 --> 00:05:12.440
and then splitting up the street the words out of the line.

90
00:05:12.520 --> 00:05:13.410
That's a lot more work.

91
00:05:13.420 --> 00:05:15.560
But if you did that you think it's cool.

92
00:05:15.610 --> 00:05:18.310
Post it out there so we can all learn from one another.

93
00:05:18.310 --> 00:05:21.290
All right so I hope you enjoy this challenge in the next video.

94
00:05:21.290 --> 00:05:24.240
We'll learn about output streams and writing to files.
