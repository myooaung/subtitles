WEBVTT
1
00:00:05.540 --> 00:00:11.230
It this video will look at the syntax for accessing individual vector elements.

2
00:00:11.490 --> 00:00:17.040
The first way to access vector elements is to use the array syntax we've already learned using the subscript

3
00:00:17.040 --> 00:00:17.670
operator.

4
00:00:17.670 --> 00:00:23.220
That's the square brackets we use the name of the vector followed by the square brackets with the index

5
00:00:23.220 --> 00:00:26.400
of the vector element we want inside the square brackets.

6
00:00:26.610 --> 00:00:33.450
For example test scores one refers to the element at index 1 in the test scores vector in the code example

7
00:00:33.450 --> 00:00:37.730
at the bottom you can see that the syntax is exactly as it was for a race.

8
00:00:37.740 --> 00:00:42.000
Remember that vector subscripting or indexing is the same as in arrays.

9
00:00:42.150 --> 00:00:43.280
It starts at zero.

10
00:00:43.320 --> 00:00:46.620
So the first element of an array is at index 0.

11
00:00:46.680 --> 00:00:50.200
It's important to understand when we use the subscript operator with a vector.

12
00:00:50.370 --> 00:00:52.460
No bounds checking will be done.

13
00:00:52.770 --> 00:00:55.030
You have to do it yourself as with a race.

14
00:00:55.170 --> 00:00:58.440
Let's look at another way of accessing vector elements.

15
00:00:58.440 --> 00:01:00.160
We can also access vector elements.

16
00:01:00.160 --> 00:01:02.070
You see the AT method.

17
00:01:02.310 --> 00:01:08.910
This is the vector syntax since when we create a vector we're really creating an object in object oriented

18
00:01:08.910 --> 00:01:09.570
jargon.

19
00:01:09.570 --> 00:01:12.620
Then we can ask objects to perform operations.

20
00:01:12.630 --> 00:01:14.760
These operations are called methods.

21
00:01:14.820 --> 00:01:17.240
The syntax is simple the object name.

22
00:01:17.250 --> 00:01:22.890
In this case the name of the vector followed by a dot called the dot operator followed by the name of

23
00:01:22.890 --> 00:01:24.980
the operation we want performed.

24
00:01:25.020 --> 00:01:26.720
This is the method name.

25
00:01:26.760 --> 00:01:30.750
Don't worry about the jargon for now it will come before you know it and will cover it in depth.

26
00:01:30.750 --> 00:01:37.770
When we talk about object oriented programming the C++ vector has a method or operation called at a

27
00:01:37.770 --> 00:01:38.420
T.

28
00:01:38.790 --> 00:01:44.640
So you can ask the vector to give you an element at a specific position which you provide inside the

29
00:01:44.640 --> 00:01:45.630
parentheses.

30
00:01:45.870 --> 00:01:50.140
This is actually much more intuitive since the name at provides context.

31
00:01:50.160 --> 00:01:56.160
So in the example we've declared and initialized the vector named test scores to the 5 integers one

32
00:01:56.160 --> 00:01:58.280
hundred ninety five ninety nine.

33
00:01:58.290 --> 00:02:06.430
87 and 88 if we want to access a specific element we use the method and provide the element index.

34
00:02:06.510 --> 00:02:09.800
You can see that the syntax is very easy to read and understand.

35
00:02:09.930 --> 00:02:16.350
Test scores at 0 will refer to the first element in the vector that element at position 0.

36
00:02:16.350 --> 00:02:21.600
We can also use the same syntax when we want to modify vector elements in this example.

37
00:02:21.600 --> 00:02:27.170
We're reading 5 integers from the console and storing these elements into the test scores vector.

38
00:02:27.240 --> 00:02:30.870
The last statement is an assignment statement as we saw with a raise.

39
00:02:30.960 --> 00:02:34.880
We're storing 90 into the first element of the test scores vector.

40
00:02:34.890 --> 00:02:36.800
You're probably thinking OK that's pretty easy.

41
00:02:36.810 --> 00:02:41.890
Vector's is just as easy to use as arrays but why do they change in size dynamically.

42
00:02:41.910 --> 00:02:48.340
The vector has a method called pushback that adds a new element to the end of the vector.

43
00:02:48.420 --> 00:02:51.770
Remember all vector elements must be of the same type.

44
00:02:51.870 --> 00:02:56.290
So the element you add must be of the same type as all the other vector elements.

45
00:02:56.400 --> 00:03:01.920
In this example we've created a vector called test scores that contains three integers one hundred ninety

46
00:03:01.920 --> 00:03:03.510
five and ninety nine.

47
00:03:04.020 --> 00:03:09.240
If this were an array and we wanted to add another test score we'd be stuck since arrays are fixed in

48
00:03:09.240 --> 00:03:10.350
size.

49
00:03:10.350 --> 00:03:15.960
However with vectors we can use the pushback method and provide the integer you want to add within the

50
00:03:15.960 --> 00:03:17.430
parentheses.

51
00:03:17.460 --> 00:03:22.950
You can see that I'm asking the test scores vector to push back 80 and then 90.

52
00:03:22.980 --> 00:03:26.390
This will add 80 and then 90 to the end of the vector.

53
00:03:26.400 --> 00:03:32.330
Now the vector will contain five elements one hundred ninety five ninety nine 80 and 90.

54
00:03:32.340 --> 00:03:33.420
How does this work.

55
00:03:33.450 --> 00:03:34.350
You don't have to worry about it.

56
00:03:34.350 --> 00:03:39.060
That's the beauty of vectors and of the other classes in the standard template library.

57
00:03:39.060 --> 00:03:44.730
The vector will take care of allocating or deallocating space adding new values to that space and so

58
00:03:44.730 --> 00:03:45.420
forth.

59
00:03:45.420 --> 00:03:47.850
You can concentrate on solving your problem.

60
00:03:48.330 --> 00:03:53.180
Ok but what happens if you're using ADD or some other vector method and you go out of bounds.

61
00:03:53.310 --> 00:03:58.240
Let's see if you go out of bounds and you're using a method that does bounds checking.

62
00:03:58.440 --> 00:04:01.260
C++ will throw an exception.

63
00:04:01.290 --> 00:04:06.540
That's the jargon used to say that an exceptional condition has been encountered and the program can't

64
00:04:06.540 --> 00:04:11.010
continue an error message is displayed and the program will terminate.

65
00:04:11.010 --> 00:04:12.170
This is a good thing.

66
00:04:12.210 --> 00:04:16.710
Now you have an error message that tells you what the problem was and you could fix it.

67
00:04:16.710 --> 00:04:21.260
The error message in this case is pretty long but it's telling you exactly what happened.

68
00:04:21.660 --> 00:04:25.770
The error message may look different depending on the compiler you have but the information provided

69
00:04:25.770 --> 00:04:27.050
will be the same.

70
00:04:27.360 --> 00:04:30.700
In this case I bolted the important parts of the error message.

71
00:04:30.810 --> 00:04:36.820
You can see out-of range vector range check and the number is 5 and 2.

72
00:04:36.840 --> 00:04:41.820
When you look back at your code you'll see that vector has two elements and you wanted element at index

73
00:04:41.820 --> 00:04:43.440
5.

74
00:04:43.440 --> 00:04:48.810
You want your program to terminate or crash during testing so you can fix errors but you don't want

75
00:04:48.810 --> 00:04:50.690
it to crash in production.

76
00:04:50.700 --> 00:04:52.760
This is where you can do exception handling.

77
00:04:52.890 --> 00:04:58.050
This involves catching these exceptions as the program runs and dealing with them so that the program

78
00:04:58.050 --> 00:04:59.280
doesn't crash.

79
00:04:59.490 --> 00:05:03.470
Exception handling is a more advanced topic but I want to cover the basics.

80
00:05:03.600 --> 00:05:08.110
So there'll be a set of at the end of the course just an exception handling.

81
00:05:08.110 --> 00:05:12.160
I hope you can see how much better vectors are than arrays and why you should use vectors in modern

82
00:05:12.160 --> 00:05:13.480
C++.

83
00:05:13.480 --> 00:05:19.890
Now let's head over to code like and use what we learned and write some code with vectors so now I'm

84
00:05:19.910 --> 00:05:20.830
in code right.

85
00:05:21.040 --> 00:05:23.500
And let's do some examples with vectors.

86
00:05:23.770 --> 00:05:29.760
I'm in the seventh section workspace under the vector's project and here's my main file.

87
00:05:29.830 --> 00:05:32.160
Notice that I'm including the vector include file.

88
00:05:32.170 --> 00:05:35.170
You must do this in order to use vectors also.

89
00:05:35.170 --> 00:05:37.520
Vectors belong to the standard namespace.

90
00:05:37.540 --> 00:05:43.220
So either you use the namespace standard or you will have to do as t d scope resolution operator.

91
00:05:43.300 --> 00:05:44.910
Everywhere you use vectors.

92
00:05:45.280 --> 00:05:49.410
Let's talk about a couple of different ways to create vectors in this first example here.

93
00:05:49.420 --> 00:05:51.880
I can create a vector called vowels.

94
00:05:51.940 --> 00:05:54.860
And it's a vector of characters and that's the syntax.

95
00:05:55.120 --> 00:05:57.810
We put the type inside the angle brackets.

96
00:05:57.840 --> 00:06:02.930
So in this case I've got vowels is a vector of characters and this is an empty vector.

97
00:06:03.220 --> 00:06:06.160
OK it's of size zero there's nothing in there right now.

98
00:06:06.160 --> 00:06:11.850
The only way to add things to it is to do something like push back which would do that a bit.

99
00:06:11.860 --> 00:06:16.010
The second example creates a vector called foules again.

100
00:06:16.210 --> 00:06:19.550
In this case it's five characters long.

101
00:06:19.840 --> 00:06:22.170
And each one is initialized to 0.

102
00:06:22.660 --> 00:06:25.770
This third example here which is the one I'm going to use in this example.

103
00:06:25.960 --> 00:06:31.480
I'm using an initializer list here so I'm initializing the vector vowels which is again is a vector

104
00:06:31.480 --> 00:06:33.940
of characters to the characters a.

105
00:06:34.180 --> 00:06:40.150
Oh you which are my vowels again remember that the character literals have single quotes around them

106
00:06:40.150 --> 00:06:41.950
not double quotes.

107
00:06:41.950 --> 00:06:49.150
So at this point I can simply output vowels Sub-Zero a Volvo for which I expect to predict a and you

108
00:06:49.150 --> 00:06:55.450
respectively notice that even though I'm using a vector I'm using the array syntax so it's very very

109
00:06:55.450 --> 00:06:56.140
familiar.

110
00:06:56.140 --> 00:07:01.990
Also remember that using the subscript notation does not do bounds checking.

111
00:07:02.240 --> 00:07:04.290
OK so let me run this.

112
00:07:05.140 --> 00:07:06.450
So this is my sample run.

113
00:07:06.490 --> 00:07:07.580
There's my lower case.

114
00:07:07.630 --> 00:07:12.130
My lower case you just expect.

115
00:07:12.180 --> 00:07:15.130
All right so now let's take a look at another declaration of vector.

116
00:07:15.280 --> 00:07:21.480
In this first example here I'm creating a vector called test scores which is a vector of integers and

117
00:07:21.540 --> 00:07:23.460
I'm creating a vector of 3 integers.

118
00:07:23.460 --> 00:07:28.060
In this case all of them will be initialized to zero in the second example.

119
00:07:28.110 --> 00:07:30.710
I'm creating the test scores vector again.

120
00:07:31.050 --> 00:07:32.390
Obviously I have to comment them out.

121
00:07:32.400 --> 00:07:33.740
You can't use the same name twice.

122
00:07:33.740 --> 00:07:35.340
That's why I'm doing this.

123
00:07:35.340 --> 00:07:37.990
It's a vector of integers three of them.

124
00:07:38.070 --> 00:07:40.480
Each one is initialized to 100.

125
00:07:40.760 --> 00:07:44.250
And so those are two variants for constructing these vector objects.

126
00:07:44.390 --> 00:07:47.310
That one I'm going to use is this one right here where I'm saying.

127
00:07:47.310 --> 00:07:51.680
Test scores again is a vector of integers and I'm initializing them to 100.

128
00:07:51.720 --> 00:07:53.440
98 in 89.

129
00:07:53.460 --> 00:07:59.940
So in this case I'm going to get exactly three elements in my vector my vector will be of size 3.

130
00:07:59.940 --> 00:08:02.750
OK so let's comment this out here.

131
00:08:03.020 --> 00:08:08.260
And in this case I expect it to display 198 and 89.

132
00:08:08.280 --> 00:08:10.790
Again here I'm using the array syntax.

133
00:08:10.980 --> 00:08:13.980
So let me run this.

134
00:08:14.430 --> 00:08:19.440
And there you go one hundred ninety eight eighty nine using array syntax.

135
00:08:19.440 --> 00:08:28.380
Now we can also use vector syntax so let me and comment this in here you can see I'm saying test scores

136
00:08:28.410 --> 00:08:30.120
dot at zero.

137
00:08:30.960 --> 00:08:34.020
Test scores at one test scores at two.

138
00:08:34.020 --> 00:08:39.570
So in this case I'm using the at method to give me the value at that specific index.

139
00:08:39.600 --> 00:08:46.690
Same idea except that this is a method and this will be bounced checked which is very important to understand.

140
00:08:47.090 --> 00:08:53.340
Also after I print out those three numbers I'm saying there are so many scores in the vector.

141
00:08:53.340 --> 00:08:54.600
OK so what does that mean.

142
00:08:54.600 --> 00:08:56.370
Well notice the size method here.

143
00:08:56.370 --> 00:08:59.080
This is a method in the vector class.

144
00:08:59.370 --> 00:09:03.090
So I can have my vector name and I can say something like that size.

145
00:09:03.090 --> 00:09:04.230
It's that simple.

146
00:09:04.230 --> 00:09:08.030
And this will return however many items are in the vector right now.

147
00:09:08.040 --> 00:09:09.390
Right now I have three of them.

148
00:09:09.390 --> 00:09:13.070
So I expect this to say there are three scores in the vector.

149
00:09:13.140 --> 00:09:16.440
Remember the vector can grow and shrink dynamically.

150
00:09:16.500 --> 00:09:19.360
So it's important to be able to ask it hey how big are you.

151
00:09:19.480 --> 00:09:21.210
That's what the size method does.

152
00:09:21.390 --> 00:09:28.960
So I'll run this one more time and you can see here my test scores using array syntax 198 89.

153
00:09:28.980 --> 00:09:32.740
Now my test scores using the vector syntax 198 89.

154
00:09:32.760 --> 00:09:35.950
We expect that because the vector hasn't changed.

155
00:09:36.330 --> 00:09:38.760
But here it says there are three scores in the vector.

156
00:09:38.760 --> 00:09:40.950
So here we're asking the vector hey how big are you.

157
00:09:40.950 --> 00:09:41.940
What's your size.

158
00:09:41.940 --> 00:09:43.230
And it's returning a 3.

159
00:09:43.290 --> 00:09:44.420
In this example here.

160
00:09:44.610 --> 00:09:49.600
But we're going to do is we're going to actually put some information into the vector.

161
00:09:49.620 --> 00:09:52.670
We're going to use the vector syntax to this point forward.

162
00:09:52.740 --> 00:09:59.130
So here I'm saying two or three test scores and then I'm grabbing three integers from the console and

163
00:09:59.130 --> 00:10:00.710
I'm putting the first one at zero.

164
00:10:00.710 --> 00:10:02.940
The second one at one and the third one too.

165
00:10:03.060 --> 00:10:05.420
So I'm changing those vector elements.

166
00:10:05.730 --> 00:10:07.890
And then I just want to display them out again.

167
00:10:07.920 --> 00:10:09.600
So I come at this.

168
00:10:10.170 --> 00:10:12.690
OK so let's do that build and run again.

169
00:10:15.020 --> 00:10:17.660
Right now we've got 198 and 89 in there.

170
00:10:17.660 --> 00:10:22.170
So let's just say I want 10 20 and 30 and I want to display them out.

171
00:10:22.210 --> 00:10:22.740
There you go.

172
00:10:22.750 --> 00:10:25.020
Updated test scores is 10 20 and 30.

173
00:10:25.020 --> 00:10:30.280
So you can see that we've actually changed the contents of those vector elements.

174
00:10:30.280 --> 00:10:33.490
Now let's talk a little bit about the dynamic nature of vectors.

175
00:10:33.480 --> 00:10:35.620
This is the part this really really cool.

176
00:10:36.070 --> 00:10:37.900
I'm going to uncomment this spit out here

177
00:10:40.650 --> 00:10:45.360
and notice the code here it says enter a test score to add to the vector remember the vector at this

178
00:10:45.360 --> 00:10:48.220
point has three elements in it.

179
00:10:48.390 --> 00:10:50.820
I need to read this into some variable.

180
00:10:50.850 --> 00:10:54.030
So I've created a simple variable right here called skorts you add.

181
00:10:54.030 --> 00:10:55.470
It's just an integer.

182
00:10:55.470 --> 00:10:56.370
This is not a vector.

183
00:10:56.370 --> 00:10:57.300
This is not an array.

184
00:10:57.300 --> 00:11:03.000
This is just a plain old integer variable initializing it to zero that's the best practice.

185
00:11:03.300 --> 00:11:09.660
And I'm reading an integer from the keyboard from the user and putting it into score to add then what

186
00:11:09.660 --> 00:11:16.380
I'm going to do is I'm going to tell the test scores vector to push that integer at the back of the

187
00:11:16.380 --> 00:11:17.050
vector.

188
00:11:17.270 --> 00:11:21.820
So what's going to add it to the vector if the vector needs to increase in size.

189
00:11:21.960 --> 00:11:22.570
It will.

190
00:11:22.740 --> 00:11:28.770
That's nothing we have to do handles that automatically that I'm going to say enter one more test score.

191
00:11:28.770 --> 00:11:33.710
So I've read another test score from the console and I'll push that score on.

192
00:11:33.900 --> 00:11:39.560
So at this point when we display we should have five integers.

193
00:11:39.570 --> 00:11:46.350
Now in the vector I'm going to display them all at 0 1 2 3 and 4 and then I'm going to say hey test

194
00:11:46.350 --> 00:11:50.250
scores what's your size and I expect the five here.

195
00:11:50.250 --> 00:11:58.850
OK so let's try that so when I try my test scores again I'll say 10 20 and 30.

196
00:11:58.940 --> 00:12:04.170
Now remember our vector contains three integers right now 10 20 and 30.

197
00:12:04.190 --> 00:12:08.380
So let's enter a test score to add let's add a 100.

198
00:12:08.450 --> 00:12:10.320
Now I would say Give me one more.

199
00:12:10.700 --> 00:12:12.500
Let's put in five.

200
00:12:12.520 --> 00:12:14.240
Maybe I got some extra credit.

201
00:12:14.570 --> 00:12:20.270
Now when I press center I should expect to see five integers displayed as well as the size of the vector

202
00:12:20.270 --> 00:12:20.990
not being 5.

203
00:12:20.990 --> 00:12:24.480
So I'm going to press center and that's exactly what I see.

204
00:12:24.560 --> 00:12:28.200
The test scores are 10 20 30 100 105.

205
00:12:28.280 --> 00:12:30.880
Then it says there are enough five scores in the vector.

206
00:12:30.900 --> 00:12:32.090
That's pretty cool.

207
00:12:32.090 --> 00:12:38.990
Let me show you an example of an exception right here I'm saying this should cause an exception because

208
00:12:38.990 --> 00:12:47.000
I'm trying to access test scores at 10 if I tried to do something like this and just used a race syntax

209
00:12:48.650 --> 00:12:49.040
like that.

210
00:12:49.040 --> 00:12:50.750
No bounds checking will happen.

211
00:12:50.780 --> 00:12:53.090
I might just get a crash with no error message or anything.

212
00:12:53.090 --> 00:12:59.720
Instead I'm actually saying at 10 and we could try to put a new line it's not going to matter much because

213
00:12:59.720 --> 00:13:03.020
it's not going to do that because there is no tempo element.

214
00:13:03.020 --> 00:13:06.260
Let me run this again and I'll go into those numbers again.

215
00:13:07.060 --> 00:13:12.470
OK so a gamble set 10 20 30 that's pushing 100 and 105.

216
00:13:12.470 --> 00:13:15.440
Now we should get an exception and there's the exception.

217
00:13:15.530 --> 00:13:17.450
You can see the program still stopping.

218
00:13:17.780 --> 00:13:23.450
But there's my exception terminate called after throwing an instance of out of range.

219
00:13:23.450 --> 00:13:28.360
There's a range checking problem which is it 10 in disguise five big.

220
00:13:28.730 --> 00:13:32.240
So that gives you a really really good clue as to what's going on.

221
00:13:32.390 --> 00:13:32.590
Right.

222
00:13:32.600 --> 00:13:35.440
I'm going to comment that out so it won't affect us again.

223
00:13:35.870 --> 00:13:41.680
And then the last thing we'll do is I'll show you an example of using a two dimensional vector uncomment.

224
00:13:41.690 --> 00:13:42.390
All of this.

225
00:13:42.440 --> 00:13:42.770
All right.

226
00:13:42.770 --> 00:13:49.920
So here how do we declare a two dimensional vector Well a two dimensional vector is a vector of vectors.

227
00:13:50.150 --> 00:13:54.200
So it's a vector of vectors and this is how we declare a vector vectors.

228
00:13:54.200 --> 00:14:00.460
I want to declare a vector that contains within it not it's not floats not doubles but a vector.

229
00:14:00.470 --> 00:14:04.070
In this case a vector of integers and that's my movie ratings.

230
00:14:04.160 --> 00:14:06.030
I can initialise them right here.

231
00:14:06.200 --> 00:14:12.200
So going horizontally that would be the first reviewer The second reviewer The third reviewer and going

232
00:14:12.200 --> 00:14:16.510
vertically this would be the first movie the second movie the third movie in the fourth movie.

233
00:14:16.640 --> 00:14:22.700
Now just like I showed you in the slides with the Rays I can use array syntax so I could say here the

234
00:14:22.700 --> 00:14:29.750
movie ratings for review are number one using a syntax and I would expect this to print out 1 2 3 4.

235
00:14:29.750 --> 00:14:33.040
That's the first reviewer right up here.

236
00:14:33.140 --> 00:14:37.520
And in order to use vector syntax we just use add but we use it twice.

237
00:14:37.610 --> 00:14:39.110
Give me the rating at zero.

238
00:14:39.110 --> 00:14:40.610
That gives me this guy.

239
00:14:41.090 --> 00:14:47.350
And then once I have that guy I can take at zero for him or at one and the next line and so forth.

240
00:14:47.360 --> 00:14:55.400
So if I run this I would expect to see one two three four both times so let's run it and we'll get by

241
00:14:55.400 --> 00:14:58.760
this part one more time.

242
00:14:59.360 --> 00:15:00.000
And there you go.

243
00:15:00.000 --> 00:15:03.500
Here the movie Ready's reviewed over one array syntax.

244
00:15:03.500 --> 00:15:04.660
One two three four.

245
00:15:04.760 --> 00:15:07.020
Here the movie ratings prove you were number two.

246
00:15:07.550 --> 00:15:08.160
Number one again.

247
00:15:08.170 --> 00:15:08.540
That's right.

248
00:15:08.540 --> 00:15:10.150
Using vector syntax.

249
00:15:10.160 --> 00:15:12.850
One two three four.

250
00:15:12.900 --> 00:15:17.130
OK so that basically covers the fundamentals of vectors.

251
00:15:17.270 --> 00:15:21.560
How to use them there's so much more effect and we'll talk about all of that when we talk about the

252
00:15:21.560 --> 00:15:22.930
standard template library.

253
00:15:22.940 --> 00:15:28.760
But congratulations you've just now created objects used to object methods and we're on the way to object

254
00:15:28.760 --> 00:15:29.810
oriented programming.
