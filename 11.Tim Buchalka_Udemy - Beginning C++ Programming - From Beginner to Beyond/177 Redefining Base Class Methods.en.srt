1
00:00:05,610 --> 00:00:11,280
One of the most powerful features of inheritance is that base class member functions are available to

2
00:00:11,280 --> 00:00:19,200
the derived class a derived class can directly invoke base class methods a derived class can also override

3
00:00:19,350 --> 00:00:21,710
or redefine base class methods.

4
00:00:22,110 --> 00:00:27,180
This concept will provide us with a large amount of power when we use polymorphic functions in the next

5
00:00:27,180 --> 00:00:31,050
section in order to redefine or override a method.

6
00:00:31,110 --> 00:00:36,450
You simply provide a method in the derived class with the same name and signature as a method in the

7
00:00:36,450 --> 00:00:37,410
base class.

8
00:00:37,600 --> 00:00:42,870
But see an example here will both use and override a base class method.

9
00:00:45,200 --> 00:00:50,180
Suppose we have an account class and it has a deposit method that simply increments a balance by an

10
00:00:50,180 --> 00:00:51,680
amount.

11
00:00:51,680 --> 00:00:57,410
Now we have a savings account class and it also needs a deposit method but its behavior will be slightly

12
00:00:57,410 --> 00:00:58,830
different in some way.

13
00:00:59,030 --> 00:01:05,150
We can override the account class deposit method in the Savings Account class by providing a specialized

14
00:01:05,150 --> 00:01:09,010
implementation using the same method signature.

15
00:01:09,020 --> 00:01:14,850
Now when the savings account objects deposit funds this specialized method will be invoked.

16
00:01:14,990 --> 00:01:20,000
But since the accounts deposit method does some of the work that we want to do in the savings account

17
00:01:20,000 --> 00:01:22,840
deposit method we don't have to duplicate code.

18
00:01:22,970 --> 00:01:29,060
We can simply call the accounts deposit method from within the savings accounts deposit method.

19
00:01:29,060 --> 00:01:31,100
You can see the syntax makes sense.

20
00:01:31,190 --> 00:01:36,920
We must prefix the method call with the account class so the compiler knows that we're calling the deposit

21
00:01:36,920 --> 00:01:38,990
method in the account class.

22
00:01:38,990 --> 00:01:44,350
It's super important that we don't try to do the actual deposit in the savings account method.

23
00:01:44,340 --> 00:01:47,740
Instead let the account class do what it knows how to do.

24
00:01:48,050 --> 00:01:54,020
If the base functionality for deposit ever changes it won't affect our savings account deposit method.

25
00:01:54,020 --> 00:01:56,980
Since all it's doing is delegating this to the account class

26
00:02:00,650 --> 00:02:07,100
let's finish up this video by talking about static binding by default C++ does static binding of method

27
00:02:07,100 --> 00:02:13,070
calls all that means is that the compiler determines which methods are called based on what it sees

28
00:02:13,070 --> 00:02:14,810
at compile time.

29
00:02:14,810 --> 00:02:19,360
Static binding is super efficient and that's why it's the default in C++.

30
00:02:19,730 --> 00:02:26,840
So if the compiler sees that a b is declared as a base object and we call B deposit then the compiler

31
00:02:26,840 --> 00:02:29,990
will call the base classes deposit.

32
00:02:29,990 --> 00:02:35,960
The same is true for a Derived object if D is a derived object and Deedat deposit is called.

33
00:02:35,960 --> 00:02:39,920
This results in a call to the derived classes deposit method.

34
00:02:40,310 --> 00:02:45,680
While this is very efficient and fine in most cases there are times when we'd like the binding to take

35
00:02:45,680 --> 00:02:46,990
place at runtime.

36
00:02:47,060 --> 00:02:48,780
We'll see that in the next section.

37
00:02:48,800 --> 00:02:50,740
Let's see a couple of examples next.

38
00:02:52,430 --> 00:02:58,700
In the first example here you can see that B.Com deposit we'll call the base classes deposit method

39
00:02:58,940 --> 00:03:03,590
because B is a base object and Deedat deposit.

40
00:03:03,740 --> 00:03:09,390
We'll call the derived classes deposit method since D is a type of derived.

41
00:03:09,830 --> 00:03:12,170
But consider the last two lines of code.

42
00:03:12,380 --> 00:03:19,490
In this case we have a pointer to a base object but we create a Derived object on the heap and assign

43
00:03:19,490 --> 00:03:20,720
it to the pointer.

44
00:03:21,170 --> 00:03:24,550
This is perfectly valid since a derived is a base.

45
00:03:24,710 --> 00:03:29,990
But now if we called the deposit method to the pointer the compiler will call the base classes deposit

46
00:03:29,990 --> 00:03:36,650
method because it sees that pointer is a pointer to a base class but perhaps it would make more sense

47
00:03:36,650 --> 00:03:38,420
to call that derives deposit method.

48
00:03:38,420 --> 00:03:43,840
In this example since the actual object pointed to is a derived object.

49
00:03:44,060 --> 00:03:49,310
As I said we learn how to achieve this kind of dynamic binding in the next section but it's very important

50
00:03:49,310 --> 00:03:54,270
to understand that by default C++ uses static binding.

51
00:03:54,780 --> 00:04:01,950
OK so I mean the idea I mean the section 15 workspace in the redefining base class methods project and

52
00:04:01,950 --> 00:04:06,930
what we've got here is a real simple account class and we'll derive a savings account class from it

53
00:04:06,930 --> 00:04:11,340
similar to what we did in the slides and we'll do it from scratch that where you can see how this works

54
00:04:11,340 --> 00:04:15,050
with using and redefining base class methods.

55
00:04:15,060 --> 00:04:17,090
So let's take a look at the account class.

56
00:04:17,130 --> 00:04:21,870
We've got a friend here that allows us just to put count objects on a stream and display them really

57
00:04:21,870 --> 00:04:23,050
easily.

58
00:04:23,160 --> 00:04:25,530
And what we're modeling is the balance right.

59
00:04:25,530 --> 00:04:26,840
That's the whole idea of an account.

60
00:04:26,840 --> 00:04:29,460
It models a balance and it's a double in this case.

61
00:04:29,460 --> 00:04:32,730
And then we've got some public methods here which are no args constructor.

62
00:04:32,730 --> 00:04:36,990
We've got a constructor right here that's overloaded where you supply the balance and then we've got

63
00:04:36,990 --> 00:04:42,380
a deposit and a withdraw method now the deposit and withdraw functionality is dead simple right.

64
00:04:42,390 --> 00:04:45,720
Give me an amount of deposit it give me an amount I'll withdraw it.

65
00:04:45,720 --> 00:04:49,560
The only thing we're checking is to make sure that there's enough balance so that we can withdraw the

66
00:04:49,620 --> 00:04:50,520
funds.

67
00:04:50,530 --> 00:04:51,850
OK so that's it.

68
00:04:51,870 --> 00:04:53,630
Let's take a look at the implementation.

69
00:04:53,640 --> 00:04:58,140
Now you'll notice that there are no copy constructor has moved constructors overloaded assignment operators

70
00:04:58,140 --> 00:04:58,840
and so forth.

71
00:04:58,950 --> 00:04:59,970
We don't need them.

72
00:04:59,970 --> 00:05:01,150
We're modeling a double.

73
00:05:01,230 --> 00:05:07,130
And it really doesn't make any sense to include them that the compiler provided ones are perfectly adequate.

74
00:05:07,350 --> 00:05:10,190
So let's take a look at the source.

75
00:05:10,800 --> 00:05:13,320
And again you can see real real simple stuff here.

76
00:05:13,350 --> 00:05:17,000
What I've got is my no args constructor right here.

77
00:05:17,280 --> 00:05:23,760
And when that is not is invoked then all I'm doing is I'm calling my regular overloaded constructor

78
00:05:23,760 --> 00:05:25,720
right here and I'm passing in a zero to it.

79
00:05:25,740 --> 00:05:27,260
So I'm delegating to it.

80
00:05:27,570 --> 00:05:32,160
And at this point that constructor just simply sets the balance to balance right.

81
00:05:32,210 --> 00:05:39,570
Simple as that the deposit method increments the balance by whatever amount was passed in the withdraw

82
00:05:39,570 --> 00:05:44,190
method expects an amount we want to make sure that you're sufficient funds if there are we're just going

83
00:05:44,190 --> 00:05:46,060
to subtract the amount from the balance.

84
00:05:46,080 --> 00:05:49,150
Otherwise we'll just display a simple message in sufficient funds.

85
00:05:49,320 --> 00:05:53,980
And here's my overloaded insertion OPERATOR OK.

86
00:05:54,000 --> 00:05:55,080
So there you go.

87
00:05:55,110 --> 00:05:56,370
Simple stuff.

88
00:05:56,370 --> 00:06:00,910
Now what we'll do is let's take a look at our savings account.

89
00:06:01,350 --> 00:06:07,980
OK so here's the savings account class header file we're including account header file and a savings

90
00:06:07,980 --> 00:06:10,980
account is an account so you can see the inheritance right here.

91
00:06:10,980 --> 00:06:16,980
Class savings account public account we are using is a inheritance here and a savings account is an

92
00:06:16,980 --> 00:06:20,510
account so it's going to provide a balance just like the account.

93
00:06:20,640 --> 00:06:23,340
But what it does add is an interest rate.

94
00:06:23,340 --> 00:06:27,470
So the interest rate is used when users deposit funds.

95
00:06:27,600 --> 00:06:33,020
So if you deposit $1000 and we've got a 5 percent interest rate the amount that you deposit will be

96
00:06:33,020 --> 00:06:35,020
one thousand plus $50.

97
00:06:35,130 --> 00:06:37,770
So we're getting folks really good bonuses here.

98
00:06:37,770 --> 00:06:39,230
I wish my bank account did this.

99
00:06:39,240 --> 00:06:41,520
So anyway so that's what we're going to do.

100
00:06:41,730 --> 00:06:44,370
Now the withdrawal method doesn't specialize.

101
00:06:44,370 --> 00:06:49,280
So the idea there is that we can use our parents our accounts withdraw method as is.

102
00:06:49,380 --> 00:06:50,810
We don't have to do anything.

103
00:06:50,840 --> 00:06:54,500
We're going to have to declare it in here because we're automatically inherited.

104
00:06:54,510 --> 00:06:54,890
All right.

105
00:06:54,930 --> 00:06:57,690
So why don't we start doing this class right here.

106
00:06:57,690 --> 00:07:00,260
So let's start writing the code for this class right here.

107
00:07:00,330 --> 00:07:04,830
First thing we want to do is declare that friend of ours might as well get it out of the way and it's

108
00:07:04,830 --> 00:07:13,020
going to return a stood output stream reference its operator and the insertion operator.

109
00:07:13,350 --> 00:07:21,810
And what does expect when it expects a stood out stream by reference and I'll just call that OS this

110
00:07:21,810 --> 00:07:29,010
design pattern here you'll see over and over used in C++ and in this case it expects a savings account

111
00:07:29,100 --> 00:07:34,260
object and we'll call it account by reference.

112
00:07:34,260 --> 00:07:38,560
So that's the prototype for that will implement that in the C++ file later.

113
00:07:38,730 --> 00:07:42,510
Hopefully I don't have any typos I'll deal with typos after when we compile that way we don't waste

114
00:07:42,510 --> 00:07:43,020
a lot of time.

115
00:07:43,020 --> 00:07:45,120
Now that's it.

116
00:07:45,120 --> 00:07:47,830
So now what do we want to do what we have to add what we add.

117
00:07:47,820 --> 00:07:54,660
We're adding in interest rates so we'll use a protected key word here and will supply our interest rate

118
00:07:54,660 --> 00:07:59,260
which will be a double and I'll just call it in rate get.

119
00:07:59,290 --> 00:07:59,990
That's it.

120
00:08:00,120 --> 00:08:05,460
And now what we'll do is we'll provide some public methods in this case our constructor's so it'll be

121
00:08:05,460 --> 00:08:12,720
a savings account constructor that will be a no Arden's constructor will also supply a savings account

122
00:08:12,780 --> 00:08:13,550
constructor.

123
00:08:13,560 --> 00:08:22,170
In this case that will expect the balance which will be handled by the account part of me and the interest

124
00:08:22,170 --> 00:08:27,790
rate which will be handled by me me being the to the savings account less.

125
00:08:27,810 --> 00:08:32,310
And we also have to handle the deposit method because we're redefining it overwriting it.

126
00:08:32,310 --> 00:08:36,960
So in this case we want the same function prototype as we had in our parent.

127
00:08:37,050 --> 00:08:38,410
So it's deposit.

128
00:08:38,490 --> 00:08:49,290
And I believe that was double the amount that it notice withdraw is inherited and the functionality

129
00:08:49,290 --> 00:08:56,130
that we were using to withdraw funds in the account class is all I need in the Savings Account class.

130
00:08:56,130 --> 00:08:58,120
All right so now let's implement this.

131
00:08:58,200 --> 00:09:01,870
Only a few methods to implement so it should be pretty quick and pretty straightforward.

132
00:09:02,030 --> 00:09:08,130
I'm including my savings account header file and let's do the no args constructor Actually let's do

133
00:09:08,130 --> 00:09:09,980
the second constructor first.

134
00:09:09,990 --> 00:09:14,700
The savings account the overloaded constructor.

135
00:09:15,360 --> 00:09:25,650
And it's this guy right here and then expects a double for balance and another double for the interest

136
00:09:25,650 --> 00:09:30,080
rate fix that typo here.

137
00:09:30,090 --> 00:09:34,240
So those are the two parameters in this particular constructor and what we want to do here.

138
00:09:34,380 --> 00:09:37,430
Well we want to we want to initialize the count part of us right.

139
00:09:37,620 --> 00:09:43,450
So we want to invoke our account part constructor right our parents constructor and that expects just

140
00:09:43,460 --> 00:09:47,010
a balance that's all it knows about it doesn't know anything about the interest rate.

141
00:09:47,100 --> 00:09:56,290
And then once that's initialized I can come back and take care of the interest rate and initialize that.

142
00:09:56,430 --> 00:10:00,420
There is nobody to this construct or you could just leave it like that if you want to type something

143
00:10:00,510 --> 00:10:02,250
you know out constructor call.

144
00:10:02,340 --> 00:10:03,150
That's fine.

145
00:10:03,150 --> 00:10:05,640
But we really don't need to do anything else here.

146
00:10:05,670 --> 00:10:12,650
OK so now how about the no args constructor.

147
00:10:13,520 --> 00:10:14,440
Well let's do that.

148
00:10:14,460 --> 00:10:16,180
That was pretty easy to do right.

149
00:10:16,230 --> 00:10:20,640
So here's my no args constructor it expects nothing.

150
00:10:20,640 --> 00:10:21,750
Now what do we want to do here.

151
00:10:21,750 --> 00:10:26,590
Well the simplest thing to do is just to delegate to my overloaded constructor right.

152
00:10:26,610 --> 00:10:31,710
So what I want to do here is delegate to my savings account overloaded constructor up here.

153
00:10:31,740 --> 00:10:38,670
And what I want to pass into it is zero point zero for the balance and zero point zero for the interest

154
00:10:38,670 --> 00:10:41,610
rate and that's it.

155
00:10:41,610 --> 00:10:42,420
That will take care of that.

156
00:10:42,420 --> 00:10:44,120
So my two constructor's are done.

157
00:10:44,190 --> 00:10:47,660
We don't have any Didi's directors or copy constructors or anything like that.

158
00:10:47,760 --> 00:10:50,690
So let's worry about the deposit method right.

159
00:10:50,700 --> 00:11:00,180
So let's say void and its savings account it's my deposit method and it expects a double which is the

160
00:11:00,180 --> 00:11:06,090
amount you deposit what we want to do here is we want to increment that amount by that interest rate.

161
00:11:06,090 --> 00:11:06,680
As I said.

162
00:11:06,690 --> 00:11:10,140
So what we want to do is we want to figure out how much do we need to deposit.

163
00:11:10,140 --> 00:11:13,880
So let's say amount that's that same amount right here.

164
00:11:14,010 --> 00:11:16,910
We could use another variable if we want but this works just fine.

165
00:11:16,910 --> 00:11:28,110
A local variable I mean amount equals amount plus it will say amount times the interest rate divided

166
00:11:28,110 --> 00:11:33,600
by a hundred that will give us the percentage and that should do it.

167
00:11:33,600 --> 00:11:36,350
We could have set amount plus equals as well be a little clearer.

168
00:11:36,360 --> 00:11:38,120
Now we know how much we need to deposit.

169
00:11:38,250 --> 00:11:43,820
So rather than do it ourselves let's just let the account parent part of us do it.

170
00:11:43,890 --> 00:11:50,970
So will say account it's got a deposit method in there and we'll pass in the amount that we wanted to

171
00:11:50,970 --> 00:11:53,540
deposit for us.

172
00:11:53,700 --> 00:11:54,620
That's it.

173
00:11:54,630 --> 00:11:58,960
And then finally will implement the friend overloaded operator.

174
00:11:59,220 --> 00:12:05,310
So this returns a raft to an O stream and we're overloading an operator our insertion operator again

175
00:12:05,340 --> 00:12:10,030
stood up stream by reference and we'll call it o.

176
00:12:10,440 --> 00:12:15,170
And we've got a cost savings account.

177
00:12:15,510 --> 00:12:23,940
Ref OK and all we're doing here is we're saying we're putting onto that output stream we'll say something

178
00:12:23,940 --> 00:12:26,700
like savings account balance

179
00:12:29,850 --> 00:12:32,860
and we'll put the accounts balance on here.

180
00:12:37,770 --> 00:12:39,450
Followed by the interest rate

181
00:12:42,390 --> 00:12:47,670
and the interest rate for the account and we know it's got it because it is a savings account right

182
00:12:47,670 --> 00:12:47,910
here

183
00:12:50,790 --> 00:12:51,740
that should do it.

184
00:12:51,780 --> 00:12:54,690
And we want to return that string.

185
00:12:55,200 --> 00:12:58,740
All right so let's compile this and see if we've got any typos.

186
00:12:58,740 --> 00:12:59,960
We probably do.

187
00:13:00,420 --> 00:13:04,440
And there's one right here

188
00:13:08,130 --> 00:13:08,800
OK.

189
00:13:08,830 --> 00:13:09,810
So we have a run.

190
00:13:09,820 --> 00:13:16,060
Let me show you the main real quick and you'll notice one thing right away it wasn't a lot of work to

191
00:13:16,060 --> 00:13:16,670
do this right.

192
00:13:16,690 --> 00:13:23,380
That's the whole point of reusing all I had to do is create these constructors right override that deposit

193
00:13:23,380 --> 00:13:24,320
method.

194
00:13:24,340 --> 00:13:28,270
The rest is just came right in the withdraw method I didn't have to touch because I mean hurting it

195
00:13:28,270 --> 00:13:29,330
from my parent.

196
00:13:29,350 --> 00:13:33,670
So let's take a look at the main quake and I just wrote a couple of simple test cases here where I'm

197
00:13:33,670 --> 00:13:39,790
creating an account a one with a thousand dollars in it and I'm displaying it and depositing $500 into

198
00:13:39,790 --> 00:13:44,620
it and withdrawing a thousand and then I'm withdrawing 5000 I'm going to get insufficient funds.

199
00:13:44,620 --> 00:13:47,650
So let's build and run that.

200
00:13:47,650 --> 00:13:55,930
And you could see here we've got a thousand 1300 500 insufficient funds and we still have 500 K and

201
00:13:55,930 --> 00:14:02,340
then we've got some test cases down here that work with these actual savings accounts that we just created.

202
00:14:02,350 --> 00:14:04,230
So let's run those.

203
00:14:04,690 --> 00:14:11,860
And you could hear see here now that I've got a savings account with a balance of a thousand and an

204
00:14:11,860 --> 00:14:13,350
interest rate of five.

205
00:14:13,690 --> 00:14:15,440
I've got after the deposit.

206
00:14:15,440 --> 00:14:22,530
Notice that 1 0 0 0 was deposited 1050 was deposited because that was our specialized deposit method.

207
00:14:22,540 --> 00:14:26,170
So now we've got a balance of 20 50 same interest rate.

208
00:14:26,170 --> 00:14:30,570
I'm going to withdraw 2000 which leaves us with a $50 balance right here.

209
00:14:30,640 --> 00:14:35,290
Then if I try to withdraw 0 0 0 Obviously I've got insufficient funds and then display it again and

210
00:14:35,290 --> 00:14:37,500
we still have 50.

211
00:14:37,640 --> 00:14:37,950
OK.

212
00:14:37,960 --> 00:14:41,820
So there you go that's an example of reusing an account class.

213
00:14:42,100 --> 00:14:45,830
And we're reducing the withdrawal method 100 percent right.

214
00:14:45,880 --> 00:14:51,370
And if you look again at the deposit method we really are reusing it we're actually calling it right

215
00:14:51,370 --> 00:14:56,140
here and what we're doing is tweaking the amount that we want deposited and then just said to get right

216
00:14:56,140 --> 00:14:56,700
up.

217
00:14:56,710 --> 00:15:02,530
Now one thing I should mention we overloaded the insertion operator here to work with the savings account

218
00:15:02,770 --> 00:15:05,190
simply to display the interest rate.

219
00:15:05,330 --> 00:15:05,840
Right.

220
00:15:06,070 --> 00:15:12,910
If you send in a savings account object to this guy right here in the account class.

221
00:15:13,060 --> 00:15:18,130
Remember a savings account is an account what will happen here is the object gets sliced and it will

222
00:15:18,130 --> 00:15:23,050
only print out the account balance not the interest rate because the compiler is going to slice that

223
00:15:23,050 --> 00:15:23,850
part out.

224
00:15:23,860 --> 00:15:29,870
So the only reason that we're implementing this guy right here on 9:18 the savings account C.P. is so

225
00:15:29,890 --> 00:15:31,660
that we can see the interest rate.

226
00:15:32,200 --> 00:15:36,960
So what we're doing the next video is I'll give you the beginnings of an account class hierarchy.

227
00:15:37,180 --> 00:15:42,940
And in the challenge what you'll do is add some more accounts to this that have you know more specialized

228
00:15:42,940 --> 00:15:48,220
behaviors you can get some experience with inheritance and remember all of this is using static binding

229
00:15:48,610 --> 00:15:49,520
which is really important.
