1
00:00:05,180 --> 00:00:12,100
In this video we'll discuss another way to create objects in C++ using a struct or structure.

2
00:00:12,250 --> 00:00:15,160
The struct comes from the C programming language.

3
00:00:15,160 --> 00:00:21,070
In C we create struct as a container for data much like a record in many other programming languages.

4
00:00:21,160 --> 00:00:24,980
C++ also support structure since it has to be compatible with C..

5
00:00:25,030 --> 00:00:29,670
However it adds the ability to treat struct very much like classes.

6
00:00:29,770 --> 00:00:32,530
Everything you can do with classes you can do with struts.

7
00:00:32,620 --> 00:00:37,570
The only difference is that the members of the struct are public by default whereas the members of a

8
00:00:37,570 --> 00:00:39,970
class are private by default.

9
00:00:40,750 --> 00:00:46,480
Here's a simple class declaration for a person class that has a string attribute called name and a method

10
00:00:46,480 --> 00:00:49,660
called Get named returns that name by default.

11
00:00:49,660 --> 00:00:55,870
Class members are private so if we create a p object that's a person and try to access name or call

12
00:00:55,870 --> 00:00:56,620
get name.

13
00:00:56,680 --> 00:01:01,800
The compiler will give us a compiler error saying that we don't have access to those private elements.

14
00:01:01,810 --> 00:01:04,790
Now let's see the same as a struct.

15
00:01:05,100 --> 00:01:07,420
Here we have person declared as a struct.

16
00:01:07,530 --> 00:01:10,010
We have the same attribute and the same member method.

17
00:01:10,290 --> 00:01:15,240
But now when we create the person object p and try to access its attribute or a member function.

18
00:01:15,240 --> 00:01:17,220
The compiler is OK with it.

19
00:01:17,220 --> 00:01:20,450
That's because the default access for a struct is public.

20
00:01:20,820 --> 00:01:21,450
That's it.

21
00:01:21,510 --> 00:01:25,000
That's the only difference between structuring classes and C++.

22
00:01:25,230 --> 00:01:31,060
But there's a few general guidelines that you can use to determine if you need a struct or a class.

23
00:01:31,080 --> 00:01:35,550
It would be appropriate to use a struct when you have passive data so the struct would act very much

24
00:01:35,550 --> 00:01:36,900
like a struct in C..

25
00:01:37,080 --> 00:01:41,700
It simply holds data and that data is public and since the data is passive You really don't need to

26
00:01:41,700 --> 00:01:44,110
create any methods in the struct.

27
00:01:44,160 --> 00:01:47,090
As for a class we've already seen many examples.

28
00:01:47,130 --> 00:01:52,440
If your objects are active or they have complex behavior then you should use a class and implement getters

29
00:01:52,440 --> 00:01:55,230
and setters and member methods as needed.

30
00:01:55,230 --> 00:02:01,350
These guidelines are very general but remember other C++ programmers will likely be modifying and extending

31
00:02:01,350 --> 00:02:02,220
your code.

32
00:02:02,220 --> 00:02:07,830
So don't use C++ in a way that's very different from what C++ programmers expect.

33
00:02:07,830 --> 00:02:12,270
For example don't use a struct and then make everything private in the structure so it behaves like

34
00:02:12,270 --> 00:02:13,140
a class.

35
00:02:13,140 --> 00:02:14,590
Just use a class instead.
