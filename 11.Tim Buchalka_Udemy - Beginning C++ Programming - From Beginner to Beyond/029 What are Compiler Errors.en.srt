1
00:00:05,690 --> 00:00:09,690
This video what talk about compiler errors and why they can happen.

2
00:00:10,560 --> 00:00:16,170
Programming languages have very specific rules about how to write code so that the compiler can translate

3
00:00:16,170 --> 00:00:18,420
that code to machine code.

4
00:00:18,420 --> 00:00:21,630
These rules involve both structure and meaning.

5
00:00:21,630 --> 00:00:27,180
For example C++ says that all variable declarations must end with a semi-colon.

6
00:00:27,720 --> 00:00:33,320
If we don't add the semi-colon at the end or we put it in the middle instead then we have a syntax error.

7
00:00:33,480 --> 00:00:37,020
The compiler is complaining that the structure is not correct.

8
00:00:38,420 --> 00:00:44,210
In the first example we didn't terminate the string error with a trailing quote character in the second

9
00:00:44,210 --> 00:00:49,050
example we left out the semi-colon at the end of the return 0 statement.

10
00:00:49,070 --> 00:00:53,740
Both of these are syntax errors or something wrong with the structure of the code.

11
00:00:54,110 --> 00:00:59,180
Now these syntax errors are pretty easy to fix and the compiler errors usually give us pretty good information

12
00:00:59,180 --> 00:01:00,800
about what's going on.

13
00:01:01,160 --> 00:01:06,740
Semantic errors are a little different in this case the syntax or structure is correct but the meaning

14
00:01:06,740 --> 00:01:10,120
of the code doesn't make sense to the compiler.

15
00:01:10,120 --> 00:01:13,020
Suppose we want to add two variables A and B.

16
00:01:13,420 --> 00:01:17,170
If the variables are both integers then Miss makes perfect sense.

17
00:01:17,260 --> 00:01:22,180
But what happens if one of the variables is a person and the other variable is an integer.

18
00:01:22,180 --> 00:01:24,870
Does it make sense to add a person and an integer.

19
00:01:25,060 --> 00:01:29,610
Probably not in this case the compiler generates an error.

20
00:01:29,700 --> 00:01:31,690
What do we think of compiler errors.

21
00:01:31,690 --> 00:01:34,570
We really think about both of these classes of errors.

22
00:01:34,660 --> 00:01:37,450
Remember compilers are very very picky.

23
00:01:37,480 --> 00:01:38,170
Why.

24
00:01:38,200 --> 00:01:45,030
Because their job is to translate your code that you wrote into machine code that functions as you said.

25
00:01:45,190 --> 00:01:50,920
If the compiler has any problem understanding the meaning of your code then it won't guess it will generate

26
00:01:50,920 --> 00:01:51,840
an error.

27
00:01:52,300 --> 00:01:55,840
Let's head over to code like and see some of these errors.

28
00:01:56,590 --> 00:02:03,060
So Dhami code like and I created a project called compiler errors and I created it right from our template.

29
00:02:03,070 --> 00:02:07,430
So it's just a simple hello world program it's just printing out Hello world.

30
00:02:07,570 --> 00:02:12,550
Now what we want to do is introduce it some compiler errors into this program so you can see what they're

31
00:02:12,550 --> 00:02:12,850
like.

32
00:02:12,850 --> 00:02:14,040
Now let's do some.

33
00:02:14,140 --> 00:02:16,470
First let's do some syntax errors.

34
00:02:16,720 --> 00:02:17,820
Simple stuff like.

35
00:02:17,830 --> 00:02:24,760
OK we forgot this quote right here and I can save and compile and you'll see that I'll get an error

36
00:02:24,820 --> 00:02:29,450
that says missing terminating character and if you click on here it takes you here.

37
00:02:29,620 --> 00:02:32,200
Now in this case we've got another error.

38
00:02:32,230 --> 00:02:33,190
This is expected.

39
00:02:33,190 --> 00:02:36,010
Primary expression before return.

40
00:02:36,010 --> 00:02:38,850
This happens sometimes the compiler gets confused.

41
00:02:38,850 --> 00:02:42,820
It sees that first error and that is trying to figure out what's going on and it goes to the next line

42
00:02:42,820 --> 00:02:44,960
and it says I don't know where I'm at and it creates an error.

43
00:02:45,100 --> 00:02:48,920
Many times when you fix that first error many of the subsequent errors go away.

44
00:02:48,940 --> 00:02:51,450
So let's put that quote back in.

45
00:02:51,760 --> 00:02:55,300
We'll save and let's recompile.

46
00:02:55,450 --> 00:03:00,430
Now we've got a clean compile so that would be my my advice when you're first learning.

47
00:03:00,430 --> 00:03:06,700
Start out at the beginning get that first syntax error fixed recompile and very likely a whole bunch

48
00:03:06,700 --> 00:03:08,080
of others just went away.

49
00:03:08,320 --> 00:03:10,960
OK so that's an example of a syntax error.

50
00:03:10,960 --> 00:03:17,050
The compiler is expecting a string and it knows it's got a rule that says all strings have to have a

51
00:03:17,140 --> 00:03:18,370
quote character.

52
00:03:18,370 --> 00:03:21,620
A bunch of characters and then a quote character a dn to terminate it.

53
00:03:21,630 --> 00:03:24,720
It didn't see that it didn't like that and there's the syntax error.

54
00:03:24,820 --> 00:03:26,500
Really easy to fix.

55
00:03:26,680 --> 00:03:28,990
Other times you may have things that are misspelled.

56
00:03:28,990 --> 00:03:34,360
So for example let's say I spelt and L here raw I put an extra L in there.

57
00:03:34,360 --> 00:03:45,210
Now when I compile it saying error and L L is not a member of the standard namespace so it knows that

58
00:03:45,210 --> 00:03:49,100
C is and L is but and L-L is not.

59
00:03:49,110 --> 00:03:53,800
So in this case this error message kind of leads you to the place where the problem is just.

60
00:03:53,820 --> 00:03:58,300
Oh of course I have a typo so you can fix that as well.

61
00:03:58,440 --> 00:04:05,220
Another example of a compiler error syntax error is forgetting the semi-colon here let's say that the

62
00:04:05,220 --> 00:04:06,280
returns 0.

63
00:04:06,450 --> 00:04:09,600
All statements have to end with a semi-colon so we just forgot it.

64
00:04:09,810 --> 00:04:14,100
That violates one of the rules that the compiler knows about and it doesn't like it.

65
00:04:14,100 --> 00:04:19,740
So what we'll do here again will compile and you could see it says error.

66
00:04:19,740 --> 00:04:22,580
Expecting a semi-colon before that.

67
00:04:23,610 --> 00:04:26,970
So there's the curly and it's expecting a semi-colon.

68
00:04:26,970 --> 00:04:28,600
Sure is because of that.

69
00:04:28,920 --> 00:04:33,130
OK now suppose we just say return semi-colon.

70
00:04:33,150 --> 00:04:38,370
Now this is problematic because we've told the compiler in our code that main returns an integer.

71
00:04:38,760 --> 00:04:40,940
But here we're just returning when not returning an integer.

72
00:04:40,940 --> 00:04:42,360
So let's see what it says.

73
00:04:42,710 --> 00:04:49,580
Let's compile and it says error return statement with no value in function returning integer.

74
00:04:49,590 --> 00:04:50,900
Pretty good statement right.

75
00:04:50,910 --> 00:04:52,560
It's telling you I've got a function.

76
00:04:52,560 --> 00:04:55,930
You told me it's returning an integer but you're not returning any value now.

77
00:04:56,070 --> 00:04:59,390
So I can return 0.

78
00:04:59,980 --> 00:05:00,370
OK.

79
00:05:00,490 --> 00:05:07,520
So let me show you an example of a semantic error something like this.

80
00:05:07,570 --> 00:05:08,820
This is perfectly valid.

81
00:05:08,830 --> 00:05:12,780
I can return an integer I can return a string I can return a lot of things.

82
00:05:12,790 --> 00:05:17,770
The problem is that doesn't make sense to the compiler because you've told it here that you're returning

83
00:05:17,770 --> 00:05:20,590
an integer but now you're returning a string.

84
00:05:20,590 --> 00:05:22,280
So let's run that and see what you get.

85
00:05:24,620 --> 00:05:25,520
Here you go error.

86
00:05:25,550 --> 00:05:30,920
Invalid conversion from a character star which is a string to an integer so the compiler is trying to

87
00:05:30,920 --> 00:05:35,620
figure out how do I convert that Joe to an integer IDE or no I don't have.

88
00:05:35,660 --> 00:05:36,200
I have no idea.

89
00:05:36,200 --> 00:05:37,510
I'll just throw the air.

90
00:05:38,030 --> 00:05:39,890
And that's up to you now to fix it.

91
00:05:39,900 --> 00:05:42,240
So in this case again I'll fix it to return 0.

92
00:05:43,760 --> 00:05:47,070
Now let's do another one let's get rid of that first Curly.

93
00:05:47,180 --> 00:05:51,630
This is a real interesting compiler and I'll compile it and then we'll talk about it.

94
00:05:52,100 --> 00:05:56,740
Let's compile and you can see that I've got three errors from that.

95
00:05:56,750 --> 00:05:59,890
What's happening is the compiler is totally lost here.

96
00:06:00,170 --> 00:06:01,040
The policy.

97
00:06:01,040 --> 00:06:02,060
Int main.

98
00:06:02,060 --> 00:06:07,570
And then it's expecting a Kerley and it's processing more and more stuff kind of hoping to see that

99
00:06:07,580 --> 00:06:12,200
left Karlee eventually and it's not seeing it so it's seeing other things and it's throwing errors it's

100
00:06:12,200 --> 00:06:16,570
saying I don't know what's going on before the SCD.

101
00:06:16,700 --> 00:06:21,000
I've got an unexpected unqualified something before return.

102
00:06:21,220 --> 00:06:21,950
I'm lost.

103
00:06:22,010 --> 00:06:22,410
OK.

104
00:06:22,550 --> 00:06:26,930
So when you see these kinds of errors I mean this is a tiny little program and I've got three compiler

105
00:06:26,930 --> 00:06:27,540
errors.

106
00:06:27,590 --> 00:06:33,080
Sometimes you'll compile something you know 20 40 errors and many times when you fix that first one

107
00:06:33,410 --> 00:06:34,850
most of them will go away.

108
00:06:34,850 --> 00:06:42,810
So in this case all it's missing is that that curly so I'll compile and we should have a clean compiler.

109
00:06:42,820 --> 00:06:49,080
Now we do sometimes add extra Curley's at the end which again is illegal.

110
00:06:49,330 --> 00:06:50,260
So I'll compile

111
00:06:53,000 --> 00:06:54,750
and there it is an error.

112
00:06:54,800 --> 00:06:59,080
I'm expecting something before that token doesn't know what you're doing.

113
00:06:59,150 --> 00:07:02,960
So we'll get rid of that.

114
00:07:02,970 --> 00:07:05,040
OK so let's do one more semantic air.

115
00:07:05,040 --> 00:07:09,690
Let's say that we've got hello world in here and I want to apprentice around it and I'm going to divide

116
00:07:09,690 --> 00:07:13,290
it by 125 and I put a print this year on that.

117
00:07:13,290 --> 00:07:14,790
Just simple math.

118
00:07:15,330 --> 00:07:16,320
OK.

119
00:07:16,620 --> 00:07:17,830
That's pretty weird.

120
00:07:18,120 --> 00:07:22,780
I've got something here divided by something here that's valid.

121
00:07:22,770 --> 00:07:24,420
I can divide two things.

122
00:07:24,480 --> 00:07:29,620
The division operator which is that Slash is a binary operator works on two things right.

123
00:07:29,730 --> 00:07:34,290
So four divided by two is two eight divided by two is four and so forth.

124
00:07:34,290 --> 00:07:39,630
But in this case the syntax is correct but the compiler is going to say I have no idea what you want

125
00:07:39,630 --> 00:07:40,450
me to do here.

126
00:07:40,500 --> 00:07:43,230
You're telling me to divide hello world by 125.

127
00:07:43,230 --> 00:07:44,470
I don't even know what that means.

128
00:07:44,610 --> 00:07:51,780
So let's compile that and the error is something like Error invalid operands.

129
00:07:52,150 --> 00:07:58,240
So the division operator the slash operator has got invalid operands is two operands right.

130
00:07:58,240 --> 00:07:59,310
One is a string.

131
00:07:59,320 --> 00:08:02,690
The other one is an integer and it's say I don't know what to do here.

132
00:08:02,800 --> 00:08:06,510
So these are some simple examples of compiler errors.

133
00:08:06,520 --> 00:08:08,290
Don't be afraid of the compiler errors.

134
00:08:08,320 --> 00:08:09,530
You're going to get them.

135
00:08:09,550 --> 00:08:12,400
Don't let them frustrate you if you have any that you can't figure out.

136
00:08:12,400 --> 00:08:15,540
Please post to the forums and I'll be glad to help you out.

137
00:08:15,550 --> 00:08:20,120
It's just something that we have to learn to work with because we're going to get compiler errors.

138
00:08:20,170 --> 00:08:21,370
We all make mistakes.

139
00:08:21,520 --> 00:08:25,510
Sometimes we're prototyping with trying new things and forgetting getting errors sometimes are just

140
00:08:25,510 --> 00:08:27,880
silly mistakes and they're hard to find sometimes.

141
00:08:27,910 --> 00:08:29,500
Sometimes you'll be looking at your own code.

142
00:08:29,500 --> 00:08:34,530
I can tell you this this little error here with the the and double L.

143
00:08:34,690 --> 00:08:36,240
This is a good error message that you got.

144
00:08:36,250 --> 00:08:41,200
But if you're looking at this code and you've been coding for a few hours I don't think you'll see those

145
00:08:41,200 --> 00:08:41,880
too.

146
00:08:41,890 --> 00:08:43,850
Most likely they look like one L..

147
00:08:43,900 --> 00:08:49,750
So you know this is the kind of thing that programming is about one of the important things is getting

148
00:08:49,750 --> 00:08:51,570
rid of all these compiler errors.

149
00:08:51,640 --> 00:08:55,870
Once we get rid of the compiler errors then we can test our code and we could look for logic errors

150
00:08:55,870 --> 00:08:56,590
and so forth.

151
00:08:56,800 --> 00:08:59,600
OK so that wraps up this video in the next video.

152
00:08:59,650 --> 00:09:01,640
We'll talk a little bit about compiler warnings.

153
00:09:01,660 --> 00:09:05,920
They're a little different from yours because they're not true errors but they're telling you something

154
00:09:05,920 --> 00:09:07,140
that you should look out for.
