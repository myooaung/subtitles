WEBVTT
1
00:00:05.510 --> 00:00:12.110
We've seen how we can write generic functions using C++ templates in this video will take it a step

2
00:00:12.110 --> 00:00:17.540
further and we'll learn how we can you see post plus templates to create generic classes.

3
00:00:17.540 --> 00:00:23.400
So what is the C++ class template a class template is similar to a function template.

4
00:00:23.480 --> 00:00:27.900
But instead of creating a generic function we'll be creating a generic class.

5
00:00:27.920 --> 00:00:33.170
So this implies generic attributes constructors destructors methods and so forth.

6
00:00:33.860 --> 00:00:36.860
Just like we can plug in any type to a function template.

7
00:00:36.860 --> 00:00:39.200
We can do the same with a class template.

8
00:00:39.360 --> 00:00:42.910
We've already used class templates in several places in this course.

9
00:00:42.920 --> 00:00:47.930
The most obvious is when we created vector objects we didn't just say I want a vector we said I want

10
00:00:47.930 --> 00:00:52.310
a vector of a specific type and that's where the class templates come in.

11
00:00:52.310 --> 00:00:58.610
So the class template is a generic blueprint that the compiler uses to create specialized classes.

12
00:00:58.940 --> 00:01:01.660
That's what metaprogramming is all about.

13
00:01:01.730 --> 00:01:07.580
As I mentioned in the previous slides templates can be very complex class templates in particular can

14
00:01:07.580 --> 00:01:08.990
be very complex.

15
00:01:08.990 --> 00:01:15.380
Imagine combining inheritance dynamic polymorphism operator overloading templates and other advanced

16
00:01:15.380 --> 00:01:17.270
C++ features together.

17
00:01:17.420 --> 00:01:20.740
Super powerful but also complex.

18
00:01:20.780 --> 00:01:24.260
So let's see how we can use class templates.

19
00:01:25.430 --> 00:01:30.620
Let's say we want a class that will hold an integer and a string and we want that class to be called

20
00:01:30.680 --> 00:01:34.310
item we can write a simple class as follows.

21
00:01:34.310 --> 00:01:36.170
Note that we have two private attributes.

22
00:01:36.170 --> 00:01:37.790
Name and value.

23
00:01:38.000 --> 00:01:42.020
A constructor that initializes attributes to those provided by the user.

24
00:01:42.260 --> 00:01:45.200
And we have a get name and get value getter methods.

25
00:01:45.530 --> 00:01:50.360
Of course we could add other methods but we won't in this example since the purpose is to focus on how

26
00:01:50.360 --> 00:01:52.460
we can make this class generic.

27
00:01:53.000 --> 00:01:59.060
So let's suppose that now we need a class that's similar to the Item class except instead of an int

28
00:01:59.100 --> 00:02:00.110
and a string.

29
00:02:00.290 --> 00:02:04.530
We want a model a double and a string.

30
00:02:04.790 --> 00:02:06.080
What can we do.

31
00:02:06.560 --> 00:02:12.200
Sure we can create a new class just like we did for item that has a double in the string but we'd have

32
00:02:12.200 --> 00:02:17.990
to name it something other than items since we can't overload class names in the same namespace and

33
00:02:17.990 --> 00:02:21.800
we don't want to create a complex hierarchy with dynamic polymorphism.

34
00:02:21.800 --> 00:02:27.300
So let's see how we can use class templates to allow us to just write the blueprint for the class

35
00:02:30.160 --> 00:02:35.460
for us we can replace the type of the value attribute from int to T in this case.

36
00:02:35.460 --> 00:02:37.550
But remember this can be any name.

37
00:02:37.710 --> 00:02:44.460
Then we go through the class and wherever we used value or return values type we replace it with a T.

38
00:02:44.610 --> 00:02:45.870
That's pretty much it.

39
00:02:45.870 --> 00:02:47.630
Now of course this won't compile.

40
00:02:47.640 --> 00:02:53.940
We need to tell the compiler that this is a template class and we can do this by adding the template

41
00:02:53.970 --> 00:02:59.670
declaration before the class declaration and provide the template parameter.

42
00:02:59.670 --> 00:03:07.200
This is a pretty simple example but it sure makes the item class much more generic and much more useful.

43
00:03:07.290 --> 00:03:13.020
Now if we want to create instances of items we can simply provide the type of the value in the template

44
00:03:13.020 --> 00:03:18.810
parameter and the compiler will take care of generating the correct class from the template in the first

45
00:03:18.810 --> 00:03:20.250
example we're creating.

46
00:03:20.250 --> 00:03:26.520
Item 1 is an item with a value of type int and a name of type String name will always be of type strings

47
00:03:26.520 --> 00:03:32.260
so we don't have to provide it as a template parameter in the second example value will be of type double

48
00:03:32.460 --> 00:03:35.240
and the third example value will be a stud string.

49
00:03:35.460 --> 00:03:41.400
And in the final example we're creating a vector that holds items and those items will have value as

50
00:03:41.400 --> 00:03:42.570
an integer.

51
00:03:42.630 --> 00:03:44.550
That's it.

52
00:03:45.000 --> 00:03:49.670
Just as with function templates there's no limit to the number of template parameters you can have.

53
00:03:49.710 --> 00:03:53.600
And of course there may be of different types in this example.

54
00:03:53.610 --> 00:03:59.140
We're creating a class template called my pair that models a pair of data items.

55
00:03:59.430 --> 00:04:04.310
The types of these data items can be different if we wish or they can be the same.

56
00:04:04.320 --> 00:04:06.700
Note that in this case we use a struct.

57
00:04:06.780 --> 00:04:10.500
Since all we want to do is associate first with second.

58
00:04:10.500 --> 00:04:14.920
We're just modeling data so we won't bother with constructors methods and so forth.

59
00:04:15.420 --> 00:04:22.980
Now if we wanted to create my Peyre objects is really easy in the first example we create P1 as a my

60
00:04:22.980 --> 00:04:29.550
pair of stood string and integer and we initialize it to Frank and 100 in the second example we create

61
00:04:29.550 --> 00:04:37.700
P2 as a pair of integer and double and we initialize it to 124 and thirteen point six.

62
00:04:38.040 --> 00:04:44.280
And in the last example we create a vector that holds my pair objects and those objects are in double

63
00:04:44.280 --> 00:04:46.790
pairs.

64
00:04:47.060 --> 00:04:53.660
This my pair class can be a very handy class since it can associate any two pieces of data of any type.

65
00:04:53.670 --> 00:04:59.190
In fact it's so useful that it's already defined for us and stood pair.

66
00:04:59.370 --> 00:05:04.620
We need to include the utility header file and then we can use this to pair class which is implemented

67
00:05:04.890 --> 00:05:08.400
very much like the way we implemented my pair.

68
00:05:08.460 --> 00:05:14.640
In addition to the pair template class C++ also has a template class named tuple.

69
00:05:14.640 --> 00:05:17.820
It allows you to have a fixed number of elements of any type.

70
00:05:17.820 --> 00:05:20.990
It's not just limited to two items like the pear class.

71
00:05:21.480 --> 00:05:27.030
OK so let's head over to the idea and we'll see these class templates will also implement our own template

72
00:05:27.060 --> 00:05:29.420
based array class.

73
00:05:30.210 --> 00:05:38.880
Ok so I mean the IDM in the Section 20 workspace and I mean the class templates project in this project

74
00:05:38.890 --> 00:05:43.570
what I'd like to do is go over those two templates that we talked about in the slides and then we'll

75
00:05:43.570 --> 00:05:49.210
switch to this other project up here a class template array and will implement an array class based

76
00:05:49.210 --> 00:05:50.330
on a template.

77
00:05:50.780 --> 00:05:54.790
OK so first things first I put a little a note here that's important.

78
00:05:54.790 --> 00:05:58.900
Template classes are typically completely contained in header files.

79
00:05:58.900 --> 00:06:04.060
So we would have the template class in item dot age and I'm talking about this template class and I

80
00:06:04.060 --> 00:06:09.110
want to talk about right here and there would be no item see Peepy file associated with it.

81
00:06:09.130 --> 00:06:12.460
Now that makes sense because what we have is a blueprint.

82
00:06:12.460 --> 00:06:15.070
The compiler is not compiling this blueprint.

83
00:06:15.070 --> 00:06:20.370
It's basically using it to create a specialized version of it that will be compiled.

84
00:06:20.380 --> 00:06:26.020
So it's important if you start putting stuff in the files you're going to run into all kinds of issues.

85
00:06:26.050 --> 00:06:30.790
There are ways to get it to work but they're beyond the scope of this course so for this course put

86
00:06:30.790 --> 00:06:34.440
all your template classes in their own dot h file.

87
00:06:34.660 --> 00:06:39.040
Let's talk about this template class this is the one we did in the slides and we'll do this one first

88
00:06:39.040 --> 00:06:41.910
and then we'll do this smaller one downhere second.

89
00:06:41.950 --> 00:06:43.200
So what have I got here.

90
00:06:43.240 --> 00:06:48.060
I've got a template class I know it's a class right here is not a function it's called item.

91
00:06:48.190 --> 00:06:51.020
And here's my template parameter right here.

92
00:06:51.280 --> 00:06:52.440
So what do I know about this.

93
00:06:52.450 --> 00:06:57.940
Well I know I've got a class called item and it's got two private attributes one is a string called

94
00:06:57.940 --> 00:07:04.180
name and one is a value of type T and that's what's going to be replace or plugged in.

95
00:07:04.180 --> 00:07:09.130
I've got a constructor here that just constructs it based on my name and my values that are being passed

96
00:07:09.130 --> 00:07:16.200
in I've got to get name and I've got to get value and notice to get value returns t.

97
00:07:16.300 --> 00:07:18.630
So that's pretty straightforward I think.

98
00:07:18.640 --> 00:07:21.250
And now let's look at this second template down here.

99
00:07:21.290 --> 00:07:23.470
This is the pear template that we created.

100
00:07:23.710 --> 00:07:25.740
And we're going to use a struct here instead of a class.

101
00:07:25.750 --> 00:07:27.760
But that's again it's perfectly fine.

102
00:07:27.760 --> 00:07:29.800
We're only modeling data in this case.

103
00:07:29.890 --> 00:07:35.590
So we've got this template parameter list right here where we've got a T1 and a t to.

104
00:07:35.650 --> 00:07:37.660
And they could be the same or they could be different.

105
00:07:37.660 --> 00:07:40.800
So all we're doing is we're saying the first item here.

106
00:07:40.800 --> 00:07:45.460
In other words this is this and this is just a name and attribute name first is the T-1 second is a

107
00:07:45.460 --> 00:07:46.150
T-2.

108
00:07:46.150 --> 00:07:50.760
So what we're really doing is associating two data types and calling it my pair.

109
00:07:50.830 --> 00:07:52.230
Just like we did in the slides.

110
00:07:52.270 --> 00:07:57.520
So let me go down to the main and I'll show you some examples of this and I'll walk through these one

111
00:07:57.520 --> 00:07:58.110
at a time.

112
00:07:58.180 --> 00:08:06.860
So first thing on 09:30 right here I'm creating an item one object and it's of type item.

113
00:08:06.930 --> 00:08:10.200
That's my class value is going to be an integer.

114
00:08:10.240 --> 00:08:13.580
So remember I have a string and I have a value.

115
00:08:13.840 --> 00:08:20.110
In this case I always have a string first and then this guy right here that's going to be the t that

116
00:08:20.110 --> 00:08:22.130
can be replaced with any type I want.

117
00:08:22.270 --> 00:08:25.660
So in this case item one will look something like this.

118
00:08:25.660 --> 00:08:27.960
Item 1 is an object.

119
00:08:28.300 --> 00:08:33.220
It has a name attribute and it's got a value attribute.

120
00:08:33.220 --> 00:08:38.710
The name is always going to be a strain in this case it's going to be frank and the value.

121
00:08:38.710 --> 00:08:42.610
That's our template parameter that can be any type I-PASS into this right.

122
00:08:42.610 --> 00:08:44.110
That's what I'm doing right here.

123
00:08:44.110 --> 00:08:50.180
So in this case it's going to be an integer and it's going to be 100.

124
00:08:50.350 --> 00:08:52.020
So that's kind of what's going on.

125
00:08:52.030 --> 00:08:57.050
So when I display item 1 Get name I'm getting this guy right here.

126
00:08:57.070 --> 00:08:58.900
And that's going to display Frank.

127
00:08:58.990 --> 00:09:05.900
And then when I say Item 1 to get value it's going to get to 100 here OK.

128
00:09:05.940 --> 00:09:07.500
So that's that example.

129
00:09:07.500 --> 00:09:11.760
This tickle like this one here 9:33 and we'll run these in just a bit.

130
00:09:11.760 --> 00:09:15.560
So here I'm creating again an item.

131
00:09:15.600 --> 00:09:18.530
That's my object name and it's an item.

132
00:09:18.570 --> 00:09:20.350
But look at my template parameter here.

133
00:09:20.550 --> 00:09:22.470
I'm saying the second one is a string.

134
00:09:22.470 --> 00:09:24.060
So what that will look like is.

135
00:09:24.180 --> 00:09:29.820
Now I've got item 2 it has a name.

136
00:09:30.040 --> 00:09:32.290
It also has a value.

137
00:09:32.480 --> 00:09:35.070
In this case they're both going to be strings.

138
00:09:35.090 --> 00:09:36.560
The first one will be frank.

139
00:09:36.710 --> 00:09:37.730
That's my name.

140
00:09:38.930 --> 00:09:40.740
And value will be Professor.

141
00:09:40.820 --> 00:09:48.650
Now in the output statement item to get name we'll get Frank right here an item to get value we'll get

142
00:09:48.650 --> 00:09:49.370
professor.

143
00:09:49.370 --> 00:09:50.330
That's what will be displayed.

144
00:09:50.330 --> 00:09:52.750
Frank professor now this one.

145
00:09:52.750 --> 00:09:56.630
Here's a little more complicated and I did this one on purpose just so you can see how you can build

146
00:09:56.630 --> 00:10:00.050
these things up because sometimes you'll see these defined this way.

147
00:10:00.050 --> 00:10:01.950
Now let's walk through this one really slowly.

148
00:10:02.180 --> 00:10:03.670
Item three is my optics.

149
00:10:03.680 --> 00:10:05.150
Let me write that down right here.

150
00:10:05.150 --> 00:10:07.220
This is item 3.

151
00:10:07.370 --> 00:10:10.530
And we know that item 3 is an item.

152
00:10:10.920 --> 00:10:19.190
OK so it's going to have a name and it's going to have a value but what are we saying that the value

153
00:10:19.190 --> 00:10:19.590
is.

154
00:10:19.600 --> 00:10:28.260
Well in this case the value is another item but that other item has a string as the value makes sense.

155
00:10:28.260 --> 00:10:31.950
So this value here in Beletski name is Frank let's get rid of that one for us.

156
00:10:31.950 --> 00:10:33.510
This too that really easily here.

157
00:10:34.580 --> 00:10:42.410
And I'm using my initialiser right here to do it and that my value is going to be an item and that item

158
00:10:42.410 --> 00:10:45.700
has a name and a value.

159
00:10:46.890 --> 00:10:50.350
OK as you can see them I'm just building them up I'm nesting one within the other.

160
00:10:50.370 --> 00:10:53.440
So in this case the name will be C++.

161
00:10:54.920 --> 00:10:59.240
And the value will be Professor in this case.

162
00:10:59.260 --> 00:11:05.660
All right so now when I say Item 3 Get name I'm getting this guy right here.

163
00:11:05.850 --> 00:11:11.800
That's item three's name in order to get to these guys in here I've got to go through the value.

164
00:11:11.800 --> 00:11:14.890
So in this case I'm saying Item three get the value.

165
00:11:14.890 --> 00:11:18.830
Now I've got this item and then I'm saying get the name.

166
00:11:18.850 --> 00:11:23.560
So now I've got C++ and over here I'm just saying Item three get value.

167
00:11:23.590 --> 00:11:29.080
That takes me to the value that is an item remember that I'm going to get the value from the value which

168
00:11:29.080 --> 00:11:31.160
is going to be Professor in this case.

169
00:11:31.210 --> 00:11:34.570
So when I print this I should get Frank one hundred Frank.

170
00:11:34.570 --> 00:11:37.720
Professor Frank C++ professor.

171
00:11:37.720 --> 00:11:40.440
All right so let me clear the screen and we'll give it a run.

172
00:11:41.110 --> 00:11:46.410
And what we've got here is we've got Frank 100 Frank Professor Frank C++ professor.

173
00:11:46.720 --> 00:11:48.460
Just what we expected.

174
00:11:49.120 --> 00:11:49.680
OK.

175
00:11:49.780 --> 00:11:52.910
So let me make a little bit more room here.

176
00:11:53.020 --> 00:11:59.580
And now what I'm going to do is I'm simply going to take some items and create a vector of those items.

177
00:11:59.590 --> 00:12:05.870
So in this case I'm creating a vector and that vector is going to hold item objects.

178
00:12:05.970 --> 00:12:08.840
And in this case the values will all be doubles.

179
00:12:08.840 --> 00:12:10.690
Remember the names are always strings.

180
00:12:10.690 --> 00:12:15.670
But in this case the values will be doubles and I'm just going to push back three of them so I'm going

181
00:12:15.670 --> 00:12:20.860
to say Larry one hundred point zero most 100.0 and Curly three hundred point zero.

182
00:12:21.010 --> 00:12:27.310
I'm creating items here and I'm pushing those items on this on the vector and then all I'm doing is

183
00:12:27.400 --> 00:12:31.190
looping through the vector with they arranged base for loop right here.

184
00:12:31.630 --> 00:12:36.800
So for each item in that vector get its name get its value.

185
00:12:37.180 --> 00:12:37.750
That's it.

186
00:12:37.750 --> 00:12:42.340
Now that's pretty cool because I'm doing all of this using a template class.

187
00:12:42.610 --> 00:12:46.940
So if we run this we should see Larry 100 Moe 200 and Kerley 300.

188
00:12:47.080 --> 00:12:51.010
So let's give that around and there you go.

189
00:12:51.410 --> 00:12:55.240
Larry is 100 most 200 and Curly is 300.

190
00:12:55.460 --> 00:12:56.440
Just what we expected.

191
00:12:56.510 --> 00:12:59.050
OK so now let's look at the pair.

192
00:12:59.180 --> 00:13:00.970
That's this last piece right here.

193
00:13:01.010 --> 00:13:06.650
So uncomment that out and we will run this now and you can see what's happening here I'm creating my

194
00:13:06.650 --> 00:13:15.140
pair and my pair is going to associate a pair of types right in this case a string and an integer.

195
00:13:15.170 --> 00:13:21.980
There's a string there's the integer here I'm associating an integer and a double there's the integer

196
00:13:21.980 --> 00:13:23.390
there's the double.

197
00:13:23.420 --> 00:13:24.680
This guy is how he won.

198
00:13:24.680 --> 00:13:26.600
This is called P2.

199
00:13:26.600 --> 00:13:32.350
And if I want to display those values all I have to say is P 1. first to display the second.

200
00:13:32.350 --> 00:13:37.480
I would just say one second and that will display Frank one hundred.

201
00:13:37.610 --> 00:13:44.410
Then for P2 we could do the same two first P2 second display 124 and the thirteen point six.

202
00:13:44.420 --> 00:13:52.460
Let's give this one a run and you could see down here we've got Frank 100 124 thirteen point six.

203
00:13:52.460 --> 00:13:57.290
So this gives you an idea of using two pretty simple template classes that we've created.

204
00:13:57.290 --> 00:14:00.860
Now I'm going to pause this for a second and I'll be right back and I'm going to jump right into this

205
00:14:00.860 --> 00:14:06.800
class template array project and what we'll do there is we'll create another class template for an array.
