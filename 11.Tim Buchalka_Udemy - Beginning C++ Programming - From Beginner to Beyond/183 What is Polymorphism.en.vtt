WEBVTT
1
00:00:05.300 --> 00:00:11.310
In this video we'll learn what polymorphism is and how we can help us better develop our Object-Oriented

2
00:00:11.330 --> 00:00:13.260
applications.

3
00:00:13.400 --> 00:00:17.870
Polymorphism is a fundamental part of object oriented programming.

4
00:00:17.900 --> 00:00:22.850
There are several types of polymorphism in C++ and we've already learned about two of them.

5
00:00:22.850 --> 00:00:28.580
When we overloaded functions and when we overloaded operators these are considered forms of compile

6
00:00:28.580 --> 00:00:30.440
time polymorphism.

7
00:00:30.440 --> 00:00:36.530
You might see the terms compile time early binding and static binding these terms all mean the same

8
00:00:36.530 --> 00:00:36.950
thing.

9
00:00:37.040 --> 00:00:40.160
They simply mean before the program executes.

10
00:00:40.160 --> 00:00:47.090
In other words something the compiler takes care of way before the program runs runtime late binding

11
00:00:47.090 --> 00:00:53.780
and dynamic binding all refer to the Association of what the programmer wants to do with how to do it.

12
00:00:53.870 --> 00:01:00.410
But at runtime as the program executes we'll see some examples in a few slides that will make this very

13
00:01:00.410 --> 00:01:01.880
clear.

14
00:01:02.060 --> 00:01:08.090
Polymorphism allows us to think more abstractly when we write programs we can think deposit or print

15
00:01:08.090 --> 00:01:08.990
or draw.

16
00:01:09.080 --> 00:01:16.080
Instead of thinking in specific versions of deposit print and draw so I can simply think deposit a thousand

17
00:01:16.070 --> 00:01:20.570
dollars to this account and I don't have to worry about what kind of county it is.

18
00:01:20.600 --> 00:01:26.240
I'll be sure that the correct deposit function will be called depending on what type of account I have.

19
00:01:26.240 --> 00:01:32.350
And this is all determined at runtime in C++ the default type of binding is static binding.

20
00:01:32.390 --> 00:01:38.030
This makes sense since C++ is all about efficiency and static binding is done before runtime.

21
00:01:38.090 --> 00:01:40.950
So programs can be as fast as possible.

22
00:01:41.120 --> 00:01:49.070
However sometimes we want to defer decisions until runtime in C++ we can opt into this behavior by using

23
00:01:49.070 --> 00:01:54.610
base class pointers or references and declaring our functions as virtual functions.

24
00:01:54.740 --> 00:01:58.100
We'll see the details in syntax of this later in this section.

25
00:01:58.130 --> 00:02:03.890
But first let's look at the types of polymorphism that C++ provides so that we can put this section

26
00:02:03.890 --> 00:02:06.650
in context.

27
00:02:06.650 --> 00:02:11.050
Here's a simple chart that shows the types of polymorphism and C++.

28
00:02:11.180 --> 00:02:13.070
There are two types of polymorphism.

29
00:02:13.130 --> 00:02:19.670
Compile time and runtime compile time polymorphism includes what we've already learned in this course.

30
00:02:19.700 --> 00:02:22.440
Function overloading and operator overloading.

31
00:02:22.550 --> 00:02:27.510
We also have runtime polymorphism and that's what this section of the course will focus on.

32
00:02:27.650 --> 00:02:34.190
We achieve runtime polymorphism by overriding functions and using inheritance using virtual functions

33
00:02:34.460 --> 00:02:37.800
and then having base class pointers and references.

34
00:02:37.820 --> 00:02:42.230
I think the best way to understand dynamic polymorphism is to use a simple example

35
00:02:45.120 --> 00:02:51.540
First let's look at a non-polymorphic example that uses static binding in this case we have an account

36
00:02:51.540 --> 00:02:56.430
hierarchy using public inheritance as you can see on the right side of the slide.

37
00:02:56.640 --> 00:03:01.530
We'll assume that every type of account class has its own version of the withdrawal method and each

38
00:03:01.530 --> 00:03:05.130
withdrawal method is different depending on the type of account.

39
00:03:05.130 --> 00:03:10.560
So let's create four objects one for each type of account and call their withdraw methods when we call

40
00:03:10.570 --> 00:03:15.000
account A's withdraw when we call account A's withdraw method.

41
00:03:15.000 --> 00:03:16.970
It will call accounts withdraw.

42
00:03:17.190 --> 00:03:20.320
This makes sense since a is an account object.

43
00:03:20.460 --> 00:03:26.050
The compiler knows this and binds this method call at compile time or statically.

44
00:03:26.160 --> 00:03:29.420
The same applies to objects B C and D.

45
00:03:29.520 --> 00:03:34.650
In each case the compiler is binding the calls to withdraw based on the information that it has about

46
00:03:34.650 --> 00:03:37.460
the objects when they were declared in the source code.

47
00:03:37.770 --> 00:03:45.110
So B withdraw calls savings withdraw C withdraw calls checking withdraw and deal withdraw calls trusts

48
00:03:45.120 --> 00:03:45.890
withdraw.

49
00:03:46.200 --> 00:03:47.230
So far so good.

50
00:03:47.370 --> 00:03:49.480
It's what we've done and what we expect.

51
00:03:49.530 --> 00:03:54.990
But now let's take a look at the pointer p p is a pointer to an account object.

52
00:03:55.150 --> 00:03:58.520
So P contains the address of an account object.

53
00:03:58.530 --> 00:04:03.140
Now we create a trust account dynamically on the heap and assign its address to P..

54
00:04:03.240 --> 00:04:04.770
Is this legal.

55
00:04:04.800 --> 00:04:09.150
Sure Pekan hold the addresses of accounts and trust is an account.

56
00:04:09.150 --> 00:04:11.320
The inheritance hierarchy tells us so.

57
00:04:11.790 --> 00:04:15.940
So what happens when we call the withdraw method for the object pointed to by P.

58
00:04:16.200 --> 00:04:19.060
Well we're using static binding by default.

59
00:04:19.140 --> 00:04:23.540
So the compiler doesn't really know what type of account object is pointing to at runtime.

60
00:04:23.550 --> 00:04:24.890
It doesn't really care.

61
00:04:25.140 --> 00:04:31.400
All it knows is that P is pointing to an account so it will call the account withdraw method.

62
00:04:31.410 --> 00:04:33.770
This is probably not what we expected.

63
00:04:33.780 --> 00:04:39.000
It certainly isn't what we wanted since we want the trust object on the heap to use its own version

64
00:04:39.000 --> 00:04:40.490
of withdraw.

65
00:04:40.500 --> 00:04:45.570
Please be sure that you understand this simple example since it's fundamental to understanding dynamic

66
00:04:45.570 --> 00:04:46.900
polymorphism.

67
00:04:46.920 --> 00:04:53.190
Remember all the compiler knows is that P is a pointer to an account so it will bind the withdraw method

68
00:04:53.190 --> 00:04:56.400
to the account classes withdraw method at compile time.

69
00:04:56.400 --> 00:05:00.950
Let's see another problem with static binding in the same context.

70
00:05:01.440 --> 00:05:03.960
In this example we have the same class hierarchy.

71
00:05:04.140 --> 00:05:09.660
And let's suppose that each account class has its own version of a display method that displays account

72
00:05:09.660 --> 00:05:13.080
information based on the type of account we have.

73
00:05:13.080 --> 00:05:19.530
So let's create a simple C++ function called display account and it expects a reference to an account

74
00:05:19.530 --> 00:05:20.610
object.

75
00:05:20.910 --> 00:05:27.510
Since all our derived classes are accounts we can pass any of them into this function and this function

76
00:05:27.510 --> 00:05:31.270
will call the display method for the account object passed in.

77
00:05:31.440 --> 00:05:38.130
So you can see that the code creates for objects A B C and D one for each type of account and then it

78
00:05:38.130 --> 00:05:42.690
calls display account and passes in each of these objects to the function.

79
00:05:42.720 --> 00:05:49.110
The behavior you get from the display account function may not be what you expect but by default C++

80
00:05:49.110 --> 00:05:51.570
is doing exactly what it's supposed to do.

81
00:05:51.570 --> 00:05:58.740
Static binding when the compiler sees the call to A.S.C. display in the display account function it

82
00:05:58.740 --> 00:06:05.430
will bind the call to accounts display so accounts display method will be called regardless of what

83
00:06:05.430 --> 00:06:11.000
object was passed in in our display will only display whatever is in the account part of us.

84
00:06:11.100 --> 00:06:15.160
There is a way for C++ to ask the account object being passed in.

85
00:06:15.300 --> 00:06:17.050
Hey what kind of account are you.

86
00:06:17.280 --> 00:06:18.910
And then depending on that we can have.

87
00:06:18.960 --> 00:06:24.600
If else statements that call the appropriate display methods that's bad coding practice and it also

88
00:06:24.600 --> 00:06:26.710
makes us program less abstractly.

89
00:06:26.850 --> 00:06:31.420
Since then we've got to figure out what kind of object we've got and then call its functions.

90
00:06:31.440 --> 00:06:32.530
There's a better way.

91
00:06:32.790 --> 00:06:35.210
That's where runtime polymorphism comes in.

92
00:06:35.460 --> 00:06:41.990
Let's see how this same example works with runtime or dynamic polymorphism.

93
00:06:41.990 --> 00:06:45.920
Now let's see the same example using polymorphic functions.

94
00:06:45.930 --> 00:06:48.470
Here we see the same account class hierarchy.

95
00:06:48.510 --> 00:06:52.920
Except that this time we've opted into runtime polymorphism.

96
00:06:52.950 --> 00:06:58.110
We'll see how and a few videos but notice that the withdraw methods in the class diagram are now virtual

97
00:06:58.110 --> 00:06:59.810
functions.

98
00:06:59.820 --> 00:07:05.300
This allows us to use runtime polymorphism when using base class pointers or references.

99
00:07:05.820 --> 00:07:07.950
Let's look at the same example as before.

100
00:07:07.950 --> 00:07:13.050
Notice that the four count objects A B C and D have exactly the same behavior.

101
00:07:13.080 --> 00:07:18.940
Since we're not using base class pointers or references these examples are all statically bound.

102
00:07:19.020 --> 00:07:23.710
Just like before but now let's look at the pointer p.

103
00:07:23.880 --> 00:07:29.730
In this case when we call the withdraw method of the object pointed to by p the trust withdraw method

104
00:07:29.730 --> 00:07:30.670
will be called.

105
00:07:30.990 --> 00:07:31.830
That's what we want.

106
00:07:31.830 --> 00:07:33.150
And that's pretty cool.

107
00:07:33.150 --> 00:07:39.390
The idea of using virtual functions tells the compiler not to bind the call compile time but instead

108
00:07:39.600 --> 00:07:47.270
defer the binding to runtime and at runtime a check will occur see exactly what P is pointing to and

109
00:07:47.270 --> 00:07:49.340
then that object's method will be called.

110
00:07:49.490 --> 00:07:57.030
In this case the trust withdraw method but see the other example again.

111
00:07:57.110 --> 00:08:00.860
Now we have virtual display functions in our account class.

112
00:08:00.860 --> 00:08:07.370
So whenever we use a pointer or a reference to a base class the binding is done at runtime not at compile

113
00:08:07.370 --> 00:08:08.420
time.

114
00:08:08.480 --> 00:08:11.440
So now we create four objects A B C and D.

115
00:08:11.540 --> 00:08:13.940
Each has a different type of account.

116
00:08:13.940 --> 00:08:20.210
Now when we pass these objects to the display account function the binding of a CC dot display will

117
00:08:20.210 --> 00:08:26.000
take place at runtime and call the display method based on the type of object being passed in.

118
00:08:26.000 --> 00:08:28.950
That's pretty cool and very very powerful.

119
00:08:28.970 --> 00:08:34.940
I can now write functions methods and data structures that use pointers and references to base class

120
00:08:34.940 --> 00:08:38.930
objects and I know that to correct methods will be called at runtime.

121
00:08:38.950 --> 00:08:44.240
Remember that account class hierarchy we did in the last section's challenge is static binding since

122
00:08:44.240 --> 00:08:46.800
we hadn't learned about dynamic polymorphism yet.

123
00:08:47.150 --> 00:08:51.270
Remember all those utility functions that we wrote were all pretty much the same.

124
00:08:51.290 --> 00:08:56.270
Now we could write just one version and the work with all the account types once we convert that hierarchy

125
00:08:56.480 --> 00:08:58.390
to use polymorphic functions.

126
00:08:58.790 --> 00:08:59.690
Fantastic.

127
00:08:59.720 --> 00:09:05.840
In the next video we'll go over how we can use base class pointers in a little more detail before we

128
00:09:05.840 --> 00:09:07.100
do the next video.

129
00:09:07.100 --> 00:09:10.130
Let's go over here to the ID and walk through this problem.

130
00:09:10.130 --> 00:09:12.520
This is same problem we had with the account class.

131
00:09:12.650 --> 00:09:17.210
And what I'm doing here I'm just creating a base of a derived class to absolutely show you and walk

132
00:09:17.210 --> 00:09:18.780
you through what's going on here.

133
00:09:19.010 --> 00:09:24.210
I'm in the Section 16 workspace in the problem project.

134
00:09:24.320 --> 00:09:25.280
So what have I got.

135
00:09:25.280 --> 00:09:29.150
Well you can see here it's Can't get much simpler than this hierarchy.

136
00:09:29.150 --> 00:09:36.110
I've got a base class right here and it's got one public method called Say hello that's all and all

137
00:09:36.110 --> 00:09:42.730
it says is Hello I'm a base class then I've got a derived class that's derived publicly from base and

138
00:09:42.730 --> 00:09:44.700
it's got the same method.

139
00:09:44.810 --> 00:09:46.110
Boyd say hello.

140
00:09:46.410 --> 00:09:50.600
But it says hello I'm a derived class object.

141
00:09:50.750 --> 00:09:51.600
That's it.

142
00:09:51.680 --> 00:09:53.600
Then I've got this function right here that I've written.

143
00:09:53.600 --> 00:09:54.740
This is not a member function.

144
00:09:54.740 --> 00:10:02.510
This is just a regular C++ function it's called greetings and it expects a base object by reference.

145
00:10:02.510 --> 00:10:04.760
Now remember a derived is a base.

146
00:10:04.790 --> 00:10:10.340
So I can pass in either a derived object or a base object to this function and this function is simply

147
00:10:10.340 --> 00:10:16.110
to say greetings and then it's going to call the specific objects say hello method.

148
00:10:16.160 --> 00:10:17.470
So what do we expect here.

149
00:10:17.570 --> 00:10:22.550
Well the idea would be that if I have a Derived object and I pass it into this function right here I'd

150
00:10:22.550 --> 00:10:27.290
say greetings and then hello I'm a derived class object but that's not what happens because we're doing

151
00:10:27.290 --> 00:10:28.440
static binding.

152
00:10:28.460 --> 00:10:33.190
So let's walk through this example it's really important that you understand the static binding version

153
00:10:33.200 --> 00:10:37.170
before we start talking about the dynamic binding version.

154
00:10:37.250 --> 00:10:38.020
Here's my main.

155
00:10:38.150 --> 00:10:42.330
Let's create a base object we call it be it will simply call beat.

156
00:10:42.380 --> 00:10:44.420
Say hello.

157
00:10:44.930 --> 00:10:46.060
What do we expect here.

158
00:10:46.070 --> 00:10:47.990
Exactly what you would think right.

159
00:10:47.990 --> 00:10:49.590
Let me just scroll up just a little bit.

160
00:10:49.850 --> 00:10:53.940
And I'm the compiler I'm looking in here.

161
00:10:54.380 --> 00:10:55.770
There is no virtual.

162
00:10:55.850 --> 00:10:59.610
We haven't really talked about virtual yet but to see the word virtual in here.

163
00:10:59.720 --> 00:11:05.840
When we buy into dynamic polymorphism so the compiler sees this class hierarchy it doesn't see anything

164
00:11:05.840 --> 00:11:11.390
virtual So there's not going to be any dynamic polymorphism here it knows that it needs to bind everything

165
00:11:11.390 --> 00:11:12.320
statically.

166
00:11:12.320 --> 00:11:16.160
And also we're not coming at this with a base pointer we have to have a base pointer.

167
00:11:16.160 --> 00:11:19.000
Well talk a little bit about base pointer more in the next video.

168
00:11:19.220 --> 00:11:21.750
So this is really simple for the compiler right.

169
00:11:21.790 --> 00:11:23.020
B say hello.

170
00:11:23.030 --> 00:11:27.100
OK which say hello method do I bind this guy right here.

171
00:11:27.200 --> 00:11:30.080
How does it know wellby is a base.

172
00:11:30.170 --> 00:11:32.770
That's all the compiler knows is this right here.

173
00:11:32.780 --> 00:11:33.960
So that's what it's using.

174
00:11:34.040 --> 00:11:39.200
And that's just going to say hello I'm a base class object and let's do the same thing before we run

175
00:11:39.200 --> 00:11:42.680
it would do it again and we'll do it this time for a derived object.

176
00:11:42.860 --> 00:11:46.000
So let's do that elysée say derived.

177
00:11:47.180 --> 00:11:52.600
And we'll say say hello again same exact thing happens.

178
00:11:52.640 --> 00:11:58.420
The compiler knows that D is a type of derived derived type is derived.

179
00:11:58.460 --> 00:12:02.720
So in this case it's going to bind this method right here.

180
00:12:02.900 --> 00:12:07.310
Again there's no pointers when there's no pointers and no virtual methods.

181
00:12:07.370 --> 00:12:08.780
Everything is static.

182
00:12:08.840 --> 00:12:15.680
So if we run this what we expect is we expect this say hello to say hi I'm a base class object and say

183
00:12:15.680 --> 00:12:18.800
hello here 9:29 say Hi I'm a derived class object.

184
00:12:18.860 --> 00:12:20.090
So let's run that.

185
00:12:20.780 --> 00:12:22.230
And there's the output.

186
00:12:22.400 --> 00:12:25.580
Hello I'm a base class object and hello on the derived class object.

187
00:12:25.640 --> 00:12:27.710
Exactly as we expect.

188
00:12:28.370 --> 00:12:35.360
OK so now let's run into some of the issues that we'll run into when we start using base class pointers

189
00:12:35.360 --> 00:12:36.180
and references.

190
00:12:36.330 --> 00:12:38.970
But we do this function first right here.

191
00:12:39.050 --> 00:12:44.280
So suppose that I want to call that function remember this is a regular C++ function greetings and an

192
00:12:44.270 --> 00:12:47.020
pass in the base class to it.

193
00:12:47.310 --> 00:12:53.770
I can do that because B is a base and then I'm going to call it again and I'm going to pass in D.

194
00:12:54.450 --> 00:12:57.230
I can do that because a derived is a base right.

195
00:12:57.270 --> 00:12:59.610
That's what my inheritance hierarchy is doing for me.

196
00:12:59.880 --> 00:13:07.170
So what I expect here would be for the b to say greetings Hello I'm a base and D to say greetings Hello

197
00:13:07.170 --> 00:13:10.870
I'm a Dr but that's not what happens because we've got static binding going on.

198
00:13:10.980 --> 00:13:15.290
So let's run this and you'll see the problem.

199
00:13:15.360 --> 00:13:15.900
There you go.

200
00:13:15.900 --> 00:13:18.520
You can see that right there those two greetings is right here.

201
00:13:18.520 --> 00:13:19.110
There's the OP.

202
00:13:19.110 --> 00:13:19.770
Greetings.

203
00:13:19.770 --> 00:13:25.090
Hello I'm a base and then greetings Hello I'm a bass again even though I'm passing a derived into it.

204
00:13:25.650 --> 00:13:30.260
And we know now that the reason that this is happening is a scroll up just a little bit is right.

205
00:13:30.260 --> 00:13:34.880
Here's the problem we're not using dynamic polymorphism.

206
00:13:34.890 --> 00:13:37.230
And as far as the compiler is concerned.

207
00:13:37.320 --> 00:13:41.410
RBJ is a reference to a base that's all it knows that's all it cares about.

208
00:13:41.430 --> 00:13:51.930
So right here that will always bind to base say hello and that's why we're seeing that behavior get

209
00:13:52.410 --> 00:13:58.130
the same thing happens when we've got a base pointer and let's do that really quickly.

210
00:13:58.290 --> 00:14:01.670
So suppose we have a point turn and we'll just call it PCR.

211
00:14:02.340 --> 00:14:06.060
And in this case PCR is a pointer to a base object right.

212
00:14:06.150 --> 00:14:07.470
An object of that type.

213
00:14:07.620 --> 00:14:10.860
And we can say new Derived.

214
00:14:10.860 --> 00:14:16.020
Now this sometimes confuses students but this makes perfect sense right because think about it sometimes

215
00:14:16.020 --> 00:14:18.070
you think about the hierarchy you get all confused.

216
00:14:18.070 --> 00:14:26.040
Think about what this really says this really says that BTR can hold the address of any base object.

217
00:14:26.130 --> 00:14:26.650
Right.

218
00:14:26.850 --> 00:14:31.530
Well derived is a base object a derived is a base.

219
00:14:31.530 --> 00:14:32.790
That's what the inheritance is telling me.

220
00:14:32.790 --> 00:14:36.470
So what happens here is here is Peetie are.

221
00:14:37.170 --> 00:14:41.370
Here is my derived object that I'm creating on the heap.

222
00:14:41.640 --> 00:14:41.930
Right.

223
00:14:41.940 --> 00:14:45.750
And there's really nothing in there right now because there's no attributes or anything but this guy's

224
00:14:45.750 --> 00:14:53.670
pointing here and that's OK because this is a base so that's valid.

225
00:14:53.670 --> 00:14:55.790
The compilers happy about that.

226
00:14:56.070 --> 00:15:03.100
But the problem comes in now when I try to call TTR say hello.

227
00:15:04.140 --> 00:15:07.990
We've gotten no dynamic polymorphism no polymorphic functions.

228
00:15:08.010 --> 00:15:13.150
So what's going to happen is the compiler sees TTR as a pointer to a base.

229
00:15:13.170 --> 00:15:17.450
It's all it knows it's going to bind this to base.

230
00:15:17.550 --> 00:15:19.930
Hello always.

231
00:15:22.510 --> 00:15:24.890
So always bind that to base say hello.

232
00:15:25.330 --> 00:15:28.110
And again this is probably not what we want.

233
00:15:28.180 --> 00:15:34.570
We want dynamic polymorphism to figure out what I'm pointing to at runtime and call that appropriately.

234
00:15:34.570 --> 00:15:39.630
So let's run this one last time and see if we get a run here.

235
00:15:39.630 --> 00:15:40.460
We do.

236
00:15:40.660 --> 00:15:41.290
So here we go.

237
00:15:41.290 --> 00:15:42.600
Let's walk through this one more time.

238
00:15:42.610 --> 00:15:43.310
Here's B.

239
00:15:43.330 --> 00:15:44.050
Say hello.

240
00:15:44.110 --> 00:15:45.280
Hello I'm a bass.

241
00:15:45.490 --> 00:15:50.660
There's Deepcut say hello hello I'm a Dr That's all using static binding that's perfectly fine.

242
00:15:50.710 --> 00:15:56.590
Now here in passing an A B and A D to this method greetings in both cases the compiler doesn't know

243
00:15:56.590 --> 00:15:58.440
anything except that that's a base.

244
00:15:58.480 --> 00:16:05.890
So it's binding it to say hello right here on 9:21 of the base class and then here's my pointer and

245
00:16:05.890 --> 00:16:10.960
I'm calling say hello through the pointer again even though I'm pointing to a derived object the compiler

246
00:16:10.960 --> 00:16:12.250
doesn't care.

247
00:16:12.250 --> 00:16:17.620
This is not being deferred to runtime so the compiler is binding at right now at compile time.

248
00:16:18.060 --> 00:16:18.630
OK.

249
00:16:18.820 --> 00:16:23.710
This also you don't have to use raw pointers for this we haven't talked about smart pointers yet but

250
00:16:23.710 --> 00:16:24.500
we will.

251
00:16:24.700 --> 00:16:30.040
And suppose I include memory that's where the smart pointers live.

252
00:16:30.640 --> 00:16:35.280
And I could scroll down here and I could say something like I may just close this up a little.

253
00:16:35.530 --> 00:16:38.170
I could say something like stood unique pointer

254
00:16:41.350 --> 00:16:49.000
and you can have a unique pointer to a base and we can call these Peacher are one and then we could

255
00:16:49.000 --> 00:16:58.660
call make unique which creates that pointer and the pointer is a derived this time and we'll just empty

256
00:16:58.660 --> 00:16:59.840
constructor right here.

257
00:16:59.980 --> 00:17:04.920
So then to create a smart pointer this will talk about smart pointers later and then we could just say

258
00:17:04.940 --> 00:17:08.400
Peachi are one and we can call the say hello method there.

259
00:17:08.560 --> 00:17:10.890
Right now obviously we've got a pointer here.

260
00:17:10.990 --> 00:17:17.360
So we really should free or delete that pointer just so we're we're consistent with best practices here.

261
00:17:17.410 --> 00:17:20.630
We don't have to delete smart pointers that take care of themselves.

262
00:17:20.690 --> 00:17:26.650
So we run this you can see that even with a smart pointer there's a regular pointer there's a smart

263
00:17:26.650 --> 00:17:31.540
pointer they're both being statically bound just like you would expect.

264
00:17:31.540 --> 00:17:35.290
All right so in the next video we'll talk about this base class pointer and see a little bit more about

265
00:17:35.290 --> 00:17:36.320
how that works.
