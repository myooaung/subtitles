WEBVTT
1
00:00:05.480 --> 00:00:11.680
OK in this video what I want to do is read a poem from a text file and just display it to the console.

2
00:00:11.900 --> 00:00:14.250
And we're going to use getline to do that.

3
00:00:14.270 --> 00:00:17.700
So I'm in the section 19 workspace in the read file.

4
00:00:17.700 --> 00:00:23.900
Underscore three project and what I've done here is I've got a poem already and I created a file called

5
00:00:23.900 --> 00:00:30.890
poem that text just like we did before and this is Shakespeare's son and 18 poem and you can see it's

6
00:00:30.890 --> 00:00:32.110
14 lines.

7
00:00:32.330 --> 00:00:36.740
And what I want to do is read each line and display it out to the console.

8
00:00:36.740 --> 00:00:42.620
Now if we tried to do this with the extraction operator reading one of these words at a time it's much

9
00:00:42.620 --> 00:00:45.020
trickier because you know when do we hit the end of line.

10
00:00:45.020 --> 00:00:47.080
We really don't want to deal with any of that.

11
00:00:47.090 --> 00:00:51.800
The simplest way to do it is just to read one line at a time and then display that line right out.

12
00:00:51.830 --> 00:00:55.310
So let me show you where the main is.

13
00:00:55.840 --> 00:00:57.990
This is about as simple as it gets.

14
00:00:58.000 --> 00:01:01.360
I've got I O stream extreme included.

15
00:01:01.360 --> 00:01:08.410
You can see here I've created my in file and I'm opening poem text in my parents directory which is

16
00:01:08.410 --> 00:01:15.220
exactly where I wanted to be in code like if the file is not able to be opened displaying an error again

17
00:01:15.220 --> 00:01:18.190
and I'm outta here and I'm closing the file at the end.

18
00:01:18.190 --> 00:01:21.730
So what I need to do here is simply process that file.

19
00:01:21.730 --> 00:01:22.900
So how do we do this.

20
00:01:22.900 --> 00:01:25.790
It's really just two lines of code it's really really straightforward.

21
00:01:25.930 --> 00:01:33.780
So what I'm going to do here is say while I'm going to use to get line and there's two versions of getline

22
00:01:33.790 --> 00:01:37.750
by the way there's a getline that works with character pointers or C-style strings.

23
00:01:38.020 --> 00:01:43.480
And there is a version that works with C++ strings were using C++ strings.

24
00:01:43.480 --> 00:01:46.190
From now on in the course so that's what we're going to be using.

25
00:01:46.240 --> 00:01:52.400
So we're using stood getline give it the name of the input stream which in this case is infile and Wardwell

26
00:01:52.410 --> 00:01:55.670
want this read into what this read into line.

27
00:01:55.720 --> 00:01:58.030
We haven't defined line yet so let's define line.

28
00:01:58.030 --> 00:01:59.480
I'll do that right here.

29
00:01:59.570 --> 00:02:03.910
I'll say stood string line.

30
00:02:04.090 --> 00:02:05.040
That's it.

31
00:02:05.110 --> 00:02:06.870
That's where the input is going into.

32
00:02:07.150 --> 00:02:09.700
So what do we do.

33
00:02:10.810 --> 00:02:14.440
Well while we're getting a line and it's successful this will be true.

34
00:02:14.440 --> 00:02:16.300
So what do we want to do with that line.

35
00:02:16.330 --> 00:02:24.610
We just want to display it right to the console so can't get much easier in this out line and I need

36
00:02:24.610 --> 00:02:26.160
a new line.

37
00:02:27.340 --> 00:02:29.280
That's it that's really that simple.

38
00:02:29.380 --> 00:02:38.170
So if I run this there's the poll right one line at a time till I hit the end of the line.

39
00:02:38.170 --> 00:02:43.340
I'm reading that in and I'm just displaying it right back out OK.

40
00:02:43.380 --> 00:02:48.530
Pretty easy right now you can see how easy it would be to write a file copy utility.

41
00:02:48.660 --> 00:02:52.460
We haven't learned about writing files yet thinking you know where we're going right.

42
00:02:52.470 --> 00:02:58.290
We can just like we write to stood out we can write to a file so we could easily write a utility that

43
00:02:58.290 --> 00:03:02.070
will copy a file that will actually going to do that we're going to when we get to the output files

44
00:03:02.070 --> 00:03:07.470
section will read this file and maybe this one a Romeo and Juliet or something a bigger one and we'll

45
00:03:07.470 --> 00:03:11.850
write it out with line numbers and so forth that way we can modify it a little bit.

46
00:03:11.850 --> 00:03:12.500
So that's it.

47
00:03:12.510 --> 00:03:16.050
This is using getline reading one line at a time.

48
00:03:16.050 --> 00:03:21.210
Now what I want to do next is I want to go into read file underscore for project and what we'll do is

49
00:03:21.210 --> 00:03:26.660
we'll do the same thing but we'll use an formatted input so we'll do it one character at a time.

50
00:03:26.700 --> 00:03:30.840
So I'll set that up here at back.

51
00:03:31.040 --> 00:03:37.730
OK so I'm back in the read file underscore for Project for the section 19 workspace and what we're going

52
00:03:37.730 --> 00:03:44.060
to do here is we're going to read Sonnet 18 again except we're going to use an formatted input in this

53
00:03:44.060 --> 00:03:48.770
case we're just going to use the get method and what that'll do is it will return one character at a

54
00:03:48.770 --> 00:03:52.030
time and we'll just display that one character out.

55
00:03:52.040 --> 00:03:57.650
So the advantages of using an formatted input are you don't have to worry about newlines you don't have

56
00:03:57.650 --> 00:04:02.420
to worry about files you don't have to worry about fancy characters and different things that could

57
00:04:02.480 --> 00:04:07.400
maybe break the way that you're reading because it's formatted and it's just going to process characters

58
00:04:07.490 --> 00:04:09.500
and formatted it's pretty cool.

59
00:04:09.500 --> 00:04:12.740
It gives you a lot of flexibility and that's what we'll do now.

60
00:04:12.740 --> 00:04:14.530
So this is where we are again.

61
00:04:14.540 --> 00:04:20.540
We've got streaming extreme exactly what we're before we've created our infile object and open the file

62
00:04:20.810 --> 00:04:23.760
and we've tested to be sure we've got an open file.

63
00:04:23.990 --> 00:04:25.130
We're closing it down here.

64
00:04:25.130 --> 00:04:29.460
So right in here is where we're going to do our processing of the file.

65
00:04:29.510 --> 00:04:30.480
How do we do this.

66
00:04:30.500 --> 00:04:39.670
Well pretty simple again while in file that get some character C..

67
00:04:40.150 --> 00:04:40.560
OK.

68
00:04:40.580 --> 00:04:42.700
We need to define C as the characters.

69
00:04:42.700 --> 00:04:44.040
We'll do that right here.

70
00:04:44.060 --> 00:04:46.710
We'll say char.

71
00:04:46.710 --> 00:04:51.100
See that's it it's really pretty simple.

72
00:04:51.110 --> 00:04:54.880
So while this is true what do I do.

73
00:04:55.070 --> 00:05:00.530
Stood out the character and then that's it.

74
00:05:00.530 --> 00:05:05.360
I mean down here I guess we could print a new line here.

75
00:05:05.420 --> 00:05:11.210
So we get a little bit of space at the end so we can see a little better but that's it.

76
00:05:11.210 --> 00:05:15.640
So while we're reading a character and it's true right we haven't hit the end of file.

77
00:05:15.740 --> 00:05:20.390
We haven't hit some bad bits we haven't read some we haven't had any hardware issues.

78
00:05:20.390 --> 00:05:22.960
While this is good we've got that C.

79
00:05:22.970 --> 00:05:24.710
We're just going to display it.

80
00:05:24.710 --> 00:05:30.680
So if we run this there's the poem exactly like it was before.

81
00:05:30.680 --> 00:05:31.160
That's it.

82
00:05:31.160 --> 00:05:34.940
Now you're ready for the challenge and the challenge is going to be a fun one there's a couple of challenges

83
00:05:34.940 --> 00:05:35.650
actually.

84
00:05:35.750 --> 00:05:38.780
So I'll see you in the next video and I'll explain the challenge to you.
