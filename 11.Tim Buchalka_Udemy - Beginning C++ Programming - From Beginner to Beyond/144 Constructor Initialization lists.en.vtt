WEBVTT
1
00:00:05.800 --> 00:00:11.440
In this video we'll learn about constructor initialization lists which are very useful for efficiently

2
00:00:11.440 --> 00:00:14.150
initializing our objects data members.

3
00:00:14.230 --> 00:00:20.380
So far we've written our code so that we initialize our data member values in the constructor body by

4
00:00:20.380 --> 00:00:22.190
assigning values to them.

5
00:00:22.240 --> 00:00:28.660
While this works it technically isn't initialization because by the time the constructor body is executed

6
00:00:28.870 --> 00:00:31.690
these member attributes have already been created.

7
00:00:31.720 --> 00:00:35.620
So we're really just assigning values to already created attributes.

8
00:00:35.620 --> 00:00:39.690
I'll show you exactly what's happening when we head over to the ID and just a bit.

9
00:00:40.060 --> 00:00:45.460
What we really want to do is have the member data values initialized to our values before the constructor

10
00:00:45.460 --> 00:00:46.750
body executes.

11
00:00:46.750 --> 00:00:53.710
This is much more efficient since it's true initialization C++ allows us to do this using constructor

12
00:00:53.710 --> 00:00:59.860
initialization lists which is basically just the list of initializers immediately following the constructor

13
00:00:59.860 --> 00:01:01.060
parameter list.

14
00:01:01.060 --> 00:01:02.710
It sounds complicated but it's not.

15
00:01:02.710 --> 00:01:05.450
Let me show you.

16
00:01:05.690 --> 00:01:09.510
Here we have this same player class that we've been using in previous examples.

17
00:01:09.530 --> 00:01:14.570
It has three overloaded constructors and if you recall from the previous videos we implemented them

18
00:01:14.570 --> 00:01:19.410
using assignment statements in the constructor body.

19
00:01:19.420 --> 00:01:25.600
You can see in the top section of this slide how we previously implemented the no args constructor in

20
00:01:25.600 --> 00:01:31.460
the body of the constructor we use 3 assignment statements to set the attributes to the values we want.

21
00:01:31.480 --> 00:01:35.530
While this works it can be inefficient in many cases for example.

22
00:01:35.530 --> 00:01:37.180
By the time that we get to the statement.

23
00:01:37.180 --> 00:01:43.980
Name equals none the name string object has already been constructed and initialized to an empty string.

24
00:01:44.020 --> 00:01:46.510
So we're really just assigning a new string to it.

25
00:01:46.540 --> 00:01:51.280
In this case to an existing object that's very different from initialization.

26
00:01:51.310 --> 00:01:57.550
What we really want is to initialize the data members to our data values as they're created.

27
00:01:57.550 --> 00:02:01.120
That's what constructor initialization lists allow us to do.

28
00:02:01.120 --> 00:02:05.650
The bottom section of the slide shows how we could implement the same constructor in a more efficient

29
00:02:05.650 --> 00:02:06.610
way.

30
00:02:06.610 --> 00:02:13.030
Notice that immediately after the parameter list we provide a colon followed by a list of initializers.

31
00:02:13.150 --> 00:02:17.440
In this case we're telling the C++ compiler to initialize name to none.

32
00:02:17.440 --> 00:02:19.760
Health and Expwy to zero.

33
00:02:19.780 --> 00:02:23.920
This happens before the body of the constructor is ever executed.

34
00:02:23.920 --> 00:02:29.230
One thing to keep in mind the order in which the members are initialized is not necessarily the order

35
00:02:29.230 --> 00:02:31.630
we provide in the initialization list.

36
00:02:31.780 --> 00:02:36.210
The data members will be initialized in the order that they were declared in the class declaration.

37
00:02:37.210 --> 00:02:43.430
So let's implement the rest of the constructors using initialization lists here we're implementing the

38
00:02:43.430 --> 00:02:45.250
single string constructor.

39
00:02:45.260 --> 00:02:50.180
Notice the previous way on the top section of the slide and the better way using an initialization list

40
00:02:50.180 --> 00:02:51.150
below.

41
00:02:51.290 --> 00:02:58.570
In this case we provide name value to initialize name and still use 0 for health and 0 for XP you kapala.

42
00:02:58.650 --> 00:03:02.070
Yes how the three args constructor will look.

43
00:03:02.130 --> 00:03:05.740
Here's the three args constructor at the bottom using the initializer list.

44
00:03:05.820 --> 00:03:12.570
We're providing name Val helpful and XP out to the initializers and the complete refactoring looks something

45
00:03:12.570 --> 00:03:13.350
like this.

46
00:03:14.510 --> 00:03:17.990
Notice how in the constructor there's no code in the constructor body.

47
00:03:18.110 --> 00:03:21.020
We can still write any code we want in the constructor body.

48
00:03:21.020 --> 00:03:26.360
But now we can be sure that our data members have been initialized to our own values before any code

49
00:03:26.360 --> 00:03:28.420
in the constructor body is executed.

50
00:03:28.760 --> 00:03:33.630
Let's head over to the idea and we'll step through a few examples so you can see how much more efficient.

51
00:03:33.740 --> 00:03:36.760
Constructor initialization this can be.

52
00:03:36.970 --> 00:03:43.990
OK so I mean the ID and I'm in the section 13 workspace in the constructor initialization this project

53
00:03:44.620 --> 00:03:51.090
and I've just got a simple main here that has our player class as I've discussed previously with three

54
00:03:51.100 --> 00:03:54.510
overloaded constructors and no args a single string.

55
00:03:54.550 --> 00:03:57.020
And the one that supplies the string and the two integers.

56
00:03:57.130 --> 00:03:57.780
OK.

57
00:03:57.800 --> 00:04:02.770
And I've implemented the constructors the way we've done previously using these assignment statements

58
00:04:02.830 --> 00:04:05.080
inside the body of the constructor.

59
00:04:05.090 --> 00:04:09.670
I've got some breakpoints in here that we'll walk through so that we can see exactly what's going on.

60
00:04:09.670 --> 00:04:14.740
And then I'm creating three objects and creating empty using no arguments I'm creating.

61
00:04:14.740 --> 00:04:20.590
Frank which is a point there are player objects frank with the single string and then the villain is

62
00:04:20.590 --> 00:04:23.450
going to use this constructor here with the three arguments.

63
00:04:23.610 --> 00:04:23.940
OK.

64
00:04:24.040 --> 00:04:30.700
So let's work through this and we'll be real careful to look at that name attribute because that's really

65
00:04:30.700 --> 00:04:32.860
the important one because it's an object.

66
00:04:32.860 --> 00:04:40.160
So let's walk through this and right now we are on 9:41 right about here.

67
00:04:40.450 --> 00:04:45.250
And I'm going to step through this and that we'll call the no args constructor that's this one right

68
00:04:45.250 --> 00:04:47.000
up here on 9:21.

69
00:04:47.050 --> 00:04:52.060
Since we're providing no information for initialization so I'm going to step through it and you can

70
00:04:52.060 --> 00:04:58.340
see now the arrow here that little green arrows on line 22 that's where I'm at now we can't really see

71
00:04:58.340 --> 00:05:04.540
if empty here because empty is out of scope we're now within the scope of this constructor right here.

72
00:05:04.540 --> 00:05:08.990
And I'll talk about a variable called this a little bit later in the course.

73
00:05:08.990 --> 00:05:10.690
Probably a few videos from now.

74
00:05:10.870 --> 00:05:13.760
This represents the current object.

75
00:05:13.900 --> 00:05:20.070
OK so if I expand this you can see that this is this current object that I'm building right here.

76
00:05:20.140 --> 00:05:24.760
And you'll notice something interesting you'll notice that name is set to the empty string.

77
00:05:24.760 --> 00:05:28.120
What does that tell you what that tells you that that was already initialized.

78
00:05:28.120 --> 00:05:35.710
In other words that string object name its constructor was already called with no information and we

79
00:05:35.710 --> 00:05:37.940
initialized it to an empty string.

80
00:05:37.960 --> 00:05:41.690
So this line right here that says name equals none.

81
00:05:41.740 --> 00:05:43.540
That's really not initializing anything.

82
00:05:43.540 --> 00:05:49.700
All it's doing is assigning none to an already created object name right here.

83
00:05:51.040 --> 00:05:52.900
That's really not what we'd like.

84
00:05:52.900 --> 00:05:59.320
We'd like to initialize that object name immediately without having to initialize and then assigned

85
00:05:59.320 --> 00:06:00.020
to it.

86
00:06:00.020 --> 00:06:02.420
OK that can be very inefficient.

87
00:06:02.530 --> 00:06:08.800
In the case of a very complex class you might have to create some sort of default constructor for it

88
00:06:08.800 --> 00:06:12.880
and it's setting a lot of fields and maybe allocating things and then you're just going to deallocate

89
00:06:12.880 --> 00:06:14.820
all that stuff and assigned to it again.

90
00:06:14.860 --> 00:06:17.760
It really doesn't make sense if things become very inefficient.

91
00:06:17.890 --> 00:06:23.140
So you can see in this case a walk keep walking through this and now we're going to set name to non-health

92
00:06:23.140 --> 00:06:29.410
to zero you could see them right here on line 24 and Expedia 0 and I come back down to Main at this

93
00:06:29.410 --> 00:06:37.130
point my player objects all refresh over here my empty player object is set to None 0 0.

94
00:06:37.150 --> 00:06:38.640
Just like we expected.

95
00:06:38.830 --> 00:06:40.720
But now let's create the Frank object.

96
00:06:40.710 --> 00:06:41.590
So what do we do.

97
00:06:41.740 --> 00:06:46.090
We're going to call the constructor that expects a single string which is this one right here on 9:27

98
00:06:46.540 --> 00:06:48.070
and I'm going to go to that.

99
00:06:48.100 --> 00:06:55.240
Now here on the unblind 28 again notice this represents the object that I'm creating right now and an

100
00:06:55.240 --> 00:06:59.190
empty string again so I just created another object in this case.

101
00:06:59.220 --> 00:07:00.820
I'll step through it really quickly.

102
00:07:01.650 --> 00:07:05.860
And now I'm back here to play a villain which is going to call this constructor right here.

103
00:07:05.930 --> 00:07:09.290
The three ARBs constructor and I'll do that.

104
00:07:09.500 --> 00:07:13.850
And again here's this another object that was created.

105
00:07:13.880 --> 00:07:20.000
So we just created three string objects and then get rid of basically the string the empty string they

106
00:07:20.000 --> 00:07:26.410
pointed to and replaced it with Frank a villain and none so really really an inefficient thing to do.

107
00:07:26.600 --> 00:07:28.660
And what I'll do is ouch.

108
00:07:28.700 --> 00:07:32.660
I'll make one little change that hopefully will really help you understand this right now we're just

109
00:07:32.660 --> 00:07:34.050
using that empty string.

110
00:07:34.160 --> 00:07:41.580
But suppose that I initialize this here to some string that's really obvious like a bunch of XS.

111
00:07:43.030 --> 00:07:43.600
OK.

112
00:07:43.700 --> 00:07:48.260
And let's let's run this again or walk through it one more time and hopefully this time it'll really

113
00:07:48.260 --> 00:07:49.910
be obvious what's going on.

114
00:07:49.910 --> 00:07:55.340
OK so again I'm here on line 41 and I'm creating an empty player object so it's going to call the no

115
00:07:55.340 --> 00:07:56.300
args constructor.

116
00:07:56.300 --> 00:07:57.790
This one here.

117
00:07:57.830 --> 00:08:01.970
So when I step through it you can see I'm now in line 22.

118
00:08:01.970 --> 00:08:05.450
But if you look at the object take a look at name right there.

119
00:08:05.450 --> 00:08:06.940
See all the X's.

120
00:08:07.340 --> 00:08:12.380
So that tells you that some constructor for that string class is already executed and initialized that

121
00:08:12.380 --> 00:08:13.510
string object.

122
00:08:13.580 --> 00:08:15.260
Again that's not what we want to do.

123
00:08:16.320 --> 00:08:20.640
OK so hopefully this of this is really clear as to what's going on what we want to do is we want to

124
00:08:20.640 --> 00:08:27.330
use the initializer lists for the constructors and it's really simple to do what you do is immediately

125
00:08:27.360 --> 00:08:34.140
after the parameter list right there you just put a colon and you can follow it by the initializer list

126
00:08:34.410 --> 00:08:35.800
just like we did in the slides.

127
00:08:35.870 --> 00:08:36.240
OK.

128
00:08:36.330 --> 00:08:38.240
So in this case I'll do it on the next line.

129
00:08:38.270 --> 00:08:40.110
So it's a little clearer there.

130
00:08:40.230 --> 00:08:44.460
What we can do is we can tell it which attributes do we want to initialize.

131
00:08:44.460 --> 00:08:50.940
In this case it's like name and we provide the initialiser which is the initializations value I should

132
00:08:50.940 --> 00:08:53.220
say which is none.

133
00:08:53.260 --> 00:08:53.790
Health

134
00:08:56.440 --> 00:08:57.460
to zero.

135
00:08:57.470 --> 00:09:03.490
All of these would be comma separated and Expwy also to zero.

136
00:09:03.660 --> 00:09:04.150
That's it.

137
00:09:04.160 --> 00:09:08.780
And then we don't need the body of the constructor anymore because we've already done the initialization.

138
00:09:08.780 --> 00:09:14.270
We can certainly write any code we need here but we're sure that we're in the body of the constructor.

139
00:09:14.300 --> 00:09:19.550
Those three attributes have now been initialized initialized correctly not initialized and then assigned

140
00:09:19.550 --> 00:09:21.040
to but initialized.

141
00:09:21.460 --> 00:09:24.140
OK so that takes care of that one.

142
00:09:24.200 --> 00:09:28.350
We can also do the same for these here and I'll just do them really quickly.

143
00:09:28.910 --> 00:09:32.070
And let me just copy this bit here.

144
00:09:34.830 --> 00:09:39.430
And what we do here is we'll set name in this case we have the value to set it to.

145
00:09:39.510 --> 00:09:45.930
It's going to be named Val and both still keep health and XP at zero and we'll get rid of the constructor

146
00:09:45.930 --> 00:09:51.690
body will get rid of some of those breakpoints as well and clean up the code and you can see when you

147
00:09:51.690 --> 00:09:56.750
do it this way you end up with empty bodies for the constructors and that's OK.

148
00:09:56.820 --> 00:10:00.610
Obviously we want to put something else in there once our variables are created.

149
00:10:00.690 --> 00:10:05.360
And this last one again I'll copy this one just to save a little time here.

150
00:10:06.480 --> 00:10:07.960
We'll get rid of that and

151
00:10:11.250 --> 00:10:15.810
then Dent that in there is my initialiser name Val in this case I've got health Val

152
00:10:19.190 --> 00:10:20.400
and I've got X P-BO

153
00:10:23.480 --> 00:10:24.730
and that's pretty much it.

154
00:10:24.770 --> 00:10:29.080
I'll get rid of this.

155
00:10:29.210 --> 00:10:30.100
And there you go.

156
00:10:30.110 --> 00:10:32.180
That's the final refactoring.

157
00:10:32.180 --> 00:10:37.340
You can see now we're using the initializer lists to initialize our objects which is exactly what we

158
00:10:37.340 --> 00:10:38.220
want to do.

159
00:10:38.220 --> 00:10:43.010
We get rid of the extra colon right there and that should do it.

160
00:10:43.010 --> 00:10:50.690
Other thing is I put the order in here his name health and DXP that order doesn't really matter it's

161
00:10:50.690 --> 00:10:53.300
going to be initialized in this order.

162
00:10:53.300 --> 00:11:00.040
Name health Expwy whatever or you declare these guys and right here in your class that's the order that

163
00:11:00.040 --> 00:11:01.950
the initialization will take place.

164
00:11:02.120 --> 00:11:06.980
It just happens to be the same order that I've written here and that's pretty much a best practice is

165
00:11:06.980 --> 00:11:12.560
to keep the order the same but don't rely on order here the order is going to be the order that you

166
00:11:12.560 --> 00:11:14.930
declare these things in.

167
00:11:14.940 --> 00:11:17.170
OK so there you go that's initialization list.

168
00:11:17.170 --> 00:11:19.870
Now you do you will notice a few things.

169
00:11:20.700 --> 00:11:25.320
We're going to talk about delegating constructors soon so we can get rid of some of this extra code

170
00:11:25.320 --> 00:11:27.870
because if you think about this this is really the same as this.

171
00:11:27.870 --> 00:11:30.200
It's the same as that and it's the same as that.

172
00:11:30.360 --> 00:11:33.480
So we'll have a little bit even more efficient way of doing this.
