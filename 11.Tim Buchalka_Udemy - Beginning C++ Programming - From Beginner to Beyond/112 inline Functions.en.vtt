WEBVTT
1
00:00:05.540 --> 00:00:09.620
As we saw in the previous video function calls have a certain amount of overhead.

2
00:00:10.070 --> 00:00:12.080
We need to create an activation record.

3
00:00:12.080 --> 00:00:13.000
Push it on the stack.

4
00:00:13.010 --> 00:00:18.080
Deal with parameters pop off the activation record when the function terminates and deal with the return

5
00:00:18.080 --> 00:00:20.040
addresses and return values.

6
00:00:20.180 --> 00:00:22.930
Although all of this can happen very quickly and efficiently.

7
00:00:22.940 --> 00:00:29.000
It still happens sometimes we have a very simple function and the function call overhead might be greater

8
00:00:29.000 --> 00:00:31.590
than the time spent executing the function.

9
00:00:31.670 --> 00:00:38.030
In cases such as these we can suggest to the compiler that it generate inline code inline code is basically

10
00:00:38.030 --> 00:00:44.200
inline assembly code that avoids the function call overhead inline code is generally faster.

11
00:00:44.300 --> 00:00:49.460
But if you inline a function many times then you're duplicating a function code in many places and it

12
00:00:49.460 --> 00:00:51.770
could lead to larger binaries.

13
00:00:51.770 --> 00:00:58.000
That said compilers are so sophisticated now that they'll likely inline code even without your suggestion.

14
00:00:58.430 --> 00:01:01.050
Let's see what an inline function looks like.

15
00:01:01.080 --> 00:01:03.770
Here you can see the syntax for an inline function.

16
00:01:03.800 --> 00:01:09.620
We simply precede the function return type with the keyword inline inline functions are usually declared

17
00:01:09.620 --> 00:01:11.390
in header or dot h files.

18
00:01:11.390 --> 00:01:15.110
Since the definition must be available to every source file that uses it.

19
00:01:15.470 --> 00:01:20.010
As mentioned earlier compilers are so good now that most will make short functions like this inline

20
00:01:20.120 --> 00:01:23.490
anyway even if you don't provide the inline keyword.

21
00:01:23.510 --> 00:01:28.070
Don't worry too much about asking the compiler to inline your functions but now you know what inline

22
00:01:28.070 --> 00:01:31.020
functions are in case you see them and C++ code out there.
