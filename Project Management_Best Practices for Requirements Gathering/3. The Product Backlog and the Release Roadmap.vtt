WEBVTT
1
00:00:00.000 --> 00:00:02.188
Let's cover some Basic Terms.

2
00:00:02.188 --> 00:00:05.688
Needs-High level business requirements of the users and

3
00:00:05.688 --> 00:00:08.778
stakeholders in the problem or business domain.

4
00:00:08.778 --> 00:00:14.556
An example: sales are anticipated to grow 50% and therefore a new system

5
00:00:14.556 --> 00:00:18.267
to process sales orders is required for scalability.

6
00:00:18.267 --> 00:00:22.444
These needs were captured in your Product Definition Template

7
00:00:22.444 --> 00:00:26.444
or user stories that we covered in Module 1.

8
00:00:26.444 --> 00:00:30.400
Features-describe features the system will do for its users

9
00:00:30.400 --> 00:00:33.200
and the benefits the user will derive.

10
00:00:33.200 --> 00:00:38.000
In the user's own words, such as user stories and use cases.

11
00:00:38.000 --> 00:00:41.375
Example: provide a way for a district manager to

12
00:00:41.375 --> 00:00:44.000
order for each store in his district.

13
00:00:44.000 --> 00:00:47.000
Your role is to understand and interpret user's needs,

14
00:00:47.000 --> 00:00:51.750
the key drivers in the business domain, and develop the user stories,

15
00:00:51.750 --> 00:00:57.000
use cases, and feature list that reflect those needs.

16
00:00:57.000 --> 00:00:59.526
What's different now in an Agile environment is

17
00:00:59.526 --> 00:01:01.737
that this is where you will pause,

18
00:01:01.737 --> 00:01:05.667
and not continue with more detailed requirements such as prototype,

19
00:01:05.667 --> 00:01:07.000
until possibly later.

20
00:01:07.000 --> 00:01:11.000
Basic Terms, Part 2.

21
00:01:11.000 --> 00:01:15.000
Software Requirements-specific technical requirements.

22
00:01:15.000 --> 00:01:18.810
An Example: a screen or form design to order parts.

23
00:01:18.810 --> 00:01:24.000
This is part of your job, but it's not important at this time,

24
00:01:24.000 --> 00:01:29.000
and will come into play later in the Agile process.

25
00:01:29.000 --> 00:01:30.429
Product backlog.

26
00:01:30.429 --> 00:01:39.000
Example: A list of features in priority order with rough estimated hours.

27
00:01:39.000 --> 00:01:40.235
One long list.

28
00:01:40.235 --> 00:01:44.353
At this time you 'translated' your user stories and use

29
00:01:44.353 --> 00:01:46.000
cases into easy-to-understand features.

30
00:01:46.000 --> 00:01:53.000
Each feature will have a 'level of effort' to implement, such as hours.

31
00:01:53.000 --> 00:01:57.000
Now that you have one long list of features, what's next?

32
00:01:57.000 --> 00:01:58.167
The Product Backlog.

33
00:01:58.167 --> 00:02:02.444
The Product Backlog-is the term used to represent the list of

34
00:02:02.444 --> 00:02:05.500
system features that have not been implemented.

35
00:02:05.500 --> 00:02:11.000
The Product Manager, the key stakeholder we discussed in previous modules,

36
00:02:11.000 --> 00:02:12.778
will prioritize each feature.

37
00:02:12.778 --> 00:02:17.667
A key factor in this decision making process is the estimate

38
00:02:17.667 --> 00:02:20.750
for each feature or group of features.

39
00:02:20.750 --> 00:02:25.125
Create estimates by collaborating with the software team or other

40
00:02:25.125 --> 00:02:28.182
subject matter experts; this is imperative.

41
00:02:28.182 --> 00:02:32.000
Now, let's look at a simple example.

42
00:02:32.000 --> 00:02:34.353
The Product Backlog-An Example.

43
00:02:34.353 --> 00:02:42.000
In this example, the Product Manager has prioritized his list of 12 features.

44
00:02:42.000 --> 00:02:47.500
Along with each feature is an estimate of hours to implement.

45
00:02:47.500 --> 00:02:53.000
For example, item #3 is Feature C, and is 120 hours.

46
00:02:53.000 --> 00:02:58.000
Estimates are essential in providing an indicator of business value.

47
00:02:58.000 --> 00:03:02.000
In this example we used hours as a unit of measure for our estimates,

48
00:03:02.000 --> 00:03:05.714
but you could use an even simpler method such as small,

49
00:03:05.714 --> 00:03:07.000
medium, and large.

50
00:03:07.000 --> 00:03:08.474
Creating a Release Roadmap.

51
00:03:08.474 --> 00:03:14.000
So, now that we have a list of features, how are we going to proceed?

52
00:03:14.000 --> 00:03:16.667
By a Product Release Roadmap.

53
00:03:16.667 --> 00:03:22.000
Roadmaps are plans for implementation based on the product backlog.

54
00:03:22.000 --> 00:03:27.000
This should be simple and easy to understand by all stakeholders.

55
00:03:27.000 --> 00:03:30.684
A Roadmap consists of a series of planned release dates,

56
00:03:30.684 --> 00:03:33.263
each with a list of prioritized features,

57
00:03:33.263 --> 00:03:36.947
which is good, because now you have the full list.

58
00:03:36.947 --> 00:03:42.000
This is your team's plan of intent, (of course) things could change,

59
00:03:42.000 --> 00:03:46.000
remember requirements are unpredictable.

60
00:03:46.000 --> 00:03:47.333
A Release.

61
00:03:47.333 --> 00:03:52.000
An Agile project consists of several releases.

62
00:03:52.000 --> 00:03:56.000
A release is typically a time-boxed increment where

63
00:03:56.000 --> 00:04:02.000
the due date and quality is fixed, but the scope is variable.

64
00:04:02.000 --> 00:04:02.923
Time box.

65
00:04:02.923 --> 00:04:08.000
A preset amount of time and resources to implement a release.

66
00:04:08.000 --> 00:04:15.700
For example, 3 weeks with 4 people might translate to 480 hours of effort,

67
00:04:15.700 --> 00:04:19.000
3 weeks x 4 x 40.

68
00:04:19.000 --> 00:04:21.118
An Agile Project-An Example.

69
00:04:21.118 --> 00:04:24.824
Before we create the Product Backlog Roadmap,

70
00:04:24.824 --> 00:04:30.000
let's quickly put it into context of an Agile Project.

71
00:04:30.000 --> 00:04:36.000
An Agile Project consists of a series of releases; note the arrows.

72
00:04:36.000 --> 00:04:38.000
Prior to beginning,

73
00:04:38.000 --> 00:04:44.000
the roadmap planning activity occurs reviewing the product backlog.

74
00:04:44.000 --> 00:04:46.250
When an Agile Project is complete,

75
00:04:46.250 --> 00:04:50.000
there is a project wrap up (like a lessons learned).

76
00:04:50.000 --> 00:04:54.000
Okay, now let's see how we develop our Release Roadmap.

77
00:04:54.000 --> 00:04:55.800
Release Roadmap-An Example.

78
00:04:55.800 --> 00:05:00.000
Here is our familiar Agile Project diagram.

79
00:05:00.000 --> 00:05:07.000
In this example, the roadmap release planning activity defined three releases.

80
00:05:07.000 --> 00:05:11.950
Release 1 will cover Features A, B, C, D,

81
00:05:11.950 --> 00:05:18.000
and be contained in a 480-hour time-box due on July 1.

82
00:05:18.000 --> 00:05:22.190
In this simple example, we have to find two more releases,

83
00:05:22.190 --> 00:05:26.000
each with a due date and a time-box of hours.

84
00:05:26.000 --> 00:05:26.467
Hence,

85
00:05:26.467 --> 00:05:30.667
this Agile Project will have three releases planned for

86
00:05:30.667 --> 00:05:33.000
this set of prioritized features.

87
00:05:33.000 --> 00:05:37.000
Now that you know that Release 1 contains the high priority items,

88
00:05:37.000 --> 00:05:42.000
you can proceed with more detailed requirements analysis.

89
00:05:42.000 --> 00:05:43.556
Release Planning and Iterations.

90
00:05:43.556 --> 00:05:45.889
Here is our basic Agile diagram,

91
00:05:45.889 --> 00:05:49.727
and an example of how you would approach further

92
00:05:49.727 --> 00:05:53.364
requirements gathering in this release.

93
00:05:53.364 --> 00:05:57.000
Releases may consist of iterations.

94
00:05:57.000 --> 00:05:59.211
Iteration 1 is you, the business analyst,

95
00:05:59.211 --> 00:06:02.684
leveraging the practical tools we learned in module 2 to flush

96
00:06:02.684 --> 00:06:06.200
out the remaining detail specifications,

97
00:06:06.200 --> 00:06:11.000
such as Workflows, Prototypes, Mockups, Etc.

98
00:06:11.000 --> 00:06:18.000
Iteration 2, 3, or more, is the software engineering portion of this release.

99
00:06:18.000 --> 00:06:20.500
While software is being developed for this release,

100
00:06:20.500 --> 00:06:27.000
you could then be working on release 2, iteration 1's remaining details specifications.

