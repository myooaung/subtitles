1
00:00:01,340 --> 00:00:05,350
Let's see how you can deal with bottlenecks because bottlenecks will happen.

2
00:00:05,350 --> 00:00:07,790
Now bottlenecks may sound bad to you,

3
00:00:07,790 --> 00:00:11,510
but there is a silver lining since visual bottlenecks will be

4
00:00:11,510 --> 00:00:17,240
your cue to inspect and improve your workflow.

5
00:00:17,240 --> 00:00:18,370
Let's define bottleneck.

6
00:00:18,370 --> 00:00:23,270
A bottleneck in a process flow is anywhere that an accumulation

7
00:00:23,270 --> 00:00:26,080
of work builds up waiting to be processed.

8
00:00:26,080 --> 00:00:29,430
Sometimes you might also hear the term constraint as well.

9
00:00:29,430 --> 00:00:33,410
It is important to get our terms right since later we will talk about blockers,

10
00:00:33,410 --> 00:00:38,540
and a bottleneck is not a blocker.

11
00:00:38,540 --> 00:00:40,850
Let's see how we can identify a bottleneck.

12
00:00:40,850 --> 00:00:43,900
We have six resources applied, two in Specify,

13
00:00:43,900 --> 00:00:46,490
three in Implement, and one in Validate.

14
00:00:46,490 --> 00:00:49,950
Now let's overlay our cards for some point in time as follows.

15
00:00:49,950 --> 00:00:53,690
Here is our Backlog, our Specify work, our Implement work,

16
00:00:53,690 --> 00:00:56,240
our Validate work, and the work we've delivered.

17
00:00:56,240 --> 00:00:59,540
Can you see where the most significant bottleneck is?

18
00:00:59,540 --> 00:01:03,890
We can see that the cards are stacking up in the DONE column of Implement,

19
00:01:03,890 --> 00:01:07,080
but that step is not the bottleneck step.

20
00:01:07,080 --> 00:01:10,250
The bottleneck is the step after the 'done' step

21
00:01:10,250 --> 00:01:11,850
where the cards are stacking up.

22
00:01:11,850 --> 00:01:14,820
Therefore, the bottleneck is the Validate step.

23
00:01:14,820 --> 00:01:15,940
So in this case,

24
00:01:15,940 --> 00:01:19,730
we do not have enough resources in the Validate step to pull the

25
00:01:19,730 --> 00:01:23,190
Implement 'done' cards forward for a smooth workflow.

26
00:01:23,190 --> 00:01:25,330
So look again at the Implement step.

27
00:01:25,330 --> 00:01:26,800
It is not the bottleneck.

28
00:01:26,800 --> 00:01:32,060
In fact, it is cranking out work very well and even has one free resource.

29
00:01:32,060 --> 00:01:35,610
So it is very easy to visually see any bottlenecks on your

30
00:01:35,610 --> 00:01:40,540
board and then decide your remediation.

31
00:01:40,540 --> 00:01:43,060
Bottlenecks can be easily identified.

32
00:01:43,060 --> 00:01:47,160
If the active work items in a step are less than the work‑in‑progress limit,

33
00:01:47,160 --> 00:01:51,160
then pull a 'done' work item from the preceding step and work on it.

34
00:01:51,160 --> 00:01:52,080
No issue.

35
00:01:52,080 --> 00:01:56,440
This is how you'll want all your steps to work all the time in a perfect world.

36
00:01:56,440 --> 00:02:01,000
If the active work items in a step are equal to the work‑in‑progress limit,

37
00:02:01,000 --> 00:02:04,010
then wait for one of its own items to be completed

38
00:02:04,010 --> 00:02:06,530
before a 'done' work item can be pulled.

39
00:02:06,530 --> 00:02:07,860
Again, no issue,

40
00:02:07,860 --> 00:02:12,010
but the work item will be waiting in the 'done' queue of the preceding step.

41
00:02:12,010 --> 00:02:16,690
If the active work items in a step are greater than the work‑in‑progress limit,

42
00:02:16,690 --> 00:02:19,760
then management and the team have time to intervene and

43
00:02:19,760 --> 00:02:22,440
add capacity or resolve the issue.

44
00:02:22,440 --> 00:02:27,030
So in our previous slide, we had five items in the 'done' column to implement,

45
00:02:27,030 --> 00:02:29,200
but they're not going to show up all at once.

46
00:02:29,200 --> 00:02:31,760
Instead, there will be one extra, then two extra,

47
00:02:31,760 --> 00:02:33,120
then three, and so on,

48
00:02:33,120 --> 00:02:35,580
so you'll be able to see the buildup and decide what

49
00:02:35,580 --> 00:02:37,650
action to take during your standups.

50
00:02:37,650 --> 00:02:40,960
You might decide to take resources from the Implement step and move them

51
00:02:40,960 --> 00:02:43,940
to the Validate step in order to increase throughput.

52
00:02:43,940 --> 00:02:50,440
So easy to observe and easy to take action in real time.

53
00:02:50,440 --> 00:02:52,600
Now let's talk about buffers.

54
00:02:52,600 --> 00:02:54,050
In our running example,

55
00:02:54,050 --> 00:02:56,560
the 'done' swim lanes where the gray arrows are

56
00:02:56,560 --> 00:02:58,560
pointing are also known as buffers,

57
00:02:58,560 --> 00:03:01,670
and controlling the size of the buffer is important.

58
00:03:01,670 --> 00:03:04,610
Too many work items in a buffer is a waste.

59
00:03:04,610 --> 00:03:08,940
And as we all know, waste is what Kanban wants to eliminate.

60
00:03:08,940 --> 00:03:12,390
Buffers are important to have so that the work is immediately available

61
00:03:12,390 --> 00:03:16,010
when the next downstream resource is free to do more work.

62
00:03:16,010 --> 00:03:18,270
What would be the perfect buffer size?

63
00:03:18,270 --> 00:03:21,940
Okay, hold that thought.

64
00:03:21,940 --> 00:03:24,010
What is the ideal buffer size?

65
00:03:24,010 --> 00:03:25,360
Did you figure it out?

66
00:03:25,360 --> 00:03:29,270
The ideal buffer size is 0 since all buffers are a waste

67
00:03:29,270 --> 00:03:31,240
because work is just sitting there.

68
00:03:31,240 --> 00:03:33,010
But it was a trick question.

69
00:03:33,010 --> 00:03:36,670
Zero as a buffer size is impractical, of course,

70
00:03:36,670 --> 00:03:39,290
but you want just the right amount of buffer so that when

71
00:03:39,290 --> 00:03:41,540
the downstream resource is available,

72
00:03:41,540 --> 00:03:45,240
they can immediately pull a unit of work forward.

73
00:03:45,240 --> 00:03:48,120
If a buffer (the 'done' swim lane) is growing,

74
00:03:48,120 --> 00:03:52,460
consider adjusting downward the work in progress of the upstream step.

75
00:03:52,460 --> 00:03:54,820
In our example, it was the Implement step,

76
00:03:54,820 --> 00:03:56,510
and if we did adjust downward,

77
00:03:56,510 --> 00:03:59,590
we could then apply the resources to the step with the biggest

78
00:03:59,590 --> 00:04:02,060
constraint or the biggest buffer building up,

79
00:04:02,060 --> 00:04:04,660
and in our example, it was the Validate step,

80
00:04:04,660 --> 00:04:07,870
Key point: The only goal of a buffer is to create the

81
00:04:07,870 --> 00:04:11,140
appearance of instant availability downstream.

82
00:04:11,140 --> 00:04:13,710
So in summary, watch your buffers every day.

83
00:04:13,710 --> 00:04:22,000
They are the signals telling you work is stacking up, and you need to consider taking action for a smooth workflow.

