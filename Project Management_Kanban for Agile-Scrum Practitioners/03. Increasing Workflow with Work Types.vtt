WEBVTT
1
00:00:01.040 --> 00:00:04.670
Now let's explore work types and how, by identifying and using them

2
00:00:04.670 --> 00:00:09.340
appropriately, they will improve your workflow.

3
00:00:09.340 --> 00:00:12.440
Let's look at some examples of work types by reviewing a

4
00:00:12.440 --> 00:00:15.420
sampling of work item type definitions.

5
00:00:15.420 --> 00:00:19.010
You may have type definitions for different sizes of user stories,

6
00:00:19.010 --> 00:00:22.490
for example, such as epic, feature, and story.

7
00:00:22.490 --> 00:00:25.770
Maybe you have type definitions for different types of bugs,

8
00:00:25.770 --> 00:00:28.940
for example, production or developer‑driven bugs.

9
00:00:28.940 --> 00:00:32.520
Next, type definitions for different types of maintenance tasks,

10
00:00:32.520 --> 00:00:35.330
such as database administration, refactoring, and data

11
00:00:35.330 --> 00:00:38.310
archiving. Our last example, type definitions for

12
00:00:38.310 --> 00:00:40.350
different types of service requests.

13
00:00:40.350 --> 00:00:44.720
A red hot item, it's got to get done ASAP, or a task that must

14
00:00:44.720 --> 00:00:47.570
be done in less than 4 hours, or a task that must be done in

15
00:00:47.570 --> 00:00:50.660
less than 12 hours. So you can have type definitions for

16
00:00:50.660 --> 00:00:53.240
anything you want, so get creative.

17
00:00:53.240 --> 00:00:54.020
As you can see,

18
00:00:54.020 --> 00:00:57.370
the sky is the limit on what types make sense for you, and for

19
00:00:57.370 --> 00:00:59.980
each type, what are the choices of values?

20
00:00:59.980 --> 00:01:04.440
Keep them short and sweet for easy comprehension.

21
00:01:04.440 --> 00:01:07.520
Let's investigate the backlog and see what stuff is in

22
00:01:07.520 --> 00:01:09.320
there and try to make some sense of it.

23
00:01:09.320 --> 00:01:10.930
As we peer into the backlog,

24
00:01:10.930 --> 00:01:14.520
we may see the following, features, bugs and production defects,

25
00:01:14.520 --> 00:01:17.310
user stories or use cases, change requests,

26
00:01:17.310 --> 00:01:20.790
some random issue blocking work, suggestions and research.

27
00:01:20.790 --> 00:01:23.500
The more variability you have with the types of work,

28
00:01:23.500 --> 00:01:27.580
the harder it will be to define your work‑in‑progress limits and

29
00:01:27.580 --> 00:01:29.980
your ability to predict your workflow time.

30
00:01:29.980 --> 00:01:30.640
Therefore,

31
00:01:30.640 --> 00:01:34.470
consider negotiating first with your upstream partner to see if

32
00:01:34.470 --> 00:01:38.370
backlog item types can be simplified or normalized.

33
00:01:38.370 --> 00:01:41.490
It might be that when you take a deeper dive into the work types,

34
00:01:41.490 --> 00:01:45.670
that maybe you want two Kanban teams. It might be that the volume

35
00:01:45.670 --> 00:01:49.680
of work is so great in the area of bugs that focusing a team on

36
00:01:49.680 --> 00:01:53.460
bugs and one on requirements might make sense, so I just wanted you

37
00:01:53.460 --> 00:01:54.520
to think about that.

38
00:01:54.520 --> 00:01:58.980
Now let's see what might make a good type to standardize for the work type of

39
00:01:58.980 --> 00:02:05.050
requirements. You might consider normalizing your feature and general

40
00:02:05.050 --> 00:02:09.650
requirement backlog work types into use cases as your main work type, and when I

41
00:02:09.650 --> 00:02:12.670
use the term use cases, I also mean user stories.

42
00:02:12.670 --> 00:02:16.340
They are somewhat interchangeable terms. These are business rules,

43
00:02:16.340 --> 00:02:20.240
but written from a user's perspective in the user's business language.

44
00:02:20.240 --> 00:02:22.370
Many of the work types in the previous page could

45
00:02:22.370 --> 00:02:24.670
be very unstructured and fuzzy, therefore,

46
00:02:24.670 --> 00:02:29.100
harder to deal with and plan for. The better the structure of the backlog item,

47
00:02:29.100 --> 00:02:31.360
the better the understanding by all.

48
00:02:31.360 --> 00:02:35.860
Okay, here's a nice template to help you normalize your backlog work types.

49
00:02:35.860 --> 00:02:37.720
As a type of user,

50
00:02:37.720 --> 00:02:42.650
I want to accomplish some goal so that some reason, something happens.

51
00:02:42.650 --> 00:02:43.140
Okay,

52
00:02:43.140 --> 00:02:47.200
the type of user is the who, or the role; some goal is what you're

53
00:02:47.200 --> 00:02:51.070
trying to accomplish; and the some reason is the benefit,

54
00:02:51.070 --> 00:02:54.320
or outcome, of doing the use case in the first place.

55
00:02:54.320 --> 00:02:55.780
Here's a further example.

56
00:02:55.780 --> 00:02:56.930
As a student,

57
00:02:56.930 --> 00:03:00.530
I want to register so that I can take a class, very

58
00:03:00.530 --> 00:03:02.530
clear and very straightforward.

59
00:03:02.530 --> 00:03:03.340
A common,

60
00:03:03.340 --> 00:03:07.060
well‑understood work type will enhance your team's productivity, and

61
00:03:07.060 --> 00:03:09.720
if you're given all sorts of stuff in your backlog,

62
00:03:09.720 --> 00:03:13.820
then in your specify step you could convert them into user stories or

63
00:03:13.820 --> 00:03:16.780
use cases and have them flow through like that.

64
00:03:16.780 --> 00:03:19.870
This would help normalize your workflow in the event you can't

65
00:03:19.870 --> 00:03:23.360
influence the structure of the backlog and you can't negotiate a

66
00:03:23.360 --> 00:03:27.250
better backlog construct with your upstream partner. Now, I'm not

67
00:03:27.250 --> 00:03:29.410
saying everything is a user story either.

68
00:03:29.410 --> 00:03:32.270
You'll have bugs, and maintenance, and service work types,

69
00:03:32.270 --> 00:03:35.350
certainly, so this approach would work best for requirements,

70
00:03:35.350 --> 00:03:37.630
features, and maybe some research or development.

71
00:03:37.630 --> 00:03:41.000
Maybe those kinds of work types can be generalized and

72
00:03:41.000 --> 00:03:47.410
normalized into the structure we talked about. Is more or fewer

73
00:03:47.410 --> 00:03:49.830
work types best for efficient workflow?

74
00:03:49.830 --> 00:03:52.980
Well, let's find out. If you treat all work the same,

75
00:03:52.980 --> 00:03:53.520
that is,

76
00:03:53.520 --> 00:03:58.240
do not use the notion of work types at all, it is likely there is a greater

77
00:03:58.240 --> 00:04:04.230
variation of level of effort, skills required, priority levels, and risk, to

78
00:04:04.230 --> 00:04:08.170
just name a few. By segmenting work out by type of work,

79
00:04:08.170 --> 00:04:11.170
you can provide greater predictability of outcome.

80
00:04:11.170 --> 00:04:14.630
To have the ability to predict work outcomes is important

81
00:04:14.630 --> 00:04:17.550
to a smooth running Kanban team, hence,

82
00:04:17.550 --> 00:04:19.800
more work types would increase workflow, but,

83
00:04:19.800 --> 00:04:21.590
of course, don't have too many.

84
00:04:21.590 --> 00:04:25.150
Please note, Kanban has such wonderful flexibility there

85
00:04:25.150 --> 00:04:33.000
could be exceptions to this notion as well, but in general, having a few more is better than not having enough.

