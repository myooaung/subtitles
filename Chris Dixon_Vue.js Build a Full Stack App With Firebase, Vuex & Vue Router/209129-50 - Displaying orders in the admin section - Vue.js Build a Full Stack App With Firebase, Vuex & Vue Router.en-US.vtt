WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.370 --> 00:00:05.880
We now have our Firebase bindings sets of our orders,

00:00:05.880 --> 00:00:09.510
where we created our old reference inside of our actions.

00:00:09.510 --> 00:00:14.310
We also created a getter to pull in our items from state.

00:00:14.310 --> 00:00:20.400
Let's now use this getter inside the admin component to display the orders and also to

00:00:20.400 --> 00:00:23.370
change our shopping basket to push new orders to

00:00:23.370 --> 00:00:27.355
Firebase rather than directly to all view Expo.

00:00:27.355 --> 00:00:30.680
I'm going to begin by pushing these orders to Firebase

00:00:30.680 --> 00:00:33.895
inside of the menu dot view components.

00:00:33.895 --> 00:00:35.495
Down at the very bottom.

00:00:35.495 --> 00:00:38.645
Inside of all methods we have addNewOrder,

00:00:38.645 --> 00:00:43.495
which is currently committing a new mutation called addOrder.

00:00:43.495 --> 00:00:46.080
Inside the orders, this is

00:00:46.080 --> 00:00:50.995
the addOrder mutation and this is pushing directly to our store.

00:00:50.995 --> 00:00:54.380
I'm going to now comment this out and in place,

00:00:54.380 --> 00:00:57.740
I'm going to add a new action down at the bottom,

00:00:57.740 --> 00:01:01.825
which is instead going to push our new orders Firebase.

00:01:01.825 --> 00:01:05.370
This action is going to be called addNewOrder,

00:01:05.370 --> 00:01:10.205
and this is to be responsible for pushing our new orders to Firebase.

00:01:10.205 --> 00:01:12.455
I'm going to mark this as async,

00:01:12.455 --> 00:01:15.080
so we can use a weight inside of our code.

00:01:15.080 --> 00:01:18.350
We can pass in any context and

00:01:18.350 --> 00:01:22.460
also the order which is going to be the payload passed to this action.

00:01:22.460 --> 00:01:28.670
We can set up our function with a try and a catch section for any error handling.

00:01:28.670 --> 00:01:30.955
Taking in the error,

00:01:30.955 --> 00:01:32.720
and for any errors,

00:01:32.720 --> 00:01:37.310
we're going to pass in an alert with the string, ''Sorry,

00:01:37.310 --> 00:01:44.130
there was a problem placing your order, please try again.''

00:01:45.170 --> 00:01:48.755
The transaction is going to be fairly simple,

00:01:48.755 --> 00:01:52.280
all we need to do is access our dbOrderReference,

00:01:52.280 --> 00:01:53.885
and then call the add method,

00:01:53.885 --> 00:01:57.205
which is going to push the payload of order.

00:01:57.205 --> 00:02:01.635
We are going to way this and this is now our action complete.

00:02:01.635 --> 00:02:05.910
Notice inside of this action we don't commit mutation,

00:02:05.910 --> 00:02:10.315
since we don't need to update our own store.

00:02:10.315 --> 00:02:15.110
Instead [inaudible] is going to handle pulling in our data from Firebase,

00:02:15.110 --> 00:02:18.380
which will then update our local state too much.

00:02:18.380 --> 00:02:23.675
We can now call this action from our menu components when placing a new order.

00:02:23.675 --> 00:02:26.990
First of all, I'm going to create a new constants which is

00:02:26.990 --> 00:02:30.545
going to contain our audit data as an object,

00:02:30.545 --> 00:02:32.969
we can pass in AP disorder,

00:02:32.969 --> 00:02:36.335
which is the pizzas which contained inside of our order,

00:02:36.335 --> 00:02:39.755
which we can grab from this store basket.

00:02:39.755 --> 00:02:43.595
However, at the moment this would cause us a problem,

00:02:43.595 --> 00:02:48.920
our shopping basket is a type of array inside of the data property.

00:02:48.920 --> 00:02:52.165
However, Firebase will expect an object,

00:02:52.165 --> 00:02:58.220
so we need to convert this basket to be a type of objects by adding the curly braces.

00:02:58.220 --> 00:03:00.050
Then we can use the three dots,

00:03:00.050 --> 00:03:02.030
which is the spread operator,

00:03:02.030 --> 00:03:06.430
and this will merge in the array items into our objects.

00:03:06.430 --> 00:03:10.660
Also, I'm going to add a createdAt property,

00:03:10.660 --> 00:03:15.460
which is going to be equal to a new JavaScript date.

00:03:15.460 --> 00:03:19.850
Which is going to allow us to pull in our orders in date order,

00:03:19.850 --> 00:03:22.175
we no longer committing a mutation,

00:03:22.175 --> 00:03:23.915
so I'm going to comment this out.

00:03:23.915 --> 00:03:28.865
I'm going to now dispatch our new action and go to access these stored directly,

00:03:28.865 --> 00:03:31.225
solving polities in just a moment,

00:03:31.225 --> 00:03:35.705
call our dispatch, passing in the name of our action,

00:03:35.705 --> 00:03:37.835
which is our new order.

00:03:37.835 --> 00:03:42.145
Then the payload, which is our old object from above.

00:03:42.145 --> 00:03:48.580
Scroll up. We can now import our stall at the top of our scripts.

00:03:51.380 --> 00:03:54.555
From the file path of dot slash,

00:03:54.555 --> 00:03:56.760
I will stall folder,

00:03:56.760 --> 00:03:59.205
and then I will stall file.

00:03:59.205 --> 00:04:02.720
Over to the browser, we can now test this by adding a new order,

00:04:02.720 --> 00:04:07.220
so I'm just going to order some pepperonis place your order.

00:04:07.220 --> 00:04:10.680
Now, if we go to the Firebase console,

00:04:10.820 --> 00:04:17.600
gives us a reload, we now see our oldest collection with our pizzas we created before.

00:04:17.600 --> 00:04:19.325
Let's try one more,

00:04:19.325 --> 00:04:25.425
two Margherita's, this is now been added inside a Firebase.

00:04:25.425 --> 00:04:29.045
However, if we go over to the admin components,

00:04:29.045 --> 00:04:33.485
so forward/admin, scroll down to our orders.

00:04:33.485 --> 00:04:37.190
We only see the single hard coded value which we added earlier,

00:04:37.190 --> 00:04:41.110
so we can now remove these hard coded values and make this dynamic.

00:04:41.110 --> 00:04:43.740
Remember in the order [inaudible] file,

00:04:43.740 --> 00:04:46.110
we created a get orders getter,

00:04:46.110 --> 00:04:48.000
which you can pull in our orders.

00:04:48.000 --> 00:04:52.940
Now, we go to admin dot view and update our components.

00:04:52.940 --> 00:04:55.265
Inside of the computed section,

00:04:55.265 --> 00:04:58.565
we already have our getter which we currently mapping.

00:04:58.565 --> 00:05:00.350
We can add one more,

00:05:00.350 --> 00:05:02.930
which is get orders.

00:05:02.930 --> 00:05:06.995
Then in the template we can loop through and display the orders.

00:05:06.995 --> 00:05:09.725
Let's look for the order section.

00:05:09.725 --> 00:05:11.960
Inside of the table body,

00:05:11.960 --> 00:05:14.485
we can add a V for loop.

00:05:14.485 --> 00:05:18.845
We're going to store each item inside of the auto variable,

00:05:18.845 --> 00:05:23.980
we going to also record the index in getOrders,

00:05:23.980 --> 00:05:26.815
we also need to add a dynamic key.

00:05:26.815 --> 00:05:32.610
To combine this, grab the key value from order dot ID.

00:05:32.610 --> 00:05:36.320
The first thing we can do is number the individual orders,

00:05:36.320 --> 00:05:38.720
rather than the hard coded value before.

00:05:38.720 --> 00:05:40.460
Inside of the double curly braces,

00:05:40.460 --> 00:05:42.110
we can access our index number,

00:05:42.110 --> 00:05:45.050
and I'm going to add a value of one.

00:05:45.050 --> 00:05:48.980
This is because indexes begin at the position zero,

00:05:48.980 --> 00:05:53.005
we want the first order to be worn, and then so one.

00:05:53.005 --> 00:05:55.905
Now, we have our individual order,

00:05:55.905 --> 00:06:01.000
we're now going to create a second V for loop in the following row.

00:06:01.000 --> 00:06:05.480
This loop is going to be for all of the pizzas inside of the order,

00:06:05.480 --> 00:06:10.070
we can store these inside of a variable called OrderItem.

00:06:10.070 --> 00:06:16.135
We're going to loop through our order and grab all of the individual pieces.

00:06:16.135 --> 00:06:21.510
We can then add a dynamic key for our list,

00:06:21.510 --> 00:06:26.565
and the key can be OrderItem and crop the ID.

00:06:26.565 --> 00:06:32.625
We can then use the OrderItem to replace our hard coded values for our pizza.

00:06:32.625 --> 00:06:35.195
Inside the double curly braces,

00:06:35.195 --> 00:06:38.885
we can access the OrderItem dot name,

00:06:38.885 --> 00:06:41.945
we can access the price,

00:06:41.945 --> 00:06:49.790
the quantity and also the price down at the bottom.

00:06:49.920 --> 00:06:53.005
I'm also going to remove the currency symbol,

00:06:53.005 --> 00:06:56.890
since we'll also be adding some formatting it to all prices later,

00:06:56.890 --> 00:07:00.290
and this will be automatically added in four rows.

00:07:00.290 --> 00:07:04.930
Save this, and now we can go to the admin components,

00:07:04.930 --> 00:07:10.775
scroll down and as our two orders which will now pulled in from Firebase.

00:07:10.775 --> 00:07:14.125
If you can see these orders on your screen,

00:07:14.125 --> 00:07:17.770
you've successfully pulled in orders from the central store,

00:07:17.770 --> 00:07:20.720
which is kept in sync with Firebase.

00:07:20.720 --> 00:07:23.110
At moment we have two owners,

00:07:23.110 --> 00:07:24.715
but we will have lots more.

00:07:24.715 --> 00:07:28.750
There is no guarantee that when we save in order or retrieve it from Firebase,

00:07:28.750 --> 00:07:32.030
it's going to come back in any particular order.

00:07:32.030 --> 00:07:37.775
Remember from before when we created our orders objects down in addNewOrder,

00:07:37.775 --> 00:07:40.670
we also added a created our property,

00:07:40.670 --> 00:07:46.195
which we can now use to pull in our orders from Firebase in neat date order.

00:07:46.195 --> 00:07:48.710
We can do this over any orders dot

00:07:48.710 --> 00:07:53.300
JS inside of our action where we set the five store reference.

00:07:53.300 --> 00:07:59.780
We access our dbOrderReference and see where we can also add the orderBymethod,

00:07:59.780 --> 00:08:03.550
which is provided by Firebase, passing in a string.

00:08:03.550 --> 00:08:08.135
The string is going to be the name of the fields which we want to always buy,

00:08:08.135 --> 00:08:10.620
this is created that.

00:08:10.750 --> 00:08:14.165
If we now save this and go over to the browser,

00:08:14.165 --> 00:08:18.995
we still see our two orders of Pepperoni and then our Margherita's,

00:08:18.995 --> 00:08:21.140
which are in ascending order.

00:08:21.140 --> 00:08:24.485
If we want to reverses into descending order,

00:08:24.485 --> 00:08:30.110
we can also pass in a second arguments separated by a comma of the ESC,

00:08:30.110 --> 00:08:37.055
which is short for descending over to the admin and nice and now reversed.

00:08:37.055 --> 00:08:39.965
However, I'm going to keep this as ascending order,

00:08:39.965 --> 00:08:43.040
since it's more practical for our application.

00:08:43.040 --> 00:08:45.860
But this is a useful feature if you want to reverse

00:08:45.860 --> 00:08:49.800
order of anything coming in from Firebase.
