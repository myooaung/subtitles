WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.340 --> 00:00:06.585
I am now going to setup an action to set the current logged in user.

00:00:06.585 --> 00:00:09.945
This user will be stored inside of our states.

00:00:09.945 --> 00:00:13.155
Let's add the current user property to begin with.

00:00:13.155 --> 00:00:15.735
Inside of the store.js,

00:00:15.735 --> 00:00:18.450
just below our orders array.

00:00:18.450 --> 00:00:23.840
The current user, which we're going to initially set to null.

00:00:23.840 --> 00:00:28.280
This will be initially set to null until a user is logged in,

00:00:28.280 --> 00:00:33.020
and then this will be replaced with an object containing the user details.

00:00:33.020 --> 00:00:37.475
I'm still going to perform the state change as a mutation.

00:00:37.475 --> 00:00:40.040
But as we mentioned in the last video,

00:00:40.040 --> 00:00:43.670
we will be using an action to commit this mutation.

00:00:43.670 --> 00:00:47.560
Let's first setup our user just blow add order,

00:00:47.560 --> 00:00:50.265
which we're going to call the userStatus,

00:00:50.265 --> 00:00:55.520
and we want to pass in the states and also the user,

00:00:55.520 --> 00:00:59.770
which will be our payload past when we commit this mutation.

00:00:59.770 --> 00:01:02.075
As an arrow function,

00:01:02.075 --> 00:01:06.605
this user payload will either be the details of the logged in user,

00:01:06.605 --> 00:01:09.520
if not the user will be null.

00:01:09.520 --> 00:01:14.705
In here we can add an if statement to check if the user is logged in.

00:01:14.705 --> 00:01:22.715
If it's true, we're going to update this state.currentUser with the value of user.

00:01:22.715 --> 00:01:24.965
If the user logs out,

00:01:24.965 --> 00:01:27.485
we can also update current user too.

00:01:27.485 --> 00:01:31.740
But this time we want to set the user to be back to null.

00:01:34.160 --> 00:01:39.530
This is one way of setting this up with an if... else statement or alternatively,

00:01:39.530 --> 00:01:45.550
we can use the JavaScript ternary operator to check if the user is equal to null.

00:01:45.550 --> 00:01:53.590
If it is, we can provide a condition where we set this date.currentUser to be null.

00:01:53.590 --> 00:01:56.225
If not, the alternative is we set

00:01:56.225 --> 00:02:01.025
the current user to be equal to the user passed in from the payload.

00:02:01.025 --> 00:02:06.135
Either way is completely valid and this is our mutation now complete.

00:02:06.135 --> 00:02:10.285
We now need to set up the action which is going to call this.

00:02:10.285 --> 00:02:13.295
We add the actions property into what we store.

00:02:13.295 --> 00:02:16.650
Just like we did with the gutters mutations.

00:02:16.650 --> 00:02:21.320
We set this up as an object.

00:02:21.320 --> 00:02:24.230
We can call the user status mutations,

00:02:24.230 --> 00:02:28.160
both when signing in and also when signing out too.

00:02:28.160 --> 00:02:30.965
Let's begin with the sign in action,

00:02:30.965 --> 00:02:33.740
which will take in two arguments.

00:02:33.740 --> 00:02:37.860
This function is going to be a sync and

00:02:37.860 --> 00:02:41.510
this first arguments which you pass in is the context object,

00:02:41.510 --> 00:02:44.200
and the second is the user.

00:02:44.200 --> 00:02:46.770
Setup our arrow function.

00:02:46.770 --> 00:02:50.280
The context object has a commit method.

00:02:50.280 --> 00:02:54.215
We can use this in just a moment to trigger our mutation.

00:02:54.215 --> 00:03:01.745
Well, first, if we go into the login.vue file and to our methods,

00:03:01.745 --> 00:03:05.345
we already have this sign in functionality just here.

00:03:05.345 --> 00:03:08.990
I'm going to move this over to our central store.

00:03:08.990 --> 00:03:12.670
If we put all of the contents between sign in,

00:03:12.670 --> 00:03:17.090
the catch section and also try making fewer.

00:03:17.090 --> 00:03:20.045
We just leave this curly braces on the outside.

00:03:20.045 --> 00:03:22.280
If we go back over to our store,

00:03:22.280 --> 00:03:25.915
we can now paste this into our sign in.

00:03:25.915 --> 00:03:30.195
If we scroll up when we use the sign in and password method,

00:03:30.195 --> 00:03:31.725
which is from firebase,

00:03:31.725 --> 00:03:35.095
we need to pass in the e-mail and also the password.

00:03:35.095 --> 00:03:37.250
When we call this action soon,

00:03:37.250 --> 00:03:39.800
the user payload will contain the e-mail and

00:03:39.800 --> 00:03:43.955
password so we need to change this to the user.

00:03:43.955 --> 00:03:47.095
It will contain the user details.

00:03:47.095 --> 00:03:50.590
This is going to contain our user information.

00:03:50.590 --> 00:03:54.620
We can store this inside of a constant called user data.

00:03:54.620 --> 00:03:57.060
This is going to store in the return value from

00:03:57.060 --> 00:04:02.390
firebase and we can use these to commit our mutation just above.

00:04:04.010 --> 00:04:08.815
Now I have this user data stored with you get back from firebase.

00:04:08.815 --> 00:04:12.189
We can now access our context object,

00:04:12.189 --> 00:04:17.935
which will allow us to access any of the methods and properties on the store's instance.

00:04:17.935 --> 00:04:22.445
For example, we can access our state with the context.state,

00:04:22.445 --> 00:04:26.980
or we can access any of the above getters, simply like this.

00:04:26.980 --> 00:04:29.695
We want to use the commit method,

00:04:29.695 --> 00:04:34.735
but we can also simplify this by using ES6 argument destructuring.

00:04:34.735 --> 00:04:37.570
Instead of grabbing the full context,

00:04:37.570 --> 00:04:41.545
all we want to do is to pull the commit method,

00:04:41.545 --> 00:04:44.825
meaning we could access this directly by name.

00:04:44.825 --> 00:04:47.575
What exactly do we want to commit?

00:04:47.575 --> 00:04:52.410
Where we want to commit a mutation by the name of user status.

00:04:52.410 --> 00:04:55.355
We're going to pass this in as a string.

00:04:55.355 --> 00:04:59.050
The second argument is going to be the user information,

00:04:59.050 --> 00:05:01.105
which we have back from firebase,

00:05:01.105 --> 00:05:05.910
which we have stored in user data and we can access our user objects.

00:05:05.910 --> 00:05:09.665
We also using this firebaseAuth referencing here too.

00:05:09.665 --> 00:05:13.070
We need to import this also at the top of the file.

00:05:13.070 --> 00:05:16.795
We need to import this as a name import.

00:05:16.795 --> 00:05:25.180
FirebaseAuth let me package location is from../ and then firebase.

00:05:25.180 --> 00:05:31.340
Now I know this may seem like a lot of steps to take just to set the user into our state.

00:05:31.340 --> 00:05:33.880
But remember this action step is added,

00:05:33.880 --> 00:05:38.800
so we have no restrictions on using asynchronous code with this action.

00:05:38.800 --> 00:05:42.485
All now setup, the final thing to do is to give it a try.

00:05:42.485 --> 00:05:45.050
We do this by dispatching the action from

00:05:45.050 --> 00:05:49.590
our components and this is what we will look at doing next.
