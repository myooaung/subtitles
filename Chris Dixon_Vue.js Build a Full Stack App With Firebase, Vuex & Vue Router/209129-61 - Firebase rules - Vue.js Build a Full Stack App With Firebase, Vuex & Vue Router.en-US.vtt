WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.980 --> 00:00:07.035
We have set up authentication to only allow logged in users to access our admin.

00:00:07.035 --> 00:00:11.160
But we also want to make sure we have our back end security too.

00:00:11.160 --> 00:00:14.310
In case somebody bypasses our security.

00:00:14.310 --> 00:00:17.760
We can do this with Firebase by adding rules.

00:00:17.760 --> 00:00:20.580
If we head over to our Firebase console,

00:00:20.580 --> 00:00:25.065
and then up at the top we have the rules tab inside of our database.

00:00:25.065 --> 00:00:27.885
If we open this up, at the moment,

00:00:27.885 --> 00:00:29.940
our back end is no secure.

00:00:29.940 --> 00:00:35.610
We can see here we have a match for all of our documents inside of our database.

00:00:35.610 --> 00:00:41.775
Then we are allowing read and write privileges to anybody who accesses our site.

00:00:41.775 --> 00:00:46.010
We can make this more secure by adding in our own custom reals.

00:00:46.010 --> 00:00:50.090
I'm going to start by removing the inner match to all of our documents,

00:00:50.090 --> 00:00:52.390
leaving this automatch just here.

00:00:52.390 --> 00:00:55.190
This automatch with the file path here,

00:00:55.190 --> 00:00:58.495
basically points to our database entry points.

00:00:58.495 --> 00:01:00.050
We can then create

00:01:00.050 --> 00:01:05.690
inside separate rules for our menu and all it's collections if we wish to do so.

00:01:05.690 --> 00:01:08.950
I'm going to start with the menu collection.

00:01:08.950 --> 00:01:12.200
The way to do this, we can add

00:01:12.200 --> 00:01:16.735
match and then a file path to our collection, which is menu.

00:01:16.735 --> 00:01:19.955
Inside of our menu we've our separate documents.

00:01:19.955 --> 00:01:22.820
We can install these inside of a variable called

00:01:22.820 --> 00:01:27.140
the doc ID which is inside of the curly braces.

00:01:27.140 --> 00:01:31.190
Inside here, we can then set up any separate rules,

00:01:31.190 --> 00:01:33.530
or we can even combine rules for read,

00:01:33.530 --> 00:01:36.680
write, update, or delete actions.

00:01:36.680 --> 00:01:42.370
Inside here I'm going to allow access to right into our database,

00:01:42.370 --> 00:01:44.765
update in our database,

00:01:44.765 --> 00:01:49.075
and also delete inside of the same rule.

00:01:49.075 --> 00:01:52.715
Inside here we only want to allow users to write,

00:01:52.715 --> 00:01:58.745
update and delete entries from a database if they are currently registered.

00:01:58.745 --> 00:02:08.725
We can do this by checking if request dot auth dot uid is not equal to null.

00:02:08.725 --> 00:02:12.500
Here we are basically checking if the request object,

00:02:12.500 --> 00:02:15.890
which is provided when we make a request to Firebase,

00:02:15.890 --> 00:02:19.760
has a unique identifier for the current user.

00:02:19.760 --> 00:02:24.470
If it does, we then allow them to perform actions on our database,

00:02:24.470 --> 00:02:28.720
meaning they are registered and authorized to do so.

00:02:28.720 --> 00:02:32.240
If not Firebase will land at block this request.

00:02:32.240 --> 00:02:35.705
After this, we also going to allow the read rules.

00:02:35.705 --> 00:02:41.270
This is because we want to allow all users to read the items from the menu.

00:02:41.270 --> 00:02:44.960
We can then add some rules for our oldest too.

00:02:44.960 --> 00:02:49.310
Just below this, we can then create a second march.

00:02:49.310 --> 00:02:53.195
This time we want to point to our oldest collection.

00:02:53.195 --> 00:02:56.305
We can again use the document ID,

00:02:56.305 --> 00:02:58.540
which is a variable used to access any of

00:02:58.540 --> 00:03:01.885
the individual orders inside of this collection.

00:03:01.885 --> 00:03:05.270
Begin inside of here with the read rules.

00:03:05.270 --> 00:03:10.900
Since this is the orders and the orders is only available inside of the admin.

00:03:10.900 --> 00:03:15.830
We want to only allow users to read our orders if they're logged in.

00:03:15.830 --> 00:03:20.495
As both we can access the request dot auth objects,

00:03:20.495 --> 00:03:25.810
we can check if the user has a unique ID not equal to null.

00:03:25.810 --> 00:03:28.375
Therefore, they are registered and logged in.

00:03:28.375 --> 00:03:31.235
Then they can read the orders.

00:03:31.235 --> 00:03:35.400
Next step, we're going to allow the write rules.

00:03:35.400 --> 00:03:37.755
This is going to be for anybody.

00:03:37.755 --> 00:03:40.430
Since we want to allow any user to go into

00:03:40.430 --> 00:03:44.750
all site and creates an order without the need register.

00:03:44.750 --> 00:03:48.800
Orders are a little more complex in this kind of projects.

00:03:48.800 --> 00:03:51.875
Here we just write in some basic rules.

00:03:51.875 --> 00:03:54.320
But we could go a lot further by allowing

00:03:54.320 --> 00:03:58.120
only the creator of an order to obtain, for example.

00:03:58.120 --> 00:04:00.980
What this means we would need to extend our project to

00:04:00.980 --> 00:04:03.950
include the user ID inside of our order.

00:04:03.950 --> 00:04:08.390
But this is definitely is something which you go ahead and do as a challenge,

00:04:08.390 --> 00:04:10.849
if you would like to add this to the project.

00:04:10.849 --> 00:04:16.020
It is now in place, we can hit publish to make these changes live.

00:04:16.020 --> 00:04:17.810
Now in the next video,

00:04:17.810 --> 00:04:21.989
we'll move on to building our application for production.
