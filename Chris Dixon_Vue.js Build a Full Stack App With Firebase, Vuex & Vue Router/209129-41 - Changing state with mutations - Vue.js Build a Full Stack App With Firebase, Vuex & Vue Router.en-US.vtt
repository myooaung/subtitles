WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.860 --> 00:00:04.335
When dealing with state so far in this section,

00:00:04.335 --> 00:00:08.400
we've looked at how to retrieve the state from our central store,

00:00:08.400 --> 00:00:11.415
both directly and by using getters.

00:00:11.415 --> 00:00:15.390
When I want to move on to changing the state inside of the store,

00:00:15.390 --> 00:00:19.425
and the correct way to do this is by committing a mutation.

00:00:19.425 --> 00:00:23.685
Mutations simply change data inside of our store.

00:00:23.685 --> 00:00:27.690
They work in a similar way to when we omit an event.

00:00:27.690 --> 00:00:30.810
But rather than emit data to a component,

00:00:30.810 --> 00:00:33.660
we can make changes to the store instead.

00:00:33.660 --> 00:00:37.700
Also, mutations follow views reactivity rules.

00:00:37.700 --> 00:00:41.525
This means once we use a mutation to change the states,

00:00:41.525 --> 00:00:46.800
all of the components watching the state will update automatically too.

00:00:47.060 --> 00:00:49.690
Inside of the menu on the "Basket",

00:00:49.690 --> 00:00:51.500
we have this "Place Order" button,

00:00:51.500 --> 00:00:56.405
and we also have the empty orders array inside of our central store.

00:00:56.405 --> 00:01:00.290
This would be a good use case for a mutation to be able to

00:01:00.290 --> 00:01:04.340
mutate the central store by pushing the contents of the order.

00:01:04.340 --> 00:01:07.750
When we click on the button to this orders array.

00:01:07.750 --> 00:01:12.675
Just like getters, we set up our mutations inside of the store.

00:01:12.675 --> 00:01:16.940
So I am going to add this as an object separated by a comma.

00:01:16.940 --> 00:01:19.850
So it's about mutations.

00:01:19.850 --> 00:01:22.400
Then we can add the mutation name.

00:01:22.400 --> 00:01:24.800
This mutation will add an order.

00:01:24.800 --> 00:01:27.970
So I'm going to simply call this "addorder".

00:01:27.970 --> 00:01:32.780
The mutation accepts the states passed to it as the first argument,

00:01:32.780 --> 00:01:35.360
just like it does when you sneak getters.

00:01:35.360 --> 00:01:40.300
Then we modify the state how we want it inside of this arrow function.

00:01:40.300 --> 00:01:45.350
As an example, if our orders were a number of orders just like this,

00:01:45.350 --> 00:01:46.895
if we set this to be one,

00:01:46.895 --> 00:01:49.250
we could then set the state,

00:01:49.250 --> 00:01:54.535
though orders to be one more with ++.

00:01:54.535 --> 00:01:56.790
Now to call this mutation,

00:01:56.790 --> 00:02:00.750
we need to go to our "menu components" and add a new method.

00:02:00.750 --> 00:02:06.285
So we head over to the "menu.view" and I'm going to call this method "add new order".

00:02:06.285 --> 00:02:09.710
If we take a look for the "Place Order" button inside of

00:02:09.710 --> 00:02:12.980
the opening tag and wants to add a "click" listener and set

00:02:12.980 --> 00:02:15.710
the sub to be our method called "addNew

00:02:15.710 --> 00:02:20.245
order" scroll down and we can create is just below.

00:02:20.245 --> 00:02:22.260
Inside of our methods,

00:02:22.260 --> 00:02:24.200
we have quite a few.

00:02:24.200 --> 00:02:26.765
So just after decrease quantity,

00:02:26.765 --> 00:02:29.550
we can add new order.

00:02:30.260 --> 00:02:34.730
So the first thing we need to do is to actually access the store.

00:02:34.730 --> 00:02:39.345
Just like before we can do this with this.$store.

00:02:39.345 --> 00:02:44.995
We then need to commit the change by using the commit method.

00:02:44.995 --> 00:02:49.940
The change we commit is the name of the mutation we just created in the store,

00:02:49.940 --> 00:02:52.070
which was called "addorder".

00:02:52.070 --> 00:02:54.885
We pass this in as a string,

00:02:54.885 --> 00:02:57.230
and then after we add the order,

00:02:57.230 --> 00:02:59.750
it would make sense to clear the basket inside of

00:02:59.750 --> 00:03:03.970
our components by setting the basket to be an empty array.

00:03:03.970 --> 00:03:07.895
This basket is just above inside of the dates property,

00:03:07.895 --> 00:03:10.085
which this array just here.

00:03:10.085 --> 00:03:13.535
So we need to clear this once the order has been placed.

00:03:13.535 --> 00:03:20.070
We can do this simply with this.baskets equals an empty array.

00:03:20.070 --> 00:03:24.910
Finally, we can also add a message to say our order has been placed.

00:03:24.910 --> 00:03:28.615
We already have a date property of basket text.

00:03:28.615 --> 00:03:30.294
Just blow this basket,

00:03:30.294 --> 00:03:35.735
which currently tells us the basket is empty before a user adds a pizza.

00:03:35.735 --> 00:03:40.230
All we need to do now is to change this data with a new message.

00:03:40.230 --> 00:03:45.265
So this stop basket text is going to be equal to "Thank you,

00:03:45.265 --> 00:03:48.290
your order has been placed."

00:03:50.040 --> 00:03:54.160
The next thing to do is to actually check if the value of

00:03:54.160 --> 00:03:58.625
the orders inside of our store has been increased on each click.

00:03:58.625 --> 00:04:02.060
We can now put this inside of the menu template.

00:04:02.060 --> 00:04:05.105
So I'm just going to scroll to the end,

00:04:05.105 --> 00:04:07.430
and we can add this anywhere inside of

00:04:07.430 --> 00:04:12.600
the double curly braces so it can access our store, this.store.

00:04:12.600 --> 00:04:16.200
We need to access the state, the orders,

00:04:16.200 --> 00:04:18.255
or to other projects,

00:04:18.255 --> 00:04:19.970
and into the menu,

00:04:19.970 --> 00:04:21.980
we see the value of one.

00:04:21.980 --> 00:04:24.210
Let's create a new order.

00:04:24.210 --> 00:04:26.820
Place order, we'll get the value of two.

00:04:26.820 --> 00:04:30.215
Let's try one more and the value of three.

00:04:30.215 --> 00:04:33.815
This is the most simple way to commit a mutation.

00:04:33.815 --> 00:04:36.410
We do however, want to improve on this by pushing

00:04:36.410 --> 00:04:39.970
the full contents of the basket to our orders array,

00:04:39.970 --> 00:04:42.520
rather than just incrementing number.

00:04:42.520 --> 00:04:45.625
To do this, we add what is called a payload.

00:04:45.625 --> 00:04:49.465
A payload is an additional argument we pass through the mutation,

00:04:49.465 --> 00:04:52.275
which contains the data we want to commit.

00:04:52.275 --> 00:04:55.825
You can think of this as adding arguments to a function,

00:04:55.825 --> 00:04:58.380
but we'll pass some additional information.

00:04:58.380 --> 00:05:02.400
We can do this back over in the "addneworder" method.

00:05:02.400 --> 00:05:04.515
Let's scroll down to this,

00:05:04.515 --> 00:05:07.005
and just after "addorder",

00:05:07.005 --> 00:05:10.150
you add a comma and then we can add the payload,

00:05:10.150 --> 00:05:13.505
which is the contents of "this.basket".

00:05:13.505 --> 00:05:16.505
Then over in the store.js,

00:05:16.505 --> 00:05:21.119
we pass this payload to the mutation as a second argument.

00:05:21.119 --> 00:05:24.230
So now instead of using state alone,

00:05:24.230 --> 00:05:27.320
we need to surround this inside of the brackets.

00:05:27.320 --> 00:05:29.305
Pass in the orders,

00:05:29.305 --> 00:05:31.615
the name of this payload is "up towards",

00:05:31.615 --> 00:05:34.100
but of course, it's best to be as descriptive

00:05:34.100 --> 00:05:37.220
as possible about the data which you will contain.

00:05:37.220 --> 00:05:39.725
Now, rather than incrementing the orders,

00:05:39.725 --> 00:05:42.805
we can now push the new orders to the array.

00:05:42.805 --> 00:05:45.710
We can then use the JavaScript push method,

00:05:45.710 --> 00:05:47.930
where we're going to push the orders,

00:05:47.930 --> 00:05:50.965
and we also need to change this back to an array.

00:05:50.965 --> 00:05:54.740
Gives us a save and this should now be a mutation work in.

00:05:54.740 --> 00:05:57.830
If we head over to the browser and into the menu,

00:05:57.830 --> 00:05:59.545
we see an empty array.

00:05:59.545 --> 00:06:04.250
Let's try adding some menu items and placing an order, and there we go.

00:06:04.250 --> 00:06:06.815
There's our margarita and our pepperoni.

00:06:06.815 --> 00:06:08.995
Which of the two items we added?

00:06:08.995 --> 00:06:10.905
Let's try a new one.

00:06:10.905 --> 00:06:16.950
Place the order, and we see the third pizza has been added to our array. So great.

00:06:16.950 --> 00:06:21.275
We can now see the store has been updated with the contents of our basket.

00:06:21.275 --> 00:06:23.705
It doesn't look too pretty at the moment,

00:06:23.705 --> 00:06:26.545
but this is easily fixed later in the course.

00:06:26.545 --> 00:06:30.800
The main thing for now is you now know how to successfully access

00:06:30.800 --> 00:06:35.730
the central store and also commit changes back to it.
