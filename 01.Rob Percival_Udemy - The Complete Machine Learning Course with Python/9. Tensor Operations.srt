1
00:00:00,180 --> 00:00:01,200
Welcome back everyone.

2
00:00:01,200 --> 00:00:08,880
We're going to go through a couple of key attributes as well as some key ideas and concepts of neural

3
00:00:08,880 --> 00:00:09,300
network.

4
00:00:09,300 --> 00:00:13,020
Before we proceed to look at the codes itself.

5
00:00:13,020 --> 00:00:22,440
So the first thing that I want to cover as the key attributes of tenses we talked about the different

6
00:00:22,470 --> 00:00:29,220
dimensions the different types of dimensions of tenses differs from zero dimension one dimensional all

7
00:00:29,220 --> 00:00:37,210
the way to five dimensions or more depending on the type of data that you're working with with Python.

8
00:00:37,230 --> 00:00:40,100
There is Python num pi library.

9
00:00:40,110 --> 00:00:50,730
There is a function core in dim this calculate the number of access for you now three dimension tenses

10
00:00:50,730 --> 00:00:52,470
has three exits.

11
00:00:52,560 --> 00:00:52,930
OK.

12
00:00:53,040 --> 00:01:02,070
Also called rank in mathematics and there is shape which is the number of dimensions that tend to along

13
00:01:02,160 --> 00:01:03,950
each axis.

14
00:01:04,080 --> 00:01:10,260
For an example if we're looking at a two dimension vector to end them or tells you that there is actually

15
00:01:10,260 --> 00:01:17,380
two dimensions so that tells you that this is a 2D tenses but what we don't know is that how many so

16
00:01:17,450 --> 00:01:23,350
core what is the actual shape itself is if one by one or is it two by two.

17
00:01:23,430 --> 00:01:30,230
So that's where in num pi you use dot shape which tells you in this case is four by nine.

18
00:01:30,240 --> 00:01:39,120
Another example three dimensional tensor here the ending would tell you is a 3D but again this is what

19
00:01:39,120 --> 00:01:43,320
you don't know is it is that one by one by one two by two by four.

20
00:01:43,980 --> 00:01:49,680
So that's where the DOT shape would tell you that this is indeed a three by three by four.

21
00:01:49,680 --> 00:01:57,210
Now you probably will vaguely recall that in the M.A. dataset that we were looking at the training data

22
00:01:57,240 --> 00:02:09,170
is sixty thousand followed by 28 and 28 so and also the test data will be ten thousand followed by 28

23
00:02:09,580 --> 00:02:11,170
and 28.

24
00:02:11,170 --> 00:02:15,420
So it's sixty a three dimensional tensor.

25
00:02:15,450 --> 00:02:15,760
Okay.

26
00:02:15,820 --> 00:02:17,480
3D tenses.

27
00:02:17,640 --> 00:02:17,980
All right.

28
00:02:17,980 --> 00:02:21,400
The third thing that I want to cover is the data type.

29
00:02:21,670 --> 00:02:29,230
The type of data that is stored in the actual tensor container you use d d typed in Python.

30
00:02:29,230 --> 00:02:30,580
It could be a float 32.

31
00:02:30,640 --> 00:02:36,260
It could be float 64 or unsigned integer 4 of 8 bit.

32
00:02:36,280 --> 00:02:42,340
All right so those are the key attributes we're going to revisit this using code a bit later and the

33
00:02:42,340 --> 00:02:45,640
next concept I do undercover is data batches

34
00:02:48,470 --> 00:02:53,840
earlier you probably would have seen that when we were looking at the code the data batch that we used

35
00:02:53,840 --> 00:02:55,770
was two five six.

36
00:02:55,790 --> 00:02:57,140
Let me just have a quick look

37
00:03:00,000 --> 00:03:01,620
at a batch where you

38
00:03:05,720 --> 00:03:09,840
take out the batch sizes to five six.

39
00:03:10,760 --> 00:03:18,080
Now when you're building all data learning models you don't usually process the entire data set at once.

40
00:03:18,170 --> 00:03:23,250
When you look through one entire dataset one time it's called one epoch.

41
00:03:23,630 --> 00:03:29,170
The data are usually broken up into small batches hence the term batch.

42
00:03:29,450 --> 00:03:38,210
And how big is the batch will be called batch size the batch size that we specify in our earlier motivational

43
00:03:38,210 --> 00:03:43,580
example is two hundred and fifty six meaning we took 256 sample.

44
00:03:43,730 --> 00:03:44,530
Okay.

45
00:03:44,700 --> 00:03:50,030
There are some other terminology that I do want to cover is that epoch 1 epoch basically means all the

46
00:03:50,030 --> 00:03:59,600
data a batch will be a subset of the data a batch of 1 2 8 in Python code will be an example that looks

47
00:03:59,600 --> 00:04:01,030
like this.

48
00:04:01,190 --> 00:04:06,360
This is from the first all the way to 1 2 8.

49
00:04:06,360 --> 00:04:10,850
So you're looking at the first hundred and 28 batch.

50
00:04:10,900 --> 00:04:17,730
Okay there's the first batch the second eight second batch will be from 128 to 2 5 6 and the next batch

51
00:04:18,270 --> 00:04:24,950
if you want to continue on is 1 2 8 times and and could be one could be 0 could be 2 or the way and

52
00:04:24,950 --> 00:04:32,540
the column here basically specify this is from where and to where that's basically how you specified

53
00:04:32,960 --> 00:04:42,920
in Python num pi code and the last thing that I want to cover is to revisit some of the tensor operations

54
00:04:43,430 --> 00:04:46,570
basically algebra in python.

55
00:04:46,850 --> 00:04:51,400
This are the key concepts that we will be illustrating using Python codes.

56
00:04:51,410 --> 00:04:59,240
We will look at element y's operations broadcasting dot product which is marked matrix multiplication

57
00:04:59,240 --> 00:05:00,560
and finally reshaping

58
00:05:09,860 --> 00:05:11,440
so let's look at that.

59
00:05:11,720 --> 00:05:14,480
We start with tensor operations example.

60
00:05:14,480 --> 00:05:19,580
So I already mentioned these are the four things we're going to look at eleven Y's operations broadcasting

61
00:05:19,610 --> 00:05:22,640
dot product as well as reshaping.

62
00:05:22,690 --> 00:05:22,980
Okay.

63
00:05:23,000 --> 00:05:32,150
So let's start looking at our first example element y's operations element y's operation based means

64
00:05:32,150 --> 00:05:37,110
that one element whatever operation to another element.

65
00:05:37,590 --> 00:05:44,130
OK so that's a little bit like you are doing all the calculations all at the same time but independently

66
00:05:44,460 --> 00:05:47,280
based on the individual index itself.

67
00:05:47,280 --> 00:05:49,250
So let's there's a little bit abstract.

68
00:05:49,260 --> 00:05:50,290
So let's have a look at this.

69
00:05:50,290 --> 00:05:57,250
So now we have X1 next to we're performing element y's operations here X1 plus X2.

70
00:05:57,300 --> 00:05:58,890
This is two plus one.

71
00:05:58,890 --> 00:06:03,060
This is two plus minus one and four plus three.

72
00:06:03,060 --> 00:06:07,880
So that's the actual element y's operations that you are doing here.

73
00:06:07,890 --> 00:06:13,310
It's not a multiplication it's not a complete addition.

74
00:06:13,470 --> 00:06:19,950
This is another example of element y's operations whereby we are calculating the maximum between X1

75
00:06:20,490 --> 00:06:21,690
or zero.

76
00:06:21,690 --> 00:06:21,960
Okay.

77
00:06:21,970 --> 00:06:28,060
So when we run that you'll notice that the maximum is x1.

78
00:06:28,120 --> 00:06:29,070
Is this one here.

79
00:06:29,810 --> 00:06:30,080
Okay.

80
00:06:30,090 --> 00:06:37,370
So is actually an operation between zero and individual elements of X1 two is greater than zero.

81
00:06:37,370 --> 00:06:41,790
So two is taken s to value zero is larger the minus one.

82
00:06:41,790 --> 00:06:49,590
So hence zero is taken s to value for is larger than zero hands for is the value that's being retained

83
00:06:49,860 --> 00:06:53,400
so hence this is what's called element y's operation.

84
00:06:53,400 --> 00:07:00,270
So that's really what element the wise operations means is actually the individual operations later

85
00:07:00,270 --> 00:07:07,160
on when we actually look at dot product it's a contrast to what element y's operation looks like if

86
00:07:07,160 --> 00:07:13,680
you are familiar with matrix then you know that this is not not the same completely and very different

87
00:07:13,680 --> 00:07:14,880
altogether.

88
00:07:14,880 --> 00:07:19,500
So let's look at broadcasting now.

89
00:07:19,500 --> 00:07:23,880
Broadcasting is record the X1 has three elements.

90
00:07:24,050 --> 00:07:24,280
Okay.

91
00:07:24,330 --> 00:07:27,890
So it's a is one dimension.

92
00:07:28,000 --> 00:07:33,370
Now how do you add scalar to a vector this way.

93
00:07:33,370 --> 00:07:41,110
Broadcasting comes in the small tensor will be broadcasted to match the shape of the larger tensor the

94
00:07:41,380 --> 00:07:46,080
X1 matrix is basically three it has three elements.

95
00:07:46,090 --> 00:07:49,610
Two is only one one element.

96
00:07:49,630 --> 00:07:57,590
So basically that the two will be repeated three times or broadcasted to all the individual element

97
00:07:57,580 --> 00:07:57,970
itself.

98
00:07:57,970 --> 00:07:59,590
So let me illustrate.

99
00:07:59,590 --> 00:08:03,320
So what happened here is that two will be added to two.

100
00:08:03,490 --> 00:08:09,580
Two will be added to minus one which gives you a 1 2 will be added to four which gives you a six.

101
00:08:09,580 --> 00:08:18,560
So the broadcasting of scalar the scalar value two or Joe D to the vector itself the one d vector and

102
00:08:18,650 --> 00:08:20,980
hence this is what it looks like.

103
00:08:22,280 --> 00:08:24,230
We're going to create X tree.

104
00:08:24,320 --> 00:08:27,340
So this is another array that we're creating.

105
00:08:27,390 --> 00:08:31,560
If we repeat again adding two to two by two matrix.

106
00:08:31,570 --> 00:08:38,400
Notice that this is a 2D two dimensional tense and now what do you think will happen.

107
00:08:38,480 --> 00:08:41,340
Have a guest.

108
00:08:41,900 --> 00:08:43,340
Yes you'll be right.

109
00:08:43,340 --> 00:08:51,020
The Dignity adds to is broadcasted to every single element and then the actual operation or addition

110
00:08:51,020 --> 00:08:52,400
in this case is performed.

111
00:08:53,270 --> 00:08:53,840
OK.

112
00:08:53,870 --> 00:08:54,140
Right.

113
00:08:54,200 --> 00:08:57,720
Let's look at x 4 which is what we're creating here.

114
00:08:57,890 --> 00:09:01,290
So minus 1 to minus 1 and x tree looks like this.

115
00:09:01,430 --> 00:09:02,940
How do you think.

116
00:09:03,580 --> 00:09:05,170
Well how would it behave.

117
00:09:05,210 --> 00:09:06,800
Extreme plus x 4.

118
00:09:06,980 --> 00:09:08,770
Again pause for a moment.

119
00:09:08,780 --> 00:09:10,880
Have a think done peak

120
00:09:14,720 --> 00:09:15,090
All right.

121
00:09:15,090 --> 00:09:16,380
Let me show you.

122
00:09:16,560 --> 00:09:22,050
Basically it's broadcasted to the two dimensions.

123
00:09:22,050 --> 00:09:25,160
So basically this first then followed by this.

124
00:09:25,560 --> 00:09:31,260
So as one man is one gives you zero 1 minus 1 2 4 0 2 minus 1 gives you 1 to March 1 gives you 1.

125
00:09:31,290 --> 00:09:33,660
So that's how it is broadcasted.

126
00:09:33,670 --> 00:09:39,630
There's a limit to this especially if the shape doesn't match what we have is that scalar is easy to

127
00:09:39,630 --> 00:09:40,730
broadcast to

128
00:09:43,620 --> 00:09:46,600
any impact any dimension for that matter.

129
00:09:46,860 --> 00:09:55,410
When you have more vectors to vectors or vector to matrix or vector to 4D it start to get complicated

130
00:09:55,470 --> 00:09:57,740
especially of his order size then.

131
00:09:58,030 --> 00:10:03,520
Then num pi when it do you figure out what you're trying to do and we'll show you an error.

132
00:10:04,110 --> 00:10:12,030
OK so time to actually have a look at DOT PRODUCT you're probably more familiar with another term which

133
00:10:12,030 --> 00:10:17,810
is matrix multiplication that essentially is what dot product is.

134
00:10:17,810 --> 00:10:18,990
So let me show you.

135
00:10:19,050 --> 00:10:20,600
Well let's start with X1 first.

136
00:10:20,620 --> 00:10:22,400
We skip ahead right.

137
00:10:22,410 --> 00:10:33,300
So if you take a simple dot product name pi dot and if I do X1 with x1.

138
00:10:33,330 --> 00:10:41,840
Do you think that will work go back to your earlier days when you were looking at matrix.

139
00:10:41,840 --> 00:10:49,710
If you have a three by one multiply by three by one and matrix would that work.

140
00:10:49,730 --> 00:10:52,070
You're right it won't.

141
00:10:52,070 --> 00:10:55,560
Well in this case fortunately for it for you it actually works.

142
00:10:55,640 --> 00:10:58,850
But in reality it doesn't.

143
00:10:59,060 --> 00:11:04,730
It should not work but because this is a simple case none pi is smart enough to figure out.

144
00:11:04,730 --> 00:11:07,880
Technically you're supposed to transpose this.

145
00:11:07,880 --> 00:11:15,410
Okay then it work as a good practice to make sure that you are actually working with within the rules

146
00:11:15,410 --> 00:11:23,290
of Matrix so that you don't actually have any weird numbers or unexpected result being thrown out.

147
00:11:23,750 --> 00:11:24,000
Okay.

148
00:11:24,020 --> 00:11:30,500
So let's look at x3 and x4 these are two different ones.

149
00:11:30,650 --> 00:11:30,950
Okay.

150
00:11:30,980 --> 00:11:34,920
Now the good thing is the X3 is even two by two.

151
00:11:34,940 --> 00:11:42,430
So it's easy to see what they went up and when you actually look at DOT multiplication here which is

152
00:11:42,430 --> 00:11:46,690
a metric most multiplication here would transpose X false x 4.

153
00:11:46,760 --> 00:11:48,940
And we able to actually get the result.

154
00:11:48,950 --> 00:11:54,590
So again let's have a look to see if num pi smart enough to figure out if we don't x2 transpose the

155
00:11:54,580 --> 00:11:56,900
data.

156
00:11:57,430 --> 00:11:59,570
Okay so smart enough to figure that out.

157
00:11:59,630 --> 00:12:01,400
So that's good.

158
00:12:01,530 --> 00:12:03,890
Oh good thing that is able to figure that out.

159
00:12:04,380 --> 00:12:11,300
And but don't assume that it will work just fine for four for Matrix that's more complex.

160
00:12:11,300 --> 00:12:12,530
These are simple matrix.

161
00:12:12,710 --> 00:12:18,650
So a good thing you know and the situation is not bad that works out well.

162
00:12:18,670 --> 00:12:20,290
Right let's have a look at.

163
00:12:21,110 --> 00:12:25,520
I feel obliged to X to demonstrate to X Five.

164
00:12:26,040 --> 00:12:32,340
Okay so num pi array let's see what kind of example we can use here.

165
00:12:33,050 --> 00:12:42,180
Which is use this except that I'm going to change it to this is a two by two matrix.

166
00:12:43,950 --> 00:12:46,710
Four four four five.

167
00:12:47,120 --> 00:12:56,440
OK x six pi array now we have three by two.

168
00:12:56,450 --> 00:13:00,170
So let's create a two by three.

169
00:13:00,170 --> 00:13:00,500
Okay.

170
00:13:00,530 --> 00:13:12,730
So one two three we need to open up one of these followed by three to two.

171
00:13:12,760 --> 00:13:16,930
One that would do and we need to close it all.

172
00:13:17,830 --> 00:13:21,430
OK so none pie so let's do this.

173
00:13:21,430 --> 00:13:22,020
X 5.

174
00:13:22,030 --> 00:13:26,930
Shape x 6 shape okay.

175
00:13:26,950 --> 00:13:30,050
Notice that is true by 2 and 2 by 3.

176
00:13:30,140 --> 00:13:31,660
So a nut pi dot.

177
00:13:31,670 --> 00:13:40,040
And if we takes x 5 and 6 and it creates a matrix that is 3 by 3.

178
00:13:40,700 --> 00:13:41,310
Okay.

179
00:13:41,330 --> 00:13:46,910
Which is exactly what you expect because the when you actually have dot multiplication it takes the

180
00:13:46,940 --> 00:13:48,640
external.

181
00:13:48,830 --> 00:13:51,440
It takes the external dimension.

182
00:13:51,440 --> 00:13:59,300
So if we do this I'm gonna wonder if this is gonna throw an arrow assured.

183
00:13:59,370 --> 00:14:00,680
But let's just see.

184
00:14:01,010 --> 00:14:01,460
Okay.

185
00:14:01,560 --> 00:14:02,610
All right good.

186
00:14:02,640 --> 00:14:04,820
I finally was able to prove this.

187
00:14:05,060 --> 00:14:05,470
Okay.

188
00:14:05,490 --> 00:14:10,230
I was expecting it to but it was smart enough to actually deduce it from your data.

189
00:14:10,260 --> 00:14:13,320
But I think it actually come at the expense of slowing down.

190
00:14:13,320 --> 00:14:15,020
But nevertheless.

191
00:14:15,300 --> 00:14:20,090
So someone who has spent some time writing to assert code at the back.

192
00:14:20,460 --> 00:14:26,570
So here it says shapes treated to two by two and three by two is not aligned.

193
00:14:26,580 --> 00:14:33,120
Because when you X to doing matrix multiplication I'd really hope that you do remember your linear algebra

194
00:14:33,420 --> 00:14:34,740
if not pleased to revise.

195
00:14:34,740 --> 00:14:41,760
This is just a really quick run through or how to actually performed matrix multiplications in num pi

196
00:14:41,790 --> 00:14:46,040
and Python rather than going through from step 1.

197
00:14:46,080 --> 00:14:48,470
So you have two and three does not align.

198
00:14:48,470 --> 00:14:54,720
So when it comes to multiplication matrix matrix multiplication the Inner Dimension must match and the

199
00:14:54,720 --> 00:15:01,020
down to dimension is actually the final shape of our matrix.

200
00:15:01,620 --> 00:15:02,850
Okay.

201
00:15:03,610 --> 00:15:03,870
Right.

202
00:15:03,870 --> 00:15:05,880
So that's really what I wanted to highlight.

203
00:15:06,710 --> 00:15:07,160
Okay.

204
00:15:07,160 --> 00:15:07,860
The last one.

205
00:15:07,860 --> 00:15:14,940
Let me just tidy these the last topic I want to cover is reshaping let's bring up X tree.

206
00:15:14,970 --> 00:15:21,840
This is what extra looks like if we perform minus 1 to 1 and print it out.

207
00:15:21,840 --> 00:15:25,310
Notice that it turns it into a column no format.

208
00:15:25,790 --> 00:15:30,000
Okay for this now for Rose by 1.

209
00:15:30,000 --> 00:15:33,690
So if we do it the other way one minus one we reshaped it.

210
00:15:33,760 --> 00:15:39,680
Okay it it converted from two by two to become a real matrix.

211
00:15:40,050 --> 00:15:42,120
Okay so not as it is for by one.

212
00:15:42,120 --> 00:15:43,270
This is 1 by 4.

213
00:15:44,130 --> 00:15:51,570
Okay so extra if we reshaped it to 1 by 4 we're going to get the same result as that note is that you

214
00:15:51,570 --> 00:15:55,350
can actually define it that way.

215
00:15:55,350 --> 00:16:00,990
If we do it this way it would exactly be the same because we didn't specify the next one and you can

216
00:16:00,990 --> 00:16:09,550
also perform revel and reward does exactly the same as far as our turn it into rule wise.

217
00:16:09,610 --> 00:16:10,070
Okay.

218
00:16:10,090 --> 00:16:19,800
And that's really the whole basic idea reshape essentially the reshape is actually specifying the final

219
00:16:19,800 --> 00:16:25,230
shape that you will like it to be and that's that's the function reshape.

220
00:16:25,230 --> 00:16:30,820
And it's useful for the purpose of tensor operation right.

221
00:16:30,810 --> 00:16:32,820
With that there's quite a lot to cover.

222
00:16:32,880 --> 00:16:39,210
I really hope that you got much all of that and that's detail the concepts that we wanted to cover very

223
00:16:39,210 --> 00:16:47,010
briefly albeit we cover element wise operations broadcasting dot product as well as reshaping.

224
00:16:47,100 --> 00:16:48,740
I hope that has been useful.

225
00:16:48,760 --> 00:16:51,630
There's just one more concept one more thing that I want to cover.

226
00:16:51,630 --> 00:16:56,840
I think I owe you this which is the end game and also a shape.

227
00:16:56,850 --> 00:16:59,260
So let's look at how you actually do this.

228
00:16:59,310 --> 00:17:01,550
So extreme thought and I'm okay.

229
00:17:01,610 --> 00:17:08,040
I would tell you as a two dimension and do extreme shape will tell you as a two by two and the lasting

230
00:17:08,040 --> 00:17:13,310
is extra data type and it would tell you as integer 64.

231
00:17:13,520 --> 00:17:13,950
Okay.

232
00:17:13,980 --> 00:17:17,340
So once again thank you for watching.

233
00:17:17,370 --> 00:17:18,960
I look forward to seeing you in the next video.
