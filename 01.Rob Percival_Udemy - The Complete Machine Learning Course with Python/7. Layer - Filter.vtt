WEBVTT
1
00:00:00.450 --> 00:00:00.960
Welcome back.

2
00:00:00.960 --> 00:00:07.620
Let's dive into convolution 2D and the actual operation of it.

3
00:00:07.650 --> 00:00:07.980
All right.

4
00:00:08.010 --> 00:00:13.100
So this is an example of convolution operation.

5
00:00:13.410 --> 00:00:23.190
You can see the colonel which is designated by the light purple where the top role as represented by

6
00:00:23.190 --> 00:00:26.290
minus one minus two and minus one.

7
00:00:26.310 --> 00:00:29.760
The second row is 0 0 0.

8
00:00:29.940 --> 00:00:32.310
And then the third row is 1 to 1.

9
00:00:32.310 --> 00:00:34.810
So in this case this is our colonel.

10
00:00:34.830 --> 00:00:42.960
That's being applied to the image while this image is a four by six four by six in terms of the dimension

11
00:00:42.990 --> 00:00:44.800
and is grayscale.

12
00:00:44.820 --> 00:00:52.070
You will notice that the height that's four and the width is actually six.

13
00:00:52.170 --> 00:01:00.210
In this case now the other thing that I do want to highlight if you keep looking at these so-called

14
00:01:00.240 --> 00:01:10.250
details here is that the operation works like this you apply the colonel on to the tree by the tree

15
00:01:10.250 --> 00:01:15.680
by three field to Colonel onto the pics the image the tree at the top.

16
00:01:15.680 --> 00:01:26.480
Start with the top corner the three by three portion of the image itself and then you follow by element

17
00:01:26.480 --> 00:01:28.190
y's multiplication.

18
00:01:28.370 --> 00:01:35.690
So the minus one multiply ten which I've actually laid out here as an example for you followed by minus

19
00:01:35.690 --> 00:01:42.550
two which is from the colonel multiply by two all from the image minus one multiplied by the three value

20
00:01:42.550 --> 00:01:44.160
of three an image.

21
00:01:44.160 --> 00:01:50.230
And notice that these are all individual element y's multiplication and then you sum them up.

22
00:01:50.300 --> 00:02:00.230
So that's why this descriptor here say some all element y's multiplication I've provided this as a convolution

23
00:02:00.650 --> 00:02:04.610
operation spreadsheet in the form of a spreadsheet on this strike.

24
00:02:04.610 --> 00:02:08.140
This he could do one worksheet if you look at this.

25
00:02:08.150 --> 00:02:18.660
So basically we have this kernel applied to this portion of the image and the output here is 19 which

26
00:02:18.660 --> 00:02:21.180
is the value that we received here.

27
00:02:21.180 --> 00:02:28.620
So let us flip over to the spreadsheet that are provided here straight is a to one and this is the actual

28
00:02:28.830 --> 00:02:37.490
computation and and if you look at the formula which is pretty much the example that I've shown you

29
00:02:37.490 --> 00:02:41.180
earlier including the actual working itself.

30
00:02:41.180 --> 00:02:49.640
So if you move to the next cell it shows you that the kernel there food to know has been slide along.

31
00:02:50.000 --> 00:02:50.330
Okay.

32
00:02:50.330 --> 00:02:51.450
The strike is one.

33
00:02:51.470 --> 00:02:59.570
So there's been slight along to the next column and you keep repeating this until you come to the end

34
00:02:59.690 --> 00:03:10.610
of the image and you notice very quickly that we can only go as far as four in terms of the output although

35
00:03:10.610 --> 00:03:18.830
the image has six in terms of with but the output is only for the reason as you can see pretty obvious

36
00:03:18.830 --> 00:03:24.450
really is that the three by three cannot be applied outside.

37
00:03:24.530 --> 00:03:25.560
Okay.

38
00:03:25.580 --> 00:03:31.220
Once you actually move one more slide long by one more pixel then you actually start applying it to

39
00:03:31.580 --> 00:03:39.840
outside of the image and that will not work and it's not possible to do that hence the image dimension

40
00:03:39.840 --> 00:03:47.790
or the output size has been reduced from four times six fours our height six is now with two two times

41
00:03:47.800 --> 00:03:56.850
four to hide this now two four is the width and every time when you actually apply three by three you

42
00:03:56.850 --> 00:04:00.430
will lose two columns and two rows.

43
00:04:00.810 --> 00:04:06.090
And if you apply five by five you'll lose four columns and four rows.

44
00:04:06.090 --> 00:04:11.300
So that's basically how the actual calculation in terms of the output works.

45
00:04:13.960 --> 00:04:22.030
Now this is also an example applying the colonel food to without padding what we did just now is essentially

46
00:04:23.500 --> 00:04:25.920
this is the same as the previous slide.

47
00:04:25.930 --> 00:04:26.370
The.

48
00:04:26.410 --> 00:04:27.860
There's no difference yet.

49
00:04:28.060 --> 00:04:35.300
I just wanted to highlight that this is an example of applying the colonel food to without padding.

50
00:04:35.470 --> 00:04:35.810
Okay.

51
00:04:35.820 --> 00:04:39.400
And I also want to illustrate to you what it looks like when you actually apply.

52
00:04:39.400 --> 00:04:48.730
Few to apply padding but before we go there let's look at what happened if you apply multiple futures.

53
00:04:49.160 --> 00:04:56.150
In this example we only apply one filter what happens when you apply multiple shooters quite often in

54
00:04:56.240 --> 00:04:56.960
CNN.

55
00:04:56.960 --> 00:05:03.350
The architecture itself you apply multiple layers and quite often somewhere between 30 to 64 or even

56
00:05:03.350 --> 00:05:04.550
higher.

57
00:05:04.550 --> 00:05:11.600
And in those situations when you apply a multiple filters or multiple kernels you will obtain multiple

58
00:05:11.600 --> 00:05:13.800
outputs.

59
00:05:14.040 --> 00:05:22.330
Let's take an example first of all and look at the CNN that we actually looked at earlier for one of

60
00:05:22.560 --> 00:05:24.000
some about examples.

61
00:05:24.000 --> 00:05:26.200
You notice that this is convolution 2D.

62
00:05:26.640 --> 00:05:29.190
Let's start off with three by three.

63
00:05:29.190 --> 00:05:30.610
This is the kernel.

64
00:05:30.710 --> 00:05:31.080
Okay.

65
00:05:31.110 --> 00:05:38.430
The dimension of the kernel is treated pixel high and three pixel y and just pay attention for now to

66
00:05:38.430 --> 00:05:45.470
the first two value thirty two and then bracket the top all three three comma three the thirty two is

67
00:05:45.480 --> 00:05:49.910
the actual number of filters being applied.

68
00:05:49.970 --> 00:05:58.960
So in this case the first convolution layer applied thirty two filters so you will receive thirty two

69
00:05:59.130 --> 00:06:00.160
outputs.

70
00:06:00.300 --> 00:06:01.010
Okay.

71
00:06:01.110 --> 00:06:07.770
And the next convolution there you can see it says sixty four followed by a three comma three.

72
00:06:07.800 --> 00:06:12.090
So there's a still a three by three kernel matrix.

73
00:06:12.300 --> 00:06:18.240
And the difference now is that you have sixty four kernels or sixty four futures being applied.

74
00:06:18.450 --> 00:06:23.150
So the number of layers will increase by sixty four.

75
00:06:23.770 --> 00:06:31.470
And let's look at the so-called output this provided by Kerry's.

76
00:06:32.100 --> 00:06:33.500
Couple of things on the highlight.

77
00:06:33.540 --> 00:06:37.460
Notice that the input picture is 28 by 28.

78
00:06:37.560 --> 00:06:49.380
After we apply the three by three matrix the filter what you receive is 26 by 26.

79
00:06:49.740 --> 00:06:51.870
In terms of the output dimension.

80
00:06:52.800 --> 00:06:53.280
Okay.

81
00:06:53.410 --> 00:07:02.840
Now you'll notice that the number remember that the picture is only a grayscale so it's only one channel.

82
00:07:03.060 --> 00:07:07.850
After you apply the colonel 32 Colonel activation map is also core.

83
00:07:07.980 --> 00:07:12.390
What you receive now is that you have a dimension of 26 by 26.

84
00:07:12.390 --> 00:07:25.410
But now you have 32 layer deep off of output and if you continue to go to highlight this.

85
00:07:25.420 --> 00:07:33.560
So this is the 26 by 26 shape and we have 32 recalled that when we actually apply the image before it

86
00:07:33.560 --> 00:07:37.170
was only 1.

87
00:07:37.300 --> 00:07:37.630
Okay.

88
00:07:37.640 --> 00:07:39.560
The input shape is 28 by 28.

89
00:07:39.680 --> 00:07:46.370
And only one great scale but the output after going through this convolution layer is that you receive

90
00:07:46.400 --> 00:07:52.710
now 32 in terms of the so-called 32 output layers.

91
00:07:53.300 --> 00:07:56.600
Ignore the max pulling for now will cover it and teach a lesson.

92
00:07:56.600 --> 00:08:02.990
And when you actually apply another convolution layer onto the output of the max pulling layer.

93
00:08:03.080 --> 00:08:07.420
You'll notice that we reduce by two rows and reduce by two columns.

94
00:08:07.490 --> 00:08:11.270
And now the convolution increase to sixty four.

95
00:08:11.660 --> 00:08:20.300
And on and on goes now if you want to maintain the dimension input dimensions 28 and the output dimension

96
00:08:20.660 --> 00:08:22.400
is due 28 by 28.

97
00:08:22.750 --> 00:08:25.910
And then you use padding is equal to the same.

98
00:08:25.910 --> 00:08:26.300
OK.

99
00:08:26.330 --> 00:08:31.200
In Caris so and that's where you actually put it in here.

100
00:08:31.230 --> 00:08:32.130
There's not a comma.

101
00:08:32.190 --> 00:08:35.280
Heading is equal to the same right.

102
00:08:35.310 --> 00:08:37.730
So this is a pictorial example.

103
00:08:37.730 --> 00:08:39.380
What we discussed.

104
00:08:39.690 --> 00:08:45.630
If you look at this in the code example provided above that it too few tests were used.

105
00:08:45.720 --> 00:08:47.980
There will be 32 output hands.

106
00:08:48.000 --> 00:08:55.260
We have thirty two copies of the 26 image but the copies on the same because of the different kernels

107
00:08:55.260 --> 00:08:56.190
being applied to it.

108
00:08:56.220 --> 00:08:59.480
So you actually get 32 activation map.

109
00:08:59.610 --> 00:09:04.100
And so this is an example when you apply one filter.

110
00:09:04.620 --> 00:09:06.260
This is only an example of one.

111
00:09:06.270 --> 00:09:10.500
But if you apply thirty to you will get 32 dairies into a 32 here.

112
00:09:10.500 --> 00:09:23.800
By the way it's just as it is just an example of the output ought to be 32 activation Matt.

113
00:09:23.890 --> 00:09:28.990
There are some common filters or kernels that you have seen before.

114
00:09:29.170 --> 00:09:36.430
You have sharpened you have blur and you have bottom so well and there's actually a link here provided

115
00:09:36.430 --> 00:09:40.060
here for you to actually referred to in fact you've seen this before.

116
00:09:40.060 --> 00:09:42.760
Here are some of the examples the.

117
00:09:42.790 --> 00:09:44.430
There are a few here.

118
00:09:44.560 --> 00:09:48.270
I borrowed the examples of those numbers that actually from here.

119
00:09:48.280 --> 00:09:51.760
So we were looking at sharpened so let's look at shopping.

120
00:09:52.540 --> 00:09:57.430
If you select shopping so that this is shop and if you apply it just a blur which was blue.

121
00:09:57.490 --> 00:10:01.660
Yep these are the numbers of values and Blur and.

122
00:10:02.190 --> 00:10:02.520
Yeah.

123
00:10:02.560 --> 00:10:03.480
And on and on it goes.

124
00:10:03.480 --> 00:10:11.320
So these are the common future but of course these are handcrafted and it's time consuming to handcrafted

125
00:10:11.350 --> 00:10:13.320
manually crafted yourself.

126
00:10:13.330 --> 00:10:21.100
And if you leave it to the CNN it will actually design according to the input image and it will land

127
00:10:21.310 --> 00:10:22.970
by itself.

128
00:10:23.000 --> 00:10:27.560
Well that's the beauty of the neural network.

129
00:10:27.600 --> 00:10:35.350
All right let's look at how you use this in carries that couple of things that I do want you to take

130
00:10:35.350 --> 00:10:39.950
note of the depth of the output as relates to the number of futures.

131
00:10:40.000 --> 00:10:44.100
Recall that in the code that we look at it was 32.

132
00:10:44.210 --> 00:10:49.480
There is also another parameters that's important which is strides.

133
00:10:49.660 --> 00:10:56.350
Right now the default is one comma one meaning one height of one and the width of one.

134
00:10:56.390 --> 00:11:01.780
And quite often people just leave one day meaning it's one for both high end with you can actually have

135
00:11:01.780 --> 00:11:09.520
different numbers two for the height and one for the width if that's what you won but generally is just

136
00:11:09.910 --> 00:11:13.480
left as the scale of value scalar meaning just one value.

137
00:11:13.480 --> 00:11:20.790
And that will mean or translate to is the same for both the height and with.

138
00:11:21.250 --> 00:11:26.350
Now you can also apply a number that is greater than one.

139
00:11:26.470 --> 00:11:31.280
That will means that you actually start skipping pixel or no one basically means moved to the next pixel.

140
00:11:31.360 --> 00:11:34.530
But if you put two is that skipping one pick.

141
00:11:34.540 --> 00:11:41.110
So if you put three or skipping two pixels and the outcome of that is that it will reduce the size of

142
00:11:41.110 --> 00:11:48.120
the output and padding or more accurately zero padding it's zero to the external dimension.

143
00:11:48.130 --> 00:11:48.740
OK.

144
00:11:48.790 --> 00:11:57.480
So that you can actually recover the same dimension as the so-called output.

145
00:11:57.880 --> 00:12:04.860
Now if you look at some examples on the strides I've chosen height of one and with this equate to two

146
00:12:05.410 --> 00:12:11.560
and this is an example of straight off two if you look at this initially we are applying to this but

147
00:12:11.560 --> 00:12:20.380
the next one no longer apply to trough instead is skip one pixel and go over to three column this column

148
00:12:20.380 --> 00:12:23.490
here that this is an example of height.

149
00:12:23.500 --> 00:12:24.650
This it could do one.

150
00:12:24.760 --> 00:12:32.010
And with this it could do to do with two here meaning that we are skipping one pixel so essentially

151
00:12:32.220 --> 00:12:38.600
skipped column number two here again provide this in the form of Excel spreadsheet you can actually

152
00:12:38.610 --> 00:12:40.550
go to strike two.

153
00:12:40.560 --> 00:12:45.570
They could do to tab and this is the actual calculation itself.

154
00:12:45.570 --> 00:12:50.720
You can see that it's applied to tend to often three and we come over to the next one.

155
00:12:50.720 --> 00:12:56.070
The output is is it doesn't actually apply to two of it's just go two three four and three and then

156
00:12:56.070 --> 00:13:02.190
stopped it doesn't actually continue on because when is the next one's supposed to skip four and then

157
00:13:02.190 --> 00:13:05.680
go to three but that's not enough.

158
00:13:05.690 --> 00:13:09.780
You already are starting to move outside the pictures are no longer works

159
00:13:12.410 --> 00:13:12.640
OK.

160
00:13:12.650 --> 00:13:14.010
So play around with that.

161
00:13:14.180 --> 00:13:19.420
So this is kind of like a well in a way a slow motion picture that I want to show you.

162
00:13:19.490 --> 00:13:23.810
You can't actually go back to the spreadsheet to see how it's done.

163
00:13:23.810 --> 00:13:26.650
So we are applying a three by three filter.

164
00:13:27.320 --> 00:13:30.690
Okay to our 10 by 10 matrix destroy this one.

165
00:13:30.710 --> 00:13:32.090
So right.

166
00:13:32.120 --> 00:13:40.300
So the green highlighted matrix the three by three matrix is where the fruit is being applied to the

167
00:13:40.300 --> 00:13:41.950
next slide shows you.

168
00:13:41.950 --> 00:13:48.510
It's moved to the next one and the next one and the next one noticed it is just stepping to the next.

169
00:13:48.650 --> 00:13:50.400
Then the next and the next.

170
00:13:50.470 --> 00:13:50.860
Okay.

171
00:13:50.920 --> 00:13:54.410
Now you have output of eight times eight.

172
00:13:54.490 --> 00:13:55.930
Okay so that's the basic idea.

173
00:13:55.930 --> 00:13:59.370
If you move along in terms of the strike as equal to one.

174
00:13:59.620 --> 00:14:06.830
Let's talk in an example with strikers to go to now the instead of green to food to now it's purple.

175
00:14:06.850 --> 00:14:07.480
Take a moment.

176
00:14:07.480 --> 00:14:10.840
Have a guess where should it moved to.

177
00:14:10.840 --> 00:14:11.300
Yes.

178
00:14:11.320 --> 00:14:14.660
If you save the column that start with three you'll be right.

179
00:14:14.950 --> 00:14:15.520
Okay.

180
00:14:15.570 --> 00:14:19.210
It will continue to actually move to the next.

181
00:14:19.210 --> 00:14:22.450
But skipping one pixel continuously

182
00:14:25.040 --> 00:14:31.780
right in terms of the output size there are some things to actually take note of.

183
00:14:31.820 --> 00:14:39.240
This is a formula that continuously or rather commonly used and papers.

184
00:14:39.500 --> 00:14:49.940
The end is the so-called number of columns and terms of with minors F F is the future divide by the

185
00:14:49.940 --> 00:14:51.410
stripe plus one.

186
00:14:51.440 --> 00:14:58.010
So that's essentially how it works and has the example of n is good to 10 F is a good 2 3.

187
00:14:58.190 --> 00:15:04.820
So if destroy this one then you have ten minus three lines become seven divided by one plus one you

188
00:15:04.820 --> 00:15:11.550
get eight is the output size and if you have a straight up to the output size becomes four and a half.

189
00:15:11.600 --> 00:15:15.260
Of course you can have four and a half so it becomes four.

190
00:15:15.290 --> 00:15:24.110
Okay so it goes down at round down all right the next slide that I want to cover before we stopped this

191
00:15:24.320 --> 00:15:29.840
video is zero padding zero padding if you can.

192
00:15:29.840 --> 00:15:31.850
This is our original ten by 10

193
00:15:35.190 --> 00:15:36.120
pixels.

194
00:15:36.270 --> 00:15:43.390
The slight variation is that we we've added zero on the edge.

195
00:15:43.590 --> 00:15:44.870
The zero on the site.

196
00:15:44.880 --> 00:15:45.200
Sorry.

197
00:15:45.200 --> 00:15:46.340
This is not a ten by ten.

198
00:15:46.340 --> 00:15:48.190
This is the full by 6.

199
00:15:48.200 --> 00:15:48.950
My apologies.

200
00:15:48.980 --> 00:15:53.510
So one two three four one two three four five six.

201
00:15:53.570 --> 00:15:56.750
And notice that we added zero all around it.

202
00:15:56.750 --> 00:16:02.760
And now we can recover the original size of four by six.

203
00:16:02.860 --> 00:16:03.630
Okay.

204
00:16:03.680 --> 00:16:07.540
And that's the critical part of zero padding in carers.

205
00:16:07.550 --> 00:16:10.120
You put padding is the same.

206
00:16:10.220 --> 00:16:15.800
And that's how you exit we covered the same dimension as per your input.

207
00:16:15.980 --> 00:16:21.080
Again I provided it in terms of the zero padding tab.

208
00:16:21.080 --> 00:16:23.240
You can actually look at this.

209
00:16:23.240 --> 00:16:27.320
The calculation is the same as do element lies.

210
00:16:27.470 --> 00:16:29.400
And then you sum them up.

211
00:16:29.510 --> 00:16:31.990
The difference now is because there is an extra mile.

212
00:16:32.030 --> 00:16:36.800
These are the so-called layer that is being applied.

213
00:16:36.800 --> 00:16:37.950
The zero padding.

214
00:16:38.000 --> 00:16:43.090
Let me just highlight that so is easier for you to visualize the zero padding.

215
00:16:43.490 --> 00:16:48.770
There allows you to actually recover the original size of the input picture.

216
00:16:48.920 --> 00:16:55.850
The original size is four by six and the output is also four by six right.

217
00:16:55.850 --> 00:16:57.800
That's really the end of our lesson.

218
00:16:57.800 --> 00:17:05.300
When we come back I'm gonna dig into the activation function a little bit to help you understand what

219
00:17:05.300 --> 00:17:08.060
it is and how it works and what's the purpose of using it.

220
00:17:08.060 --> 00:17:09.600
Thank you once again for watching.
