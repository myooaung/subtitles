WEBVTT
1
00:00:00.440 --> 00:00:03.440
[Autogenerated] I think a demo is worth 1000 slides.

2
00:00:03.440 --> 00:00:07.350
So let's open up our I D and implement document references.

3
00:00:07.350 --> 00:00:10.500
We'll see how we can use at the bereft to create doctor

4
00:00:10.500 --> 00:00:14.610
references in spring and will also hook into left second events

5
00:00:14.610 --> 00:00:17.890
and implement cascading and auditing.

6
00:00:17.890 --> 00:00:18.260
Happened.

7
00:00:18.260 --> 00:00:23.740
Allow flight information contained, departure and destination as strength.

8
00:00:23.740 --> 00:00:26.110
But now we have a new business requirement.

9
00:00:26.110 --> 00:00:30.300
We need to store additional information for departure in this nation.

10
00:00:30.300 --> 00:00:35.630
After all, their airports and airports have multiple properties.

11
00:00:35.630 --> 00:00:39.450
This is a perfect candidate for using document references because no

12
00:00:39.450 --> 00:00:41.860
matter how many flats you have during the day,

13
00:00:41.860 --> 00:00:44.210
the airports are almost the same,

14
00:00:44.210 --> 00:00:47.450
and we can reuse them across off flight information documents.

15
00:00:47.450 --> 00:00:51.000
The airport class will be a document of its own and

16
00:00:51.000 --> 00:00:53.140
will be saved in its own collection.

17
00:00:53.140 --> 00:00:56.000
In this case, we're using the A document imitation,

18
00:00:56.000 --> 00:00:58.630
and we're passing in the name of the collection,

19
00:00:58.630 --> 00:01:03.270
which is airports off course because airport is a document is to have an i.

20
00:01:03.270 --> 00:01:03.740
D.

21
00:01:03.740 --> 00:01:07.210
She's I d property over here, and then we have the name of the airport,

22
00:01:07.210 --> 00:01:10.540
the city and how many passengers it serves.

23
00:01:10.540 --> 00:01:13.790
We also need to modify the flight information class

24
00:01:13.790 --> 00:01:17.100
departure and destination are no longer strings.

25
00:01:17.100 --> 00:01:21.870
There feels off type airport, but that's not enough right now.

26
00:01:21.870 --> 00:01:24.240
Departure and destination are sub documents.

27
00:01:24.240 --> 00:01:25.990
They're not document references.

28
00:01:25.990 --> 00:01:30.940
In order to make them references, we need to add the appropriate annotations.

29
00:01:30.940 --> 00:01:35.050
All right, we made the necessary changes in the flat information class.

30
00:01:35.050 --> 00:01:39.410
Let's go ahead of the cedar and figure out howto insert

31
00:01:39.410 --> 00:01:42.390
these two documents in our database.

32
00:01:42.390 --> 00:01:45.770
I'm pretty sure you're very familiar with that database Cedar.

33
00:01:45.770 --> 00:01:48.890
It implements commander runners so that spring knows it has

34
00:01:48.890 --> 00:01:51.980
executed after the application starts.

35
00:01:51.980 --> 00:01:54.730
It also has an after orientations that one.

36
00:01:54.730 --> 00:01:57.160
Because you want to see they're to be executed first.

37
00:01:57.160 --> 00:02:00.990
This class has free dependencies, flight information depository,

38
00:02:00.990 --> 00:02:03.270
AARP repository and mongo template.

39
00:02:03.270 --> 00:02:05.340
We declare them in the constructor.

40
00:02:05.340 --> 00:02:07.070
The wrong method is pretty basic.

41
00:02:07.070 --> 00:02:10.740
It empties another base and executed the same method.

42
00:02:10.740 --> 00:02:15.640
And in the same method we're creating the airports have on airport for Rome,

43
00:02:15.640 --> 00:02:18.820
for Paris and for Copenhagen.

44
00:02:18.820 --> 00:02:25.290
Then we're creating fly data and notice that we're using the objects

45
00:02:25.290 --> 00:02:29.050
created before as departures and destinations.

46
00:02:29.050 --> 00:02:31.520
For example, in the first light, the departure is Rome,

47
00:02:31.520 --> 00:02:33.970
that this nation s Paris The second sight,

48
00:02:33.970 --> 00:02:37.190
The departure is Paris, and the destination is Copa Haga.

49
00:02:37.190 --> 00:02:40.740
Let's go ahead and seed these documents.

50
00:02:40.740 --> 00:02:45.170
I'm going to use a little bit off intelligence magic and

51
00:02:45.170 --> 00:02:47.440
we are grouping the airport is a list.

52
00:02:47.440 --> 00:02:52.330
And then we're using airport depository to insert, um that the base and on Lee.

53
00:02:52.330 --> 00:02:55.770
After that, we can save the fights.

54
00:02:55.770 --> 00:02:58.440
Remember that need to save the dependent documents

55
00:02:58.440 --> 00:03:00.640
first or the Children if you will.

56
00:03:00.640 --> 00:03:04.060
And only after that you can save the parent or the

57
00:03:04.060 --> 00:03:06.410
route documents has been a list.

58
00:03:06.410 --> 00:03:08.910
We're printing the flights to the castle.

59
00:03:08.910 --> 00:03:11.340
Let's go ahead and run the rap.

60
00:03:11.340 --> 00:03:13.940
Our application worked as expected.

61
00:03:13.940 --> 00:03:17.410
We have departure destination and, of course,

62
00:03:17.410 --> 00:03:19.590
the flight information, which were customs to.

63
00:03:19.590 --> 00:03:23.360
Now let's assume that you want to update a particular airport.

64
00:03:23.360 --> 00:03:27.360
I'm going to do that in the Application runner here which also implements

65
00:03:27.360 --> 00:03:31.020
Commander Runner and executed after the database Cedar.

66
00:03:31.020 --> 00:03:33.240
Achieving this is pretty simple.

67
00:03:33.240 --> 00:03:35.950
We first grab an existing airport.

68
00:03:35.950 --> 00:03:36.930
We change his name.

69
00:03:36.930 --> 00:03:37.580
For example,

70
00:03:37.580 --> 00:03:41.970
we had few Muccino here after little Da Vinci and we saved the airport.

71
00:03:41.970 --> 00:03:47.160
After that, we're printing all the fights after a run The application.

72
00:03:47.160 --> 00:03:50.800
You can see the updated airport over here.

73
00:03:50.800 --> 00:03:53.490
This is the biggest benefit off relating documents.

74
00:03:53.490 --> 00:03:56.460
You made a changed airport and it's Bean reflected

75
00:03:56.460 --> 00:03:59.520
immediately in the flight information.

76
00:03:59.520 --> 00:04:01.740
I know you're all waiting to implement cascading,

77
00:04:01.740 --> 00:04:05.720
but before you do that mystical look at the flight printer class might be

78
00:04:05.720 --> 00:04:09.020
wondering how we are printing the flight information.

79
00:04:09.020 --> 00:04:12.420
Are we creating your queries to grab the airports or not?

80
00:04:12.420 --> 00:04:14.400
The fight printer hasn't changed that much.

81
00:04:14.400 --> 00:04:16.300
To print the departure destination,

82
00:04:16.300 --> 00:04:19.420
we're using the gate departure and get this nation Gethers,

83
00:04:19.420 --> 00:04:25.240
which will return on object of that airport and then used again name methods.

84
00:04:25.240 --> 00:04:31.350
So we're treating flight information as if airports were an embedded document.

85
00:04:31.350 --> 00:04:35.530
And that works because spring date among body be.

86
00:04:35.530 --> 00:04:37.360
Thus thinks for us under the hood.

87
00:04:37.360 --> 00:04:41.610
It's pre fetches the airport when it sees a debrief,

88
00:04:41.610 --> 00:04:44.210
and that's a big benefit office framer.

89
00:04:44.210 --> 00:04:48.090
I took the liberty to put a breakpoint on our flight information objects,

90
00:04:48.090 --> 00:04:51.340
and we can see what you have the barge in destination off the airport,

91
00:04:51.340 --> 00:04:56.020
and when we look at them, we don't see dollar sign revved other son,

92
00:04:56.020 --> 00:04:57.290
Etienne daughter Sandy B.

93
00:04:57.290 --> 00:05:00.780
We see the actual document which has been retrieved by the

94
00:05:00.780 --> 00:05:05.360
framework implementing cascading or save,

95
00:05:05.360 --> 00:05:06.770
is not very difficult.

96
00:05:06.770 --> 00:05:11.440
Need to create a new class an extent abstract bongo event listener.

97
00:05:11.440 --> 00:05:12.540
We're going to use Mom.

98
00:05:12.540 --> 00:05:15.580
What template Surpassing in as a dependency.

99
00:05:15.580 --> 00:05:18.490
And then we need to hook into manga lifecycle events.

100
00:05:18.490 --> 00:05:21.270
We will hook into the own before convert event.

101
00:05:21.270 --> 00:05:21.940
Remember,

102
00:05:21.940 --> 00:05:24.520
this is triggered right before the document is

103
00:05:24.520 --> 00:05:26.940
converted to a job object implemented,

104
00:05:26.940 --> 00:05:29.550
cascading or save is pretty straightforward.

105
00:05:29.550 --> 00:05:31.950
The first thing they're going to do is to achieve our

106
00:05:31.950 --> 00:05:33.850
document and we're using the event.

107
00:05:33.850 --> 00:05:36.920
Get source method over here.

108
00:05:36.920 --> 00:05:39.360
Then if our document is an instance off flight

109
00:05:39.360 --> 00:05:41.760
information and it has a departure,

110
00:05:41.760 --> 00:05:44.570
then we extract the departure using the gether on.

111
00:05:44.570 --> 00:05:46.770
Then we're saving the departure.

112
00:05:46.770 --> 00:05:50.640
We're doing the same thing for a destination, and that's it.

113
00:05:50.640 --> 00:05:54.070
We have successfully implemented cascading on safe.

114
00:05:54.070 --> 00:05:57.840
We also need to register this component so spring picks it up.

115
00:05:57.840 --> 00:06:02.070
Two that are simply irritated with at component.

116
00:06:02.070 --> 00:06:05.540
It can, of course, declare being in any configuration file,

117
00:06:05.540 --> 00:06:09.290
going back to our database either with you remove this part where the airports

118
00:06:09.290 --> 00:06:13.950
are being saved and we will run the application to city.

119
00:06:13.950 --> 00:06:14.480
Welcome.

120
00:06:14.480 --> 00:06:15.960
Everything is OK.

121
00:06:15.960 --> 00:06:17.190
The flights are there.

122
00:06:17.190 --> 00:06:19.210
The update also worked.

123
00:06:19.210 --> 00:06:20.820
Awesome.

124
00:06:20.820 --> 00:06:22.860
All right, But wouldn't it be awesome?

125
00:06:22.860 --> 00:06:25.650
Toa have a generic cascade.

126
00:06:25.650 --> 00:06:30.010
Evil is not because this one on Lee works for flight information documents.

127
00:06:30.010 --> 00:06:32.980
Well, luckily for us, it's pretty easy to achieve this.

128
00:06:32.980 --> 00:06:38.380
I'm going to go ahead and delete this Cascade event listener,

129
00:06:38.380 --> 00:06:41.820
and I'm going to open his class in generic desk a listener again.

130
00:06:41.820 --> 00:06:45.040
We have to extend abstract among with the listener.

131
00:06:45.040 --> 00:06:49.640
We also need to register it so well identity with that component.

132
00:06:49.640 --> 00:06:56.310
And of course, we'll hook into the own before convert event again.

133
00:06:56.310 --> 00:06:58.680
And that's all the implementation that you need to

134
00:06:58.680 --> 00:07:02.610
create a generic cascading on safe.

135
00:07:02.610 --> 00:07:06.980
Don't be afraid by the logic in here, you know we're raising reflection,

136
00:07:06.980 --> 00:07:10.410
but other than that, I think it's pretty easy to read again.

137
00:07:10.410 --> 00:07:11.760
We're grabbing the document,

138
00:07:11.760 --> 00:07:16.140
and then we get a rate of Richfield off the document.

139
00:07:16.140 --> 00:07:18.110
We're making that feel accessible.

140
00:07:18.110 --> 00:07:21.940
And if the field is annotated with D B ref,

141
00:07:21.940 --> 00:07:25.310
we're grabbing the field value on we're saving,

142
00:07:25.310 --> 00:07:28.740
get using the Mongol template and Now we have ah,

143
00:07:28.740 --> 00:07:34.150
generic cascade on safe mongo event listener running the

144
00:07:34.150 --> 00:07:36.600
application again gives us the same results.

145
00:07:36.600 --> 00:07:40.940
Are generic cascading save works as expected?

146
00:07:40.940 --> 00:07:43.410
Last but not least, let's implement.

147
00:07:43.410 --> 00:07:48.000
Or do you think because you want to find out the changes that

148
00:07:48.000 --> 00:07:50.500
are taking place in our database again,

149
00:07:50.500 --> 00:07:53.330
I'm creating a generic mongo or the listener I'm

150
00:07:53.330 --> 00:07:57.640
extending abstract manga waving listener.

151
00:07:57.640 --> 00:08:01.360
I'm going to annotate this class component so that spring registers

152
00:08:01.360 --> 00:08:07.340
it and let's go ahead and implement auditing.

153
00:08:07.340 --> 00:08:11.390
This time, I'm hooking into own after safe and on after did it,

154
00:08:11.390 --> 00:08:14.420
because I want us to be aware when a document is inserted,

155
00:08:14.420 --> 00:08:16.640
saved or deleted.

156
00:08:16.640 --> 00:08:19.910
And, of course, running the APP gives us our logging.

157
00:08:19.910 --> 00:08:23.580
You can see that we're saving airport documents were saving flight

158
00:08:23.580 --> 00:08:27.550
information's and then we're updating on airport.

159
00:08:27.550 --> 00:08:29.350
In our case, that's rope.

160
00:08:29.350 --> 00:08:32.220
So auditing works, and it took us for Liza Co.

161
00:08:32.220 --> 00:08:33.420
To achieve this.

162
00:08:33.420 --> 00:08:35.870
I don't know about you, but that's just pretty cool.

163
00:08:35.870 --> 00:08:38.450
So this is the power off Mongol lifecycle event.

164
00:08:38.450 --> 00:08:46.000
You can achieve very much by hooking into them when needed to enhance the capabilities of the application

