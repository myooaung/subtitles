1
00:00:01,210 --> 00:00:03,180
[Autogenerated] Now that you understand document

2
00:00:03,180 --> 00:00:05,270
references from a Mongol perspective,

3
00:00:05,270 --> 00:00:09,080
I think it's time to look at them from a spring data perspective.

4
00:00:09,080 --> 00:00:12,740
And the best way to learn how to create document references in

5
00:00:12,740 --> 00:00:16,440
spring is by looking at the real example.

6
00:00:16,440 --> 00:00:18,000
Let's start with this class.

7
00:00:18,000 --> 00:00:21,690
The aircraft class is an entity with a document,

8
00:00:21,690 --> 00:00:24,510
and he has a NY D field Awesome.

9
00:00:24,510 --> 00:00:28,100
It also contains on engine as an embedded document,

10
00:00:28,100 --> 00:00:30,220
and we know it's an embedded document because we see no

11
00:00:30,220 --> 00:00:32,840
additional annotations over here.

12
00:00:32,840 --> 00:00:36,150
If you want to make a link between aircraft and

13
00:00:36,150 --> 00:00:38,640
engine using document references,

14
00:00:38,640 --> 00:00:41,350
there are a couple of changes that need to take place.

15
00:00:41,350 --> 00:00:47,300
First of all, we need to add the at dpuf annotation toe our engine property.

16
00:00:47,300 --> 00:00:49,410
That's the first step.

17
00:00:49,410 --> 00:00:50,100
You see this?

18
00:00:50,100 --> 00:00:54,380
It means that engine is not an embedded document.

19
00:00:54,380 --> 00:00:57,120
Engine aircraft are related.

20
00:00:57,120 --> 00:01:00,730
This is the only changed out we have to do on the aircraft class.

21
00:01:00,730 --> 00:01:04,840
But you also have to do a couple of modifications to the engine class.

22
00:01:04,840 --> 00:01:07,070
The engine is also a document,

23
00:01:07,070 --> 00:01:09,950
so we need to add the corresponding annotations to it.

24
00:01:09,950 --> 00:01:13,200
In our case, a document and at I d.

25
00:01:13,200 --> 00:01:14,330
That's pretty much it.

26
00:01:14,330 --> 00:01:17,500
We now have a document reference between aircraft and

27
00:01:17,500 --> 00:01:20,430
engine implemented at the framework level.

28
00:01:20,430 --> 00:01:22,410
Let's see how we can use it.

29
00:01:22,410 --> 00:01:23,400
If you remember,

30
00:01:23,400 --> 00:01:28,040
mobility be doesn't pre fetch document references for you

31
00:01:28,040 --> 00:01:31,690
in my body be apartment reference is just a sub document

32
00:01:31,690 --> 00:01:35,280
with ref i D and D B properties.

33
00:01:35,280 --> 00:01:37,410
Luckily for US, Spring Data Mongo.

34
00:01:37,410 --> 00:01:39,440
Debbie does some things for us,

35
00:01:39,440 --> 00:01:42,490
and the most important one is that it fetches documents

36
00:01:42,490 --> 00:01:45,930
annotated with a debrief automatically.

37
00:01:45,930 --> 00:01:49,020
This means that each time create a quay for aircraft,

38
00:01:49,020 --> 00:01:54,670
the engine property is going to be populated with the actual engine values.

39
00:01:54,670 --> 00:01:56,060
So not riff idea.

40
00:01:56,060 --> 00:02:00,070
Maybe, but the actual documents or the framework is going to do that.

41
00:02:00,070 --> 00:02:04,080
Documents fetching for you, which is a great thing.

42
00:02:04,080 --> 00:02:06,410
Let's also discuss inserts.

43
00:02:06,410 --> 00:02:09,040
Let's assume you're creating a new aircraft.

44
00:02:09,040 --> 00:02:11,750
Then we're assigning a new engine to it,

45
00:02:11,750 --> 00:02:15,410
and you call the insert method on the aircraft repositories.

46
00:02:15,410 --> 00:02:17,770
If you've been using relational databases,

47
00:02:17,770 --> 00:02:22,150
you would expect that at this stage both the aircraft and the

48
00:02:22,150 --> 00:02:25,440
engine documents should be inserted in the database.

49
00:02:25,440 --> 00:02:27,260
But it is the case in Mongo.

50
00:02:27,260 --> 00:02:29,410
You won't get an error after executing this coat.

51
00:02:29,410 --> 00:02:31,400
Which is a good thing, however,

52
00:02:31,400 --> 00:02:35,740
engine is not getting saved in the engine collection.

53
00:02:35,740 --> 00:02:39,410
What I'm trying to say here is that Cascading does not

54
00:02:39,410 --> 00:02:45,460
work with __ riffs on Save by Default, so you have to do things differently.

55
00:02:45,460 --> 00:02:48,770
The easiest fix is tau actually saved the engine.

56
00:02:48,770 --> 00:02:54,080
First, assign it toe aircraft and then insert the aircraft,

57
00:02:54,080 --> 00:02:58,210
so you need to save the reference document first and the parent document.

58
00:02:58,210 --> 00:02:59,610
After that,

59
00:02:59,610 --> 00:03:03,640
the at the Bureau of Sanitation can also be customized in order to

60
00:03:03,640 --> 00:03:06,530
let the framework know how to fetch the documents.

61
00:03:06,530 --> 00:03:12,410
For us, it can use either eager loading or lazy loading.

62
00:03:12,410 --> 00:03:17,560
Now, by default, Addy be ref is struck the framework to perform any girl out.

63
00:03:17,560 --> 00:03:21,720
You can change that by modifying the lazy property off the

64
00:03:21,720 --> 00:03:24,770
ATI brief annotation and stated to truth.

65
00:03:24,770 --> 00:03:25,550
In this case,

66
00:03:25,550 --> 00:03:32,080
the sub document is loaded on Lee when one of its fields or methods is accessed.

67
00:03:32,080 --> 00:03:35,040
Now, this is not something you normally used by default,

68
00:03:35,040 --> 00:03:38,390
but it's pretty useful for bi directional references in

69
00:03:38,390 --> 00:03:41,200
orderto avoid cyclic dependencies.

70
00:03:41,200 --> 00:03:46,350
In this case, if Engine also had a document reference back to aircraft,

71
00:03:46,350 --> 00:03:50,530
then setting the lazy property to true would be very helpful.

72
00:03:50,530 --> 00:03:55,140
Let some of the capabilities that we get in spring when using at the B ref.

73
00:03:55,140 --> 00:03:59,430
First of all, Maddie bereft equates document references.

74
00:03:59,430 --> 00:04:01,430
It uses eager loading by default,

75
00:04:01,430 --> 00:04:04,350
but this can be changed by modifying the lazy property.

76
00:04:04,350 --> 00:04:07,020
The spring framework fetches the reference document for

77
00:04:07,020 --> 00:04:10,000
you and populates the Java object.

78
00:04:10,000 --> 00:04:12,180
You don't have to do anything in this regard.

79
00:04:12,180 --> 00:04:15,340
Cascading on Safe is not available by default,

80
00:04:15,340 --> 00:04:17,010
but luckily for us,

81
00:04:17,010 --> 00:04:21,830
you can hook into Mongol lifecycle events and implement cascading yourself,

82
00:04:21,830 --> 00:04:24,870
and this is what we'll discuss in a few moments.

83
00:04:24,870 --> 00:04:25,650
Until then,

84
00:04:25,650 --> 00:04:27,860
I also want to highlight that you should pay attention to

85
00:04:27,860 --> 00:04:31,120
queries when using related documents.

86
00:04:31,120 --> 00:04:32,430
Let's look at this example.

87
00:04:32,430 --> 00:04:36,580
We have a new aircraft and this aircraft has an agent property.

88
00:04:36,580 --> 00:04:38,680
In this case, we haven't embedded document.

89
00:04:38,680 --> 00:04:42,550
Then, in an aircraft depository, you can search all the aircraft,

90
00:04:42,550 --> 00:04:46,400
for example, by the Max Power property on the engine.

91
00:04:46,400 --> 00:04:50,340
And again, is that Cory annotation like we do over here?

92
00:04:50,340 --> 00:04:53,070
If engine war, a document reference,

93
00:04:53,070 --> 00:04:57,180
then the queen that the post story would not work and this makes sense,

94
00:04:57,180 --> 00:04:57,660
right?

95
00:04:57,660 --> 00:04:59,380
If you're losing tbe refs,

96
00:04:59,380 --> 00:05:03,620
then we don't have a sub document in the engine properties

97
00:05:03,620 --> 00:05:06,230
that we have a riff on I d and the D B.

98
00:05:06,230 --> 00:05:08,540
So filtering can't really work as you saw.

99
00:05:08,540 --> 00:05:12,840
Duckman, referencing in Spring, has both pros and cons.

100
00:05:12,840 --> 00:05:21,000
As always, it's up to you, the developer, to modern your data and meet your particular application needs.

