WEBVTT
1
00:00:00.540 --> 00:00:04.880
[Autogenerated] you are not able to insert documents in Mongo, which is great.

2
00:00:04.880 --> 00:00:08.870
However, documents have a tendency to evolve and change over time.

3
00:00:08.870 --> 00:00:11.420
And that's where updates come in.

4
00:00:11.420 --> 00:00:12.660
In Mongo and spring,

5
00:00:12.660 --> 00:00:16.180
we have two of the types can update single documents or

6
00:00:16.180 --> 00:00:18.090
we can update multiple documents.

7
00:00:18.090 --> 00:00:20.750
This is also called Batch Update.

8
00:00:20.750 --> 00:00:25.640
The sicker look at an example we are retrieving an airport by its I.

9
00:00:25.640 --> 00:00:26.130
D.

10
00:00:26.130 --> 00:00:29.210
And we assigned to the variable code OTP.

11
00:00:29.210 --> 00:00:33.740
By the way, OTP is the code for Bucharest International Airport.

12
00:00:33.740 --> 00:00:35.930
At this stage, we have these documents.

13
00:00:35.930 --> 00:00:39.620
Then we are updating a couple of properties the flights

14
00:00:39.620 --> 00:00:42.470
per day and the proximity weather.

15
00:00:42.470 --> 00:00:47.390
Then we called the safe method and passing the modified object.

16
00:00:47.390 --> 00:00:50.880
At this point, our document was updated.

17
00:00:50.880 --> 00:00:56.490
We now have 3000 flights per day, and the proximity weather was set.

18
00:00:56.490 --> 00:00:56.970
Drink.

19
00:00:56.970 --> 00:01:03.250
The safe method is away toe update single documents in mongo, Debbie and Spring.

20
00:01:03.250 --> 00:01:06.210
But save does more than that.

21
00:01:06.210 --> 00:01:09.500
Save scares the entire collection and tries to find

22
00:01:09.500 --> 00:01:11.940
a document with a matching I d.

23
00:01:11.940 --> 00:01:16.880
If no document is found for that provided I d then save acts like insert.

24
00:01:16.880 --> 00:01:19.370
A new document is created with the provided i D.

25
00:01:19.370 --> 00:01:21.000
If a document is found,

26
00:01:21.000 --> 00:01:24.380
then it is completely replaced with a previous one

27
00:01:24.380 --> 00:01:26.670
and I mean completely replaced.

28
00:01:26.670 --> 00:01:31.890
It doesn't matter if you change one field or all the fields in your document.

29
00:01:31.890 --> 00:01:32.790
Therefore,

30
00:01:32.790 --> 00:01:35.960
I would argue that the safe method should really be called

31
00:01:35.960 --> 00:01:39.130
insert or update because the name is misleading.

32
00:01:39.130 --> 00:01:41.020
It doesn't just do update.

33
00:01:41.020 --> 00:01:45.910
It does, ah, lot more than that and it can get you into subtle problems.

34
00:01:45.910 --> 00:01:46.670
At this point,

35
00:01:46.670 --> 00:01:51.420
I think a comparison between the two methods in certain safe is quite welcomed.

36
00:01:51.420 --> 00:01:54.840
Let's start with dessert when we do not provide an I D,

37
00:01:54.840 --> 00:02:00.040
then on ideas generated for us and the document is inserted in the collection.

38
00:02:00.040 --> 00:02:02.090
If we provide our own I D.

39
00:02:02.090 --> 00:02:04.540
And that idea is not already present,

40
00:02:04.540 --> 00:02:08.460
then is certain it is that I d to say the document in the collection.

41
00:02:08.460 --> 00:02:13.270
If we provide a new already existing i d, that an error is going to be thrown.

42
00:02:13.270 --> 00:02:16.570
The third also has batch operation support via the insert.

43
00:02:16.570 --> 00:02:21.310
Many method See if, on the other hand, when we do not provide an i d,

44
00:02:21.310 --> 00:02:24.210
it generates one any sense the document in the collection,

45
00:02:24.210 --> 00:02:27.200
so it works like concert for this scenario,

46
00:02:27.200 --> 00:02:29.400
when we provide an existing I D.

47
00:02:29.400 --> 00:02:31.030
If it is not already present,

48
00:02:31.030 --> 00:02:34.510
then it inserts the document in the collection using that I d.

49
00:02:34.510 --> 00:02:38.020
Again up until now, safe works exact, like concert.

50
00:02:38.020 --> 00:02:40.840
But when an existing ideas found,

51
00:02:40.840 --> 00:02:44.530
then it completely authorized the document with the new values that we

52
00:02:44.530 --> 00:02:49.390
provide and also save does not have batch operations support.

53
00:02:49.390 --> 00:02:52.210
My advice to you, based on my experience,

54
00:02:52.210 --> 00:02:56.860
is to use insert for new documents and save for updates.

55
00:02:56.860 --> 00:03:02.290
Do not you save for inserts and updates just because it feels easier?

56
00:03:02.290 --> 00:03:06.240
You know, because you can get into subtle problems and you'll have,

57
00:03:06.240 --> 00:03:09.340
ah, hard time Frank Understand was going on.

58
00:03:09.340 --> 00:03:09.970
Also,

59
00:03:09.970 --> 00:03:12.460
you're making things more explicit if you're using

60
00:03:12.460 --> 00:03:14.990
inserts for inserts and safe for updates.

61
00:03:14.990 --> 00:03:17.860
We're making a clear distinction between these two operations,

62
00:03:17.860 --> 00:03:20.740
and that's always a good thing in programming.

63
00:03:20.740 --> 00:03:23.500
What about batch of its we mentioned earlier?

64
00:03:23.500 --> 00:03:27.500
That save does not offer us a batch support.

65
00:03:27.500 --> 00:03:28.550
Luckily for us,

66
00:03:28.550 --> 00:03:30.900
there are other methods on mongo template that we

67
00:03:30.900 --> 00:03:33.630
can use to perform batch updates.

68
00:03:33.630 --> 00:03:35.880
But first I want to talk about the process.

69
00:03:35.880 --> 00:03:41.640
We have to retrieve the documents that we want to update using the query object.

70
00:03:41.640 --> 00:03:45.850
Then we have to define the feels that he wants to update and

71
00:03:45.850 --> 00:03:49.340
provide the new values for those particular fields.

72
00:03:49.340 --> 00:03:50.100
After that,

73
00:03:50.100 --> 00:03:52.590
we can update those fields using the update Muti

74
00:03:52.590 --> 00:03:54.520
method on the Mongol temperate class.

75
00:03:54.520 --> 00:03:55.810
Let's an example.

76
00:03:55.810 --> 00:03:59.780
I want to update all the airports in Romania and change the weather.

77
00:03:59.780 --> 00:04:04.780
So I'm creating a query exactly what we did in the previous module.

78
00:04:04.780 --> 00:04:08.050
I'm adding a criteria where country is Romania and

79
00:04:08.050 --> 00:04:10.580
then I'm creating this update object.

80
00:04:10.580 --> 00:04:15.470
We have a friend interface and we use the update method on the left.

81
00:04:15.470 --> 00:04:20.700
We have the field that won't change, and on the right, we have the new value.

82
00:04:20.700 --> 00:04:22.450
Then we're using Mongol template.

83
00:04:22.450 --> 00:04:24.600
We're calling the obvious motive method,

84
00:04:24.600 --> 00:04:28.700
and we're passing in the airport that want to update,

85
00:04:28.700 --> 00:04:32.140
and we're passing in the update object in our case,

86
00:04:32.140 --> 00:04:34.190
said weather and of course,

87
00:04:34.190 --> 00:04:37.490
the type of the document airport class and it's super from

88
00:04:37.490 --> 00:04:42.090
this batch update and change proximity weather field in all

89
00:04:42.090 --> 00:04:44.200
of the targeted documents,

90
00:04:44.200 --> 00:04:48.540
we also have a variation of this method called update First,

91
00:04:48.540 --> 00:04:49.540
the recipe is the same.

92
00:04:49.540 --> 00:04:50.120
However.

93
00:04:50.120 --> 00:04:56.270
Update first, just modifies the first documents retrieved by the quarry.

94
00:04:56.270 --> 00:04:57.790
Not all the documents.

95
00:04:57.790 --> 00:04:59.160
So if your quarry returns,

96
00:04:59.160 --> 00:05:03.230
one document an update first is definitely your choice.

97
00:05:03.230 --> 00:05:04.740
I know that I'm repeating myself,

98
00:05:04.740 --> 00:05:09.380
but this is really important when you're raising up dead movie or a bit first.

99
00:05:09.380 --> 00:05:19.000
Only the fields defined the update object are affected, not the whole document. It's a pretty important distinction.

