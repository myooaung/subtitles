1
00:00:01,300 --> 00:00:02,500
[Autogenerated] we can't call his model,

2
00:00:02,500 --> 00:00:06,150
complete without a discussion about mongo converters.

3
00:00:06,150 --> 00:00:10,360
Among go converter is the feature used to map all Java types to and

4
00:00:10,360 --> 00:00:13,900
from the corresponding mongo that are based objects.

5
00:00:13,900 --> 00:00:19,410
So it's all about mapping Java types to mongo database types,

6
00:00:19,410 --> 00:00:21,770
and by default, Spring is very smart.

7
00:00:21,770 --> 00:00:25,660
He knows how to map most of the Java types for us, you know, so to map.

8
00:00:25,660 --> 00:00:28,210
Usually these are strings object ladies,

9
00:00:28,210 --> 00:00:32,420
you know, so to map java integers or doubles numbers,

10
00:00:32,420 --> 00:00:35,710
how to embed objects and so on and so forth.

11
00:00:35,710 --> 00:00:39,430
If Spring is so smart, then why are we having this conversation?

12
00:00:39,430 --> 00:00:39,790
Well,

13
00:00:39,790 --> 00:00:42,800
because sometimes you might want to change the way

14
00:00:42,800 --> 00:00:45,010
that this conversion is taking place.

15
00:00:45,010 --> 00:00:48,940
You might want to change how particular Java type is

16
00:00:48,940 --> 00:00:52,120
mapped to its corresponding manga type,

17
00:00:52,120 --> 00:00:54,300
and that's where converters coming to play.

18
00:00:54,300 --> 00:00:58,140
Luckily for us, it's extremely easy to create a custom converter.

19
00:00:58,140 --> 00:01:00,690
The first step is to create a right converter,

20
00:01:00,690 --> 00:01:03,400
so from the Java type to the Mongol type,

21
00:01:03,400 --> 00:01:05,820
then you have to create the opposite converter,

22
00:01:05,820 --> 00:01:10,940
the reed converter from a manga, a type to the Java type and last but not least,

23
00:01:10,940 --> 00:01:14,250
have to register these converters as a spring bean,

24
00:01:14,250 --> 00:01:17,000
and this will allow you to spring application to pick these up and

25
00:01:17,000 --> 00:01:20,410
use them when performing these type conversions.

26
00:01:20,410 --> 00:01:22,240
Let's look at a particular example.

27
00:01:22,240 --> 00:01:24,980
We have this person class with three fields.

28
00:01:24,980 --> 00:01:25,320
I D.

29
00:01:25,320 --> 00:01:29,210
Name and address Person is a document and address is

30
00:01:29,210 --> 00:01:33,410
a sub document and by default, without touching converters,

31
00:01:33,410 --> 00:01:33,670
you know,

32
00:01:33,670 --> 00:01:37,160
you can see on the right how this object is going to be saved in spring,

33
00:01:37,160 --> 00:01:40,240
so address is going to be any better document.

34
00:01:40,240 --> 00:01:45,240
However, let's assume that you want to serialize address as a string HQ.

35
00:01:45,240 --> 00:01:47,910
We have address as an object in Java,

36
00:01:47,910 --> 00:01:51,700
but you want to convert it to a string in Mongo and then,

37
00:01:51,700 --> 00:01:53,340
when we are achieving it from uncle,

38
00:01:53,340 --> 00:01:57,740
want to convert it from a string to this address object.

39
00:01:57,740 --> 00:02:01,190
That's where a Mongol converter can help us a lot,

40
00:02:01,190 --> 00:02:03,650
so let's go ahead and implementers converters.

41
00:02:03,650 --> 00:02:08,040
Like I said, we have to convert this a right converter and the reed converter.

42
00:02:08,040 --> 00:02:09,810
When you're creating a custom monger converter,

43
00:02:09,810 --> 00:02:12,700
we have to implement the converter interface.

44
00:02:12,700 --> 00:02:14,890
The converter interface needs two types,

45
00:02:14,890 --> 00:02:18,770
the source and the destination when we're creating a right converter.

46
00:02:18,770 --> 00:02:24,120
The source is the type in Java, and the destination is the type in Mongol.

47
00:02:24,120 --> 00:02:28,220
Then we have this convert method which converts an address to a string.

48
00:02:28,220 --> 00:02:29,670
This is a very simple logic.

49
00:02:29,670 --> 00:02:32,540
We are returning address dot Get city on.

50
00:02:32,540 --> 00:02:37,910
We're concatenation gated address that get country Now in the rich converter,

51
00:02:37,910 --> 00:02:41,020
the source is the string because that's what saved the mongo.

52
00:02:41,020 --> 00:02:42,590
And the destination is the address.

53
00:02:42,590 --> 00:02:45,860
Because that's what you have defines knowledge of a class again.

54
00:02:45,860 --> 00:02:47,700
We have this convert method,

55
00:02:47,700 --> 00:02:50,220
and this time we're splitting the string and there may be

56
00:02:50,220 --> 00:02:54,140
creating a new address object and returning it.

57
00:02:54,140 --> 00:02:58,030
All right, we have defined the converters, and now we need to register them.

58
00:02:58,030 --> 00:03:02,160
We have to register this mongo custom conversions type.

59
00:03:02,160 --> 00:03:04,580
So we annotated with that bean.

60
00:03:04,580 --> 00:03:07,600
And here we're creating an interest of converters.

61
00:03:07,600 --> 00:03:10,770
And we're adding in the address, right converter and the address,

62
00:03:10,770 --> 00:03:11,710
right converter,

63
00:03:11,710 --> 00:03:15,340
and then be returning a new instance of Manco Causton conversions and

64
00:03:15,340 --> 00:03:18,030
we're passing in the converters that we just created.

65
00:03:18,030 --> 00:03:21,820
Now we can register this being in any class which is

66
00:03:21,820 --> 00:03:23,940
annotated with that configuration.

67
00:03:23,940 --> 00:03:27,220
If you're using spin boot, then it can be the main application.

68
00:03:27,220 --> 00:03:27,710
Plus,

69
00:03:27,710 --> 00:03:31,290
else know any class identity without configuration

70
00:03:31,290 --> 00:03:33,240
can Support is being definition.

71
00:03:33,240 --> 00:03:35,520
When we're persisting person objects,

72
00:03:35,520 --> 00:03:44,000
the address is going to be stored as a string in Mongo and as an object in Java, which is exactly what we expected.

