WEBVTT
1
00:00:00.720 --> 00:00:02.080
[Autogenerated] I don't know about you,

2
00:00:02.080 --> 00:00:05.920
but I feel a demo would be very welcomed right now.

3
00:00:05.920 --> 00:00:11.140
So let's go ahead and implement and execute Mila queries In spring applications,

4
00:00:11.140 --> 00:00:15.890
we will explore filtering ranging from simple to advanced was Take a look at

5
00:00:15.890 --> 00:00:20.920
sorting Beijing and finally will implement full tech search.

6
00:00:20.920 --> 00:00:24.980
So let's get to work before we can implement queries.

7
00:00:24.980 --> 00:00:28.340
We have toe add some information into the database,

8
00:00:28.340 --> 00:00:32.380
so to do liberty and created six documents in the

9
00:00:32.380 --> 00:00:34.700
airport management flights collection.

10
00:00:34.700 --> 00:00:37.880
So we have a couple of flights over here with various

11
00:00:37.880 --> 00:00:40.830
properties that will help us write enquiries.

12
00:00:40.830 --> 00:00:41.320
Awesome.

13
00:00:41.320 --> 00:00:43.130
Now we can start to write some coat.

14
00:00:43.130 --> 00:00:46.520
This is the application, as you left it in our previous module.

15
00:00:46.520 --> 00:00:47.730
I hope you remember it.

16
00:00:47.730 --> 00:00:50.640
Flight information was the main entity.

17
00:00:50.640 --> 00:00:53.820
It is the class that we're going to persist in mongo TB.

18
00:00:53.820 --> 00:00:56.430
Now, let's go ahead and implement some queries.

19
00:00:56.430 --> 00:00:59.820
I created this package parasite,

20
00:00:59.820 --> 00:01:03.330
airport management queries and I have this empty class over here.

21
00:01:03.330 --> 00:01:07.090
Flight information queries.

22
00:01:07.090 --> 00:01:10.530
Flight information queries is an outdated with at service because

23
00:01:10.530 --> 00:01:14.070
I want to inject it in our spring application.

24
00:01:14.070 --> 00:01:16.540
Now you can altitude with our component also,

25
00:01:16.540 --> 00:01:19.590
But I really believe that this class is really a service,

26
00:01:19.590 --> 00:01:23.180
So I wanted to make things as explicit as possible.

27
00:01:23.180 --> 00:01:26.690
The first thing that we need to do before you write any operation against

28
00:01:26.690 --> 00:01:29.940
the Mongol database ist injected the manga template.

29
00:01:29.940 --> 00:01:31.920
And this is what we did over here.

30
00:01:31.920 --> 00:01:34.080
Have a private Molitor pretty yield,

31
00:01:34.080 --> 00:01:37.320
which is injected via the constructor and then

32
00:01:37.320 --> 00:01:39.520
spring will take care of the rest.

33
00:01:39.520 --> 00:01:44.120
In the comments, you can see all the requirements that are expected of us.

34
00:01:44.120 --> 00:01:49.010
We have to build queries that tree of all the flights with Beijing and sorting.

35
00:01:49.010 --> 00:01:51.720
You have to retrieved flights by D.

36
00:01:51.720 --> 00:01:53.960
You have to count all the international sites.

37
00:01:53.960 --> 00:01:58.190
And then we have to provide methods to find all the flights by departure city,

38
00:01:58.190 --> 00:02:01.370
all the flight through the duration between them in a max,

39
00:02:01.370 --> 00:02:04.920
all the flights delayed at a particular airport,

40
00:02:04.920 --> 00:02:08.930
flights that are on time and that relate to a particular city and to

41
00:02:08.930 --> 00:02:12.900
find fights by aircraft module who have a lot to do.

42
00:02:12.900 --> 00:02:14.980
So let's get to work.

43
00:02:14.980 --> 00:02:20.940
I'm going to deliver a comment and rather queries using some snippet magic.

44
00:02:20.940 --> 00:02:21.790
Brilliant.

45
00:02:21.790 --> 00:02:25.420
Let's take a look at these queries we have find all

46
00:02:25.420 --> 00:02:27.590
over here we define the query.

47
00:02:27.590 --> 00:02:30.430
We name it all paged and ordered.

48
00:02:30.430 --> 00:02:32.650
And then we define an empty query.

49
00:02:32.650 --> 00:02:35.760
Remember, want to find all the flight information?

50
00:02:35.760 --> 00:02:38.050
So we do not have to provide criteria but you to

51
00:02:38.050 --> 00:02:42.280
provide sorting and imagination and, of course,

52
00:02:42.280 --> 00:02:44.870
used the Mongol template we call the fine method

53
00:02:44.870 --> 00:02:47.160
personal query and the flight information.

54
00:02:47.160 --> 00:02:52.750
That class type find single bidi is simpler because we just have to delegate

55
00:02:52.750 --> 00:02:56.460
the coal to find by any method on the Mongol template.

56
00:02:56.460 --> 00:03:00.740
Then we need to count all the international flights and return their number.

57
00:03:00.740 --> 00:03:07.290
We're building a new query we add in this criteria where type is international,

58
00:03:07.290 --> 00:03:10.150
and then we're using the current method on the mobile

59
00:03:10.150 --> 00:03:12.980
temple class to retrieve that number.

60
00:03:12.980 --> 00:03:16.000
We can also find flights by departure.

61
00:03:16.000 --> 00:03:17.150
We create a new query.

62
00:03:17.150 --> 00:03:18.320
We call it by departure,

63
00:03:18.320 --> 00:03:22.620
and we add in this criteria where departure is departure,

64
00:03:22.620 --> 00:03:26.460
the string that we will receive in his method and then we delegated

65
00:03:26.460 --> 00:03:29.320
to the fine method on the model of the class.

66
00:03:29.320 --> 00:03:31.510
There's go to something a little bit more complex.

67
00:03:31.510 --> 00:03:34.110
Let's find all the flights that have a duration

68
00:03:34.110 --> 00:03:36.490
between a mean and the max value.

69
00:03:36.490 --> 00:03:39.550
The greatest query over here by duration between,

70
00:03:39.550 --> 00:03:43.340
we add in the criteria on the duration mean field.

71
00:03:43.340 --> 00:03:46.830
And then we change together two operators greater than or

72
00:03:46.830 --> 00:03:50.440
equals and then less than equals every passing the mean

73
00:03:50.440 --> 00:03:51.720
and the max number of minutes.

74
00:03:51.720 --> 00:03:55.970
And then we are sorting his result in a descending order

75
00:03:55.970 --> 00:04:01.180
by the flight duration off course, we pass this to the Mongol template,

76
00:04:01.180 --> 00:04:03.100
find method and that's it.

77
00:04:03.100 --> 00:04:07.640
If you want to find all the delayed flights at a particular departure,

78
00:04:07.640 --> 00:04:11.700
we can use this quarry delayed a departure.

79
00:04:11.700 --> 00:04:13.450
We have two criteria.

80
00:04:13.450 --> 00:04:17.320
The first criteria is to fill their flights that are delayed.

81
00:04:17.320 --> 00:04:19.930
We have this over here where delayed is true,

82
00:04:19.930 --> 00:04:22.290
and then we can use the second criteria.

83
00:04:22.290 --> 00:04:27.890
Using the end method and departure is the departure city,

84
00:04:27.890 --> 00:04:31.270
and this is how we can chain toe criteria together.

85
00:04:31.270 --> 00:04:35.940
Let's find all the fights related to a city that that are not delayed.

86
00:04:35.940 --> 00:04:36.310
Here.

87
00:04:36.310 --> 00:04:38.710
Things get really interesting because you have to use our

88
00:04:38.710 --> 00:04:44.090
operators and end operators so it gives our query and we add

89
00:04:44.090 --> 00:04:46.630
in this criteria in the operator,

90
00:04:46.630 --> 00:04:49.470
we want to fill their flights that relates to a given city.

91
00:04:49.470 --> 00:04:54.200
So where the destination or departure is equal to that city

92
00:04:54.200 --> 00:04:57.300
And then I also want to restrict the slights and make sure

93
00:04:57.300 --> 00:04:58.860
that they're not the late.

94
00:04:58.860 --> 00:05:01.240
That's why we use the end operator over here.

95
00:05:01.240 --> 00:05:04.320
A passing the appropriate criteria.

96
00:05:04.320 --> 00:05:08.650
We can see how easy it is to build queries using this fluent interface.

97
00:05:08.650 --> 00:05:12.000
They all follow the same recipe unless banalities you want to

98
00:05:12.000 --> 00:05:14.240
find all the fat information by aircraft.

99
00:05:14.240 --> 00:05:16.020
So again, rebuilding a criteria.

100
00:05:16.020 --> 00:05:20.350
And look at the syntax over here where aircraft that model is

101
00:05:20.350 --> 00:05:23.900
aircraft aircraft is a property of flight information and

102
00:05:23.900 --> 00:05:25.990
model is a property on aircraft.

103
00:05:25.990 --> 00:05:30.300
And remember, we can perform queries in sub documents.

104
00:05:30.300 --> 00:05:33.480
I want to execute all queries using the application Rommel class.

105
00:05:33.480 --> 00:05:35.590
This class implements the command line runner,

106
00:05:35.590 --> 00:05:37.870
and if you remember from the previous module,

107
00:05:37.870 --> 00:05:42.110
Camaro and runners are executed after a spring application is bootstrapped.

108
00:05:42.110 --> 00:05:44.860
We have a dependency on flight information that

109
00:05:44.860 --> 00:05:48.840
will inject together constructor, and then we have this run method over here.

110
00:05:48.840 --> 00:05:53.010
So again, we're going to use some intelligent e snippet magic,

111
00:05:53.010 --> 00:05:56.460
and we're going to run all of our queries and they look the same

112
00:05:56.460 --> 00:05:59.440
from we're printing the query that execute.

113
00:05:59.440 --> 00:06:03.830
And then we are calling every method on the flight information Cory

114
00:06:03.830 --> 00:06:07.820
Service and then reaching the flight printer class to print the

115
00:06:07.820 --> 00:06:11.020
result for every query that we have defined.

116
00:06:11.020 --> 00:06:12.340
So go ahead.

117
00:06:12.340 --> 00:06:17.680
We run the application and it's all come that we get and we have all the results

118
00:06:17.680 --> 00:06:21.040
displayed here and let's let's take a look at the particular quality a part of

119
00:06:21.040 --> 00:06:24.210
New York can see that only one result displayed.

120
00:06:24.210 --> 00:06:28.380
Then we have delayed departures as given airport and the airport is Madrid.

121
00:06:28.380 --> 00:06:29.870
So the State Department red.

122
00:06:29.870 --> 00:06:31.860
And we also see that the flight is delayed.

123
00:06:31.860 --> 00:06:34.750
It appears that all of our careers have worked successfully,

124
00:06:34.750 --> 00:06:37.350
which is just amazing.

125
00:06:37.350 --> 00:06:41.870
I don't know about you, but I'm very eager to implement a full tech search.

126
00:06:41.870 --> 00:06:44.220
The first thing that we need to do to implement food

127
00:06:44.220 --> 00:06:46.320
tech search is to use the annotations,

128
00:06:46.320 --> 00:06:52.240
the at text indexed annotations as a deliberate Ito Adam on the departure city.

129
00:06:52.240 --> 00:06:52.790
This nation,

130
00:06:52.790 --> 00:06:57.650
city and description not is that the text index on the

131
00:06:57.650 --> 00:07:00.780
description has a weight off to We shall see how this

132
00:07:00.780 --> 00:07:04.210
affect the search results later on.

133
00:07:04.210 --> 00:07:06.220
Now let's go back of the flight information,

134
00:07:06.220 --> 00:07:09.950
quits class and adding a new worry for free tech search.

135
00:07:09.950 --> 00:07:12.540
And let's take a good look at his method.

136
00:07:12.540 --> 00:07:16.420
This method receives a string call text does the free text

137
00:07:16.420 --> 00:07:19.030
by which you want to perform the search.

138
00:07:19.030 --> 00:07:23.520
Then we define or text criteria a special type off criteria.

139
00:07:23.520 --> 00:07:28.110
This criteria depends on the language in which you want to perform the search.

140
00:07:28.110 --> 00:07:28.740
In our case,

141
00:07:28.740 --> 00:07:32.050
we just use the default system language and then we're

142
00:07:32.050 --> 00:07:34.650
going to match against the given text.

143
00:07:34.650 --> 00:07:36.110
Not that we have our text criteria.

144
00:07:36.110 --> 00:07:39.580
Just go ahead and build a query will name it by free text,

145
00:07:39.580 --> 00:07:44.850
and we're going to create it by using text query that pretext method.

146
00:07:44.850 --> 00:07:47.290
And then we're going to pass in the text bacteria.

147
00:07:47.290 --> 00:07:49.750
We're going to sort the results by the score.

148
00:07:49.750 --> 00:07:54.680
And the score is the internal score that Mangal will compute for the free

149
00:07:54.680 --> 00:07:57.620
tech search based on the weights of the text in Texas.

150
00:07:57.620 --> 00:08:00.360
And then we're going to patch in it this and return

151
00:08:00.360 --> 00:08:02.180
the first page with free results.

152
00:08:02.180 --> 00:08:05.290
We're going to pass this to the Mongol template and executed.

153
00:08:05.290 --> 00:08:08.770
The last piece of the puzzle is to actually execute that coat we're going toe,

154
00:08:08.770 --> 00:08:10.160
print all the flights,

155
00:08:10.160 --> 00:08:12.230
and then we're going to call the fine by free text

156
00:08:12.230 --> 00:08:15.140
method and pass in the text off room.

157
00:08:15.140 --> 00:08:19.860
Let's run the application and see what's happening, and we have our results.

158
00:08:19.860 --> 00:08:22.630
All the fights are displayed above and are free text.

159
00:08:22.630 --> 00:08:24.350
Search my room, which is paid below.

160
00:08:24.350 --> 00:08:26.540
Look at the order of these documents.

161
00:08:26.540 --> 00:08:30.050
The 1st 1 is the flight from Rome to Paris is the 1st 1 because it

162
00:08:30.050 --> 00:08:33.540
contains room both in departure and the description.

163
00:08:33.540 --> 00:08:37.010
The 2nd 1 is New York to Copenhagen,

164
00:08:37.010 --> 00:08:41.070
and it was selected because it contains Rome in the description.

165
00:08:41.070 --> 00:08:43.340
Remember, that description has a bigger weight,

166
00:08:43.340 --> 00:08:47.300
and the last point is Bucharest to Rome and as the last one,

167
00:08:47.300 --> 00:08:49.830
because it only contains room the destination.

168
00:08:49.830 --> 00:08:50.410
Now, of course,

169
00:08:50.410 --> 00:08:54.460
you might argue that the way we created the weights is not correct,

170
00:08:54.460 --> 00:08:57.720
because we would expect that bequest to wrong to be

171
00:08:57.720 --> 00:09:00.360
situated above your to Copenhagen.

172
00:09:00.360 --> 00:09:07.000
But that's exactly what I wanted to point out the importance of weights when you're using text indexes

