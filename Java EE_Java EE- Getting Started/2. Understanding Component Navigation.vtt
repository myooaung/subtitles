WEBVTT
1
00:00:02.832 --> 00:00:06.659
Let's first understand what navigation is.

2
00:00:06.659 --> 00:00:11.214
Actually the browser is a familiar model of navigation.

3
00:00:11.214 --> 00:00:14.641
Enter a URL in the address bar and the browser

4
00:00:14.641 --> 00:00:16.568
navigates to the corresponding page.

5
00:00:16.568 --> 00:00:23.109
Click a link on the page and the browser navigates to a new page.

6
00:00:23.109 --> 00:00:28.351
Click the browser's back and forward buttons and the browser navigates

7
00:00:28.351 --> 00:00:31.676
backwards and forwards through the history of pages.

8
00:00:31.676 --> 00:00:36.043
The Angular router borrows from this model.

9
00:00:36.043 --> 00:00:40.631
It can interpret a browser URL and navigate to a component,

10
00:00:40.631 --> 00:00:48.032
passing optional parameters as well as executing some business code.

11
00:00:48.032 --> 00:00:50.521
What we've done so far is aggregating all our

12
00:00:50.521 --> 00:00:52.695
components into a single main component,

13
00:00:52.695 --> 00:00:54.831
the main app component.

14
00:00:54.831 --> 00:00:58.409
So we have the book-list, book-detail,

15
00:00:58.409 --> 00:01:03.856
and book-form components all stuck together.

16
00:01:03.856 --> 00:01:08.143
The way we did is that we've added the component selector names,

17
00:01:08.143 --> 00:01:12.478
bs-book-list, bs-book-detail, and bs-book-form,

18
00:01:12.478 --> 00:01:17.897
all in the same page.

19
00:01:17.897 --> 00:01:22.630
Instead what we want is to have a single component,

20
00:01:22.630 --> 00:01:27.326
here book-list, and when clicking on the menu or button,

21
00:01:27.326 --> 00:01:34.563
navigate to book-detail or book-form, one component at a time.

22
00:01:34.563 --> 00:01:39.908
To do that we no longer have to specify each component by its name.

23
00:01:39.908 --> 00:01:45.724
Instead, we use the special Angular tag router-outlet.

24
00:01:45.724 --> 00:01:49.209
This means that our components will be displayed here

25
00:01:49.209 --> 00:01:52.340
instead of the tag router-outlet.

26
00:01:52.340 --> 00:01:59.158
When we bootstrap our application, thanks to Angular CLI,

27
00:01:59.158 --> 00:02:02.453
we got an empty AppRoutingModule.

28
00:02:02.453 --> 00:02:07.394
This is where all routes of the application are defined.

29
00:02:07.394 --> 00:02:12.721
Here the constant routes defines an array of routes.

30
00:02:12.721 --> 00:02:16.866
A route is made of a path and a component.

31
00:02:16.866 --> 00:02:21.091
What we are saying here is if the URL is something

32
00:02:21.091 --> 00:02:23.003
like localhost 8080/book-list,

33
00:02:23.003 --> 00:02:29.517
then the Angular router needs to execute the BookListComponent.

34
00:02:29.517 --> 00:02:35.981
If the URL changes to book-form, then it executes the BookFormComponent.

35
00:02:35.981 --> 00:02:42.916
If no URL is specified, that means it's the home page,

36
00:02:42.916 --> 00:02:47.046
then the router executes the BookListComponent.

37
00:02:47.046 --> 00:02:51.367
Book-list and book-form has the pass that we use on our

38
00:02:51.367 --> 00:02:55.922
HTML or TypeScript components to navigate.

39
00:02:55.922 --> 00:02:59.755
Now let's take the navigate bar of our BookStore application.

40
00:02:59.755 --> 00:03:02.665
When we click on the menu list,

41
00:03:02.665 --> 00:03:08.687
we use the routerLink directive and pass it the path we just defined,

42
00:03:08.687 --> 00:03:09.180
book-list.

43
00:03:09.180 --> 00:03:15.081
This will execute the BookListComponent so the list of components will show up.

44
00:03:15.081 --> 00:03:16.786
Clicking on Create,

45
00:03:16.786 --> 00:03:29.000
we'll use the path book-form and therefore execute the BookFormComponent. This will display the form to create a new book.

