1
00:00:02,410 --> 00:00:07,247
An Angular application is comprised of a set of components.

2
00:00:07,247 --> 00:00:13,390
A component is an encapsulation of a visual aspect and a behavior.

3
00:00:13,390 --> 00:00:20,829
On the web the visual aspect of a component is made through HTML and CSS.

4
00:00:20,829 --> 00:00:24,423
Imagine a button, a calendar or color picker.

5
00:00:24,423 --> 00:00:30,893
These components have graphical properties such as their color, size, or font.

6
00:00:30,893 --> 00:00:36,529
But component also has behavior through JavaScript or

7
00:00:36,529 --> 00:00:38,747
TypeScript when it comes to Angular.

8
00:00:38,747 --> 00:00:45,098
So when we click on a button or when we choose a color on a color picker,

9
00:00:45,098 --> 00:00:47,472
we can add some behavior.

10
00:00:47,472 --> 00:00:51,521
Components can be simple or complex and they can

11
00:00:51,521 --> 00:00:56,402
represent a single widget or an entire page.

12
00:00:56,402 --> 00:00:58,777
A component can have any granularity,

13
00:00:58,777 --> 00:01:03,670
it depends on the technical and business needs of the application.

14
00:01:03,670 --> 00:01:09,459
For example here, this page can be seen as one single component.

15
00:01:09,459 --> 00:01:12,820
If we don't need to reuse anything,

16
00:01:12,820 --> 00:01:16,251
nor do we need to navigate between components,

17
00:01:16,251 --> 00:01:20,477
we can just bundle everything into a single component.

18
00:01:20,477 --> 00:01:23,992
But we might need finer grain components.

19
00:01:23,992 --> 00:01:24,740
For example,

20
00:01:24,740 --> 00:01:28,480
the navigation bar could be a component on its own

21
00:01:28,480 --> 00:01:31,177
so it can be reused elsewhere.

22
00:01:31,177 --> 00:01:32,526
In our case,

23
00:01:32,526 --> 00:01:37,109
the app component that has been generated is a

24
00:01:37,109 --> 00:01:40,612
component and it embeds several components,

25
00:01:40,612 --> 00:01:46,509
such as the book-list, the book-detail, and the book-form.

26
00:01:46,509 --> 00:01:51,744
Here those components are quite simple, they are just text basically,

27
00:01:51,744 --> 00:01:55,599
but they will get much richer soon.

28
00:01:55,599 --> 00:02:00,239
In Angular, each component is made of three pieces,

29
00:02:00,239 --> 00:02:04,036
the HTML page, also called the template,

30
00:02:04,036 --> 00:02:07,976
represents the visual aspect of the component.

31
00:02:07,976 --> 00:02:12,703
It can be more or less complex, use external component libraries,

32
00:02:12,703 --> 00:02:15,337
or have its own CSS stylesheet.

33
00:02:15,337 --> 00:02:19,821
For the behavior of the component we need a TypeScript class.

34
00:02:19,821 --> 00:02:23,551
That's where we will process the validation of the component,

35
00:02:23,551 --> 00:02:28,729
toggle a visual aspect of the component depending on some business rules,

36
00:02:28,729 --> 00:02:31,941
or invoke the backend through HTTP.

37
00:02:31,941 --> 00:02:35,419
This class contains properties and methods that will be

38
00:02:35,419 --> 00:02:37,706
bound to the template through binding.

39
00:02:37,706 --> 00:02:43,861
You can see the binding being the glue between the template and the class.

40
00:02:43,861 --> 00:02:47,811
Let's see these three pieces in action.

41
00:02:47,811 --> 00:02:53,801
In Angular it is common to suffix our components with component.

42
00:02:53,801 --> 00:02:55,436
html and component.

43
00:02:55,436 --> 00:02:55,982
ts.

44
00:02:55,982 --> 00:03:03,582
So here we have the HTML representation of our main component called app.

45
00:03:03,582 --> 00:03:07,879
So the file is called app.

46
00:03:07,879 --> 00:03:08,595
component.

47
00:03:08,595 --> 00:03:09,311
html.

48
00:03:09,311 --> 00:03:13,344
This HTML represents the navigation bar of our application

49
00:03:13,344 --> 00:03:17,133
with the menu List and another menu Create.

50
00:03:17,133 --> 00:03:24,700
Then comes the TypeScript file, as you can see it is a class called AppComponent,

51
00:03:24,700 --> 00:03:28,531
which imports some Angular dependencies here angular/core.

52
00:03:28,531 --> 00:03:33,605
So far this is just a TypeScript class.

53
00:03:33,605 --> 00:03:36,234
So we need the @Component decorator specifying that

54
00:03:36,234 --> 00:03:39,068
this class is a graphical component.

55
00:03:39,068 --> 00:03:46,292
Two important information with this decorator, the first one is the selector.

56
00:03:46,292 --> 00:03:49,403
This is the name of the component.

57
00:03:49,403 --> 00:03:55,064
Notice the prefix bs that we used when bootstrapping the application.

58
00:03:55,064 --> 00:03:58,439
So this component is called bs-root.

59
00:03:58,439 --> 00:04:02,755
Second, is the template of this component.

60
00:04:02,755 --> 00:04:09,339
Here the templateUrl points at the app.

61
00:04:09,339 --> 00:04:10,279
component.

62
00:04:10,279 --> 00:04:11,220
html.

63
00:04:11,220 --> 00:04:14,827
Now let's say this component has an attribute called title,

64
00:04:14,827 --> 00:04:16,328
which value is BookStore.

65
00:04:16,328 --> 00:04:22,457
If we want to display this title on the page we use property binding.

66
00:04:22,457 --> 00:04:26,100
Notice the curly braces syntax.

67
00:04:26,100 --> 00:04:28,404
When the component is displayed,

68
00:04:28,404 --> 00:04:34,718
the value of the property title will be bound to the page.

69
00:04:34,718 --> 00:04:39,452
This will show BookStore on the navigation bar.

70
00:04:39,452 --> 00:04:42,648
Let's see how to use this component now.

71
00:04:42,648 --> 00:04:46,687
On the right top side, we have an app.

72
00:04:46,687 --> 00:04:48,217
component TypeScript file.

73
00:04:48,217 --> 00:04:53,159
Thanks to the templateUrl this class points to the HTML file.

74
00:04:53,159 --> 00:04:57,573
On the top left side we have our main index.

75
00:04:57,573 --> 00:05:02,520
html page where we need to include our component.

76
00:05:02,520 --> 00:05:05,307
Remember that the component has a selector,

77
00:05:05,307 --> 00:05:08,212
which basically gives it a name, bs-root.

78
00:05:08,212 --> 00:05:14,916
So it's just a matter of using this name as an HTML attribute.

79
00:05:14,916 --> 00:05:16,585
When the index.

80
00:05:16,585 --> 00:05:22,147
html page will get rendered, it will embed the component.

81
00:05:22,147 --> 00:05:24,944
That's the way it works and that's how we will be

82
00:05:24,944 --> 00:05:28,814
embedding our components in this module.

83
00:05:28,814 --> 00:05:34,675
Binding is basically how to glue properties on a page.

84
00:05:34,675 --> 00:05:36,090
We've seen interpolation.

85
00:05:36,090 --> 00:05:41,070
We used two curly braces around a component attribute and

86
00:05:41,070 --> 00:05:45,288
its value gets bound within the HTML.

87
00:05:45,288 --> 00:05:51,803
Interpolation is in fact a shortcut of a different syntax, property binding.

88
00:05:51,803 --> 00:05:57,452
When we need to bind the value of the property book.

89
00:05:57,452 --> 00:05:58,478
title, book.

90
00:05:58,478 --> 00:06:03,199
title is between quotes and the property text

91
00:06:03,199 --> 00:06:06,204
content is between square brackets.

92
00:06:06,204 --> 00:06:07,682
Then comes event binding.

93
00:06:07,682 --> 00:06:12,634
This is the syntax to bind an event instead of a property.

94
00:06:12,634 --> 00:06:14,519
Notice the parenthesis.

95
00:06:14,519 --> 00:06:21,970
On the event click of a button, the method deleteBook is invoked.

96
00:06:21,970 --> 00:06:26,244
Finally, we have the two way binding.

97
00:06:26,244 --> 00:06:31,362
The syntax is made of square brackets followed by parenthesis.

98
00:06:31,362 --> 00:06:34,229
Two way binding, because the property book.

99
00:06:34,229 --> 00:06:37,247
unitCost will be displayed on the page,

100
00:06:37,247 --> 00:06:49,000
but if the value changes it will update a property value. Two way binding is often used on forms, as we will see later.

