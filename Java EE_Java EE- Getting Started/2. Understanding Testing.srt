1
00:00:02,173 --> 00:00:05,561
When we write some code we always face the same challenges,

2
00:00:05,561 --> 00:00:09,290
we like our code to be elegant, maintainable,

3
00:00:09,290 --> 00:00:15,238
to run efficiently and securely, and we want to assert its correctness.

4
00:00:15,238 --> 00:00:18,642
How do we assert that our code works?

5
00:00:18,642 --> 00:00:20,601
Well by testing it.

6
00:00:20,601 --> 00:00:25,777
Of course you could handle this manually by deploying the application

7
00:00:25,777 --> 00:00:30,545
and letting a human user follow a scripted test plan.

8
00:00:30,545 --> 00:00:32,154
But wherever possible,

9
00:00:32,154 --> 00:00:38,100
it's more efficient and fail proof to automate the test execution.

10
00:00:38,100 --> 00:00:43,769
But testing is not simply about making sure our code works as expected,

11
00:00:43,769 --> 00:00:47,953
when we write tests we become the user of our API.

12
00:00:47,953 --> 00:00:54,659
So we see how intuitive it is to use if it's too verbose or ugly.

13
00:00:54,659 --> 00:00:57,013
Tests help us designing our APIs.

14
00:00:57,013 --> 00:01:01,724
If you agree with the saying that code is the documentation,

15
00:01:01,724 --> 00:01:06,634
then testing is a nice way to document the code.

16
00:01:06,634 --> 00:01:10,896
There are several testing strategies, such as smoke test,

17
00:01:10,896 --> 00:01:13,641
acceptance test, system test, performance test,

18
00:01:13,641 --> 00:01:20,103
but I'll just quickly cover unit test and integration test.

19
00:01:20,103 --> 00:01:24,290
The purpose of a unit test is to validate that a single

20
00:01:24,290 --> 00:01:27,745
functionality is operating as expected in isolation.

21
00:01:27,745 --> 00:01:34,620
Unit test are the narrow business scope and are characterized as fast,

22
00:01:34,620 --> 00:01:37,023
simply, easy-to-run, and fine grain.

23
00:01:37,023 --> 00:01:41,777
Part of being a unit test is the implication that things

24
00:01:41,777 --> 00:01:45,423
outside the code should be mocked.

25
00:01:45,423 --> 00:01:50,658
Unit tests shouldn't have dependencies on outside systems.

26
00:01:50,658 --> 00:01:52,079
On the other hand,

27
00:01:52,079 --> 00:01:55,520
an integration test is done to demonstrate that several

28
00:01:55,520 --> 00:01:59,121
pieces of the system work together.

29
00:01:59,121 --> 00:02:02,391
Integration tests cover all applications and they

30
00:02:02,391 --> 00:02:05,990
require much more effort to put together.

31
00:02:05,990 --> 00:02:08,737
They usually require external resources,

32
00:02:08,737 --> 00:02:12,013
like a database or an application server,

33
00:02:12,013 --> 00:02:14,353
that is not mocked out.

34
00:02:14,353 --> 00:02:18,321
The integration tests do a more convincing job of demonstrating

35
00:02:18,321 --> 00:02:32,000
the system works than a set of unit tests can. For unit test we use JUnit and for integration test we add Arquillian.

