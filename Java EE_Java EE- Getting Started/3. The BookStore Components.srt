1
00:00:03,026 --> 00:00:06,180
Now that we know how to develop a component in Angular,

2
00:00:06,180 --> 00:00:11,116
let's see the components we'll be creating for our BookStore application.

3
00:00:11,116 --> 00:00:17,291
As we've seen, the main component has already been created by Angular CLI.

4
00:00:17,291 --> 00:00:20,404
So we already have the app.

5
00:00:20,404 --> 00:00:20,923
component.

6
00:00:20,923 --> 00:00:22,999
html and ts files.

7
00:00:22,999 --> 00:00:29,000
Then we have three main components, the one listing all the books, book-list.

8
00:00:29,000 --> 00:00:32,313
component HTML and TypeScript file.

9
00:00:32,313 --> 00:00:39,515
The one displaying the details of a single book called book-detail.

10
00:00:39,515 --> 00:00:48,126
component and the form to create a new book called book-form.

11
00:00:48,126 --> 00:00:48,922
component.

12
00:00:48,922 --> 00:00:52,757
Let's start with the component listing all the books of the database,

13
00:00:52,757 --> 00:00:53,728
the book-list.

14
00:00:53,728 --> 00:00:54,214
component.

15
00:00:54,214 --> 00:00:57,128
As you can notice, the book-list.

16
00:00:57,128 --> 00:01:00,602
component is the component in the center.

17
00:01:00,602 --> 00:01:03,591
Around it, it's the main app.

18
00:01:03,591 --> 00:01:06,698
component, the one with the navigation bar.

19
00:01:06,698 --> 00:01:09,741
If we only focus on the book-list.

20
00:01:09,741 --> 00:01:14,752
component despite the title of the page showing the number of available books,

21
00:01:14,752 --> 00:01:20,266
we have the book title, image, and description,

22
00:01:20,266 --> 00:01:21,644
repeating itself.

23
00:01:21,644 --> 00:01:26,443
It is the same information iterating through the list of books.

24
00:01:26,443 --> 00:01:30,598
Let's see how we code such components.

25
00:01:30,598 --> 00:01:36,618
As we know now, we need two files, the HTML representation, book-list.

26
00:01:36,618 --> 00:01:37,484
component.

27
00:01:37,484 --> 00:01:41,810
html and the TypeScript file.

28
00:01:41,810 --> 00:01:42,949
The book-list.

29
00:01:42,949 --> 00:01:48,651
component has a component decorator specifying its name and template.

30
00:01:48,651 --> 00:01:54,943
Now let's say this component has a property number of books,

31
00:01:54,943 --> 00:02:00,790
to show this information on the HTML template we use interpolation.

32
00:02:00,790 --> 00:02:07,574
Here the title of the component will be list all the books 3,

33
00:02:07,574 --> 00:02:12,118
3 being the value of the property nbBooks.

34
00:02:12,118 --> 00:02:15,618
Now we need our 3 books.

35
00:02:15,618 --> 00:02:19,999
For that we will use the nice JSON integration in TypeScript

36
00:02:19,999 --> 00:02:24,872
and describe our books using JSON syntax.

37
00:02:24,872 --> 00:02:31,630
We have an array of books with book number 1 and book number 2 and so on.

38
00:02:31,630 --> 00:02:38,159
To iterate through this list in HTML, we use the ngFor directive.

39
00:02:38,159 --> 00:02:43,129
Basically we are binding the ngFor to the books property,

40
00:02:43,129 --> 00:02:46,854
plural, and giving it the name book, singular.

41
00:02:46,854 --> 00:02:51,048
Then it's just a matter of using interpolation to

42
00:02:51,048 --> 00:02:57,045
display the image of the book cover, the book title and description.

43
00:02:57,045 --> 00:03:06,396
When we click on the book title, we go to our second component, the book-detail.

44
00:03:06,396 --> 00:03:07,049
component.

45
00:03:07,049 --> 00:03:13,044
This component displays all the information of the book in read only.

46
00:03:13,044 --> 00:03:16,160
So we get the full description, the unit cost,

47
00:03:16,160 --> 00:03:19,681
the isbn number that has been generated on the backend,

48
00:03:19,681 --> 00:03:25,378
the number of pages and the language it is written in.

49
00:03:25,378 --> 00:03:32,204
To develop this component we need two files, the HTML and the TypeScript.

50
00:03:32,204 --> 00:03:34,831
By now you know that the book-detail.

51
00:03:34,831 --> 00:03:38,497
component class has a component decorator with a

52
00:03:38,497 --> 00:03:41,481
component selector and a templateUrl.

53
00:03:41,481 --> 00:03:45,520
Let's use the same technique as before and declare a

54
00:03:45,520 --> 00:03:48,930
property book with a JSON structure of data.

55
00:03:48,930 --> 00:03:55,119
To display this data in HTML, it's just a matter of using interpolation.

56
00:03:55,119 --> 00:03:56,206
So book.

57
00:03:56,206 --> 00:04:02,498
title in curly braces will display the Title property of book,

58
00:04:02,498 --> 00:04:07,203
the Description, the Unit cost and so on.

59
00:04:07,203 --> 00:04:12,189
The last component is quite identical, it's the form used to create a new book.

60
00:04:12,189 --> 00:04:19,947
It has more or less the same fields, but this time not in read only.

61
00:04:19,947 --> 00:04:23,786
The code is also roughly the same.

62
00:04:23,786 --> 00:04:30,146
The TypeScript class BookFormComponent defines a component with a property book.

63
00:04:30,146 --> 00:04:31,932
Nothing special here.

64
00:04:31,932 --> 00:04:34,393
What defers is the HTML page.

65
00:04:34,393 --> 00:04:40,669
Being a form to create a new book, it needs the HTML form tag.

66
00:04:40,669 --> 00:04:48,103
Then the title property of the book is bound thanks to the two way binding.

67
00:04:48,103 --> 00:04:53,761
This allows the data entered in the input text to be set in

68
00:04:53,761 --> 00:04:56,983
the attribute title of the property book.

69
00:04:56,983 --> 00:04:57,772
In a form,

70
00:04:57,772 --> 00:05:07,000
all the data that needs to be entered by the user needs to follow the two way binding syntax.

