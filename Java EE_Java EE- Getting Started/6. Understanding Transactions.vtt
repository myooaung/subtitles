WEBVTT
1
00:00:02.032 --> 00:00:06.518
Our book repository is nearly ready, we just need to add transaction management.

2
00:00:06.518 --> 00:00:12.691
Transaction management is an important matter for enterprises.

3
00:00:12.691 --> 00:00:17.820
It allows applications to have consistent data and data is crucial for business.

4
00:00:17.820 --> 00:00:24.639
Data must be accurate regardless of the operations you perform and the

5
00:00:24.639 --> 00:00:28.391
number of applications concurrently accessing it.

6
00:00:28.391 --> 00:00:34.578
A transaction is used to ensure that the data is kept in a consistent state.

7
00:00:34.578 --> 00:00:38.797
It represents a logical group of operation that must be

8
00:00:38.797 --> 00:00:43.055
performed as a single unit of work.

9
00:00:43.055 --> 00:00:46.890
They either succeed or failed atomically.

10
00:00:46.890 --> 00:00:51.532
These operations can involve persisting data in one or several databases,

11
00:00:51.532 --> 00:00:56.078
sending messages or invoking web services.

12
00:00:56.078 --> 00:00:57.850
To handle transaction management,

13
00:00:57.850 --> 00:01:03.544
Java EE comes with a dedicated specification called JTA,

14
00:01:03.544 --> 00:01:07.593
or Java Transaction API.

15
00:01:07.593 --> 00:01:13.468
JTA is a general API for managing transaction in Java EE.

16
00:01:13.468 --> 00:01:16.061
It allows us to start, commit,

17
00:01:16.061 --> 00:01:19.552
and rollback transactions in a resource neutral way.

18
00:01:19.552 --> 00:01:22.693
Managing transaction is a very complex task,

19
00:01:22.693 --> 00:01:29.324
but the good news is that JTA gives us an eye level API so we just

20
00:01:29.324 --> 00:01:32.018
do transaction demarcation using annotations.

21
00:01:32.018 --> 00:01:37.217
The container will automatically begin and commit

22
00:01:37.217 --> 00:01:39.296
transaction based on annotations.

23
00:01:39.296 --> 00:01:42.933
We don't have to programmatically do it.

24
00:01:42.933 --> 00:01:49.759
Note that transactions can be propagated to other methods if we need to.

25
00:01:49.759 --> 00:01:51.831
Let's come back to our BookRepository.

26
00:01:51.831 --> 00:01:57.194
As we can see, the first three methods select data from the database,

27
00:01:57.194 --> 00:02:01.037
while the last two insert and delete data.

28
00:02:01.037 --> 00:02:06.308
So we can say that the find methods are read only and the

29
00:02:06.308 --> 00:02:09.231
create and delete methods are write only.

30
00:02:09.231 --> 00:02:15.851
With this in mind, let's see what transaction demarcation we could use.

31
00:02:15.851 --> 00:02:20.852
To have transaction demarcation we just annotate the method with

32
00:02:20.852 --> 00:02:24.131
transactional and the container does the rest.

33
00:02:24.131 --> 00:02:28.624
It intercepts the method invocation and behind the scene starts a

34
00:02:28.624 --> 00:02:34.226
JTA transaction before the method is invoked and commits all

35
00:02:34.226 --> 00:02:38.213
rollbacks after the method is executed.

36
00:02:38.213 --> 00:02:42.986
Here we use the default REQUIRED strategy.

37
00:02:42.986 --> 00:02:46.669
This means that the container must always propagate

38
00:02:46.669 --> 00:02:48.657
the transaction through the code.

39
00:02:48.657 --> 00:02:52.775
We can use the same transaction policy for the delete method.

40
00:02:52.775 --> 00:02:58.470
For the read only methods, we could use the SUPPORTS strategy instead.

41
00:02:58.470 --> 00:03:03.380
SUPPORTS allows the callee to iterate the caller's transaction.

42
00:03:03.380 --> 00:03:08.712
This means that if the find method is invoked outside a transaction,

43
00:03:08.712 --> 00:03:15.391
a new transaction will not be created, but if it is invoked inside a transaction,

44
00:03:15.391 --> 00:03:21.083
for example, another method doing an insert and then invoking the find,

45
00:03:21.083 --> 00:03:26.621
we want this read only method to be executed within the same

46
00:03:26.621 --> 00:03:30.380
transaction to allow database isolation.

47
00:03:30.380 --> 00:03:39.000
We could duplicate this annotation on the findAll and countAll methods or move it to the class.

