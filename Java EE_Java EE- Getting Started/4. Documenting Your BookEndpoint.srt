1
00:00:02,527 --> 00:00:05,209
Now that we know our API documentation works,

2
00:00:05,209 --> 00:00:09,963
let's go back to our BookEndpoint and document it using

3
00:00:09,963 --> 00:00:13,656
a bottom-up approach or code first.

4
00:00:13,656 --> 00:00:17,841
This means that we will add Swagger annotations to our

5
00:00:17,841 --> 00:00:20,617
BookEndpoint and then generate the JSON contract.

6
00:00:20,617 --> 00:00:22,189
To help the generation,

7
00:00:22,189 --> 00:00:27,745
we will use a Maven plugin and we will also use the

8
00:00:27,745 --> 00:00:30,663
Swagger UI to display the contract.

9
00:00:30,663 --> 00:00:36,854
Let's go back to the editor.

10
00:00:36,854 --> 00:00:39,827
I've already set up the Maven dependencies.

11
00:00:39,827 --> 00:00:46,527
I've added Swagger, so Swagger annotations and also the Swagger plugin.

12
00:00:46,527 --> 00:00:53,467
Swagger-annotation you just want dependency and the swagger-plugin

13
00:00:53,467 --> 00:00:58,924
needs a bit of customization and configuration.

14
00:00:58,924 --> 00:01:06,055
This plugin will allow us to generate the JSON contract.

15
00:01:06,055 --> 00:01:10,793
The JSON contract is generated under the web app directory.

16
00:01:10,793 --> 00:01:17,600
So let's do a Maven clean compile and as you can see,

17
00:01:17,600 --> 00:01:25,114
out of the blue we have the swagger-ui that we will have a look later,

18
00:01:25,114 --> 00:01:27,144
and the generated swagger.

19
00:01:27,144 --> 00:01:28,342
json contract.

20
00:01:28,342 --> 00:01:37,129
So now let's do a bit of space and put side by side the

21
00:01:37,129 --> 00:01:43,114
generated JSON contract and our BookEndpoint,

22
00:01:43,114 --> 00:01:46,107
so rest BookEndpoint.

23
00:01:46,107 --> 00:01:48,053
Close that.

24
00:01:48,053 --> 00:01:55,839
So we need the Api annotation from Swagger.

25
00:01:55,839 --> 00:01:59,894
We put it a name, we generate the contract,

26
00:01:59,894 --> 00:02:06,766
and here it is, we have tags name Book.

27
00:02:06,766 --> 00:02:15,102
Now let's document the getBook method.

28
00:02:15,102 --> 00:02:21,541
We use another annotation called ApiOperation and we

29
00:02:21,541 --> 00:02:26,807
give a description to this method.

30
00:02:26,807 --> 00:02:34,408
So getBook returns a book given an identifier.

31
00:02:34,408 --> 00:02:39,037
And we generate the contract again.

32
00:02:39,037 --> 00:02:41,352
Here it is.

33
00:02:41,352 --> 00:02:50,542
Now we have path books/id where the summary returns a book given an

34
00:02:50,542 --> 00:02:55,440
identifier and all the parameters of the method.

35
00:02:55,440 --> 00:02:58,434
What's missing is the responses.

36
00:02:58,434 --> 00:03:05,247
And actually we've seen that the getBook can return two responses.

37
00:03:05,247 --> 00:03:16,603
Either a code 200, meaning that the book has been found in the database,

38
00:03:16,603 --> 00:03:26,987
or a 404, meaning that the given identifier wasn't found.

39
00:03:26,987 --> 00:03:34,116
So let's generate the contract again and now we have more information

40
00:03:34,116 --> 00:03:40,979
in the contract with these responses 200 and 404.

41
00:03:40,979 --> 00:03:45,337
There's one thing missing, this method returns a response,

42
00:03:45,337 --> 00:03:54,589
but in fact it's a book, so let's add that the response is actually a Book class,

43
00:03:54,589 --> 00:03:56,061
our book entity.

44
00:03:56,061 --> 00:04:02,071
When we do that and generate the contract again, something funny happens.

45
00:04:02,071 --> 00:04:09,474
In the 200 we see that it returns a book and the definition

46
00:04:09,474 --> 00:04:14,333
of the book has been generated underneath.

47
00:04:14,333 --> 00:04:22,018
We can customize this generation using other annotations.

48
00:04:22,018 --> 00:04:34,816
ApiModel and we can give a description, Book resource representation.

49
00:04:34,816 --> 00:04:39,823
Let's generate the contract again and we should find

50
00:04:39,823 --> 00:04:43,861
this description at the bottom here.

51
00:04:43,861 --> 00:04:52,137
And now we can add more information on the attributes we

52
00:04:52,137 --> 00:04:56,375
want using the ApiModelProperty annotation.

53
00:04:56,375 --> 00:05:01,433
So here I'm specifying that id is actually the Identifier,

54
00:05:01,433 --> 00:05:06,614
title I put Title of the book, description,

55
00:05:06,614 --> 00:05:09,546
Description of the book,

56
00:05:09,546 --> 00:05:16,835
and by generating the contract I'm adding more and more

57
00:05:16,835 --> 00:05:20,471
information to the JSON contract.

58
00:05:20,471 --> 00:05:27,164
So let's do the same in all methods.

59
00:05:27,164 --> 00:05:33,571
Okay, so here I've added several annotations on all the methods,

60
00:05:33,571 --> 00:05:41,122
so the getBook, but also the createBook that creates a book with an HTTP POST,

61
00:05:41,122 --> 00:05:47,666
the deleteBook with several responses, getBooks,

62
00:05:47,666 --> 00:05:48,757
countBooks,

63
00:05:48,757 --> 00:05:54,619
and this way I have the full contract of all the methods with all the

64
00:05:54,619 --> 00:06:03,024
parameters and all the responses of our BookEndpoint.

65
00:06:03,024 --> 00:06:08,863
Books/count, books/id with and http GET,

66
00:06:08,863 --> 00:06:13,728
the delete, deleting a book,

67
00:06:13,728 --> 00:06:22,419
so let's see all that in action by deploying the application in WildFly.

68
00:06:22,419 --> 00:06:27,312
So the entire application is packaged, the JSON contract,

69
00:06:27,312 --> 00:06:31,178
the Swagger UI, and deployed in WildFly.

70
00:06:31,178 --> 00:06:33,971
So let's see it works.

71
00:06:33,971 --> 00:06:40,844
If we go to api/books we have our hundred books from the database.

72
00:06:40,844 --> 00:06:44,259
Now we can have a look at the Swagger contract,

73
00:06:44,259 --> 00:06:49,438
so it's exactly the same code that we've seen before

74
00:06:49,438 --> 00:06:53,604
except it's slightly nicer on Chrome.

75
00:06:53,604 --> 00:07:01,465
So we have the different path, get, delete, the book definition.

76
00:07:01,465 --> 00:07:06,848
And we also have the Swagger UI tool that we've imported with Maven.

77
00:07:06,848 --> 00:07:12,915
That's a very nice UI to explore a JSON contract.

78
00:07:12,915 --> 00:07:19,573
So let's scroll down on books, we can see that we have a GET books.

79
00:07:19,573 --> 00:07:25,564
The POST to create a new book, books/count and so on.

80
00:07:25,564 --> 00:07:26,940
So as you can see,

81
00:07:26,940 --> 00:07:31,533
it's much nicer and we can actually try it out by pressing the button.

82
00:07:31,533 --> 00:07:35,212
So here I've invoked the count books API,

83
00:07:35,212 --> 00:07:39,574
I can do the same for books with an s, try it out,

84
00:07:39,574 --> 00:07:44,529
and here I have the 100 books in JSON.

85
00:07:44,529 --> 00:07:51,903
It's a very nicer way to see our contract.

86
00:07:51,903 --> 00:07:55,782
Okay so back to the IDE to commit our code.

87
00:07:55,782 --> 00:07:58,901
What have we done in this module?

88
00:07:58,901 --> 00:08:03,953
Well we've added Swagger annotations to the book entity,

89
00:08:03,953 --> 00:08:08,189
to the BookEndpoint, uploaded the swagger-ui,

90
00:08:08,189 --> 00:08:24,000
generated the JSON contract thanks to a few Swagger annotations and dependency on XML.

