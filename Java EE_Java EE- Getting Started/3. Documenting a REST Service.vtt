WEBVTT
1
00:00:02.159 --> 00:00:07.065
So now let's see how we can document our book endpoint.

2
00:00:07.065 --> 00:00:11.094
Basically we have two approaches we can follow.

3
00:00:11.094 --> 00:00:16.493
The first is the top-down approach our design first.

4
00:00:16.493 --> 00:00:20.200
This means we use Swagger to design our API before

5
00:00:20.200 --> 00:00:22.743
we've written any actual code.

6
00:00:22.743 --> 00:00:30.172
Imagine yourself in front of a JSON editor writing the contract in JSON

7
00:00:30.172 --> 00:00:34.939
and then generate Java and TypeScript code out of it.

8
00:00:34.939 --> 00:00:40.893
This can have some advantages as it can be written by nontechnical people,

9
00:00:40.893 --> 00:00:43.208
but quite cumbersome.

10
00:00:43.208 --> 00:00:48.161
The second approach is the bottom-up approach or code first.

11
00:00:48.161 --> 00:00:51.492
This means we've already written the Java code of our API

12
00:00:51.492 --> 00:00:55.245
and will use Swagger to document it.

13
00:00:55.245 --> 00:01:00.223
That's the approach we will be using.

14
00:01:00.223 --> 00:01:05.334
In fact, we will annotate our existing code to do that.

15
00:01:05.334 --> 00:01:09.185
Here is our BookEndpoint with the getBook method.

16
00:01:09.185 --> 00:01:12.487
If we want to generate a contract,

17
00:01:12.487 --> 00:01:15.773
we first start with a SwaggerDefinition annotation,

18
00:01:15.773 --> 00:01:19.870
then depending on the level of document we want,

19
00:01:19.870 --> 00:01:23.202
we can add information about this API,

20
00:01:23.202 --> 00:01:28.659
a description but also the name of the company who created it,

21
00:01:28.659 --> 00:01:34.065
the host, we can find it, the basePath of the different protocols.

22
00:01:34.065 --> 00:01:40.119
So here we are just informing the consumer that to access the

23
00:01:40.119 --> 00:01:45.228
BookEndpoint API it needs to go to HTTP or HTTPS

24
00:01:45.228 --> 00:01:47.282
/localhost:8080/bookstore-back/api/books.

25
00:01:47.282 --> 00:01:55.497
That's the first step.

26
00:01:55.497 --> 00:02:00.152
But we need now to document the getBook method.

27
00:02:00.152 --> 00:02:05.496
Actually some information can already be extracted from the JAX-RS annotations,

28
00:02:05.496 --> 00:02:10.687
for example, the get method and the id parameter.

29
00:02:10.687 --> 00:02:14.366
The JAX-RS produces annotation specifies that the

30
00:02:14.366 --> 00:02:17.344
response will be in JSON format.

31
00:02:17.344 --> 00:02:23.387
Another easy to get information is the name of the method, here getBook.

32
00:02:23.387 --> 00:02:29.763
And the PassParam indicates that the parameter to be passed is of type

33
00:02:29.763 --> 00:02:34.039
integer and follows a certain regular expression.

34
00:02:34.039 --> 00:02:38.583
But we might want to add extra information to our contract.

35
00:02:38.583 --> 00:02:42.567
That's when we use extra Swagger annotations.

36
00:02:42.567 --> 00:02:48.824
We can describe the API, here we just write a description for humans to read,

37
00:02:48.824 --> 00:02:51.203
this method returns a book.

38
00:02:51.203 --> 00:02:55.928
We can also specify the responses returned by this API.

39
00:02:55.928 --> 00:02:56.857
For example,

40
00:02:56.857 --> 00:03:04.915
a 404 will be returned if no book is found in the database or a 200 otherwise.

41
00:03:04.915 --> 00:03:09.347
That could be enough, but we can go further.

42
00:03:09.347 --> 00:03:12.915
What is the response of this method?

43
00:03:12.915 --> 00:03:13.873
A book?

44
00:03:13.873 --> 00:03:17.226
Well let's add these to the contract.

45
00:03:17.226 --> 00:03:21.803
Here we are saying that the getBook method returns a book and we

46
00:03:21.803 --> 00:03:28.533
can actually get the JSON definition of a book.

47
00:03:28.533 --> 00:03:33.106
Swagger contracts have a definition section to describe all the data structures.

48
00:03:33.106 --> 00:03:40.558
Here we annotate our book entity with a Swagger ApiModel annotation,

49
00:03:40.558 --> 00:03:47.289
give it a description and that's enough to have a book structure of type object.

50
00:03:47.289 --> 00:03:53.424
Then it's just a matter of listing all the properties of this structure,

51
00:03:53.424 --> 00:03:58.742
such as id of type integer or title and description of

52
00:03:58.742 --> 00:04:03.748
type string or unitCost of type float.

53
00:04:03.748 --> 00:04:07.115
As you can see we annotate the properties we need to

54
00:04:07.115 --> 00:04:09.875
describe with the annotation ApiModel property.

55
00:04:09.875 --> 00:04:20.000
We finally get a JSON contract describing each API and data structure of our system.

