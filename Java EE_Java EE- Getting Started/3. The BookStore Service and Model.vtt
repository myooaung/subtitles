WEBVTT
1
00:00:02.309 --> 00:00:06.284
Our BookStore application heavily relies on having such

2
00:00:06.284 --> 00:00:09.448
reactive services because it constantly needs to interact

3
00:00:09.448 --> 00:00:12.004
with our Java EE back-end through HTTP.

4
00:00:12.004 --> 00:00:18.785
So we need a book service to be able to create a book, delete a book and so on.

5
00:00:18.785 --> 00:00:20.711
This will bring the Book model,

6
00:00:20.711 --> 00:00:26.606
which is a TypeScript representation of our Java Book entity.

7
00:00:26.606 --> 00:00:30.957
The service and model will be used to list all the books from the database,

8
00:00:30.957 --> 00:00:38.581
to display the detail of a single book, or to create a new book in our form.

9
00:00:38.581 --> 00:00:42.831
In fact, anywhere we need to invoke our back-end,

10
00:00:42.831 --> 00:00:49.200
on the booklist component we show the number of books from the database.

11
00:00:49.200 --> 00:00:56.701
We get this information by doing an HTTP GET on /books/count.

12
00:00:56.701 --> 00:01:03.744
Getting the entire list of books is an HTTP GET on /books.

13
00:01:03.744 --> 00:01:11.984
To view the book detail, is an HTTP GET on /books/ the identifier of the book,

14
00:01:11.984 --> 00:01:13.692
for example, 1234.

15
00:01:13.692 --> 00:01:14.830
Once displayed,

16
00:01:14.830 --> 00:01:25.689
we can delete the book by invoking an HTTP DELETE on /books/bookId.

17
00:01:25.689 --> 00:01:29.835
Last but not least, after filling the form to create a new book,

18
00:01:29.835 --> 00:01:36.746
we hit the Create button and do an HTTP POST on /books.

19
00:01:36.746 --> 00:01:41.379
This is a lot of code we need to have on our Angular application, isn't it?

20
00:01:41.379 --> 00:01:48.075
Yes, but remember that we have a JSON contract we could use to help us.

21
00:01:48.075 --> 00:01:52.609
In module 10 we documented our book endpoint with an open

22
00:01:52.609 --> 00:01:55.177
API contract implemented by Swagger.

23
00:01:55.177 --> 00:02:00.570
This contract defines every single method exposed by our API.

24
00:02:00.570 --> 00:02:02.475
Thanks to Swagger CodeGen,

25
00:02:02.475 --> 00:02:07.381
we could use this contract to generate TypeScript code.

26
00:02:07.381 --> 00:02:13.780
Here we have a TypeScript BookService defining the basePath variable,

27
00:02:13.780 --> 00:02:17.697
pointing at our book endpoint URL.

28
00:02:17.697 --> 00:02:20.965
The contract then defines the getBook method that we

29
00:02:20.965 --> 00:02:22.997
find in the TypeScript version.

30
00:02:22.997 --> 00:02:26.771
The contract gives us a bit more information,

31
00:02:26.771 --> 00:02:31.566
such as the parameters to pass, here the book identifier,

32
00:02:31.566 --> 00:02:33.484
and the response code.

33
00:02:33.484 --> 00:02:37.654
What's important is to know what happens when the invocation succeeds,

34
00:02:37.654 --> 00:02:39.364
that's at 200.

35
00:02:39.364 --> 00:02:42.785
Well, if the getBook invocation succeeds,

36
00:02:42.785 --> 00:02:47.127
a book has been found in the database and the

37
00:02:47.127 --> 00:02:49.528
definition of the book is returned.

38
00:02:49.528 --> 00:02:51.598
If a book is returned,

39
00:02:51.598 --> 00:02:56.712
the TypeScript service can then return an observable of a book.

40
00:02:56.712 --> 00:02:59.713
But what is a book?

41
00:02:59.713 --> 00:03:05.054
If we scroll down our Swagger contract, we find the Book object representation,

42
00:03:05.054 --> 00:03:10.106
which in TypeScript is represented by a Book class.

43
00:03:10.106 --> 00:03:16.188
A Book has properties, such as a book Identifier of type integer.

44
00:03:16.188 --> 00:03:21.436
In TypeScript, we get the attribute id of type number.

45
00:03:21.436 --> 00:03:27.170
A book has a title of type string, same for TypeScript.

46
00:03:27.170 --> 00:03:32.851
In this way Swagger CodeGen will generate the TypeScript class with all

47
00:03:32.851 --> 00:03:38.976
the attributes corresponding to the Swagger definition.

48
00:03:38.976 --> 00:03:42.535
And because the contract defines every single method with

49
00:03:42.535 --> 00:03:45.179
all the parameters and return types,

50
00:03:45.179 --> 00:03:52.328
Swagger CodeGen will generate the countBooks method returning a number of books.

51
00:03:52.328 --> 00:03:55.326
Notice the Observable number.

52
00:03:55.326 --> 00:03:59.559
The createBook method takes a book as a parameter

53
00:03:59.559 --> 00:04:02.454
and returns an observable of void.

54
00:04:02.454 --> 00:04:07.523
The deleteBook takes a book identifier as a parameter and

55
00:04:07.523 --> 00:04:11.268
the getBooks returns an array of books.

56
00:04:11.268 --> 00:04:24.000
This service acts like a proxy and needs the Angular HTTP module to be able to invoke through HTTP our back-end book endpoint.

