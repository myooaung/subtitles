1
00:00:02,720 --> 00:00:06,847
Now that you know a bit more about JAX-RS annotations and APIs,

2
00:00:06,847 --> 00:00:14,119
let's go back to the IDE and expose a REST API on top of our book repository.

3
00:00:14,119 --> 00:00:16,471
We will use the HTTP GET, POST,

4
00:00:16,471 --> 00:00:19,618
and DELETE methods to get CRUD operation on books.

5
00:00:19,618 --> 00:00:25,724
To make it more visual we will populate the database with JPA so

6
00:00:25,724 --> 00:00:29,271
our getBooks actually retrieves something.

7
00:00:29,271 --> 00:00:33,071
I'll use an HTTP client to interact with the bookEndpoint for now,

8
00:00:33,071 --> 00:00:39,925
but later we will use Arquillian to properly test it.

9
00:00:39,925 --> 00:00:48,804
Okay so let's create the new book endpoint under the package rest.

10
00:00:48,804 --> 00:00:51,210
But before creating the book endpoint,

11
00:00:51,210 --> 00:00:58,021
I need a bit of configuration so let's create a class called JAXRSConfiguration.

12
00:00:58,021 --> 00:01:04,140
It needs to extend the JAX-RS classed called Application.

13
00:01:04,140 --> 00:01:10,444
And here we annotate this class with ApplicationPath and we put a string,

14
00:01:10,444 --> 00:01:13,399
I put API because I like it,

15
00:01:13,399 --> 00:01:21,042
that means that everything under API is a JAX-RS endpoint.

16
00:01:21,042 --> 00:01:24,875
So BookEndpoint now.

17
00:01:24,875 --> 00:01:32,007
Because our BookEndpoint delegates all the calls to the book repository,

18
00:01:32,007 --> 00:01:40,699
let's inject the bookRepository and let's use a nice IntelliJ IDEA trick.

19
00:01:40,699 --> 00:01:45,156
I'm going to generate code based on the BookRepository,

20
00:01:45,156 --> 00:01:47,765
so I'm delegating methods.

21
00:01:47,765 --> 00:01:52,620
So here, thanks to IntelliJ IDEA,

22
00:01:52,620 --> 00:01:59,479
I generated all the methods of the BookRepository inside the BookEndpoint,

23
00:01:59,479 --> 00:02:01,882
so I've cleaned it up a bit.

24
00:02:01,882 --> 00:02:07,629
And what I like to do is change the method name so instead of

25
00:02:07,629 --> 00:02:14,201
find I can go getBook because it's an HTTP GET,

26
00:02:14,201 --> 00:02:23,153
createBook, deleteBook, instead of findAll let's put getBooks with an s,

27
00:02:23,153 --> 00:02:25,333
plural, countBook.

28
00:02:25,333 --> 00:02:34,055
So what makes this class a REST endpoint?

29
00:02:34,055 --> 00:02:39,025
It needs a path annotation and here I'm putting books.

30
00:02:39,025 --> 00:02:42,655
So with a configuration API and now books,

31
00:02:42,655 --> 00:02:47,863
I can target this endpoint at the URI/API/books.

32
00:02:47,863 --> 00:02:53,740
Okay so let's start with getBooks.

33
00:02:53,740 --> 00:02:57,874
The idea of this method, with an HTTP GET,

34
00:02:57,874 --> 00:03:04,191
it returns all the books of the database in a JSON format.

35
00:03:04,191 --> 00:03:09,189
So here I'm using the produces with APPLICATION_JSON,

36
00:03:09,189 --> 00:03:16,942
making it nicer, and remember that this is a JAX-RS endpoint,

37
00:03:16,942 --> 00:03:23,695
so it doesn't return a list of books, but a response with the list of books.

38
00:03:23,695 --> 00:03:27,215
So let me introduce a variable here.

39
00:03:27,215 --> 00:03:36,921
I call it books with an s, so the repository returns a list of books,

40
00:03:36,921 --> 00:03:39,640
but I want to return a response with a list of books.

41
00:03:39,640 --> 00:03:42,639
So what I do is Response.

42
00:03:42,639 --> 00:03:45,138
ok, because it's a 200,

43
00:03:45,138 --> 00:03:48,922
I've received books from the database and I'll return them

44
00:03:48,922 --> 00:03:51,794
into the response and build this response.

45
00:03:51,794 --> 00:03:57,376
And if there is no books in the database,

46
00:03:57,376 --> 00:04:09,216
if the size of this list is 0, then I want to return a response with a 204,

47
00:04:09,216 --> 00:04:09,881
noContent.

48
00:04:09,881 --> 00:04:11,936
Here it is.

49
00:04:11,936 --> 00:04:16,047
Well we can test this code.

50
00:04:16,047 --> 00:04:21,599
So I run WildFly, it deploys this endpoint,

51
00:04:21,599 --> 00:04:31,832
yes it is now, and I'm using a REST client tool from IntelliJ IDEA,

52
00:04:31,832 --> 00:04:38,737
so that's a nice way to test an endpoint.

53
00:04:38,737 --> 00:04:44,370
So its localhost 8080, bookstore-back, that's the name of the war,

54
00:04:44,370 --> 00:04:46,472
and remember api/books.

55
00:04:46,472 --> 00:04:50,676
I do an http GET, execute,

56
00:04:50,676 --> 00:04:57,225
and the response is empty so I have a 204 because I

57
00:04:57,225 --> 00:05:00,190
have no data in the database.

58
00:05:00,190 --> 00:05:03,448
Well let's add some data now.

59
00:05:03,448 --> 00:05:05,620
I've created an import.

60
00:05:05,620 --> 00:05:11,961
sql file with 100 inserts of books in the database.

61
00:05:11,961 --> 00:05:13,980
Here it is.

62
00:05:13,980 --> 00:05:23,062
So there's a nice JPA trick to import this SQL when we deploy the application.

63
00:05:23,062 --> 00:05:32,399
So we go to the persistence XML and we add another property called javax.

64
00:05:32,399 --> 00:05:33,226
persistence.

65
00:05:33,226 --> 00:05:43,075
sql-load-script-source, and now we give it the name of the file, import.

66
00:05:43,075 --> 00:05:43,882
sql.

67
00:05:43,882 --> 00:05:51,761
We redeploy the application in WildFly and automatically the SQL file will

68
00:05:51,761 --> 00:05:57,482
be executed and we will have 100 books in the database.

69
00:05:57,482 --> 00:06:01,373
Well let's test, see if it works.

70
00:06:01,373 --> 00:06:02,045
Brilliant.

71
00:06:02,045 --> 00:06:12,128
Here it is, 100 books in JSON format and I have an HTTP response 200.

72
00:06:12,128 --> 00:06:15,601
We can even have a look at the browser,

73
00:06:15,601 --> 00:06:21,112
so let's copy/paste the URI and here I'm on Chrome,

74
00:06:21,112 --> 00:06:26,841
API books, yes 100 books in JSON format.

75
00:06:26,841 --> 00:06:34,111
So let's go back to the BookEndpoint and this time code the count method.

76
00:06:34,111 --> 00:06:45,861
So the count is an HTTP GET, so I use the GET annotation.

77
00:06:45,861 --> 00:06:47,697
I'm going to concatenate a different path,

78
00:06:47,697 --> 00:06:57,770
so to get the number of books I'll have to go to api/books/count.

79
00:06:57,770 --> 00:06:59,552
Same trick,

80
00:06:59,552 --> 00:07:04,896
I'm introducing a variable called numberOfBooks

81
00:07:04,896 --> 00:07:08,970
because this method returns a response.

82
00:07:08,970 --> 00:07:10,327
So Response.

83
00:07:10,327 --> 00:07:21,778
Ok, which is a 200, with the numberOfBooks and I'm building this response.

84
00:07:21,778 --> 00:07:28,521
And if the numberOfBooks is 0, meaning the database is empty,

85
00:07:28,521 --> 00:07:38,272
then I return a noContent 204.

86
00:07:38,272 --> 00:07:49,158
Let's redeploy the application in WildFly and use the

87
00:07:49,158 --> 00:07:51,809
REST client to see if it's working.

88
00:07:51,809 --> 00:07:59,112
So this time it's /count.

89
00:07:59,112 --> 00:08:03,493
Yes, 100 books.

90
00:08:03,493 --> 00:08:08,060
Okay well I've coded all the other methods,

91
00:08:08,060 --> 00:08:11,614
so the getBook, the createBook, the deleteBook,

92
00:08:11,614 --> 00:08:17,327
and as you can see I even have a Min that comes from bean validation.

93
00:08:17,327 --> 00:08:21,433
So all the code here is working.

94
00:08:21,433 --> 00:08:24,963
You can pause the video and type the rest of the code.

95
00:08:24,963 --> 00:08:29,496
So I've redeployed the entire application and now if

96
00:08:29,496 --> 00:08:35,668
I use the HTTP client on /count, so I have 100 books,

97
00:08:35,668 --> 00:08:41,266
HTTP GET on books, I get the 100 books in JSON,

98
00:08:41,266 --> 00:08:50,529
we see there's the book 1001, so I can put 1001 in the URI and I get 1 book,

99
00:08:50,529 --> 00:08:54,080
the details of the book 1001.

100
00:08:54,080 --> 00:08:56,928
I can do an HTTP DELETE.

101
00:08:56,928 --> 00:09:04,182
So now I have a 204, so the delete has succeeded and the response is empty,

102
00:09:04,182 --> 00:09:09,441
and just to check I'm doing HTTP GET again and yeah 404,

103
00:09:09,441 --> 00:09:20,000
so the book 1001 is not found. And if I do a count again, I have 99 books.

