WEBVTT
1
00:00:02.478 --> 00:00:05.573
Now that our environment is sorted out that we

2
00:00:05.573 --> 00:00:08.886
bootstrapped a very basic Java EE application,

3
00:00:08.886 --> 00:00:10.822
let's execute it.

4
00:00:10.822 --> 00:00:14.050
For that we need WildFly.

5
00:00:14.050 --> 00:00:17.436
WildFly is our Java EE runtime environment.

6
00:00:17.436 --> 00:00:22.272
It's primary role is to hide all the Java EE technical

7
00:00:22.272 --> 00:00:24.399
complexity and host applications.

8
00:00:24.399 --> 00:00:29.140
Developers can concentrate on writing business code and leave

9
00:00:29.140 --> 00:00:31.554
the container to handle resource management,

10
00:00:31.554 --> 00:00:37.051
multithreading, resource pulling, and all the complex low level details.

11
00:00:37.051 --> 00:00:38.533
As a side effect,

12
00:00:38.533 --> 00:00:42.117
the container can also administrate the guest applications and

13
00:00:42.117 --> 00:00:46.462
the technical components that it's made on.

14
00:00:46.462 --> 00:00:50.833
A Java EE application is an aggregation of these components.

15
00:00:50.833 --> 00:00:56.165
For example, our application will finally end up with XML configuration files,

16
00:00:56.165 --> 00:01:03.438
web resources, business components, and database access components.

17
00:01:03.438 --> 00:01:08.043
For our application to be executed we need to assemble all these components

18
00:01:08.043 --> 00:01:14.519
together into a web archive or war and deploy it to WildFly.

19
00:01:14.519 --> 00:01:18.595
This archive has a standard format so it can be executed in any

20
00:01:18.595 --> 00:01:23.095
application server increasing portability.

21
00:01:23.095 --> 00:01:27.092
Once deployed the application is ready to run.

22
00:01:27.092 --> 00:01:31.332
WildFly sits there, waits for incoming HTTP requests,

23
00:01:31.332 --> 00:01:35.415
and invokes the business code.

24
00:01:35.415 --> 00:01:40.318
Maven is based around the central concept of a build lifecycle.

25
00:01:40.318 --> 00:01:43.870
What this means is that the process for building and

26
00:01:43.870 --> 00:01:48.088
distributing a particle artifact is clearly defined.

27
00:01:48.088 --> 00:01:48.731
First,

28
00:01:48.731 --> 00:01:53.198
Maven validates the project is correct and all

29
00:01:53.198 --> 00:01:55.318
necessary information is available.

30
00:01:55.318 --> 00:01:59.583
Then it complies the source code of the project and tests

31
00:01:59.583 --> 00:02:02.572
the compiled source code using JUnit.

32
00:02:02.572 --> 00:02:05.339
If the unit tests pass,

33
00:02:05.339 --> 00:02:10.995
Maven takes the complied code and packages it into a war file.

34
00:02:10.995 --> 00:02:14.945
It can then run integration tests with Arquillian to

35
00:02:14.945 --> 00:02:17.913
ensure quality criteria are met.

36
00:02:17.913 --> 00:02:24.183
Finally, it installed a package into the local repository.

37
00:02:24.183 --> 00:02:26.998
This is what our final application will look like.

38
00:02:26.998 --> 00:02:32.337
The browser will interact with the Angular application running on the front,

39
00:02:32.337 --> 00:02:38.951
invoking the Java EE application running on the back through HTTP.

40
00:02:38.951 --> 00:02:41.774
The backend connects to the database.

41
00:02:41.774 --> 00:02:43.656
In terms of deployment,

42
00:02:43.656 --> 00:02:50.134
we package our Java EE application in a war file and deploy it into a server.

43
00:02:50.134 --> 00:02:52.365
WildFly listening on port 8080.

44
00:02:52.365 --> 00:02:56.002
Our data is stored into an in-memory database.

45
00:02:56.002 --> 00:03:01.143
This means our database is not running on a separate

46
00:03:01.143 --> 00:03:03.747
process or listening on a specific port.

47
00:03:03.747 --> 00:03:08.986
So here is the deploy diagram of our application shaping up.

48
00:03:08.986 --> 00:03:11.506
Let's run the backhand.

49
00:03:11.506 --> 00:03:15.650
In this demo we'll use Maven to compile and package

50
00:03:15.650 --> 00:03:16.893
our bootstrapped application.

51
00:03:16.893 --> 00:03:21.993
Then we will start WildFly, deploy the war file,

52
00:03:21.993 --> 00:03:29.510
execute the application, and check the WildFly administration console.

53
00:03:29.510 --> 00:03:35.869
So back to the IDE, this time I'm going to use the terminal inside IntelliJ IDEA.

54
00:03:35.869 --> 00:03:41.495
So here I am inside the bookstore-back directory.

55
00:03:41.495 --> 00:03:46.413
If I have a look what's inside I have the pom.

56
00:03:46.413 --> 00:03:48.202
xml and src directory.

57
00:03:48.202 --> 00:03:52.983
Now let's use Maven to package the code and then

58
00:03:52.983 --> 00:03:56.417
package the compile code into a war file.

59
00:03:56.417 --> 00:04:01.360
If I have a look at it, I can see a target directory.

60
00:04:01.360 --> 00:04:08.226
Having a look inside the directory I can see the war file, which is only 2.

61
00:04:08.226 --> 00:04:15.245
6K and contains the complied Java code and the index HTML page.

62
00:04:15.245 --> 00:04:23.174
Now that I have this war file, let's go to WildFly,

63
00:04:23.174 --> 00:04:29.841
start it up, and once it's started I'm going back to the browser.

64
00:04:29.841 --> 00:04:33.568
So I can see WildFly is up and running,

65
00:04:33.568 --> 00:04:45.527
let's go to the administration console and deploy the bookstore-back war file.

66
00:04:45.527 --> 00:04:51.046
Clicking on Next, bookstore-back.

67
00:04:51.046 --> 00:04:51.827
war.

68
00:04:51.827 --> 00:04:58.863
Here it is, the war file is successfully deployed.

69
00:04:58.863 --> 00:05:09.518
So now if I go localhost:8080/bookstore-back, I can see the Hello World!

70
00:05:09.518 --> 00:05:15.508
text and that's coming from the index.

71
00:05:15.508 --> 00:05:17.219
html page.

72
00:05:17.219 --> 00:05:22.243
So if I go into src/webapp, here is the Hello World!

73
00:05:22.243 --> 00:05:25.083
So let's change it to BookStore.

74
00:05:25.083 --> 00:05:30.779
I'm not going to use Maven to package the war file again

75
00:05:30.779 --> 00:05:33.643
and manually deploy it into WildFly.

76
00:05:33.643 --> 00:05:41.149
What I'm going to do is actually use the WildFly integration of IntelliJ IDEA.

77
00:05:41.149 --> 00:05:45.640
So here I have a runner that we'll execute,

78
00:05:45.640 --> 00:05:51.828
that will package the code into the war file,

79
00:05:51.828 --> 00:05:57.314
automatically deployed into WildFly, and launch the browser.

80
00:05:57.314 --> 00:06:01.795
So now we've shown that everything is up and running,

81
00:06:01.795 --> 00:06:09.000
the code compiles, packages, deploys. We are ready to move on.

