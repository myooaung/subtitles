1
00:00:02,818 --> 00:00:09,653
So now we have all our Java EE backend ready to share data through a REST API.

2
00:00:09,653 --> 00:00:15,877
But this API is valuable only if it's accessible by other systems.

3
00:00:15,877 --> 00:00:19,550
And for that it needs clear documentation.

4
00:00:19,550 --> 00:00:21,506
When we talk about documentation,

5
00:00:21,506 --> 00:00:25,425
it's nothing about writing a word document in English,

6
00:00:25,425 --> 00:00:30,151
explaining with sentences what you're REST API does,

7
00:00:30,151 --> 00:00:34,636
no, it's more about using a format that is human readable,

8
00:00:34,636 --> 00:00:38,579
but also machine readable so it can be processed.

9
00:00:38,579 --> 00:00:45,015
That's when the open API initiative comes along.

10
00:00:45,015 --> 00:00:47,136
For your systems to communicate,

11
00:00:47,136 --> 00:00:55,402
there needs to be a standard vocabulary for defining and documenting an API.

12
00:00:55,402 --> 00:00:58,795
The open API initiative is a standard body which is part

13
00:00:58,795 --> 00:01:03,935
of the Linux foundation responsible for the specification

14
00:01:03,935 --> 00:01:07,893
called OpenAPI Specification, or OAS.

15
00:01:07,893 --> 00:01:16,358
The OpenAPI Specification is a JSON or Yaml document describing an API.

16
00:01:16,358 --> 00:01:20,760
It declares a valuable operations such as GET,

17
00:01:20,760 --> 00:01:25,096
POST, DELETE, the parameters of these methods,

18
00:01:25,096 --> 00:01:30,420
what they return, or the error response code.

19
00:01:30,420 --> 00:01:31,343
For example,

20
00:01:31,343 --> 00:01:37,761
here we have a JSON document describing the API of our BookStore application.

21
00:01:37,761 --> 00:01:43,117
This API is accessible through HTTP and HTTPS,

22
00:01:43,117 --> 00:01:45,876
at localhost 8080/bookstore-back/api.

23
00:01:45,876 --> 00:01:54,505
Then we enumerate all the paths of the APIs here /backs.

24
00:01:54,505 --> 00:01:58,859
This means that for accessing our books,

25
00:01:58,859 --> 00:02:07,914
we need to go to localhost 8080/bookstore-back/api/books.

26
00:02:07,914 --> 00:02:11,893
If at this URL we execute an HTTP GET,

27
00:02:11,893 --> 00:02:17,283
the API will return all the books in a JSON format.

28
00:02:17,283 --> 00:02:21,301
Several response can outcome from this code.

29
00:02:21,301 --> 00:02:27,594
If it's a 200, it returns all the books in an array format.

30
00:02:27,594 --> 00:02:32,285
As you can see, if the API adheres to the OpenAPI Specification,

31
00:02:32,285 --> 00:02:38,714
it is easy to read, easy to iterate and easy to consume.

32
00:02:38,714 --> 00:02:45,300
Additional utilities can also take advantage of this JSON contract.

33
00:02:45,300 --> 00:02:48,631
An example of such utilities is Swagger.

34
00:02:48,631 --> 00:02:55,323
Swagger is a powerful set of open source tools that help us design,

35
00:02:55,323 --> 00:02:59,916
build, document, and consume our REST API contract,

36
00:02:59,916 --> 00:03:02,962
written with Open API Specification.

37
00:03:02,962 --> 00:03:04,078
Being language agnostic,

38
00:03:04,078 --> 00:03:08,941
we will use these tools to produce a JSON contract of our

39
00:03:08,941 --> 00:03:14,082
Java EE backend and generate TypeScript for our Angular

40
00:03:14,082 --> 00:03:20,305
front-end to consume our REST service.

41
00:03:20,305 --> 00:03:25,520
The Swagger website is full of documentation and also tools.

42
00:03:25,520 --> 00:03:30,305
We will actually be using a couple of tools from Swagger.

43
00:03:30,305 --> 00:03:38,975
Swagger Codegen, this tool can generate code from a Swagger contract.

44
00:03:38,975 --> 00:03:47,476
As you can see, it can generate several languages from Scala, Java or Angular.

45
00:03:47,476 --> 00:04:00,000
Another tool we will be using is Swagger UI. It is a nice web interface to visualize our JSON contract.

