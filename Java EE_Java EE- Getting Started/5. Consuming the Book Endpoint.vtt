WEBVTT
1
00:00:02.453 --> 00:00:06.868
We know to develop and expose RESTful web services with JAX-RS,

2
00:00:06.868 --> 00:00:13.090
and we've seen how to interact with the BookEndpoint using an HTTP client,

3
00:00:13.090 --> 00:00:14.999
but this is not enough.

4
00:00:14.999 --> 00:00:18.662
Now we want to test our BookEndpoint using Arquillian.

5
00:00:18.662 --> 00:00:24.144
So we need an API to automate HTTP invocation.

6
00:00:24.144 --> 00:00:26.734
JAX-RS comes with a client API,

7
00:00:26.734 --> 00:00:31.043
this client API allows us to make HTTP requests to

8
00:00:31.043 --> 00:00:33.188
our remove REST service easily,

9
00:00:33.188 --> 00:00:37.833
despite all the low level details of the HTTP protocol.

10
00:00:37.833 --> 00:00:45.757
It is a fluent building API that uses a small number of classes and interfaces.

11
00:00:45.757 --> 00:00:51.705
The main entry point for the API is the client interface.

12
00:00:51.705 --> 00:00:55.426
The client interface manages and configures HTTP connection

13
00:00:55.426 --> 00:00:58.910
and is created using the ClientBuilder.

14
00:00:58.910 --> 00:01:04.482
The client interface is a builder of WebTarget.

15
00:01:04.482 --> 00:01:11.842
A WebTarget represents a distinct URI from which we can invoke requests on.

16
00:01:11.842 --> 00:01:18.072
Here the target is http://www.

17
00:01:18.072 --> 00:01:19.318
bookstore.

18
00:01:19.318 --> 00:01:20.564
com/books/123.

19
00:01:20.564 --> 00:01:26.692
Now that we have a URI to target, we need to build our HTTP request.

20
00:01:26.692 --> 00:01:33.446
Here we just build a simple HTTP GET asking for JSON representation.

21
00:01:33.446 --> 00:01:35.499
Once we have the invocation object,

22
00:01:35.499 --> 00:01:40.201
we then need to call the invoke method to actually invoke the

23
00:01:40.201 --> 00:01:44.434
remote REST service and get a response object back.

24
00:01:44.434 --> 00:01:50.090
This might look a bit verbose, but it is a way to explain how the API works.

25
00:01:50.090 --> 00:01:55.651
Thanks to the builder API and some shortcuts we can write the

26
00:01:55.651 --> 00:01:58.583
same behavior in a single line of code.

27
00:01:58.583 --> 00:02:02.917
We create a new client, target a specific URI,

28
00:02:02.917 --> 00:02:07.580
set the MIME type to JSON, and execute an HTTP GET,

29
00:02:07.580 --> 00:02:12.983
and if we need to delete a resource with an HTTP DELETE,

30
00:02:12.983 --> 00:02:17.534
the API easily allows us to do that.

31
00:02:17.534 --> 00:02:21.523
The response class allows the consumer to have some control over the

32
00:02:21.523 --> 00:02:26.129
HTTP response returned from the RESTful web service.

33
00:02:26.129 --> 00:02:31.317
With its API we can check the HTTP status,

34
00:02:31.317 --> 00:02:35.262
the HTTP length, date or return MIME type.

35
00:02:35.262 --> 00:02:41.156
But most of the time what we really want from a response is the

36
00:02:41.156 --> 00:02:44.568
entity sent from the RESTful web service.

37
00:02:44.568 --> 00:02:47.645
Let's say we do a GET on the book 123,

38
00:02:47.645 --> 00:02:54.213
to get the JSON representation of this book we invoke the readEntity method.

39
00:02:54.213 --> 00:02:59.020
This reads the message input stream and will return a string.

40
00:02:59.020 --> 00:03:11.000
But if we know that JSON represents a book, then JAX-RS will automatically unmarshal the JSON stream into our book entity.

