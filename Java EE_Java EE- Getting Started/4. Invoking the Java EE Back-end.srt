1
00:00:02,251 --> 00:00:04,105
That was a lot of information,

2
00:00:04,105 --> 00:00:07,725
let's go back to our BookStore application and finish coding it.

3
00:00:07,725 --> 00:00:13,590
In this last demo we will use the Swagger CodeGen command line to pass the

4
00:00:13,590 --> 00:00:17,695
JSON contract and generate a TypeScript service and model.

5
00:00:17,695 --> 00:00:22,675
The service acts like a proxy and invokes the Java

6
00:00:22,675 --> 00:00:25,490
EE back-end doing http requests.

7
00:00:25,490 --> 00:00:30,341
Because this service uses the Angular HTTP module,

8
00:00:30,341 --> 00:00:37,162
we will have to use observable in our code.

9
00:00:37,162 --> 00:00:43,355
Okay so let's generate some code from the JSON contract, so the swagger.

10
00:00:43,355 --> 00:00:45,492
json is on bookstore-back,

11
00:00:45,492 --> 00:00:53,301
and do you remember it details all our methods exposed by the book endpoint,

12
00:00:53,301 --> 00:00:55,563
the book data structure,

13
00:00:55,563 --> 00:01:01,924
and we will take that as an input and generate

14
00:01:01,924 --> 00:01:06,167
TypeScript code in a service directory.

15
00:01:06,167 --> 00:01:14,011
So here I'm using Swagger CodeGen, saying as an input take the swagger.

16
00:01:14,011 --> 00:01:18,835
json file, generate TypeScript for Angular 2,

17
00:01:18,835 --> 00:01:23,235
and the output should be src/app/service.

18
00:01:23,235 --> 00:01:27,651
That's quite quick, isn't it?

19
00:01:27,651 --> 00:01:31,993
Here it is, the service directory.

20
00:01:31,993 --> 00:01:39,334
Underneath we find two subdirectories, model where we have the model,

21
00:01:39,334 --> 00:01:46,159
so here the book class, and api, so that's the book.

22
00:01:46,159 --> 00:01:46,781
service.

23
00:01:46,781 --> 00:01:54,242
As you can see, we have the path of our rest endpoint.

24
00:01:54,242 --> 00:02:00,477
It injects the HTTP module in the constructor and if we go down,

25
00:02:00,477 --> 00:02:08,245
we find all our business methods, countBook,

26
00:02:08,245 --> 00:02:15,995
createBook, deleteBook, getBook, and all the methods return an Observable,

27
00:02:15,995 --> 00:02:22,949
here an Observable of Book because it gets a book.

28
00:02:22,949 --> 00:02:27,132
Well, let's use this book service.

29
00:02:27,132 --> 00:02:29,543
Let's start with a book list.

30
00:02:29,543 --> 00:02:35,534
Let's get rid of our mock data, so number of books was equal to 2,

31
00:02:35,534 --> 00:02:39,896
we get rid of that, books is an array of Book,

32
00:02:39,896 --> 00:02:46,211
so now that we have the book model, we can use it,

33
00:02:46,211 --> 00:02:50,925
and this and now we need the book service.

34
00:02:50,925 --> 00:02:54,038
What are we going to do?

35
00:02:54,038 --> 00:02:55,648
Inject in the constructor.

36
00:02:55,648 --> 00:03:00,509
So private, we give it the name bookService of type BookService.

37
00:03:00,509 --> 00:03:05,978
And now we have access to all our business methods,

38
00:03:05,978 --> 00:03:10,328
so let's start with counting the number of books.

39
00:03:10,328 --> 00:03:16,848
So you'll remember, it returns an observable so we need to subscribe to it.

40
00:03:16,848 --> 00:03:20,085
This event will return the number of books,

41
00:03:20,085 --> 00:03:25,128
we call it nbBooks, and we effect nbBooks into this.

42
00:03:25,128 --> 00:03:25,782
books.

43
00:03:25,782 --> 00:03:32,525
And we do the same thing for the list of books,

44
00:03:32,525 --> 00:03:36,823
so we have this method getBooks, we subscribe to it,

45
00:03:36,823 --> 00:03:40,670
this method will return JSON array of books,

46
00:03:40,670 --> 00:03:48,324
we call it books, and we effect that into the variable this.

47
00:03:48,324 --> 00:03:49,242
books.

48
00:03:49,242 --> 00:04:03,355
So let's start our server ng serve, oh wrong directory, sorry, ng serve.

49
00:04:03,355 --> 00:04:07,199
It compiles everything.

50
00:04:07,199 --> 00:04:19,234
Refreshes the browser and it's not working, let's debug that.

51
00:04:19,234 --> 00:04:25,065
So we open the dev Chrome tools and, oh, yes of course, connection refused.

52
00:04:25,065 --> 00:04:32,439
So we haven't started the WildFly.

53
00:04:32,439 --> 00:04:44,585
So let's start WildFly (Scrolling) and now if we refresh, yes it's working.

54
00:04:44,585 --> 00:04:54,246
So we have our 100 books and we have the number 1 under it at the top,

55
00:04:54,246 --> 00:04:57,061
meaning we've done 2 HTTP calls,

56
00:04:57,061 --> 00:05:04,547
1 to get the number of books and the second one to get all the books.

57
00:05:04,547 --> 00:05:06,245
Well that's brilliant.

58
00:05:06,245 --> 00:05:12,566
Now let's go to book-detail, so when we click on the book title,

59
00:05:12,566 --> 00:05:14,717
we want the details of the book.

60
00:05:14,717 --> 00:05:21,480
So again, we get rid of our mock data, we use our Book class,

61
00:05:21,480 --> 00:05:25,904
new Book, so we create a new instance of Book.

62
00:05:25,904 --> 00:05:27,633
As you know now,

63
00:05:27,633 --> 00:05:35,337
we inject the bookService in the constructor and we need

64
00:05:35,337 --> 00:05:41,381
to inject another API from Angular, it's the ActivatedRoute.

65
00:05:41,381 --> 00:05:47,178
This API will give us details of the current route.

66
00:05:47,178 --> 00:05:55,877
What we want from this API is the parameter passed on the URI, the bookId.

67
00:05:55,877 --> 00:06:04,949
So we take the route, the API gives us all the parameters of this route,

68
00:06:04,949 --> 00:06:10,736
but we are only interested in bookId.

69
00:06:10,736 --> 00:06:16,976
So then it returns the id of the book and with this id we

70
00:06:16,976 --> 00:06:20,987
invoke the bookService getBook method, passing the id,

71
00:06:20,987 --> 00:06:25,442
and again, we need to subscribe to it.

72
00:06:25,442 --> 00:06:34,849
So that returns the entire book in the variable book and we set this.

73
00:06:34,849 --> 00:06:35,654
book.

74
00:06:35,654 --> 00:06:45,913
So let's open the terminal, refresh the page, save, and now yes, it's working.

75
00:06:45,913 --> 00:06:48,456
So I'm going back.

76
00:06:48,456 --> 00:06:56,759
As you can see, the URI is 1064 and if I click on this one, 1015.

77
00:06:56,759 --> 00:07:00,286
Now I need to delete a book.

78
00:07:00,286 --> 00:07:06,874
So that's quite easy, we get rid of this command and this.

79
00:07:06,874 --> 00:07:07,559
bookService.

80
00:07:07,559 --> 00:07:13,389
deleteBook and now that we already have the bookId,

81
00:07:13,389 --> 00:07:17,015
it's just a matter of going this.

82
00:07:17,015 --> 00:07:17,533
book.

83
00:07:17,533 --> 00:07:18,051
id.

84
00:07:18,051 --> 00:07:21,192
Once we delete, then we route.

85
00:07:21,192 --> 00:07:25,381
So finally and then we do the routing.

86
00:07:25,381 --> 00:07:36,615
And again, we subscribe to this observable, save, refresh, delete, yes 99 books.

87
00:07:36,615 --> 00:07:41,404
Let's delete another one, 98.

88
00:07:41,404 --> 00:07:45,007
Let's delete another one, 97.

89
00:07:45,007 --> 00:07:45,727
Good.

90
00:07:45,727 --> 00:07:51,968
Now the last thing to implement is creating a book.

91
00:07:51,968 --> 00:08:05,393
So if we go in the book-form, we get rid of our mock data, creating a new book.

92
00:08:05,393 --> 00:08:10,507
So Book new Book.

93
00:08:10,507 --> 00:08:16,578
We inject the bookService,

94
00:08:16,578 --> 00:08:28,025
BookService and we call the createBook method on

95
00:08:28,025 --> 00:08:35,423
the bookService passing the book, and if it succeeds,

96
00:08:35,423 --> 00:08:39,913
then we'll navigate back to the book list.

97
00:08:39,913 --> 00:08:47,619
So we go back to our main page and subscribe to it.

98
00:08:47,619 --> 00:08:54,463
Save, refresh, okay let's click on Create.

99
00:08:54,463 --> 00:09:03,623
So let's create a book about Java EE 8, say that it's the best Java EE book ever.

100
00:09:03,623 --> 00:09:11,637
Let's give it a price, number of pages, I've copied a URL for the image,

101
00:09:11,637 --> 00:09:21,043
it's in English, Create, 98, so we went from 97 to 98 and here it is.

102
00:09:21,043 --> 00:09:23,784
So if I click on it, good.

103
00:09:23,784 --> 00:09:26,258
Creating a book works.

104
00:09:26,258 --> 00:09:32,780
Deleting a book, showing the list of the books, everything works.

105
00:09:32,780 --> 00:09:35,166
So let's commit our code.

106
00:09:35,166 --> 00:09:41,545
So we added Book and bookService in all our components.

107
00:09:41,545 --> 00:09:46,446
Swagger CodeGen created all this code under the API and model,

108
00:09:46,446 --> 00:10:00,000
and it's just a matter of changing the message and we can commit. Our application is finished and works.

