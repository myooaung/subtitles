WEBVTT
1
00:00:02.228 --> 00:00:08.747
When talking about interoperability, REST web services is what comes to our mind.

2
00:00:08.747 --> 00:00:13.127
REST stands for representational state transfer.

3
00:00:13.127 --> 00:00:18.608
It is an architectural style based on how the web works.

4
00:00:18.608 --> 00:00:24.868
Applied to services, REST tries to put the web back into web services.

5
00:00:24.868 --> 00:00:28.344
To design RESTful web services, you need to know HTTP,

6
00:00:28.344 --> 00:00:33.655
how it works under the hood and how to make the most of it.

7
00:00:33.655 --> 00:00:35.330
Once this is done,

8
00:00:35.330 --> 00:00:38.898
you understand why RESTful architecture quickly became popular,

9
00:00:38.898 --> 00:00:43.648
because they rely on these very robust transport protocol,

10
00:00:43.648 --> 00:00:47.467
which is HTTP.

11
00:00:47.467 --> 00:00:51.171
Because we want our REST service to be consumed by an Angular application,

12
00:00:51.171 --> 00:00:55.817
we will expose our books in a JSON format.

13
00:00:55.817 --> 00:00:58.781
JSON, or JavaScript Object Notation,

14
00:00:58.781 --> 00:01:03.366
originated with JavaScript for representing simple data structure.

15
00:01:03.366 --> 00:01:05.026
To be precise,

16
00:01:05.026 --> 00:01:10.119
the JSON format is often used by serializing and transmitted

17
00:01:10.119 --> 00:01:12.955
structured data over a network connection.

18
00:01:12.955 --> 00:01:18.393
It rapidly became so popular that today recent web browsers

19
00:01:18.393 --> 00:01:23.785
have native JSON encoding decoding support.

20
00:01:23.785 --> 00:01:24.889
REST and JSON,

21
00:01:24.889 --> 00:01:30.029
that's what our Java EE backend and Angular frontend will need to communicate.

22
00:01:30.029 --> 00:01:35.687
But REST is just a style of architecture with design principles,

23
00:01:35.687 --> 00:01:39.022
which heavily relies on HTTP.

24
00:01:39.022 --> 00:01:46.539
So basically to write RESTful web services in Java we only need an HTTP server,

25
00:01:46.539 --> 00:01:52.395
but this is at the cost of pain to pass HTTP requests and responses of course.

26
00:01:52.395 --> 00:01:56.980
This is where JAX-RS comes to the rescue.

27
00:01:56.980 --> 00:02:02.133
With just a few annotations, we get the full power of HTTP.

28
00:02:02.133 --> 00:02:06.323
Let's recall the web browsing experience of our Angular application.

29
00:02:06.323 --> 00:02:12.348
With a browser we point at a URI, such as www.

30
00:02:12.348 --> 00:02:12.896
bookstore.

31
00:02:12.896 --> 00:02:17.331
com, giving us the book list representation in JSON.

32
00:02:17.331 --> 00:02:21.951
We can achieve this because HTTP has a uniform interface,

33
00:02:21.951 --> 00:02:24.554
such as get, post, and delete.

34
00:02:24.554 --> 00:02:28.752
If the URI is wrong or if something wrong happens,

35
00:02:28.752 --> 00:02:35.100
the web service will send an HTTP status code.

36
00:02:35.100 --> 00:02:36.967
In the REST architectural style,

37
00:02:36.967 --> 00:02:41.982
every piece of information is a resource and these resources are

38
00:02:41.982 --> 00:02:44.984
addressed using uniform resource identifier,

39
00:02:44.984 --> 00:02:45.924
or URIs.

40
00:02:45.924 --> 00:02:51.925
A resource is any piece of information that might be worthwhile referring with

41
00:02:51.925 --> 00:02:56.898
a unique Id made of a server name and a structured address,

42
00:02:56.898 --> 00:02:58.751
such as www.

43
00:02:58.751 --> 00:02:59.368
bookstore.

44
00:02:59.368 --> 00:02:59.986
com/books.

45
00:02:59.986 --> 00:03:09.082
Now that we have a URI pointing at a resource, we want its representation.

46
00:03:09.082 --> 00:03:17.653
This could be text, XML, PDF document, jpeg image or JSON in our case.

47
00:03:17.653 --> 00:03:21.405
Once we know where the resource is and its representation,

48
00:03:21.405 --> 00:03:25.039
we interact with it using a uniform interface.

49
00:03:25.039 --> 00:03:31.701
This is where we can invoke the HTTP method POST, GET, PUT, DELETE.

50
00:03:31.701 --> 00:03:43.000
All these HTTP low level concepts are simplified with JAX-RS API. Let's have a look at some code.

