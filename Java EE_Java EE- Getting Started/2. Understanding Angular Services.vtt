WEBVTT
1
00:00:02.797 --> 00:00:05.487
As we've seen in the two previous modules,

2
00:00:05.487 --> 00:00:07.773
components are very important in Angular.

3
00:00:07.773 --> 00:00:12.476
But these components are made to interact with the user,

4
00:00:12.476 --> 00:00:15.418
not to process complex business logic.

5
00:00:15.418 --> 00:00:18.361
That's the role of a service.

6
00:00:18.361 --> 00:00:23.414
In Angular a service is a TypeScript class whose role is to process

7
00:00:23.414 --> 00:00:27.835
business logic and has no graphical representation.

8
00:00:27.835 --> 00:00:33.384
It can share data and behavior across multiple components.

9
00:00:33.384 --> 00:00:37.708
These services can then be injected into components and also

10
00:00:37.708 --> 00:00:43.053
inject other external services if needed.

11
00:00:43.053 --> 00:00:49.222
A service is a TypeScript class that defines attributes or methods.

12
00:00:49.222 --> 00:00:55.089
Here the method countBooks returns a number and takes no argument.

13
00:00:55.089 --> 00:00:57.402
This code could actually be enough.

14
00:00:57.402 --> 00:01:01.441
If we want to inject this service in our components,

15
00:01:01.441 --> 00:01:04.571
we have to add the decorator Injectable,

16
00:01:04.571 --> 00:01:08.937
which comes from angular/core.

17
00:01:08.937 --> 00:01:12.022
How do we use this service in our book-list.

18
00:01:12.022 --> 00:01:12.365
component?

19
00:01:12.365 --> 00:01:17.955
The BookListComponent displays the number of books on the top of the page.

20
00:01:17.955 --> 00:01:22.864
So what we want to do is when the component initializes,

21
00:01:22.864 --> 00:01:27.044
it invokes the countBooks method of our bookService.

22
00:01:27.044 --> 00:01:33.063
This method returns the number 3, therefore this.

23
00:01:33.063 --> 00:01:35.933
nbBooks = 3.

24
00:01:35.933 --> 00:01:36.890
Good.

25
00:01:36.890 --> 00:01:40.070
But where is this bookService coming from?

26
00:01:40.070 --> 00:01:43.566
We use the injection mechanism built in Angular.

27
00:01:43.566 --> 00:01:48.693
In the constructor of the component we define the variable

28
00:01:48.693 --> 00:01:53.346
lowercase bookService of type BookService.

29
00:01:53.346 --> 00:01:57.866
And this is enough for Angular to inject the bookService into this component,

30
00:01:57.866 --> 00:02:04.826
so we can just use it by writing this.

31
00:02:04.826 --> 00:02:05.599
bookService.

32
00:02:05.599 --> 00:02:07.990
Let's come back to our bookService.

33
00:02:07.990 --> 00:02:09.982
Something is not right here.

34
00:02:09.982 --> 00:02:15.592
We don't want to return a fixed value here, number 3.

35
00:02:15.592 --> 00:02:19.709
What we want is invoke our REST APIs that returns the

36
00:02:19.709 --> 00:02:23.179
number of books from the database.

37
00:02:23.179 --> 00:02:28.109
So let's change this and do an http.

38
00:02:28.109 --> 00:02:31.191
get on our /books/count endpoint.

39
00:02:31.191 --> 00:02:33.930
I'm sure you wonder where this.

40
00:02:33.930 --> 00:02:35.299
http comes from.

41
00:02:35.299 --> 00:02:35.662
Well,

42
00:02:35.662 --> 00:02:38.570
we've injected it in our constructor and imported

43
00:02:38.570 --> 00:02:41.532
it from the Angular HTTP module.

44
00:02:41.532 --> 00:02:47.774
This invokes our Java EE back-end via an HTTP call,

45
00:02:47.774 --> 00:02:51.906
gets the number of books and returns a number.

46
00:02:51.906 --> 00:02:53.719
Well, not really.

47
00:02:53.719 --> 00:02:58.555
The Angular HTTP module doesn't return a number.

48
00:02:58.555 --> 00:03:01.991
It returns an observable of a number.

49
00:03:01.991 --> 00:03:06.936
The observable is the reactive API mentioned at the beginning of this

50
00:03:06.936 --> 00:03:15.175
module and it comes from RxJS module or Reactive JavaScript.

51
00:03:15.175 --> 00:03:19.539
So let's step back, what is an observable?

52
00:03:19.539 --> 00:03:23.562
The observable is the main API for reactive programming

53
00:03:23.562 --> 00:03:31.697
that we find in JavaScript with RxJS, but also in Java with RxJava.

54
00:03:31.697 --> 00:03:33.718
Reactive programming is event-driven,

55
00:03:33.718 --> 00:03:37.738
that means we built an application based on events.

56
00:03:37.738 --> 00:03:43.161
You send an event you subscribe to this event if you are interested in it,

57
00:03:43.161 --> 00:03:47.314
and then combine, filter, or group several events together.

58
00:03:47.314 --> 00:03:56.136
Angular is built on reactive programming, so is the HTTP module of Angular.

59
00:03:56.136 --> 00:04:01.922
As an example, let's build an observable from an array of digits.

60
00:04:01.922 --> 00:04:04.625
This line of code will actually do nothing,

61
00:04:04.625 --> 00:04:08.201
that's because we need to subscribe to an observable.

62
00:04:08.201 --> 00:04:16.239
This means that for each digit, that we call x here, we log it to the console.

63
00:04:16.239 --> 00:04:22.448
So this code will just display 1, 2, 3, 4, 5 to the console.

64
00:04:22.448 --> 00:04:27.454
Then we can apply computation on these events using the map.

65
00:04:27.454 --> 00:04:32.917
Here we take an x and multiply it by 10.

66
00:04:32.917 --> 00:04:40.681
So if we take our 5 numbers, apply the map function, we get 10, 20, 30, 40, 50.

67
00:04:40.681 --> 00:04:46.403
We've multiplied each of our numbers by 10.

68
00:04:46.403 --> 00:04:49.095
And we can filter these events.

69
00:04:49.095 --> 00:04:54.030
Here we only take x if x is greater than 25.

70
00:04:54.030 --> 00:04:58.384
We've mapped our numbers so we now have 10,

71
00:04:58.384 --> 00:05:04.471
20, 30, 40, 50, we apply a filter and only get 30,

72
00:05:04.471 --> 00:05:08.186
40, 50, which are greater than 25.

73
00:05:08.186 --> 00:05:11.203
All this in only a few lines of code.

74
00:05:11.203 --> 00:05:14.505
Reactive programming is way much richer than this example

75
00:05:14.505 --> 00:05:22.000
and could be covered on its own course. But this is enough for what we want to do.

