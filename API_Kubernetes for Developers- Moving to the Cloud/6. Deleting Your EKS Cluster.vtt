WEBVTT
1
00:00:01.670 --> 00:00:04.226
If you're finished with a cluster and want to clean things up so

2
00:00:04.226 --> 00:00:07.266
you aren't getting charged for idle resources,

3
00:00:07.266 --> 00:00:11.783
you'll first delete the load balancer service by using kubectl delete service,

4
00:00:11.783 --> 00:00:14.361
then the name of the load balancer service.

5
00:00:14.361 --> 00:00:14.922
Next,

6
00:00:14.922 --> 00:00:18.661
you'll delete the cluster with eksctl delete

7
00:00:18.661 --> 00:00:21.293
cluster and the name of the cluster.

8
00:00:21.293 --> 00:00:24.597
If you're no longer using the images you pushed to the registry,

9
00:00:24.597 --> 00:00:26.731
you'll want to delete those as well.

10
00:00:26.731 --> 00:00:31.462
You can list the images in a repository with aws ecr

11
00:00:31.462 --> 00:00:35.356
list-images and the repository name.

12
00:00:35.356 --> 00:00:39.087
To delete individual images or a list of specific images,

13
00:00:39.087 --> 00:00:47.337
use aws ecr batch-delete-image with the repository name and a list of image ids.

14
00:00:47.337 --> 00:00:48.636
If you're completely done with a repository,

15
00:00:48.636 --> 00:00:54.374
you can delete it with the aws ecr delete-repository command.

16
00:00:54.374 --> 00:00:55.374
Pass in the repository name,

17
00:00:55.374 --> 00:00:59.764
then if you want to just delete any images still in the repository,

18
00:00:59.764 --> 00:01:02.834
include the --force flag.

19
00:01:02.834 --> 00:01:06.231
Let's start out deleting the load balancer service.

20
00:01:06.231 --> 00:01:10.171
We'll get the name of the service, then run kubectl delete service.

21
00:01:10.171 --> 00:01:16.194
Next, we'll delete the cluster using eksctl delete cluster.

22
00:01:16.194 --> 00:01:20.713
Behind the scenes, eksctl is using cloud formation stacks.

23
00:01:20.713 --> 00:01:25.215
You can access cloud formation from the web console to see what's going on.

24
00:01:25.215 --> 00:01:29.711
We can see the status of DELETE_IN_PROGRESS for the stack that's being deleted.

25
00:01:29.711 --> 00:01:33.619
Once eksctl delete cluster returns on the command line,

26
00:01:33.619 --> 00:01:37.141
some operations may still be running in cloud formation.

27
00:01:37.141 --> 00:01:41.372
When we refresh, we can see the first stack is deleted,

28
00:01:41.372 --> 00:01:42.981
but the second stack is still in progress.

29
00:01:42.981 --> 00:01:47.521
We'll give it a couple minutes, refresh, and now it's deleted.

30
00:01:47.521 --> 00:01:49.680
Finally, let's delete the images.

31
00:01:49.680 --> 00:01:54.813
We'll list the images with aws ecr list-images.

32
00:01:54.813 --> 00:01:59.276
Here's the information for both images that we pushed to the repository.

33
00:01:59.276 --> 00:02:04.015
We'll delete the 2.0 version using aws ecr batch-delete-image,

34
00:02:04.015 --> 00:02:09.285
then pass in the name of the repository and the image id.

35
00:02:09.285 --> 00:02:14.088
When we run list-images, only the 1.0 version remains in the repository.

36
00:02:14.088 --> 00:02:16.036
Let's go ahead and delete the repository,

37
00:02:16.036 --> 00:02:17.871
and we'll include the --force flag,

38
00:02:17.871 --> 00:02:23.312
which will also delete the 1.0 version that is still in the repository.

39
00:02:23.312 --> 00:02:24.266
When the command completes,

40
00:02:24.266 --> 00:02:28.546
we can double check in the web console under ECR and

41
00:02:28.546 --> 00:02:32.435
see that there are no repositories.

42
00:02:32.435 --> 00:02:32.725
Congratulations!

43
00:02:32.725 --> 00:02:36.929
You can now use the Amazon Elastic Kubernetes Service.

44
00:02:36.929 --> 00:02:40.353
You've gone through an entire application lifecycle; creating,

45
00:02:40.353 --> 00:02:42.410
scaling, updating, and deleting.

46
00:02:42.410 --> 00:02:45.408
Now you can try it out with your own app.

47
00:02:45.408 --> 00:02:49.215
I encourage you to also check out the modules on Azure and

48
00:02:49.215 --> 00:02:56.000
Google so you can decide for yourself which cloud Kubernetes service makes the most sense for you.

