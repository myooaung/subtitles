1
00:00:01,334 --> 00:00:04,987
When you're trying to decide which cloud provider to use for Managed Kubernetes,

2
00:00:04,987 --> 00:00:06,738
a good place to start is,

3
00:00:06,738 --> 00:00:10,357
are you already using a cloud provider for something else?

4
00:00:10,357 --> 00:00:13,774
It may make sense to leverage and expand your existing

5
00:00:13,774 --> 00:00:16,760
skills for a particular cloud provider.

6
00:00:16,760 --> 00:00:17,032
Next,

7
00:00:17,032 --> 00:00:19,882
is there some unique requirement that a particular cloud

8
00:00:19,882 --> 00:00:22,045
provider can fulfill better than others?

9
00:00:22,045 --> 00:00:25,364
For example, geographic locations of clusters,

10
00:00:25,364 --> 00:00:27,732
high availability configuration options,

11
00:00:27,732 --> 00:00:31,167
specialized node types and storage options.

12
00:00:31,167 --> 00:00:31,840
In some cases,

13
00:00:31,840 --> 00:00:34,007
you may have performance requirements that will work

14
00:00:34,007 --> 00:00:36,313
better on one cloud provider than another.

15
00:00:36,313 --> 00:00:40,286
The nice thing is that you can easily set up a cluster with your

16
00:00:40,286 --> 00:00:42,617
application on multiple cloud providers to evaluate your

17
00:00:42,617 --> 00:00:45,183
requirements and determine the best fit.

18
00:00:45,183 --> 00:00:48,693
Another important item to evaluate is ease of use.

19
00:00:48,693 --> 00:00:50,710
For a given cloud provider,

20
00:00:50,710 --> 00:00:56,237
how easy is it for you to perform common tasks such as create a cluster,

21
00:00:56,237 --> 00:01:01,788
configure kubectl, manage node pools, push and update images,

22
00:01:01,788 --> 00:01:05,211
monitor your resources, and delete a cluster.

23
00:01:05,211 --> 00:01:08,599
Ideally you should be scripting these actions so they are repeatable for

24
00:01:08,599 --> 00:01:11,957
different environments of your application such as dev,

25
00:01:11,957 --> 00:01:13,538
test, and production.

26
00:01:13,538 --> 00:01:18,027
The command line interface or CLI of each cloud provider can simply your scripts

27
00:01:18,027 --> 00:01:21,720
so be sure to consider the features available in each CLI.

28
00:01:21,720 --> 00:01:26,251
In this course we'll mainly be using the CLI of each cloud provider

29
00:01:26,251 --> 00:01:30,068
in our demos so you can get a feel for each one.

30
00:01:30,068 --> 00:01:34,272
For each cloud provider, we're going to walk through a similar workflow sequence.

31
00:01:34,272 --> 00:01:37,470
First, we'll create an account, set up the CLI,

32
00:01:37,470 --> 00:01:41,594
create a Kubernetes cluster, and configure kubectl.

33
00:01:41,594 --> 00:01:44,718
Next, we'll push an image to a cloud registry,

34
00:01:44,718 --> 00:01:47,506
create a deployment from the registry image,

35
00:01:47,506 --> 00:01:52,537
scale pods and nodes, and update the application with a new image.

36
00:01:52,537 --> 00:01:52,763
Finally,

37
00:01:52,763 --> 00:01:56,206
we'll take a look at the web console and how you can

38
00:01:56,206 --> 00:01:59,755
access the container registry, cluster, and node pools,

39
00:01:59,755 --> 00:02:01,784
monitoring metrics, and billing details.

40
00:02:01,784 --> 00:02:03,530
At the end of each module,

41
00:02:03,530 --> 00:02:06,708
you'll also see how to delete the cluster and clean up any

42
00:02:06,708 --> 00:02:09,262
additional resources that were allocated.

43
00:02:09,262 --> 00:02:12,099
We've covered what running in the cloud looks like,

44
00:02:12,099 --> 00:02:16,809
as well as what questions you can ask to evaluate different cloud options.

45
00:02:16,809 --> 00:02:18,609
Now you're ready to see it in action.

46
00:02:18,609 --> 00:02:22,209
Join me in the next modules to see an end-to-end demo of

47
00:02:22,209 --> 00:02:28,009
Microsoft Azure Kubernetes Service, AKS; Amazon Elastic Kubernetes Service,

48
00:02:28,009 --> 00:02:31,277
EKS; and Google Kubernetes Engine, GKE.

49
00:02:31,277 --> 00:02:33,598
Even if you have a preference already,

50
00:02:33,598 --> 00:02:36,772
I encourage you to check out all three so that you have a

51
00:02:36,772 --> 00:02:43,000
better idea of what it's like to set up, deploy, update, and delete a cluster in each cloud provider.

