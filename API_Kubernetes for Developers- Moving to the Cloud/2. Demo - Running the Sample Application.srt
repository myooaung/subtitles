1
00:00:02,015 --> 00:00:05,470
Let's download and run the sample app so that you can see what to expect.

2
00:00:05,470 --> 00:00:09,541
We'll build the Docker image with the app using the provided Docker file,

3
00:00:09,541 --> 00:00:13,144
then run a container locally so you can see what it does before

4
00:00:13,144 --> 00:00:16,192
you deploy it to your Kubernetes cluster.

5
00:00:16,192 --> 00:00:19,464
The demo.zip file contains everything you'll need to create a

6
00:00:19,464 --> 00:00:22,768
Docker image for the sample application.

7
00:00:22,768 --> 00:00:25,737
This simplifies the Docker image setup as our main focus is

8
00:00:25,737 --> 00:00:28,966
how to deploy to the Kubernetes cluster.

9
00:00:28,966 --> 00:00:31,174
App.py is the flask app,

10
00:00:31,174 --> 00:00:34,442
and the dockerfile and requirements files will be used

11
00:00:34,442 --> 00:00:37,629
when we create the Docker image.

12
00:00:37,629 --> 00:00:41,040
As you can see, this is a very simple REST service.

13
00:00:41,040 --> 00:00:45,691
Version 1 of the application returns Hello from application and a counter.

14
00:00:45,691 --> 00:00:49,388
This is purely for demo purposes to see how the requests are

15
00:00:49,388 --> 00:00:52,262
handled by different instances of the application running on

16
00:00:52,262 --> 00:00:54,468
different pods in Kubernetes.

17
00:00:54,468 --> 00:00:59,237
Version 2 of the application says, Goodbye from application,

18
00:00:59,237 --> 00:01:01,018
plus the same counter.

19
00:01:01,018 --> 00:01:04,851
Let's start up the application so you can see what it does.

20
00:01:04,851 --> 00:01:08,935
Navigate to the demo directory, then run the application.

21
00:01:08,935 --> 00:01:12,607
The command is python app.py.

22
00:01:12,607 --> 00:01:17,607
With the application running, we can check port 5000 on localhost.

23
00:01:17,607 --> 00:01:19,483
Here is the message from the application.

24
00:01:19,483 --> 00:01:25,348
If I refresh, you can see the counter incrementing.

25
00:01:25,348 --> 00:01:27,117
Now that you see what the application does,

26
00:01:27,117 --> 00:01:29,145
let's take a look at the Docker file.

27
00:01:29,145 --> 00:01:35,721
This will simply use a python: 3.8 -slim-buster image as the base,

28
00:01:35,721 --> 00:01:38,977
copy the requirements file so that flask can be installed,

29
00:01:38,977 --> 00:01:43,540
copy the source, then start up the app.

30
00:01:43,540 --> 00:01:46,253
Let's build an image using the Docker file.

31
00:01:46,253 --> 00:01:49,768
Right now I have no images on my local machine.

32
00:01:49,768 --> 00:01:53,787
I'll run a Docker build.

33
00:01:53,787 --> 00:01:57,065
Now we can see the image that was just built.

34
00:01:57,065 --> 00:02:00,091
Note the image id, as you'll need this later.

35
00:02:00,091 --> 00:02:02,424
Let's run this Docker image in a container.

36
00:02:02,424 --> 00:02:09,952
We'll map port 5000, then give the image id of what we just built.

37
00:02:09,952 --> 00:02:10,972
The application is up.

38
00:02:10,972 --> 00:02:14,511
Iâ€™m running this on a cloud machine so I'll hit the URL,

39
00:02:14,511 --> 00:02:18,817
and here we can see the message from the application.

40
00:02:18,817 --> 00:02:27,000
You can download the sample files, commands, and links to documentation under the Exercise Files section of this course.

