WEBVTT
1
00:00:01.630 --> 00:00:02.649
To create a cluster,

2
00:00:02.649 --> 00:00:08.442
you'll need to run the az aks create command with two or three parameters.

3
00:00:08.442 --> 00:00:10.453
--Resource-group is the name of the resource group you

4
00:00:10.453 --> 00:00:13.121
created and where this cluster will be placed.

5
00:00:13.121 --> 00:00:16.595
--Name is the name you want for your cluster.

6
00:00:16.595 --> 00:00:19.897
--Node-vm-size is what type of VMs you want to use

7
00:00:19.897 --> 00:00:21.701
for the nodes in your node pool.

8
00:00:21.701 --> 00:00:23.473
This is an optional parameter,

9
00:00:23.473 --> 00:00:26.408
but you might have to use it if the default node type

10
00:00:26.408 --> 00:00:28.753
is not available in your location.

11
00:00:28.753 --> 00:00:32.178
When you put it all together, it would look something like this.

12
00:00:32.178 --> 00:00:34.450
Again, some shorthand flags are used.

13
00:00:34.450 --> 00:00:38.317
Az aks create -g, name of the resource group,

14
00:00:38.317 --> 00:00:42.765
-n, name for the cluster, --node- vm.size,

15
00:00:42.765 --> 00:00:47.008
then a valid node size.

16
00:00:47.008 --> 00:00:48.506
When you're running this in your actual environment,

17
00:00:48.506 --> 00:00:54.003
don't be surprised if it takes several minutes for these commands to complete.

18
00:00:54.003 --> 00:00:56.612
In the end you should get a message that it has succeeded.

19
00:00:56.612 --> 00:01:02.211
At this point it is just the cluster itself; we don't have anything deployed.

20
00:01:02.211 --> 00:01:07.297
It's basically just Kube Master, the infrastructure, and your node pool.

21
00:01:07.297 --> 00:01:11.514
In order to create a deployment in your Azure Kubernetes Service cluster,

22
00:01:11.514 --> 00:01:15.199
you need to explicitly set a few permissions.

23
00:01:15.199 --> 00:01:20.144
You'll use the az aks show and az acr show commands to get the

24
00:01:20.144 --> 00:01:23.182
necessary ids of your cluster and registry.

25
00:01:23.182 --> 00:01:27.225
Then you'll use az role assignment create to give your

26
00:01:27.225 --> 00:01:30.310
cluster permission to pull from your registry.

27
00:01:30.310 --> 00:01:34.220
You'll also need to get credentials for kubectl to connect to this cluster.

28
00:01:34.220 --> 00:01:37.965
You'll use the az aks get-credentials command for this,

29
00:01:37.965 --> 00:01:41.598
passing in the name of the resource group and the name of the cluster.

30
00:01:41.598 --> 00:01:47.906
You may also need to enable monitoring with the az aks enable-addons command.

31
00:01:47.906 --> 00:01:52.281
If monitoring is already enabled for the cluster, it will let you know.

32
00:01:52.281 --> 00:01:54.242
Once the permissions are in place,

33
00:01:54.242 --> 00:01:58.027
we'll use kubectl to create a deployment named demo app

34
00:01:58.027 --> 00:02:03.773
using the image we pushed earlier, identified by the full name that we pushed.

35
00:02:03.773 --> 00:02:08.243
For example, kubectl create deployment, deployment name,

36
00:02:08.243 --> 00:02:13.159
--image=, then the image that was pushed to the repository.

37
00:02:13.159 --> 00:02:14.476
Once the app is running,

38
00:02:14.476 --> 00:02:17.490
we'll need a load balancer service to map the ports and

39
00:02:17.490 --> 00:02:19.861
allow us to hit the app externally.

40
00:02:19.861 --> 00:02:22.314
This is also accomplished with kubectl.

41
00:02:22.314 --> 00:02:26.061
Kubectl expose deployment, deployment name,

42
00:02:26.061 --> 00:02:30.205
type is LoadBalancer, then the port and target port.

43
00:02:30.205 --> 00:02:36.067
In this case the app is running on port 5000 so we just kept that mapping.

44
00:02:36.067 --> 00:02:40.316
There's nothing restricting you from having a different port and target port.

45
00:02:40.316 --> 00:02:43.179
I'm going to make a couple of environment variables so

46
00:02:43.179 --> 00:02:46.305
it's easier to assign these permissions.

47
00:02:46.305 --> 00:02:50.812
First, I'll get the id for the cluster, next the id for the registry.

48
00:02:50.812 --> 00:02:52.986
Now I can create the role assignment,

49
00:02:52.986 --> 00:02:57.691
allowing the cluster to pull from the registry.

50
00:02:57.691 --> 00:02:59.742
Again, this might take a couple of minutes,

51
00:02:59.742 --> 00:03:03.011
but in the end, you should see something like this.

52
00:03:03.011 --> 00:03:05.809
Next, we'll get the credentials to configure kubectl,

53
00:03:05.809 --> 00:03:10.752
then try a kubectl get nodes to make sure that it works.

54
00:03:10.752 --> 00:03:13.357
Here I can see the three nodes that are in the node pool

55
00:03:13.357 --> 00:03:16.118
in the cluster that I just created.

56
00:03:16.118 --> 00:03:19.677
There are no pods for our application, because we haven't deployed it yet.

57
00:03:19.677 --> 00:03:23.822
With permissions in place, you can now create the deployment.

58
00:03:23.822 --> 00:03:24.558
I'll call it demo-app,

59
00:03:24.558 --> 00:03:27.763
and it's going to use the 1.0 version of our

60
00:03:27.763 --> 00:03:30.563
application that we pushed to the repository.

61
00:03:30.563 --> 00:03:33.431
I'll expose the deployment on port 5000,

62
00:03:33.431 --> 00:03:39.322
then run kubectl get service to find the external IP so we can try it out.

63
00:03:39.322 --> 00:03:42.454
I'll bring up a browser and hit that IP at port 5000,

64
00:03:42.454 --> 00:03:45.882
and here we could see the message from our application.

65
00:03:45.882 --> 00:03:48.185
Everything is working as we expect.

66
00:03:48.185 --> 00:03:56.000
You now have an application that you have built and pushed to the cloud running on a cloud Kubernetes cluster.

