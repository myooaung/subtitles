WEBVTT
1
00:00:01.547 --> 00:00:03.932
In order to push an image to the Google Container Registry,

2
00:00:03.932 --> 00:00:07.019
the tag must follow a certain format.

3
00:00:07.019 --> 00:00:10.365
Hostname determines which Google Container Registry

4
00:00:10.365 --> 00:00:12.905
location you want to use for your repository.

5
00:00:12.905 --> 00:00:17.778
You can find the list of the different geographic hosts in the documentation.

6
00:00:17.778 --> 00:00:20.044
Project-id will associate this image with a

7
00:00:20.044 --> 00:00:23.394
particular Google Cloud Platform project.

8
00:00:23.394 --> 00:00:26.468
Image-name and tag are whatever you want them to be for your image.

9
00:00:26.468 --> 00:00:38.791
For example, docker build -t, gcr.io /demo-project-123/demo: 1.0 space dot,

10
00:00:38.791 --> 00:00:42.370
indicating that the Docker file to build is in the current directory.

11
00:00:42.370 --> 00:00:45.507
You can also use the docker tag command on an existing

12
00:00:45.507 --> 00:00:47.466
image following the same format.

13
00:00:47.466 --> 00:00:51.672
For example, docker tag, image id, hostname,

14
00:00:51.672 --> 00:00:56.354
slash, project id, slash, image name, colon,

15
00:00:56.354 --> 00:00:57.033
tag.

16
00:00:57.033 --> 00:00:59.198
Before you run a Docker push for the first time,

17
00:00:59.198 --> 00:01:05.426
you will need to run gcloud auth configure-docker to set up a cred helper.

18
00:01:05.426 --> 00:01:06.999
Then simply push the image.

19
00:01:06.999 --> 00:01:15.214
For example, docker push gcr.io /, project id, /demo: 1.0.

20
00:01:15.214 --> 00:01:17.419
I don't have any Docker images built,

21
00:01:17.419 --> 00:01:20.944
so I'm going to build one using the demo docker file and tag it with the

22
00:01:20.944 --> 00:01:25.564
correct format so we can push it to the Google Cloud Registry.

23
00:01:25.564 --> 00:01:27.315
Now we can see the image that's been built.

24
00:01:27.315 --> 00:01:29.626
I'll run it just to double check that everything's good,

25
00:01:29.626 --> 00:01:34.050
and when I hit it from a browser, I can see that it's up and running.

26
00:01:34.050 --> 00:01:37.235
Now we can run gcloud auth configure-docker.

27
00:01:37.235 --> 00:01:41.391
This will allow us to push the image to the registry in our account.

28
00:01:41.391 --> 00:01:47.798
I'll run the docker push, and it was successful.

29
00:01:47.798 --> 00:01:51.134
We'll use a gcloud command to create the Kubernetes cluster and

30
00:01:51.134 --> 00:01:54.075
specify how many nodes we want to have in that cluster.

31
00:01:54.075 --> 00:01:56.860
I'm going to start with three nodes.

32
00:01:56.860 --> 00:02:00.427
The command is gcloud container clusters create,

33
00:02:00.427 --> 00:02:07.595
cluster name, --num-nodes= desired number of nodes; in this case,

34
00:02:07.595 --> 00:02:08.053
3.

35
00:02:08.053 --> 00:02:12.157
Next we'll use kubectl to create a deployment named demo-app.

36
00:02:12.157 --> 00:02:17.184
Using the image we pushed earlier, identified by the full name that we pushed,

37
00:02:17.184 --> 00:02:22.084
for example, kubectl create deployment, deployment name,

38
00:02:22.084 --> 00:02:27.541
--image=, then the image that we pushed to the repository.

39
00:02:27.541 --> 00:02:28.515
Once the app is running,

40
00:02:28.515 --> 00:02:31.559
we'll need a load balancer service to map the ports and

41
00:02:31.559 --> 00:02:33.871
allow us to hit the app externally.

42
00:02:33.871 --> 00:02:36.504
This is also accomplished with kubectl.

43
00:02:36.504 --> 00:02:40.525
Kubectl expose deployment, deployment name,

44
00:02:40.525 --> 00:02:47.878
--type=LoadBalancer --port 5000, --target-port 5000.

45
00:02:47.878 --> 00:02:52.854
In this case the app is running on port 5000 so we just keep that mapping.

46
00:02:52.854 --> 00:02:55.358
Now we're ready to create the demo cluster.

47
00:02:55.358 --> 00:02:57.752
I'll start it out with three nodes.

48
00:02:57.752 --> 00:02:59.257
Once the cluster is created,

49
00:02:59.257 --> 00:03:05.452
we can run kubectl get nodes and see the three nodes that are ready.

50
00:03:05.452 --> 00:03:09.124
We haven't created a deployment yet so there are no pods.

51
00:03:09.124 --> 00:03:13.125
Let's create a deployment using the image that we just pushed to the registry.

52
00:03:13.125 --> 00:03:17.253
We can see that the pod is starting up, we'll give it a minute,

53
00:03:17.253 --> 00:03:19.101
and now it's running.

54
00:03:19.101 --> 00:03:22.318
Next, we want to be able to see it so we'll create a load balancer.

55
00:03:22.318 --> 00:03:26.482
Run kubectl get service to get the external IP.

56
00:03:26.482 --> 00:03:33.000
Now you can hit that IP from a browser at port 5000 and see the application running.

