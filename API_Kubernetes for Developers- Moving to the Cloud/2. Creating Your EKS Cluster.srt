1
00:00:01,584 --> 00:00:03,306
To create an elastic container registry,

2
00:00:03,306 --> 00:00:09,511
you'll need to run the aws ecr create command and provide a repository name.

3
00:00:09,511 --> 00:00:10,058
Next,

4
00:00:10,058 --> 00:00:15,040
run aws ecr get-login with the region of the ECR

5
00:00:15,040 --> 00:00:19,113
repository you want to log into, and the --no-include-email flag.

6
00:00:19,113 --> 00:00:22,408
The output of this command will be a Docker login command that

7
00:00:22,408 --> 00:00:26,597
you can then run to log into the repository.

8
00:00:26,597 --> 00:00:30,731
When you create your ECR repository, make note of the repository URI.

9
00:00:30,731 --> 00:00:35,234
You're going to need this when you build and push the Docker images.

10
00:00:35,234 --> 00:00:41,555
Next, run aws ecr get-login with the region and the --no-include-email flag.

11
00:00:41,555 --> 00:00:46,324
This will output a Docker login command that you can then copy and run.

12
00:00:46,324 --> 00:00:48,749
You should see a Login Succeeded message.

13
00:00:48,749 --> 00:00:50,602
Note also that you can manage your Docker credentials

14
00:00:50,602 --> 00:00:54,508
however you need to on your system.

15
00:00:54,508 --> 00:00:57,631
In order to push an image to the Amazon Elastic Container Registry,

16
00:00:57,631 --> 00:01:00,130
it must follow a certain format.

17
00:01:00,130 --> 00:01:03,920
RegistryId is the id of the registry you created

18
00:01:03,920 --> 00:01:05,832
where you want to manage the image.

19
00:01:05,832 --> 00:01:10,342
The host will include the region where the repository is located.

20
00:01:10,342 --> 00:01:15,722
Dkr.ecr and amazonaws.com are constant.

21
00:01:15,722 --> 00:01:18,612
Image-name and tag are whatever you want them to be for your image.

22
00:01:18,612 --> 00:01:25,152
For example, docker build -t, image id, .dkr .ecr.

23
00:01:25,152 --> 00:01:32,333
region, .amazonaws .com /demo: 1.0 space dot,

24
00:01:32,333 --> 00:01:36,588
indicating that the Docker file to build is in the current directory.

25
00:01:36,588 --> 00:01:39,783
You can also use the docker tag command on an existing

26
00:01:39,783 --> 00:01:41,770
image following the same format.

27
00:01:41,770 --> 00:01:45,371
Once you've logged into the repository, you can simply push the image.

28
00:01:45,371 --> 00:01:51,584
For example, docker push, then the full image name.

29
00:01:51,584 --> 00:01:55,449
I'm in the directory with the demo app files and the Docker file.

30
00:01:55,449 --> 00:01:59,534
Let's go ahead and build an image for the 1.0 version of the demo app.

31
00:01:59,534 --> 00:02:02,608
Once it's built, we can see the Docker image.

32
00:02:02,608 --> 00:02:02,971
Next,

33
00:02:02,971 --> 00:02:07,255
run a docker push to push the 1.0 version up to the ECR

34
00:02:07,255 --> 00:02:09,676
repository that we created earlier.

35
00:02:09,676 --> 00:02:11,587
To create a cluster,

36
00:02:11,587 --> 00:02:17,332
you'll run the eksctl create cluster command with two or three parameters.

37
00:02:17,332 --> 00:02:18,910
--Name is the name of the cluster,

38
00:02:18,910 --> 00:02:23,432
--region is which region you want the cluster to be created in.

39
00:02:23,432 --> 00:02:26,770
You may need to specify a list of availability zones with the

40
00:02:26,770 --> 00:02:30,435
--zones flag if you get an unsupported availability zone

41
00:02:30,435 --> 00:02:33,861
exception creating your cluster, otherwise it is optional.

42
00:02:33,861 --> 00:02:37,939
When you put it all together, it will look something like this,

43
00:02:37,939 --> 00:02:42,736
eksctl create cluster --name, cluster name,

44
00:02:42,736 --> 00:02:45,601
--region, cluster region, --zones,

45
00:02:45,601 --> 00:02:50,232
and a common delimited list of availability zones.

46
00:02:50,232 --> 00:02:54,784
Let's run the eksctl create cluster command.

47
00:02:54,784 --> 00:02:56,364
This may take a few minutes, but in the end,

48
00:02:56,364 --> 00:03:01,335
you should see the message that your cluster is ready.

49
00:03:01,335 --> 00:03:04,032
At this point we just have a Kubernetes cluster; we

50
00:03:04,032 --> 00:03:06,269
don't have any apps deployed to it yet.

51
00:03:06,269 --> 00:03:09,997
We'll use kubectl to create a deployment named demo app

52
00:03:09,997 --> 00:03:15,770
using the image we pushed earlier, identified by the full name that we pushed.

53
00:03:15,770 --> 00:03:19,518
For example, kubectl create deployment, deployment name,

54
00:03:19,518 --> 00:03:24,014
--image=, then the image that was pushed to the repository.

55
00:03:24,014 --> 00:03:25,273
Once the app is running,

56
00:03:25,273 --> 00:03:28,297
we'll need a load balancer service to map the ports and

57
00:03:28,297 --> 00:03:30,691
allow us to hit the app externally.

58
00:03:30,691 --> 00:03:33,679
This is also accomplished with kubectl.

59
00:03:33,679 --> 00:03:37,865
Kubectl expose deployment, deployment name,

60
00:03:37,865 --> 00:03:46,569
--type=LoadBalancer --port 5000 --target-port 5000.

61
00:03:46,569 --> 00:03:51,196
In this case, the app is running on port 5000 so we just kept that mapping.

62
00:03:51,196 --> 00:03:55,716
We'll run kubectl get nodes to verify that we're connected to our cluster.

63
00:03:55,716 --> 00:03:59,912
Notice that we haven't deployed any application pods yet.

64
00:03:59,912 --> 00:04:04,505
Run kubectl create deployment to deploy the 1.0 version of our demo app,

65
00:04:04,505 --> 00:04:06,589
and the pod is up and running.

66
00:04:06,589 --> 00:04:10,872
Let's expose the deployment so we can hit it and see what it looks like.

67
00:04:10,872 --> 00:04:15,905
Run kubectl get service to get the external IP.

68
00:04:15,905 --> 00:04:19,684
Note that AWS uses an elb URL for the external IP.

69
00:04:19,684 --> 00:04:27,000
If we hit in a browser, we can see the message from our demo app that it is working as expected.

