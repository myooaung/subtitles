WEBVTT
1
00:00:00.270 --> 00:00:06.180
In this video you're going to learn how to make HDTV requests from your no J.S. application which I'm

2
00:00:06.180 --> 00:00:08.040
very excited to get to.

3
00:00:08.040 --> 00:00:09.660
Why is this so important.

4
00:00:09.690 --> 00:00:14.960
Because this is how your application is gonna be able to communicate with the outside world.

5
00:00:15.000 --> 00:00:20.850
So if you want to get real time weather data into your app you're gonna have to make an HDTV request

6
00:00:21.150 --> 00:00:27.890
if you want to send an email to someone from your application that's gonna be a another H TTP request.

7
00:00:27.960 --> 00:00:34.080
And if you wanted to send someone a text message using something like the Twilio API that would also

8
00:00:34.110 --> 00:00:36.390
be an HDTV request.

9
00:00:36.480 --> 00:00:43.370
It is at the core of building real world applications that actually communicate with the outside world.

10
00:00:43.380 --> 00:00:48.480
Now with those three examples the weather data emails sending and text message sending.

11
00:00:48.570 --> 00:00:56.310
It's gonna be our node application making HDTV requests to another company's servers to get some task

12
00:00:56.370 --> 00:00:57.170
done.

13
00:00:57.210 --> 00:01:02.540
That means somewhere in our code we're gonna specify that you are well we want to make a request to.

14
00:01:02.670 --> 00:01:09.330
This is provided via the api is documentation we're going to fire that request off sending some data

15
00:01:09.360 --> 00:01:11.900
possibly and getting a response back.

16
00:01:11.970 --> 00:01:17.160
So to get weather information I would send to the location I want the weather information for I would

17
00:01:17.160 --> 00:01:22.500
then get back the weather information and I could use it in whatever way I wanted to.

18
00:01:22.500 --> 00:01:25.250
Now let's go ahead and explore the weather API.

19
00:01:25.260 --> 00:01:33.060
We're gonna use in this video if we head over to the browser we can find this over at Dark Sky dot net

20
00:01:33.330 --> 00:01:39.630
so dark sky dot net is just a standard weather service you can use it to get your forecast.

21
00:01:39.660 --> 00:01:44.070
They have maps they have timelines everything you'd expect from a weather service.

22
00:01:44.070 --> 00:01:48.370
Now this is obviously for people who want to get the weather in their location.

23
00:01:48.420 --> 00:01:51.240
It is a user friendly version of the data.

24
00:01:51.360 --> 00:01:55.330
What we want is the raw data so we can use it in our application.

25
00:01:55.440 --> 00:02:00.800
We can find that over at Dark Sky dot net forward slash Dev.

26
00:02:00.840 --> 00:02:06.960
This is the developer portal for the dark sky application allowing us to integrate their weather data

27
00:02:07.170 --> 00:02:08.780
into our app.

28
00:02:08.790 --> 00:02:12.410
This is Andrew from the future with a very important update.

29
00:02:12.420 --> 00:02:17.010
So if you pull up the dark sky Web site you'll notice this big banner right up top.

30
00:02:17.100 --> 00:02:22.040
Yesterday March 30 first 20 20 Dark Sky was purchased by Apple.

31
00:02:22.080 --> 00:02:24.200
Now dark sky posted a blog post.

32
00:02:24.210 --> 00:02:29.820
You can see right here talking about the changes that are going to take place and there are a bunch

33
00:02:29.820 --> 00:02:30.360
of them.

34
00:02:30.480 --> 00:02:35.020
For example the Android apps getting gutted which is super unfortunate.

35
00:02:35.040 --> 00:02:41.690
Another one of the side effects is that the dark sky API is no longer accepting new sign ups.

36
00:02:41.700 --> 00:02:47.430
So right here you're not going to see the try for free button that I'm seeing on my screen.

37
00:02:47.430 --> 00:02:50.400
So this is a breaking change for the class.

38
00:02:50.400 --> 00:02:55.050
You won't be able to create an account like we're about to do in a couple of minutes.

39
00:02:55.110 --> 00:03:01.080
Now don't worry I'm dropping everything to work on effects and the fix will be rolled out as quickly

40
00:03:01.110 --> 00:03:02.220
as possible.

41
00:03:02.220 --> 00:03:05.790
There was no notice ahead of time that things were going to change.

42
00:03:05.790 --> 00:03:11.490
One morning I just woke up and all of a sudden the class was broken and there was no way for students

43
00:03:11.670 --> 00:03:14.640
to get started with the dark sky API.

44
00:03:14.940 --> 00:03:17.730
So let's talk about how I'll end up fixing this.

45
00:03:17.730 --> 00:03:20.130
The fix will get rolled out in two phases.

46
00:03:20.130 --> 00:03:25.680
The first thing I'll do is put together a written guide that you can use as you work through the next

47
00:03:25.740 --> 00:03:27.050
several sections.

48
00:03:27.060 --> 00:03:33.180
This written guide will talk about the changes you'll need to make in order to build the weather application

49
00:03:33.420 --> 00:03:35.790
using a different weather API.

50
00:03:35.790 --> 00:03:41.430
Now since that's just a written guide I should be able to get that out real quickly here in the next

51
00:03:41.430 --> 00:03:42.760
several days.

52
00:03:42.780 --> 00:03:49.260
Now once the written Guide is out I'll move on to phase two and I'll be rerecording the necessary parts

53
00:03:49.260 --> 00:03:53.130
of the lesson so there's no need to work through a written guide.

54
00:03:53.130 --> 00:03:58.250
You'll be able to watch the videos like you normally would though using a new API.

55
00:03:58.350 --> 00:04:00.330
So that's the general process.

56
00:04:00.330 --> 00:04:05.640
I hope to get the written guide out pretty quickly here and the videos will take a bit more time.

57
00:04:05.730 --> 00:04:10.790
But the plan is to start working on those right after I release the written guide.

58
00:04:10.860 --> 00:04:16.650
Now I'm still doing a bit of research on the API I'll end up replacing this one with the most likely

59
00:04:16.680 --> 00:04:20.780
I'll end up going with open whether you can find that at open weather map.

60
00:04:20.790 --> 00:04:21.750
Dot org.

61
00:04:21.750 --> 00:04:25.350
Here you can create a free account no credit card required.

62
00:04:25.440 --> 00:04:31.700
Then you can use the API to fetch real time weather data just like we do with dark sky.

63
00:04:31.710 --> 00:04:37.920
Now I've already had a couple of students report that they used open weather as a replacement in this

64
00:04:37.920 --> 00:04:38.660
section.

65
00:04:38.850 --> 00:04:45.780
So if you head over to the API tab the endpoint that matches up closely with the dark sky API is the

66
00:04:45.780 --> 00:04:48.120
current weather data one right here.

67
00:04:48.120 --> 00:04:53.340
Now once I get the written guide together I'll show you how you can use this as a drop in replacement

68
00:04:53.550 --> 00:04:56.080
over the next several sections.

69
00:04:56.100 --> 00:05:00.970
So once again open weather is likely the API of that will end up watching too.

70
00:05:00.990 --> 00:05:05.900
Now when I have the written guide in place that will be available in the course Q and A.

71
00:05:05.940 --> 00:05:11.730
So let's talk about where you can find that I've put together a master thread for all the information

72
00:05:11.760 --> 00:05:14.100
related to this breaking change.

73
00:05:14.100 --> 00:05:21.090
So if you're watching this lecture on udemy that's lecture 31 making H TTP requests all you need to

74
00:05:21.090 --> 00:05:27.870
do is head to the Q and A tab below the player from there instead of a viewing all lectures you would

75
00:05:27.870 --> 00:05:34.590
go to current lecture then instead of sorting by the most recent you could sort by the most upvoted

76
00:05:34.850 --> 00:05:39.070
end to the first one it should be this one right here posted by myself.

77
00:05:39.180 --> 00:05:44.940
So if you click that it currently talks about the breaking change and it's mostly just information that

78
00:05:44.940 --> 00:05:46.430
I already talked about.

79
00:05:46.470 --> 00:05:52.050
I originally put this out yesterday just to get ahead of the problem as quickly as possible.

80
00:05:52.110 --> 00:05:57.630
Once I have the written guide in place that will be available right here and once again I hope that's

81
00:05:57.630 --> 00:05:59.820
within the next several days.

82
00:05:59.850 --> 00:06:06.150
You can also stay up to date on this breaking change on Twitter so you could follow me at Andrew underscore

83
00:06:06.180 --> 00:06:08.070
J underscore mead.

84
00:06:08.130 --> 00:06:13.890
I put out a series of tweets related to this and I'll be updating them as I make progress.

85
00:06:13.890 --> 00:06:16.970
So this is a super unfortunate situation.

86
00:06:16.980 --> 00:06:22.650
Once again I had no notice that this was happening otherwise I would have had the changes recorded ahead

87
00:06:22.650 --> 00:06:26.390
of time and there would have been no problem for the students.

88
00:06:26.400 --> 00:06:28.080
Unfortunately that did not happen.

89
00:06:28.080 --> 00:06:29.300
So here we are.

90
00:06:29.310 --> 00:06:34.780
All I ask is for your patience and understanding and what I'll be doing is getting to work right away.

91
00:06:34.890 --> 00:06:38.890
Putting together that written guide then rerecording the videos.

92
00:06:38.910 --> 00:06:39.810
So stay tuned.

93
00:06:39.810 --> 00:06:45.360
Check that Q and A thread and I'll be updating this video and the other ones as I start to make some

94
00:06:45.360 --> 00:06:46.310
progress.

95
00:06:46.380 --> 00:06:52.710
Alright that's it for now and for the moment I'll just leave the rest of the class in place as is so

96
00:06:52.740 --> 00:06:57.050
if you'd like to try things with open weather map you are more than welcome to.

97
00:06:57.120 --> 00:06:57.680
All right.

98
00:06:57.690 --> 00:07:04.800
Talk to you soon to integrate this data into our application we are going to have to sign up for an

99
00:07:04.800 --> 00:07:05.510
account.

100
00:07:05.520 --> 00:07:10.620
Now the good news is that it's completely free to sign up and you don't have to provide anything like

101
00:07:10.620 --> 00:07:11.660
a credit card.

102
00:07:11.670 --> 00:07:17.820
One of the great things about the dark sky API is that they make it super easy to get started offering

103
00:07:17.820 --> 00:07:25.380
you 1000 free whether requests every single day which is gonna be way more than will end up needing.

104
00:07:25.380 --> 00:07:27.750
So let's go ahead and kick this process off.

105
00:07:27.750 --> 00:07:32.790
You're going to need to sign up for a new account and as mentioned all you have to provide is an email

106
00:07:32.790 --> 00:07:34.640
address and a password.

107
00:07:34.650 --> 00:07:38.100
Then it's going to ask you to verify your email address.

108
00:07:38.280 --> 00:07:42.270
Go ahead and take a moment to get that done and you can pause the video.

109
00:07:42.270 --> 00:07:47.100
I'm going to take a moment to log into my existing account so I can show you the dashboard.

110
00:07:47.100 --> 00:07:48.010
And here it is.

111
00:07:48.060 --> 00:07:52.260
It's pretty bare bones but it contains everything we need to get started.

112
00:07:52.260 --> 00:07:55.820
The first thing we have here is our accounts secret key.

113
00:07:55.830 --> 00:08:03.180
This is a randomly generated string and we use this when we make each TTP requests to the dark sky API

114
00:08:03.330 --> 00:08:05.230
from our node J.S. app.

115
00:08:05.250 --> 00:08:11.860
This allows the dark sky API to identify our account and keep track of how many requests we're making.

116
00:08:11.970 --> 00:08:18.780
Down below we can see where on the trial plan which as I mentioned gives us 1000 free requests every

117
00:08:18.780 --> 00:08:23.090
single day and down below that we have a sample API call.

118
00:08:23.190 --> 00:08:25.170
And this is just a U.R.L..

119
00:08:25.230 --> 00:08:32.070
Now you'll notice that in this U.R.L. we have our secret key so its API dot dark sky dot net forward

120
00:08:32.070 --> 00:08:40.590
slash forecast forward slash our secret key then forward slash the longitude and latitude for the location

121
00:08:40.740 --> 00:08:46.500
we want to get the weather for let's go ahead and actually crack this open in a new tab to see what

122
00:08:46.500 --> 00:08:52.770
we get back I'm gonna right click it and open it in a new tab so I can leave the old one still up and

123
00:08:52.770 --> 00:08:53.570
what do I get.

124
00:08:53.670 --> 00:08:56.240
Right here I get a bunch of data.

125
00:08:56.310 --> 00:09:03.830
This is Jason data coming back and this contains all of the weather information for the provided location

126
00:09:04.020 --> 00:09:09.960
when it comes to exchanging data between services Jason is the standard format for getting that done

127
00:09:10.140 --> 00:09:15.870
and this is why we spent so much time working with Jason in the notes application before Jason is going

128
00:09:15.870 --> 00:09:18.840
to come up over and over again throughout the course.

129
00:09:18.840 --> 00:09:25.620
So when I go to dark sky dot net I get these same data but formatted to be used as a web site when I

130
00:09:25.620 --> 00:09:31.800
use the API I get the Jason data back which is easier for a machine to use and we can use all of the

131
00:09:31.800 --> 00:09:38.490
values inside of here to provide our users with a detailed forecast of their weather and that is exactly

132
00:09:38.490 --> 00:09:39.990
what we're going to end up doing.

133
00:09:39.990 --> 00:09:46.560
Let's go ahead and move into visual studio code and actually make the same request we're making here.

134
00:09:46.560 --> 00:09:53.160
But from our application to start I'm going to delete everything in app dot and J S we have our little

135
00:09:53.160 --> 00:09:58.230
set time out example and that helped us illustrate how asynchronous programming works.

136
00:09:58.230 --> 00:10:01.920
But now it's time to move on to some more real world stuff.

137
00:10:02.040 --> 00:10:06.450
Now to make HDTV requests there are a few different things we can do.

138
00:10:06.570 --> 00:10:12.480
We can use the core node modules which we will cover a little bit later but those are very low level.

139
00:10:12.600 --> 00:10:18.320
So it requires you to write a lot of unnecessary code to get everything working together.

140
00:10:18.330 --> 00:10:24.180
There are a bunch of NPM modules that are essentially wrappers around of that core module making it

141
00:10:24.180 --> 00:10:28.910
much easier and more streamlined to make HDTV requests.

142
00:10:29.010 --> 00:10:33.720
And that's what we're gonna use throughout the course although as mentioned we will explore how to do

143
00:10:33.720 --> 00:10:36.540
it the bare bones way shortly.

144
00:10:36.540 --> 00:10:43.620
For now we're gonna use a single NPM module to make our HDTV requests and appropriately enough it is

145
00:10:43.620 --> 00:10:45.060
called request.

146
00:10:45.120 --> 00:10:52.410
You can find it by googling NPM request that is going to hopefully bring you to the package page right

147
00:10:52.410 --> 00:10:58.320
here it is NPM J Ask.com forward slash package forward slash request.

148
00:10:58.320 --> 00:11:03.690
We can visit that page to learn a bit more about what it's going to do for us and this like the other

149
00:11:03.690 --> 00:11:10.020
packages we've used is super popular with about six million weekly downloads.

150
00:11:10.050 --> 00:11:15.280
Now if we scroll down we can see all sorts of different examples as to how this can be used.

151
00:11:15.300 --> 00:11:20.970
We're going to explore more advanced features like promises and async await a little later.

152
00:11:20.970 --> 00:11:24.960
For now we're gonna get started with a nice simple example.

153
00:11:24.960 --> 00:11:30.900
Let's go ahead and actually install this into our project so we can make a request from our node application

154
00:11:31.440 --> 00:11:33.130
over inside of the terminal.

155
00:11:33.180 --> 00:11:37.600
We first need to initialize weather app as an NPM project.

156
00:11:37.620 --> 00:11:42.510
If you remember we got that done by running NPM in it from the root of the project.

157
00:11:42.540 --> 00:11:45.190
So in this case from the weather app folder.

158
00:11:45.240 --> 00:11:50.790
Now when we ran that command we got brought to a questionnaire asking us to fill out a ton of values.

159
00:11:50.790 --> 00:11:54.750
And if you remember we used the default value for all of them.

160
00:11:54.750 --> 00:11:58.610
So what I'm going to do is actually use control C to shut that down.

161
00:11:58.620 --> 00:12:04.280
So I've done nothing then I'm going to use NPM in it again with the Y flag.

162
00:12:04.290 --> 00:12:09.450
This just says answer yes to every single question using the default value.

163
00:12:09.540 --> 00:12:13.160
So we don't have to go through that little questionnaire when we do this.

164
00:12:13.200 --> 00:12:15.300
It automatically generates the package.

165
00:12:15.300 --> 00:12:19.410
Dot Jason file with all of the default values in place.

166
00:12:19.410 --> 00:12:25.500
We can now customize them to fit our needs and now we can run npm install commands to install the modules

167
00:12:25.500 --> 00:12:27.420
we need from the terminal.

168
00:12:27.420 --> 00:12:29.550
Let's go ahead and do just that.

169
00:12:29.610 --> 00:12:36.810
I'm gonna use NPM AI which is short for install to install the request module at the latest version

170
00:12:36.810 --> 00:12:39.600
two point eighty eight point zero.

171
00:12:39.600 --> 00:12:47.730
Now I'm not using the G global flag since this is a module I want to require and use inside of my scripts.

172
00:12:47.760 --> 00:12:49.660
So let's go ahead and get that done.

173
00:12:49.710 --> 00:12:55.380
I'm gonna run the command that is going to install the request module then we're gonna move over to

174
00:12:55.380 --> 00:12:58.380
app dot J S to load it in and use it.

175
00:12:58.380 --> 00:13:03.790
So inside of app J s Let's go ahead and start by requiring request.

176
00:13:03.960 --> 00:13:11.280
I'm gonna make a constant called request and I'm going to require the module we just installed which

177
00:13:11.280 --> 00:13:12.770
was indeed a request.

178
00:13:12.900 --> 00:13:17.130
And this is actually going to work because we installed the module we have package.

179
00:13:17.160 --> 00:13:24.300
Jason we have package lock and Jason and in the node modules directory we have all of the necessary

180
00:13:24.330 --> 00:13:26.970
modules to get request to work.

181
00:13:26.970 --> 00:13:32.940
So we have request itself as well as all of its dependencies showing up inside of there.

182
00:13:33.060 --> 00:13:36.300
Now that we have this in place let's go ahead and use it.

183
00:13:36.330 --> 00:13:42.150
We need to work with that same you are L we just explored in the browser where we got the Jason data

184
00:13:42.330 --> 00:13:44.060
back over in the browser.

185
00:13:44.070 --> 00:13:49.290
I'm going to visit that tab where we were getting the Jason response and I'm going to grab the U.R.L..

186
00:13:49.320 --> 00:13:54.870
This is the U R L that contains our secret key as well as that random set of coordinates which we will

187
00:13:54.870 --> 00:13:56.700
learn how to change later.

188
00:13:56.730 --> 00:14:02.970
So instead of visiting the are in the browser and seeing the data here we're going to visit it via the

189
00:14:02.970 --> 00:14:09.300
request module and we'll get that data back as a variable we can access in our code.

190
00:14:09.300 --> 00:14:11.910
So right here let's start by storing the U.R.L..

191
00:14:11.990 --> 00:14:18.270
I'm going to create a concept you are all whose value will be a string and I am going to paste the entire

192
00:14:18.270 --> 00:14:21.250
contents of that you are all right here.

193
00:14:21.300 --> 00:14:25.500
We're not going to change anything for the moment we're just going to make their request so we get this

194
00:14:25.500 --> 00:14:28.920
exact same data back but in our node app.

195
00:14:29.190 --> 00:14:35.040
Now from here we can actually use request which is a function to make the request.

196
00:14:35.040 --> 00:14:39.040
We are going to call it providing to it to arguments.

197
00:14:39.060 --> 00:14:43.490
The first is an options object which outlines what we'd like to do.

198
00:14:43.500 --> 00:14:47.000
That's where we provide the U.R.L. and other information.

199
00:14:47.010 --> 00:14:51.630
The second argument is a function to run once we actually have that response.

200
00:14:51.660 --> 00:14:57.520
So once the data is available for you to use in your application let's start with that first argument.

201
00:14:57.540 --> 00:14:59.850
That is the options object right here.

202
00:14:59.850 --> 00:15:01.410
We're going to set that up.

203
00:15:01.650 --> 00:15:08.730
And as mentioned there is a single required property which is U.R.L. we have to provide the U.R.L. value

204
00:15:08.790 --> 00:15:09.740
we want to use.

205
00:15:09.810 --> 00:15:12.750
And I have that in a variable with the same name.

206
00:15:12.840 --> 00:15:15.000
That's all for the first argument.

207
00:15:15.000 --> 00:15:19.160
The second argument after that object is going to be a function.

208
00:15:19.260 --> 00:15:23.820
This is the function to run when we're actually getting the response back.

209
00:15:23.820 --> 00:15:31.230
So right here I'm going to set up that callback function and this function will run when either one

210
00:15:31.380 --> 00:15:33.730
we have the weather data or two.

211
00:15:33.750 --> 00:15:37.110
Something went wrong and we weren't able to get the weather data.

212
00:15:37.110 --> 00:15:41.340
So maybe as an example your machine doesn't have a network connection.

213
00:15:41.340 --> 00:15:43.360
Maybe you're not connected to the Internet.

214
00:15:43.470 --> 00:15:46.800
In that case this request would indeed fail.

215
00:15:46.800 --> 00:15:51.670
Now this function gets called with two arguments it gets called with an error.

216
00:15:51.750 --> 00:15:57.790
If there was one otherwise this argument will be undefined and it gets called with the response where

217
00:15:57.810 --> 00:16:00.090
we can actually access the response.

218
00:16:00.090 --> 00:16:02.820
This includes all sorts of information.

219
00:16:02.910 --> 00:16:06.870
And it does include the Jason response we need.

220
00:16:06.870 --> 00:16:12.690
Now if you're not familiar with the ins and outs of each TTP request that's OK we're actually going

221
00:16:12.690 --> 00:16:16.230
to dissect them in detail in just a couple of videos.

222
00:16:16.230 --> 00:16:21.540
For now let's go ahead and try to use the response in our program to get started.

223
00:16:21.540 --> 00:16:25.010
Let's go ahead and just dump the response object to the console.

224
00:16:25.080 --> 00:16:27.300
So console dialog response.

225
00:16:27.300 --> 00:16:33.510
This is going to contain everything about the response way more information than just that Jason data.

226
00:16:33.510 --> 00:16:36.340
I'm gonna run the program from the terminal down below.

227
00:16:36.390 --> 00:16:43.570
I will use clear to clear the terminal output then node app dot J asked to run our script now what's

228
00:16:43.570 --> 00:16:49.290
going to happen is a ton of information is gonna get dumped to the terminal we can see there are hundreds

229
00:16:49.290 --> 00:16:56.010
of lines of information response has a lot of properties we can use and those properties have other

230
00:16:56.010 --> 00:16:58.380
properties and so on and so on.

231
00:16:58.380 --> 00:17:03.400
Now if we start to scroll up we can see we have one really long string shown in green.

232
00:17:03.450 --> 00:17:08.880
This is actually the string Jason data that we want to pass and access.

233
00:17:08.880 --> 00:17:14.220
If we scroll up to the top of that string this is on the body property.

234
00:17:14.220 --> 00:17:18.990
Now there are plenty of other properties for getting the response headers or the status code or that

235
00:17:18.990 --> 00:17:22.890
you are L or any other information you would want about their request.

236
00:17:22.890 --> 00:17:27.340
We'll explore those a bit later when we dissect HDTV requests.

237
00:17:27.510 --> 00:17:34.770
For now let's just focus on that one property the body property which contains our data represented

238
00:17:34.800 --> 00:17:36.390
as a Jason string.

239
00:17:36.390 --> 00:17:42.120
Now we already worked with Jason so we know how to pass a Jason string right here.

240
00:17:42.120 --> 00:17:49.530
I'm going to create a concept called data and I'm going to set it equal to we'll be using Jason dot

241
00:17:49.590 --> 00:17:55.840
pass to pass our data and the data lives on response dot body.

242
00:17:55.860 --> 00:17:59.550
Now we're gonna go ahead and actually work with that data.

243
00:17:59.550 --> 00:18:06.840
I'm going to log the data object to the screen right here we have app J in its modified state.

244
00:18:06.840 --> 00:18:08.890
Let's go ahead and rerun the program.

245
00:18:09.000 --> 00:18:14.430
I can just use the backspace key to bring me back to the terminal down below and from here we're going

246
00:18:14.430 --> 00:18:18.140
to rerun the script with our passing code in place.

247
00:18:18.240 --> 00:18:20.680
So I'm gonna run node app dot J.

248
00:18:20.680 --> 00:18:25.320
S this time we're still going to see a lot of stuff print but a lot less.

249
00:18:25.320 --> 00:18:28.860
Now if we scroll up we're gonna see an endless amount of information.

250
00:18:28.860 --> 00:18:31.310
For example we have all of these objects.

251
00:18:31.320 --> 00:18:34.770
I see properties related to wind speed and wind gusts.

252
00:18:34.770 --> 00:18:37.300
I have temperature min and max for the day.

253
00:18:37.410 --> 00:18:43.680
All sorts of useful forecast information and we'll explore more of this in the next video for now to

254
00:18:43.680 --> 00:18:51.570
wrap up I just want to access a single property that is the currently property so data dot currently

255
00:18:51.750 --> 00:18:54.670
this contains current forecast information.

256
00:18:54.810 --> 00:18:59.420
And if we rerun the program this time we're gonna see a lot less output.

257
00:18:59.460 --> 00:19:02.070
We have what maybe 20 lines.

258
00:19:02.070 --> 00:19:03.000
We have a summary.

259
00:19:03.030 --> 00:19:06.130
So wherever this location is it is indeed clear.

260
00:19:06.210 --> 00:19:12.300
And I have information about things like the temperature it is currently fifty four point two degrees.

261
00:19:12.420 --> 00:19:18.960
I have things about the humidity pressure wind speed all current weather information for that location.

262
00:19:19.470 --> 00:19:28.230
So now that we have this in place we have indeed accessed our first H TTP API from node j s allowing

263
00:19:28.230 --> 00:19:32.370
us to pull in outside information into our applications.

264
00:19:32.370 --> 00:19:39.880
I'm excited to continue exploring HDTV requests asynchronous node and the weather API in the next video.

265
00:19:39.900 --> 00:19:42.360
So let's go ahead and jump right in.
