1
00:00:00,240 --> 00:00:06,360
In this video we're going to continue to work with the get tasks request allowing the client making

2
00:00:06,360 --> 00:00:10,170
the request to sort the data in a specific order.

3
00:00:10,170 --> 00:00:16,920
So now that we have timestamps enabled they could sort by when the task was last created or last updated

4
00:00:17,220 --> 00:00:23,880
or they could sort by the completed value putting the complete tasks first or putting the incomplete

5
00:00:24,030 --> 00:00:25,720
tasks first.

6
00:00:25,770 --> 00:00:30,630
So let's go ahead and start by looking at that you are L structure and then we'll actually worry about

7
00:00:30,660 --> 00:00:33,660
implementing this into the javascript code below.

8
00:00:33,690 --> 00:00:40,290
Right here it's still get forward slash tasks and the option we're gonna be setting up support for could

9
00:00:40,290 --> 00:00:43,650
be called something like sought or sought by.

10
00:00:43,710 --> 00:00:48,600
This is going to allow someone to specify these sorting criteria.

11
00:00:48,600 --> 00:00:51,510
And there are typically two pieces to the value.

12
00:00:51,510 --> 00:00:54,680
The first is the field we're trying to sort by.

13
00:00:54,720 --> 00:00:56,720
And the second is the order.

14
00:00:56,730 --> 00:00:57,840
So do I want to sort.

15
00:00:57,840 --> 00:01:05,220
In an ascending fashion which would be something like 0 through 10 with numbers or a descending fashion

16
00:01:05,460 --> 00:01:07,440
which would be 10 through 0.

17
00:01:07,740 --> 00:01:10,220
So we can specify that using the following.

18
00:01:10,230 --> 00:01:10,950
Right here.

19
00:01:11,040 --> 00:01:15,340
Let's say we want to sort by the created at field.

20
00:01:15,420 --> 00:01:18,930
So I want to sort my tasks by when they were created.

21
00:01:18,930 --> 00:01:20,650
Now this alone isn't enough.

22
00:01:20,640 --> 00:01:24,530
Do you want to sort them with the newest first or the oldest first.

23
00:01:24,900 --> 00:01:31,130
So the next thing we provide is whether it's in an ascending sort or a descending sort.

24
00:01:31,140 --> 00:01:36,180
There are a few different ways you can do this the most common is to use a character like the underscore

25
00:01:36,210 --> 00:01:37,790
to separate the two.

26
00:01:37,800 --> 00:01:48,450
So right here created at underscore a S C for ascending or created at underscore D E S C for descending.

27
00:01:48,450 --> 00:01:53,580
Now if you're someone who likes to use underscores in your field names you could always switch this

28
00:01:53,580 --> 00:01:54,750
up to a colon.

29
00:01:54,870 --> 00:01:58,160
Any special character in there would get the job done.

30
00:01:58,230 --> 00:02:04,830
Later on we'll be splitting this string on that special character to break it up into its two component

31
00:02:04,830 --> 00:02:08,130
pieces so we can set up these sorting correctly.

32
00:02:08,220 --> 00:02:14,550
So in this case I would be sorting my tasks by when they were created in a descending fashion.

33
00:02:14,550 --> 00:02:20,320
Now let's see what this is actually going to look like by modifying the populate call below.

34
00:02:20,340 --> 00:02:27,180
We'll do this with a hardcoded value then we'll actually accept and pass sort by as an option down below

35
00:02:27,180 --> 00:02:32,890
we specify our sorting criteria by setting up a another property on that options object.

36
00:02:32,890 --> 00:02:39,540
This one appropriately enough is called sort and in here we can pick the field we want to sort by.

37
00:02:39,540 --> 00:02:45,570
So let's say I do want to sort by created and I would simply list that field out then I provide the

38
00:02:45,570 --> 00:02:52,710
order in which I want to sort ascending would be one excuse me right here has one and descending would

39
00:02:52,710 --> 00:02:54,600
be minus one.

40
00:02:54,600 --> 00:02:59,800
So this is how we're actually going to set things up in terms of the call to populate.

41
00:02:59,820 --> 00:03:02,070
So let's go ahead and see this in action.

42
00:03:02,100 --> 00:03:05,010
I'm just going to hard to code us sorting created at.

43
00:03:05,010 --> 00:03:09,230
In a descending fashion we'll head over to postmen and see what we get.

44
00:03:09,450 --> 00:03:10,170
Right here.

45
00:03:10,260 --> 00:03:16,350
I'll remove everything related to Paget nations so all four come back and what am I getting I'm getting

46
00:03:16,350 --> 00:03:18,790
the tasks in the reverse order.

47
00:03:18,810 --> 00:03:25,460
Fourth third second and then first at the bottom because this is them sorted by created at.

48
00:03:25,530 --> 00:03:32,660
In a descending fashion we have the newest ones first and we have the oldest ones last.

49
00:03:32,670 --> 00:03:35,430
Now if I wanted to reverse that I could sort by.

50
00:03:35,430 --> 00:03:38,340
Created at setting it equal to 1.

51
00:03:38,340 --> 00:03:42,350
And in this case I would see them in the order in which we created them.

52
00:03:42,360 --> 00:03:43,770
So I have first up top.

53
00:03:43,800 --> 00:03:46,510
Then second third and fourth.

54
00:03:46,620 --> 00:03:48,800
Now I could also sort by something else.

55
00:03:48,810 --> 00:03:54,300
So let's go ahead and remove created at and instead sort by complete it.

56
00:03:54,540 --> 00:04:00,600
Right here I'm gonna start by sorting in a descending fashion using minus 1.

57
00:04:00,600 --> 00:04:03,630
Now if I fire this off and post man what are we gonna get.

58
00:04:03,960 --> 00:04:12,620
Well right here we can see we have our complete tasks showing up top end our incomplete ones down below.

59
00:04:12,620 --> 00:04:19,610
If I wanted to see my incomplete tasks first I could go ahead and sort in an ascending fashion by setting

60
00:04:19,610 --> 00:04:26,180
completed equal to one right here we'll fire off a request for the last time for the moment and post

61
00:04:26,190 --> 00:04:30,980
man and I can see that I have my incomplete tasks up top.

62
00:04:31,070 --> 00:04:33,650
So this is the basic behavior we'll be using.

63
00:04:33,650 --> 00:04:40,130
The only thing we need to do is allow the user to customize it by actually providing that in the you

64
00:04:40,130 --> 00:04:41,060
are out.

65
00:04:41,060 --> 00:04:42,850
So let's go ahead and start with this.

66
00:04:42,860 --> 00:04:47,060
We'll try to sort by created at in a descending fashion.

67
00:04:47,380 --> 00:04:55,210
So over here we'll set that up the query string sought by setting an equal to.

68
00:04:55,310 --> 00:05:01,820
We're going to sort by created at that our special character whether it's an underscore a colon or anything

69
00:05:01,820 --> 00:05:09,180
else followed by the order either ascending or descending I'll use D E S C for descending.

70
00:05:09,200 --> 00:05:14,420
Now if I fire that off the data isn't being used but we're gonna go ahead and change that.

71
00:05:14,420 --> 00:05:18,890
Now once again this is a situation similar to how we set up complete it.

72
00:05:18,910 --> 00:05:20,720
There's a chance they might want to sort.

73
00:05:20,720 --> 00:05:26,790
In ascending or descending there's also a chance they don't specify sort by at all.

74
00:05:26,840 --> 00:05:30,650
So we can't actually provide any information right here.

75
00:05:30,650 --> 00:05:33,100
Instead we're going to do what we did with match.

76
00:05:33,200 --> 00:05:36,260
We'll create the empty object and we'll use it down below.

77
00:05:36,260 --> 00:05:39,140
And there's a chance we'll actually customize it.

78
00:05:39,140 --> 00:05:46,880
So right here what we're gonna do is create an empty sort object we're then going to use that sort of

79
00:05:46,890 --> 00:05:49,780
object as the value for this right here.

80
00:05:49,820 --> 00:05:56,750
I'll remove the hardcoded version and use the shorthand syntax to set sort equal to these sorts variables

81
00:05:56,870 --> 00:05:58,040
value.

82
00:05:58,040 --> 00:06:03,860
Now we can see if sought by was actually provided and if it was we'll set something up on these sort

83
00:06:03,910 --> 00:06:04,570
objects.

84
00:06:04,580 --> 00:06:12,860
So if request dot query dot sought by if that is defined what do we need to do.

85
00:06:12,870 --> 00:06:17,940
Well we need to go ahead and break up the value which would be all of this.

86
00:06:17,970 --> 00:06:25,140
What I want to do is split it by that special character so I can get the two individual pieces right

87
00:06:25,140 --> 00:06:25,680
here.

88
00:06:25,680 --> 00:06:28,860
Let's go ahead and knock that out now to do this.

89
00:06:28,860 --> 00:06:33,990
Let's start by creating a variable a concept called parts.

90
00:06:33,990 --> 00:06:38,640
And what we're going to do is get its value from the following.

91
00:06:38,640 --> 00:06:43,670
We're gonna use request dot query dot sort by.

92
00:06:43,680 --> 00:06:48,810
So this is the string value provided and we know it's provided because we have our if statement right

93
00:06:48,810 --> 00:06:51,180
here and we're going to split it.

94
00:06:51,180 --> 00:06:58,290
We'll be using these string split method to split it up by the colon or the underscore whatever special

95
00:06:58,290 --> 00:07:00,590
character you're choosing to work with.

96
00:07:00,600 --> 00:07:01,430
Now down below.

97
00:07:01,440 --> 00:07:05,400
Let's use those two parts to set up something on these sort object.

98
00:07:05,400 --> 00:07:11,730
So down below when we had manually done it sort had the field we were trying to sort by as the only

99
00:07:11,730 --> 00:07:13,500
property on that object.

100
00:07:13,500 --> 00:07:15,640
Right here we have to do the same thing.

101
00:07:15,720 --> 00:07:17,970
Now we don't have a static name like sort.

102
00:07:17,970 --> 00:07:23,610
Dot completed at sense it's not hardcoded that user is providing the name of the property we need to

103
00:07:23,610 --> 00:07:24,540
set.

104
00:07:24,540 --> 00:07:30,060
So what we do is we use the bracket notation and the value comes from a variable.

105
00:07:30,120 --> 00:07:32,610
It's in the parts array it is the first one.

106
00:07:33,150 --> 00:07:39,300
So here I'm grabbing the first item in the parts array and I'm using it as the name of the property

107
00:07:39,390 --> 00:07:41,450
we're setting on sort.

108
00:07:41,460 --> 00:07:48,720
Now with that in place we have to set that property value equal to either 1 or minus 1 as we just saw

109
00:07:48,900 --> 00:07:51,750
when we set up our populate call with static data.

110
00:07:51,760 --> 00:07:54,130
Now we don't have one or minus one.

111
00:07:54,210 --> 00:08:03,060
We have descending or a sending a S C or D E S C we're going to convert that to either 1 or minus 1

112
00:08:03,330 --> 00:08:06,570
using the ternary operator down below.

113
00:08:06,570 --> 00:08:08,310
So we start off with our condition.

114
00:08:08,340 --> 00:08:12,600
Right here I want to look at that second part right here.

115
00:08:12,630 --> 00:08:15,960
I want to see if it is equal to the following string.

116
00:08:16,080 --> 00:08:22,020
D e S C is this person trying to sort in a descending fashion.

117
00:08:22,020 --> 00:08:29,010
Now what the ternary operator the resolved value is one of two things if this is true it's whatever

118
00:08:29,010 --> 00:08:35,520
we put after the question mark which we know is minus one for descending if this is not true if it's

119
00:08:35,520 --> 00:08:39,620
false then the value would be whatever is after the colon.

120
00:08:39,690 --> 00:08:45,510
So here the ternary operator is called the ternary operator because there are three pieces we have our

121
00:08:45,510 --> 00:08:52,440
condition we have the value for when the condition is true and the value for when the condition is false.

122
00:08:52,470 --> 00:08:57,110
So this is going to make sure that these sort of object gets set up correctly.

123
00:08:57,120 --> 00:09:03,280
Now with this in place we're actually done and we can test things out to make sure we can indeed sort.

124
00:09:03,350 --> 00:09:10,140
So over in postmen we have created at in a descending fashion I'm going to go ahead and fire that off

125
00:09:10,170 --> 00:09:11,580
and down below what do I get.

126
00:09:11,610 --> 00:09:13,330
That's exactly what I get.

127
00:09:13,410 --> 00:09:16,370
I have four third second and then way at the bottom.

128
00:09:16,380 --> 00:09:24,080
I have first now I could swap out ascending excuse me descending for ascending and if I fire that off

129
00:09:24,090 --> 00:09:25,050
what do I get.

130
00:09:25,050 --> 00:09:29,490
I can see I have first up top followed by second third and fourth.

131
00:09:29,490 --> 00:09:34,700
Now we can string together all of the available options to do multiple things at the same time.

132
00:09:34,710 --> 00:09:40,830
For example I could get all of my incomplete tasks sort them by when they were created and then I could

133
00:09:40,830 --> 00:09:44,610
use Paget nation to get the first ten followed by the second 10.

134
00:09:45,000 --> 00:09:50,670
So with these options in place what we're giving the client the ability to do is really customize the

135
00:09:50,670 --> 00:09:53,520
data that comes back without these options.

136
00:09:53,520 --> 00:09:55,790
They would always get back all of their tasks.

137
00:09:55,800 --> 00:10:01,110
And as I mentioned that can get out of hand really quickly as more and more documents get added to the

138
00:10:01,110 --> 00:10:01,980
database.

139
00:10:01,980 --> 00:10:07,680
This can slow down your server and it's also definitely going to slow down the client device whether

140
00:10:07,680 --> 00:10:10,570
it's a desktop laptop or mobile phone.

141
00:10:10,680 --> 00:10:17,100
It's gonna have to request a huge unnecessary amount of data by providing a few simple options and adding

142
00:10:17,100 --> 00:10:23,730
maybe what 13 lines of code to our router we were able to give that client complete control over the

143
00:10:23,730 --> 00:10:29,880
data they're getting back that's gonna make sure their app can stay nice and fast and snappy and it's

144
00:10:29,880 --> 00:10:36,480
also going to make sure that our server isn't constantly querying and sending back thousands of records

145
00:10:36,480 --> 00:10:40,140
which is going to take more time than it otherwise would need to.

146
00:10:40,140 --> 00:10:45,480
Now as always if you have questions about anything covered here just crack open a new question in the

147
00:10:45,480 --> 00:10:49,110
course Q and A and we'll get back to you right away.

148
00:10:49,110 --> 00:10:54,000
That's where we're going to stop for this video end for this section in the next section.

149
00:10:54,000 --> 00:11:00,030
We're going to dive into a very exciting topic which is file upload so we'll figure out how we could

150
00:11:00,060 --> 00:11:04,710
upload something like a profile picture for a user account.

151
00:11:04,710 --> 00:11:07,920
Let's go ahead and jump into the section introduction for that one.
