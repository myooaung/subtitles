WEBVTT
1
00:00:00.210 --> 00:00:05.640
In this video we're going to kick off the section by learning how we can enable Timestamps for our Mongoose

2
00:00:05.640 --> 00:00:06.480
models.

3
00:00:06.570 --> 00:00:10.390
So we'll be doing this for both our users and our tasks.

4
00:00:10.410 --> 00:00:13.660
Now if we head over to the database viewer robo 3 T.

5
00:00:13.800 --> 00:00:19.880
We can take a look at our data and we have these same fields for users and tasks we've had for a while.

6
00:00:19.890 --> 00:00:26.190
What we're gonna be doing here is enabling an option that's going to add it to new fields one called

7
00:00:26.220 --> 00:00:29.940
created at and a another called updated app.

8
00:00:29.970 --> 00:00:36.510
Both are going to store timestamps so they're going to store the moment in time when that event occurred.

9
00:00:36.510 --> 00:00:42.540
So for users and tasks we'll know when the user first signed up or when the task is created.

10
00:00:42.540 --> 00:00:48.810
And we'll also know when the user or task was last updated giving us more information that we can use

11
00:00:48.810 --> 00:00:53.080
when building out our apps now enabling it is really easy.

12
00:00:53.100 --> 00:00:57.780
We're going to start by working through the process with the User model together.

13
00:00:57.780 --> 00:00:59.990
Then is your challenge for the video.

14
00:01:00.090 --> 00:01:04.140
You'll do the same thing for the task model to enable Timestamps.

15
00:01:04.140 --> 00:01:06.930
We have to customize these schema we've created.

16
00:01:06.930 --> 00:01:12.240
So we have to customize our call to Mongoose schema right here on line 7.

17
00:01:12.280 --> 00:01:16.220
Now currently we're passing to that function a single argument.

18
00:01:16.220 --> 00:01:20.580
It is the object that starts right here and ends way down below.

19
00:01:20.580 --> 00:01:26.210
After the last field we've set up in order to specify our schema options.

20
00:01:26.280 --> 00:01:32.340
We actually provide a second argument which is also an object on the second argument.

21
00:01:32.400 --> 00:01:35.750
We can go ahead and use some of the options available to us.

22
00:01:35.820 --> 00:01:40.280
And the one we're going to explore for the moment is timestamps.

23
00:01:40.290 --> 00:01:45.630
Now we're going to set time stamps equal to true to enable them by default.

24
00:01:45.630 --> 00:01:48.210
This option is set to false.

25
00:01:48.300 --> 00:01:53.760
Now that we have this in place anytime we create a new user they're going to be created with those two

26
00:01:53.760 --> 00:01:59.640
additional fields allowing us to track when they were created and when they were last updated to get

27
00:01:59.640 --> 00:02:00.120
started.

28
00:02:00.120 --> 00:02:05.190
What we're going to do is wipe our database for the last time in this section we're gonna be working

29
00:02:05.190 --> 00:02:10.830
with a few things that'll be much easier to work with if we have very consistent data and what I mean

30
00:02:10.830 --> 00:02:16.240
by that is if me and you are working with the same data it'll be easier to watch the videos.

31
00:02:16.350 --> 00:02:17.970
So we're going to start from scratch.

32
00:02:17.970 --> 00:02:22.110
Just one last time in this section by deleting that database.

33
00:02:22.110 --> 00:02:27.870
Now with the database gone and our server is still running in Visual Studio code all we have to do is

34
00:02:27.870 --> 00:02:30.660
to run over to post a man and create a new user.

35
00:02:30.750 --> 00:02:33.040
And that is exactly what we're going to do.

36
00:02:33.090 --> 00:02:35.790
I'll head over to the create user request.

37
00:02:35.790 --> 00:02:41.850
I'm going to fire this off and right away we see something a bit different on the user property we have

38
00:02:41.850 --> 00:02:43.820
those two fields showing up.

39
00:02:43.980 --> 00:02:51.120
I have created app right here and I have updated at just below with the timestamp for each.

40
00:02:51.120 --> 00:02:54.310
So this timestamp is something we can use on the server.

41
00:02:54.330 --> 00:02:59.760
It's also something that any client could use when rendering the content to the browser.

42
00:02:59.760 --> 00:03:06.440
So now that we have this enabled for users we're gonna end up doing the exact same thing for tasks.

43
00:03:06.540 --> 00:03:12.150
Let's go ahead and talk about what I'd like you to do as your challenge for the video and the process

44
00:03:12.150 --> 00:03:15.440
is going to be very similar to which what we just did.

45
00:03:15.460 --> 00:03:19.620
The only difference is that there is going to be one additional step since remember.

46
00:03:19.620 --> 00:03:24.020
Currently we are not creating a separate schema for the task.

47
00:03:24.150 --> 00:03:30.750
We're still passing that object in as the second argument to model as opposed to creating the schema

48
00:03:30.780 --> 00:03:32.490
first and providing that.

49
00:03:32.490 --> 00:03:37.860
This is what we did with the User model so we could add on all of those additional features and it's

50
00:03:37.860 --> 00:03:40.970
what you're going to need to do as part of the challenge.

51
00:03:40.980 --> 00:03:48.000
So right here what you're going to do is refactor the task model to add timestamps first up you have

52
00:03:48.000 --> 00:03:54.630
to refactor it to explicitly create a schema and provide that to Mongoose model just like we did with

53
00:03:54.630 --> 00:03:57.630
the User model several sections ago.

54
00:03:57.790 --> 00:04:02.640
Then you're going to enable the timestamp option which we just did for user.

55
00:04:02.670 --> 00:04:08.400
And finally you're going to create some tasks in postmen and make sure that you are seeing the created

56
00:04:08.400 --> 00:04:11.570
at an updated at field for each.

57
00:04:11.580 --> 00:04:16.770
So take some time to knock that out test your work and when you're done come back and click play

58
00:04:19.900 --> 00:04:20.650
out that go.

59
00:04:20.660 --> 00:04:24.290
Let's go ahead and get to it by defining these schema first.

60
00:04:24.290 --> 00:04:30.710
So right here we'll start with step 1 by explicitly creating the schema a new constant to store that

61
00:04:31.010 --> 00:04:32.930
you could have called this whatever you liked.

62
00:04:32.930 --> 00:04:38.780
I'm gonna call it task schema and then we're going to create the new schema just like we did for the

63
00:04:38.780 --> 00:04:39.950
user model.

64
00:04:39.950 --> 00:04:44.390
It is the new operator with Mongoose dot capital S schema.

65
00:04:44.750 --> 00:04:47.600
And what do we provide as that first argument.

66
00:04:47.600 --> 00:04:51.110
We provide the object with our attributes defined.

67
00:04:51.230 --> 00:04:55.310
This is what we're currently passing in as the second argument to model.

68
00:04:55.430 --> 00:04:56.870
I'm going to highlight it.

69
00:04:56.930 --> 00:05:02.490
Cut it out of its current location and paste it right up above inside of those parentheses.

70
00:05:02.510 --> 00:05:05.630
So now we have these schema in place and down below.

71
00:05:05.630 --> 00:05:10.470
We're gonna pass that in as the second argument to Mongoose dot model.

72
00:05:10.490 --> 00:05:15.410
Now the whole reason we're doing this is so we can take advantage of all of the things that we can only

73
00:05:15.410 --> 00:05:23.530
customize when we have an explicitly created schema such as our schema options where we enable the timestamps.

74
00:05:23.690 --> 00:05:26.740
So down below we can do just that right here.

75
00:05:26.870 --> 00:05:30.700
We're going to provide that second argument to these schema function.

76
00:05:30.740 --> 00:05:37.010
It is an object and we're going to set timestamps plural equal to true.

77
00:05:37.040 --> 00:05:42.770
Now with this in place we can test our work by creating some tasks and making sure those timestamps

78
00:05:42.830 --> 00:05:43.340
show up.

79
00:05:43.940 --> 00:05:50.090
What I'm going to do is remove the challenge comments I'm going to save the task a model and we'll simply

80
00:05:50.090 --> 00:05:56.150
create a couple of new tasks for that new user over inside of postmen right here.

81
00:05:56.150 --> 00:06:01.650
What I'm gonna do is use create task to define one find a new job.

82
00:06:01.820 --> 00:06:03.980
I'll send that off and down below.

83
00:06:03.980 --> 00:06:04.820
What do we have.

84
00:06:04.820 --> 00:06:11.540
We have 2 0 1 created and we have our new task with all of the same data we had before with the addition

85
00:06:11.540 --> 00:06:15.440
of the two new timestamps showing up down below.

86
00:06:15.440 --> 00:06:18.610
So now that we have this in place we have just a little more data.

87
00:06:18.640 --> 00:06:23.670
Or each of the documents in our database making it more useful and easier to work with.

88
00:06:23.690 --> 00:06:29.480
This could be used for sorting filtering or anything else your application needs and that's where we're

89
00:06:29.480 --> 00:06:32.690
gonna stop for this video in the next video.

90
00:06:32.690 --> 00:06:39.680
We're going to continue on and learn how we can set up our roots to filter data allowing the user to

91
00:06:39.680 --> 00:06:44.340
hone in on what exactly they want so they don't get unnecessary data back.

92
00:06:44.360 --> 00:06:45.710
I'm excited to get to that.

93
00:06:45.980 --> 00:06:48.050
Let's jump right in it to the next one.
