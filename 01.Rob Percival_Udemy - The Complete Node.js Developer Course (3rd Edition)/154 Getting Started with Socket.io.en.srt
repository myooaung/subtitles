1
00:00:00,180 --> 00:00:05,790
In this lesson we're going to head back into the chat app in Visual Studio code and we'll actually be

2
00:00:05,790 --> 00:00:08,940
setting up web sockets support for our server.

3
00:00:08,940 --> 00:00:15,930
Now to get that done we'll be using the very popular socket dot I O library which provides everything

4
00:00:15,930 --> 00:00:23,910
we need in order to start working with web sockets in node j s the socket dot Io library provides everything

5
00:00:23,910 --> 00:00:31,500
we need to set up the server in our node j s scripts and it also provides client side code we can use

6
00:00:31,500 --> 00:00:37,980
in the browser to communicate with that server and we'll explore how all of this is going to work and

7
00:00:37,980 --> 00:00:42,510
how all of that is going to let us build out this real time application.

8
00:00:42,510 --> 00:00:49,290
But to start what I'd like to do is just pull up these socket dot Io library in the browser so you know

9
00:00:49,320 --> 00:00:56,860
where you can learn more in a new browser tab you can head over to socket dot I O to learn more.

10
00:00:56,880 --> 00:00:58,670
Now this is a great Web site.

11
00:00:58,710 --> 00:01:02,010
There is a bunch of articles available under learn.

12
00:01:02,010 --> 00:01:03,660
We have getting started.

13
00:01:03,660 --> 00:01:10,110
And we also have documentation which we can use to explore the various methods that are available to

14
00:01:10,110 --> 00:01:15,420
us and we'll work through everything covered here inside of the class.

15
00:01:15,450 --> 00:01:19,750
So the first thing we're gonna do is install socket dot I O.

16
00:01:19,890 --> 00:01:26,430
And then we'll learn how we can actually connect to our server and transfer data back and forth from

17
00:01:26,430 --> 00:01:31,710
both the client to the server and from the server to the client.

18
00:01:31,710 --> 00:01:38,400
So to get started let's go ahead and move into visual studio code and install this library from the

19
00:01:38,430 --> 00:01:40,220
terminal down below.

20
00:01:40,260 --> 00:01:44,010
I'm going to use control C to shut down these server.

21
00:01:44,010 --> 00:01:49,490
I'll use clear to clear the terminal output and then we'll use NPM ie.

22
00:01:49,560 --> 00:01:56,850
Now the library we're installing is called socket dot Oh at the latest version which is to point to

23
00:01:56,850 --> 00:01:57,940
point zero.

24
00:01:58,410 --> 00:02:04,610
Let's take a quick moment to let it actually install the library and once the library is installed all

25
00:02:04,620 --> 00:02:08,220
we're going to do is start up that Dev script once again.

26
00:02:08,220 --> 00:02:13,050
So right here I can cycle through my previous commands using the up arrow key.

27
00:02:13,500 --> 00:02:17,400
If I go back three that'll be NPM run Dev.

28
00:02:17,400 --> 00:02:23,310
I'm going to start that up and from here we're actually going to use the library to make some changes

29
00:02:23,310 --> 00:02:29,310
to the server we're gonna set up support for web sockets and we'll see how we can actually connect to

30
00:02:29,310 --> 00:02:32,010
the server from the browser to get started.

31
00:02:32,010 --> 00:02:37,620
The first thing we need to do is perform a little bit of refactoring with the code we already have in

32
00:02:37,620 --> 00:02:38,210
place.

33
00:02:38,220 --> 00:02:44,050
So when we're creating a node server it can use both express and socket dot I O.

34
00:02:44,220 --> 00:02:48,000
It just requires us to set up express in a slightly different way.

35
00:02:48,270 --> 00:02:49,930
So that's what we're gonna do first.

36
00:02:49,940 --> 00:02:55,700
The code we're about to write is not gonna change the behavior of our server whatsoever.

37
00:02:55,740 --> 00:02:59,170
It's just a different way to configure Express.

38
00:02:59,280 --> 00:03:05,880
The first thing we're gonna do is create a constant called H TTP and we're gonna use require to load

39
00:03:05,880 --> 00:03:11,100
in the TTP core module something that we've already used.

40
00:03:11,100 --> 00:03:17,760
Next up right after we create our Express application we're going to create a another variable called

41
00:03:17,760 --> 00:03:23,400
something like server though you could choose whatever name you wanted to write here what we're going

42
00:03:23,400 --> 00:03:31,500
to do is use that H TTP library and a method available on it called Create server.

43
00:03:31,500 --> 00:03:39,170
And this is going to allow us to create a new web server and we're going to pass to it our Express application.

44
00:03:39,210 --> 00:03:44,120
Now if we don't do this the Express library does this behind the scenes anyways.

45
00:03:44,130 --> 00:03:47,640
So once again we're not changing the behavior.

46
00:03:47,640 --> 00:03:54,810
We're just doing a little bit of refactoring now down below what we need to do is change how we're calling

47
00:03:54,870 --> 00:04:03,840
listen instead of calling app dot listen we're going to call server dot listen to start up our TTP server

48
00:04:03,870 --> 00:04:05,720
created right here now.

49
00:04:05,790 --> 00:04:06,420
That's it.

50
00:04:06,420 --> 00:04:08,510
Those are all the changes we need to make.

51
00:04:08,670 --> 00:04:14,540
And if we save the file we're going to see we have the exact same behavior over in the browser we'll

52
00:04:14,550 --> 00:04:21,650
pull up local host three thousand right here we can go ahead and refresh the page and I can see that

53
00:04:21,650 --> 00:04:25,490
I'm still seeing my chat app HDL file.

54
00:04:25,490 --> 00:04:31,490
So all we've done is we've created these server outside of the Express library we're creating it ourself

55
00:04:31,520 --> 00:04:38,540
and configuring it to use our Express app then we are starting it up using server dot lesson.

56
00:04:38,600 --> 00:04:43,700
Now with this in place it's gonna be really easy to setup socket dot I.

57
00:04:43,770 --> 00:04:47,060
Oh the first thing we're gonna do is load it in.

58
00:04:47,060 --> 00:04:54,770
So right here a new constant I'll call this constant socket I owe and we'll go ahead and load in that

59
00:04:54,770 --> 00:04:58,560
library requiring it socket dot I O.

60
00:04:58,790 --> 00:05:06,410
Now down below we can create a new instance of socket dot I O to configure web sockets to work with

61
00:05:06,410 --> 00:05:07,770
our server right here.

62
00:05:07,790 --> 00:05:12,530
Let's go ahead and create a new constant a new constant called I O.

63
00:05:12,590 --> 00:05:15,100
Once again this is a common name used.

64
00:05:15,100 --> 00:05:22,100
You'll see this used in the socket I O documentation and this value is going to come from calling socket

65
00:05:22,130 --> 00:05:24,050
I O as a function.

66
00:05:24,050 --> 00:05:30,320
So when we require the library we get a function back and we call that function to actually configure

67
00:05:30,500 --> 00:05:35,630
socket I O to work with a given server and we pass to that server.

68
00:05:35,630 --> 00:05:38,890
Right here we have that in the server variable.

69
00:05:38,930 --> 00:05:42,130
So this is why we had to do the refactoring socket.

70
00:05:42,170 --> 00:05:46,790
I O expects it to be called with the raw HDTV server.

71
00:05:46,790 --> 00:05:52,860
Now when express creates that behind the scenes we don't have access to it to pass it in right here.

72
00:05:52,870 --> 00:05:55,370
That's why we've created it on our own.

73
00:05:55,370 --> 00:06:00,680
We created it for the explicit purpose of being able to pass it in right there.

74
00:06:00,680 --> 00:06:02,090
And here we go.

75
00:06:02,180 --> 00:06:05,930
Now our server supports web sockets.

76
00:06:05,930 --> 00:06:11,570
Now at this point in time it's not going to do anything too interesting but we can further configure

77
00:06:11,600 --> 00:06:18,750
index dot and J.S. to actually work with the clients that connect to it and down below to get started.

78
00:06:18,930 --> 00:06:22,360
Oh we're going to do is print a message to the terminal.

79
00:06:22,490 --> 00:06:24,470
When a given client connects.

80
00:06:24,500 --> 00:06:33,050
So right here we're going to do that using I O that is I O dot on and we're listening for a given event

81
00:06:33,080 --> 00:06:34,000
to occur.

82
00:06:34,160 --> 00:06:39,920
Now right here we provide the name of the event and a function to run when that event occurs.

83
00:06:39,980 --> 00:06:46,250
In this case the event that we're going to start with is called connection connection is going to fire

84
00:06:46,490 --> 00:06:50,300
whenever the socket Io server gets a new connection.

85
00:06:50,330 --> 00:06:58,790
And right here we'll just go ahead and print a message console dot log new web socket connection.

86
00:06:58,820 --> 00:06:59,980
Perfect.

87
00:06:59,990 --> 00:07:06,950
Now with this in place let's go ahead and save index dot J S that's going to restart our server and

88
00:07:06,950 --> 00:07:12,440
what we're going to do is head over to the browser and just refresh the page right here.

89
00:07:12,440 --> 00:07:19,310
We should still see our chat app HDL rendering and if we head back to the Visual Studio code what do

90
00:07:19,310 --> 00:07:20,070
we see.

91
00:07:20,120 --> 00:07:22,400
We see nothing down below.

92
00:07:22,430 --> 00:07:29,120
We're not getting our message so clearly at this point we have not connected to these server for whatever

93
00:07:29,120 --> 00:07:35,680
reason as we're not seeing that connection message we're printing online 16 and this is true.

94
00:07:35,930 --> 00:07:42,350
What we need to do is a load in the client side of the socket dot Io library.

95
00:07:42,350 --> 00:07:46,010
So right here we're using it on the server which is a great start.

96
00:07:46,010 --> 00:07:51,150
We're also going to use it on the client inside of our web application.

97
00:07:51,170 --> 00:07:54,950
Now when we set up a socket I owe to work with a given server.

98
00:07:55,100 --> 00:08:02,200
It also sets up a file to be served up that your clients can access and that's what we need to do.

99
00:08:02,240 --> 00:08:08,870
So over here inside of our HDMI all we're going to setup a new script tag like we've done plenty of

100
00:08:08,870 --> 00:08:13,530
times before and we're going to define these source attribute.

101
00:08:13,580 --> 00:08:19,400
Now the script we're loading in it's not a script that we've created and it doesn't exist anywhere in

102
00:08:19,400 --> 00:08:21,140
the public directory.

103
00:08:21,140 --> 00:08:27,740
It's something that is served up because we've configured our server to work with socket dot I O right

104
00:08:27,740 --> 00:08:36,200
here that is a forward slash socket dot I O forward slash socket dot I O dot J.

105
00:08:36,200 --> 00:08:40,080
S this is the client side version of the library.

106
00:08:40,190 --> 00:08:46,310
And when we load this in our client side JavaScript code will have access to all of the stuff from the

107
00:08:46,310 --> 00:08:50,170
library it needs in order to set up that communication.

108
00:08:50,210 --> 00:08:56,630
The next thing we need to do is create our own client side JavaScript file load that in and use what's

109
00:08:56,630 --> 00:08:59,510
provided by this script right here.

110
00:08:59,540 --> 00:09:05,450
So what we're gonna do is create in the public directory a new folder we're gonna call this folder something

111
00:09:05,450 --> 00:09:11,800
like J asked to hold all of our J S files and we're going to create a single one right here.

112
00:09:12,080 --> 00:09:18,520
I'm going to call that chat dot J S and in here we'll write some code in a few it's to actually connect

113
00:09:18,550 --> 00:09:24,610
to the server using web sockets before we can though we want to make sure the script actually gets loaded

114
00:09:24,610 --> 00:09:25,430
in.

115
00:09:25,540 --> 00:09:32,310
So over inside of index not HDMI all that means we add another script tag down below.

116
00:09:32,350 --> 00:09:40,600
We're going to provide the source attribute that is forward slash J S forward slash chat dot J S and

117
00:09:40,600 --> 00:09:48,370
with this in place our new client side script is indeed going to run now because we've loaded in this

118
00:09:48,370 --> 00:09:54,290
file this file has access to some stuff that it otherwise would not have access to.

119
00:09:54,460 --> 00:10:02,110
And one of those is a function called i o we go ahead and call I O to connect to these server right

120
00:10:02,110 --> 00:10:02,500
here.

121
00:10:02,500 --> 00:10:08,890
This is all we need to put in the script now down below I can see that the server has restarted and

122
00:10:08,890 --> 00:10:16,250
it's up on port three thousand with the changes made and saved to our two files in the public directory.

123
00:10:16,270 --> 00:10:21,130
All I'm going to do is refresh the browser over here I'll give things a refresh.

124
00:10:21,220 --> 00:10:29,260
We should still see our chat app message but this time over in Visual Studio code we should see new

125
00:10:29,470 --> 00:10:33,360
web socket connection and that is exactly what we're getting.

126
00:10:33,370 --> 00:10:34,970
And this is fantastic.

127
00:10:34,990 --> 00:10:41,380
This means that our server is indeed setting up web sockets report correctly and it also means that

128
00:10:41,380 --> 00:10:47,560
our client was able to connect to it but with this connection in place we're now able to facilitate

129
00:10:47,860 --> 00:10:52,650
real time communication and that's exactly what we're going to start to do.

130
00:10:52,660 --> 00:10:55,270
That's what we're going to start to do in the next lesson.

131
00:10:55,300 --> 00:11:01,630
So let's take a quick moment to recap what we did in this lesson in index dot J.S. we setup support

132
00:11:01,630 --> 00:11:10,270
for socket dot I O all we needed to do to get this done was to create a new socket I O instance passing

133
00:11:10,270 --> 00:11:15,500
the server in and we can do a lot of things with socket I O on the server.

134
00:11:15,550 --> 00:11:22,920
The only thing we've done so far is we've printed a message when a new client connects over in the browser.

135
00:11:22,990 --> 00:11:29,560
We saw that because we've set up socket I O we have access to a client side version of the socket not

136
00:11:29,590 --> 00:11:32,150
Io library provided to us.

137
00:11:32,320 --> 00:11:39,370
And this client side library gives us access to some stuff we can use to facilitate this communication

138
00:11:39,730 --> 00:11:45,280
and for the moment the only thing we've seen is that we get access to an IO function we can call to

139
00:11:45,280 --> 00:11:46,240
connect.

140
00:11:46,240 --> 00:11:51,880
We've proven that all of this works by seeing our message down below in the next lesson we'll learn

141
00:11:51,880 --> 00:11:58,060
how to actually send data back and forth from server to client and client to server.

142
00:11:58,090 --> 00:11:59,320
I'm excited to get to that.

143
00:11:59,350 --> 00:12:01,630
So let's jump right in to the next lesson.
