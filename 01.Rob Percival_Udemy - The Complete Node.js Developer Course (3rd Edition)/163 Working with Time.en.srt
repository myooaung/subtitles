1
00:00:00,240 --> 00:00:05,010
In this lesson you're going to learn how to integrate time into the chat application.

2
00:00:05,070 --> 00:00:11,400
So along with every single message that shows up in the browser you'll also see the time at which it

3
00:00:11,400 --> 00:00:12,540
was sent.

4
00:00:12,540 --> 00:00:18,270
So in this lesson we're going to focus on figuring out how to generate timestamps how to transfer them

5
00:00:18,270 --> 00:00:26,700
between client and server and how to format them in a way that's useful for the users of our chat application.

6
00:00:26,730 --> 00:00:32,450
Now to kick things off what I want to focus on is how we are going to generate timestamps.

7
00:00:32,490 --> 00:00:37,050
We can actually do that using built in JavaScript functionality.

8
00:00:37,050 --> 00:00:39,360
So in the console down below.

9
00:00:39,480 --> 00:00:44,480
Let's take a look at the 12 or so characters necessary to get this done.

10
00:00:44,490 --> 00:00:48,750
Now the first thing we need to do is create a new Date object.

11
00:00:48,750 --> 00:00:54,780
So right here we can just go ahead and create a constant we can call it whatever we'd like for example

12
00:00:54,780 --> 00:01:01,260
I could call it now and then we're going to generate a new date and to do that we use the new operator

13
00:01:01,530 --> 00:01:08,250
with the date constructor function that is capital D date we call it providing no arguments as none

14
00:01:08,250 --> 00:01:09,690
are necessary.

15
00:01:09,690 --> 00:01:16,050
Now when we do this it's going to generate a new Date object that represents the current point in time

16
00:01:16,140 --> 00:01:23,610
whenever we run the code it's going to store that in now and we can use now to work with that time.

17
00:01:23,610 --> 00:01:31,020
So right here we've executed it storing a value in now and now we have access to all of the methods

18
00:01:31,230 --> 00:01:33,480
that date provides.

19
00:01:33,480 --> 00:01:38,200
If you pull up the MDA and documentation you can get a complete list of all of these.

20
00:01:38,280 --> 00:01:40,040
Let's go ahead and walk through a couple.

21
00:01:40,050 --> 00:01:44,460
So for example right here now dot to string.

22
00:01:44,460 --> 00:01:48,870
This is going to show a string representation of that date.

23
00:01:48,870 --> 00:01:55,110
In this case it was the date created a few seconds ago and all of this information is indeed accurate

24
00:01:55,290 --> 00:01:58,530
for the current time and where I am in the world.

25
00:01:58,530 --> 00:02:03,600
Now don't worry we're not going to show all of this information to the user in the chat app.

26
00:02:03,630 --> 00:02:08,510
We'll be formatting it to just show them the information that would be useful.

27
00:02:08,520 --> 00:02:12,640
Now another method we could use is now dot right here.

28
00:02:12,660 --> 00:02:13,960
Get date.

29
00:02:14,010 --> 00:02:19,700
This is one of many methods that allows you to extract individual parts of the date.

30
00:02:19,800 --> 00:02:27,500
And in this case get date allows you to extract the day of the month right here 31 aligning.

31
00:02:27,600 --> 00:02:33,990
There are other methods you can use to extract other pieces of that date such as the number of seconds

32
00:02:34,050 --> 00:02:35,820
or hours.

33
00:02:35,820 --> 00:02:41,010
The other method that we're going to use and the one we're actually going to integrate into our code

34
00:02:41,310 --> 00:02:43,030
is called get time.

35
00:02:43,200 --> 00:02:46,400
So let's take a quick moment to run that right here.

36
00:02:46,560 --> 00:02:48,870
It is now dot get time.

37
00:02:48,960 --> 00:02:50,310
I'm going to execute it.

38
00:02:50,340 --> 00:02:51,670
And what do we get back.

39
00:02:51,690 --> 00:02:54,840
We get back a really big number.

40
00:02:54,930 --> 00:02:58,070
Now this value this number is a timestamp.

41
00:02:58,080 --> 00:03:00,720
It is the representation of that point in time.

42
00:03:00,720 --> 00:03:08,610
Up above it is the number of milliseconds since January 1st at midnight of the year nineteen seventy

43
00:03:08,850 --> 00:03:12,930
that point in time is also known as the Unix epic.

44
00:03:12,930 --> 00:03:19,200
So the number zero represents that point in time positive numbers are in the future from that point

45
00:03:19,200 --> 00:03:22,980
in time and negative numbers go into the past.

46
00:03:22,980 --> 00:03:30,240
So here I have a very large positive number because it has been quite a few years since 1970.

47
00:03:30,240 --> 00:03:36,630
I would have a very large negative number if I was trying to get a timestamp for something like the

48
00:03:36,630 --> 00:03:39,390
start of World War 1 as an example.

49
00:03:39,390 --> 00:03:45,900
Now in this case we have the timestamp and timestamps are great for transferring between systems because

50
00:03:45,900 --> 00:03:47,830
it is nothing more than a number.

51
00:03:47,910 --> 00:03:53,910
And this number is universally understood by pretty much every programming language out there including

52
00:03:53,910 --> 00:03:54,690
javascript.

53
00:03:54,690 --> 00:03:56,710
So it's really easy to work with.

54
00:03:56,940 --> 00:04:04,410
What we're going to do is use this exact same code on the server to generate timestamps numbers for

55
00:04:04,440 --> 00:04:08,350
each and every message that the server sends to the client.

56
00:04:08,430 --> 00:04:15,030
The client will then receive that message and it will be able to use all the message text like we have

57
00:04:15,030 --> 00:04:17,480
above as well as the timestamp.

58
00:04:17,490 --> 00:04:23,790
And we'll talk about how we can format that to make it look a bit nicer and a bit more useful for humans.

59
00:04:23,790 --> 00:04:29,850
So let's get started by generating that timestamp on the server inside a Visual Studio code.

60
00:04:29,850 --> 00:04:35,100
We'll be kicking things off in index dot J S now in index dot J.

61
00:04:35,100 --> 00:04:37,660
S we're going to focus on the message event.

62
00:04:37,680 --> 00:04:42,600
At first we'll be ignoring the location message event for now.

63
00:04:42,600 --> 00:04:46,800
Now we admit the message event from four different places right here.

64
00:04:46,800 --> 00:04:53,280
I admit it twice once to the user who's joining and once to everyone else down below I admit the message

65
00:04:53,280 --> 00:04:57,730
event to send a user's message to all other connected users.

66
00:04:57,780 --> 00:05:03,680
And finally at the bottom I hit a message when someone leaves the chat room.

67
00:05:03,680 --> 00:05:09,170
Now in this case we have four different places where we need to set up the date and that's going to

68
00:05:09,170 --> 00:05:11,990
require us to have a lot of duplicate code.

69
00:05:12,290 --> 00:05:18,570
So the better solution would be to create a separate function that can get all of this done for us.

70
00:05:18,680 --> 00:05:24,800
Now when it comes to omitting the message event we are going to need to provide more than just a single

71
00:05:24,800 --> 00:05:25,910
value.

72
00:05:25,910 --> 00:05:32,690
Now when we need to omit an event with more than a single value we have two options we can one provide

73
00:05:32,690 --> 00:05:40,700
more arguments for example adding the timestamp over here as another argument to omit or we could choose

74
00:05:40,700 --> 00:05:46,730
to just omit a single piece of data and object with everything on there as a property.

75
00:05:46,760 --> 00:05:53,390
For example I could have a message property on the object to store this text and I could have a created

76
00:05:53,450 --> 00:05:56,710
at property on there to store the timestamp.

77
00:05:56,720 --> 00:05:59,030
And that's the approach that we're going to take.

78
00:05:59,030 --> 00:06:01,120
So right here we're changing two things.

79
00:06:01,130 --> 00:06:07,680
One we are going to send objects back instead of just sending back strings when we emit the message.

80
00:06:08,030 --> 00:06:12,770
And we're also going to create a function that generates that object for us.

81
00:06:12,770 --> 00:06:16,940
So we don't have to add these same code over and over again.

82
00:06:17,510 --> 00:06:20,950
Let's go ahead and see what this is going to look like before we create it.

83
00:06:20,960 --> 00:06:25,320
So right here for the welcome event I'm going to remove this string.

84
00:06:25,520 --> 00:06:28,150
We're going to provide an object instead.

85
00:06:28,280 --> 00:06:31,840
And this object will have a text property with that message.

86
00:06:31,850 --> 00:06:32,400
Welcome.

87
00:06:32,420 --> 00:06:34,770
Exactly like we had before.

88
00:06:34,850 --> 00:06:42,410
We're also going to send back something like create it at setting up a new date right here using the.

89
00:06:42,430 --> 00:06:45,680
Get time method to get the timestamp.

90
00:06:45,680 --> 00:06:49,940
Now I could have stored this in a variable first and then used to get time.

91
00:06:49,940 --> 00:06:51,670
That's what we did in the terminal.

92
00:06:51,740 --> 00:06:56,420
But I could change the method on right here to get all of this done at once.

93
00:06:56,420 --> 00:07:02,660
So in the end of the day this is the sort of thing we want to be sending from the server to the client.

94
00:07:02,660 --> 00:07:08,060
Now once again we're going to create a function that generates this object for us.

95
00:07:08,060 --> 00:07:14,710
So I don't have to type this out every single time I want to send a message from the server to the client.

96
00:07:14,840 --> 00:07:17,840
I want to put all of this logic into a single function.

97
00:07:17,870 --> 00:07:20,480
I can use and reuse.

98
00:07:20,480 --> 00:07:24,740
So what I'm going to do is create a new file in the source directory.

99
00:07:24,740 --> 00:07:29,180
Actually I'm going to create a new directory in the source directory.

100
00:07:29,300 --> 00:07:36,010
I'll go ahead and call this something like utilize and in the utilize directory we'll make our new file.

101
00:07:36,170 --> 00:07:40,830
And for this one I could call it something like messages dot J S.

102
00:07:40,910 --> 00:07:46,290
This is going to be a pretty simple file which is focused on defining a few functions that are going

103
00:07:46,290 --> 00:07:49,430
to generate those message objects.

104
00:07:49,430 --> 00:07:55,970
Right now it's just text and created at but as we progressed through the section we'll be adding even

105
00:07:55,970 --> 00:08:02,900
more data on for example eventually we'll have user names for our users and we'll need to transfer that

106
00:08:03,170 --> 00:08:04,190
as well.

107
00:08:04,190 --> 00:08:08,510
So let's go ahead and get started by defining our first function right here.

108
00:08:08,540 --> 00:08:15,620
Let's create a new constants for our function call it something like generate message and we'll set

109
00:08:15,620 --> 00:08:17,150
it up as an arrow function.

110
00:08:17,180 --> 00:08:19,280
And there's not a whole lot to this one.

111
00:08:19,280 --> 00:08:24,220
We're going to accept the message text in as the first and only parameter for the moment.

112
00:08:24,260 --> 00:08:27,280
Others will come later on and then down below.

113
00:08:27,350 --> 00:08:30,430
Oh we're going to do is return an object.

114
00:08:30,530 --> 00:08:34,590
Now right here we are going to set up the properties we want to transfer.

115
00:08:34,730 --> 00:08:40,640
Of course I do want to transfer the text so I will set that text property up getting its value from

116
00:08:40,640 --> 00:08:47,620
the parameter value above and then I'll also set up created app or something similarly named.

117
00:08:47,750 --> 00:08:50,560
And right here we're gonna use that exact same code.

118
00:08:50,570 --> 00:08:55,640
We create a new date and we use get time to get the timestamp.

119
00:08:55,640 --> 00:09:02,020
Now if we export that from this file other files like index dot J yes we'll be able to use it.

120
00:09:02,060 --> 00:09:08,900
So module dot exports equals a new object since we will be adding other functions in later.

121
00:09:09,020 --> 00:09:10,340
And right here generate.

122
00:09:10,360 --> 00:09:14,830
Message is the particular thing we're trying to export right now.

123
00:09:14,870 --> 00:09:21,290
So with this in place we can call generate message with our text instead of needing to generate the

124
00:09:21,290 --> 00:09:28,400
object in line in index dot J S that's going to reduce the amount of duplicate code we have keeping

125
00:09:28,400 --> 00:09:30,200
things nice and clean.

126
00:09:30,200 --> 00:09:36,190
So from here let's go ahead and load that function in up above we need to require that file.

127
00:09:36,320 --> 00:09:44,540
So I'll set up a require call that is dot forward slash utilize forward slash messages and we are going

128
00:09:44,540 --> 00:09:48,020
to create a constant to grab that function.

129
00:09:48,020 --> 00:09:53,390
Now we know that require is going to return that object that we export it right here.

130
00:09:53,390 --> 00:09:59,540
I'll use destruction thing like we've done before to grab the one property off of there I want and store

131
00:09:59,540 --> 00:10:05,750
it as a standalone variable in this case it is generate message perfect.

132
00:10:05,750 --> 00:10:11,870
So now that we have this in place we can replace the object we created with a much simpler solution

133
00:10:12,320 --> 00:10:14,760
instead of defining the whole object here.

134
00:10:14,870 --> 00:10:17,420
We simply call generate message.

135
00:10:17,570 --> 00:10:22,950
This generates the object and passes it in as the second argument to emit.

136
00:10:23,180 --> 00:10:29,570
And remember we have to provide the text right here for this one that happened to be welcome now that

137
00:10:29,570 --> 00:10:30,840
we have this in place.

138
00:10:30,860 --> 00:10:37,010
Let's go ahead and actually adjust the client to get it to work with the new structure before the client

139
00:10:37,010 --> 00:10:40,670
was expecting a single value to come back a string.

140
00:10:40,670 --> 00:10:44,040
Now it's getting an object which means that things are broken.

141
00:10:44,090 --> 00:10:46,610
If I refresh the browser what do we see.

142
00:10:46,610 --> 00:10:52,940
I see that it's trying to represent that object as HDL which results in the following.

143
00:10:53,030 --> 00:10:56,690
We need to go ahead and adjust that client side code.

144
00:10:56,810 --> 00:11:04,520
So over in chat dot J S right here we are passing the entire object in as the property value for our

145
00:11:04,520 --> 00:11:05,330
message.

146
00:11:05,450 --> 00:11:11,660
We are going to set up the message property but instead we need to grab text off of this.

147
00:11:11,690 --> 00:11:15,870
This right here the message parameter it's now an object.

148
00:11:15,890 --> 00:11:20,660
So that means message dot text with this in place.

149
00:11:20,750 --> 00:11:23,630
Things should be restored to their working order.

150
00:11:23,630 --> 00:11:29,820
If I refresh the browser I would expect to see my welcome message and that's exactly what I'm getting.

151
00:11:29,840 --> 00:11:35,580
In addition though I can see I'm also getting that created at timestamp which is excellent.

152
00:11:35,660 --> 00:11:39,920
We can use that to display the time up above.

153
00:11:39,950 --> 00:11:45,310
Now we only made that change for one of the four places where we emit the message event.

154
00:11:45,380 --> 00:11:48,050
So let's take a quick moment to add it for the others.

155
00:11:48,050 --> 00:11:55,100
For example right here we'll go ahead and cut this string out copying it to the clipboard then I'm going

156
00:11:55,100 --> 00:12:02,500
to go ahead and call generate message passing that string in as the first and only argument and we'll

157
00:12:02,500 --> 00:12:08,770
do something similar down below for sending the message to all connected users right here.

158
00:12:08,770 --> 00:12:16,630
I'll remove the message variable I'll call generate message passing it in restoring order to the world.

159
00:12:16,630 --> 00:12:18,950
And finally we have disconnect.

160
00:12:18,970 --> 00:12:20,750
I'm gonna take this string.

161
00:12:20,770 --> 00:12:24,670
Copy it to the clipboard and remove it from its current location.

162
00:12:24,790 --> 00:12:29,320
I'll call generate message passing in the string once again.

163
00:12:29,410 --> 00:12:35,980
And now every single time the server emits a message event it's emitting an object.

164
00:12:35,980 --> 00:12:43,500
We use a single function to create that object so we know it's going to follow a nice standardized format.

165
00:12:43,600 --> 00:12:49,870
That means over here in chat J.S. our code codes never going to break because message is always going

166
00:12:49,880 --> 00:12:52,030
to be an object.

167
00:12:52,030 --> 00:12:56,620
With this in place let's go ahead and integrate the timestamp into the template.

168
00:12:56,830 --> 00:13:04,330
So in index dot HDL I'm gonna make a change to the message template up above right here before the message

169
00:13:04,360 --> 00:13:06,380
we're gonna add a little bit of code.

170
00:13:06,550 --> 00:13:12,490
What I'm gonna do is open and close another set of two curly braces and I'm going to reference something

171
00:13:12,490 --> 00:13:14,050
like created app.

172
00:13:14,080 --> 00:13:19,870
Now we're currently not passing that in but it's ok we'll just provide it right here later on in the

173
00:13:19,870 --> 00:13:21,790
section when we focus on styling.

174
00:13:21,790 --> 00:13:27,660
Our app will adjust where the date shows up but for now this is a great place to get started.

175
00:13:27,760 --> 00:13:33,360
Then we'll have a space followed by a hyphen followed by another space and then the message.

176
00:13:33,730 --> 00:13:40,180
So with this in place we can save index not HDL and all we need to do is make sure that this template

177
00:13:40,420 --> 00:13:49,260
gets access to some piece of data named created at so over inside of chat dot J S right here we have

178
00:13:49,260 --> 00:13:56,380
to add created add into the mix and I'm going to get it off of the message object.

179
00:13:56,400 --> 00:14:01,650
There is a property on there called created at which is what we want access to.

180
00:14:01,650 --> 00:14:06,430
Now with this current setup we're gonna have a number print in the browser.

181
00:14:06,450 --> 00:14:10,750
That number is not useful for humans as it makes no sense whatsoever.

182
00:14:10,830 --> 00:14:15,050
And that is where the moment library comes into place.

183
00:14:15,120 --> 00:14:21,480
Javascript does provide infrastructure for working with dates and it's not very good when it comes to

184
00:14:21,480 --> 00:14:27,920
formatting it does not give you an easy way to format your dates in a way that you might want.

185
00:14:27,930 --> 00:14:33,750
For example maybe I want to say that something happened three hours ago based off of its timestamp.

186
00:14:33,810 --> 00:14:37,680
Or maybe I want to extract just the month as the shorthand.

187
00:14:37,710 --> 00:14:41,520
That would be Jan for January and fab for February.

188
00:14:41,520 --> 00:14:47,610
So on and so forth java script doesn't give you anything good to get that done you'd end up writing

189
00:14:47,610 --> 00:14:49,590
a bunch of code yourself.

190
00:14:49,590 --> 00:14:55,470
And that's where the moment library comes into place it gives us all of the tools necessary to format.

191
00:14:55,470 --> 00:15:00,030
Time now let's go ahead and pull up the documentation real quick.

192
00:15:00,030 --> 00:15:02,320
You can find it over at moment J.

193
00:15:02,310 --> 00:15:03,960
S dot com.

194
00:15:03,990 --> 00:15:10,110
Here we are gonna head over to the documentation page and once again there are so many things that moment

195
00:15:10,110 --> 00:15:11,010
can do.

196
00:15:11,010 --> 00:15:17,550
We're only going to use a very small part of its feature set for example under manipulate you can learn

197
00:15:17,550 --> 00:15:22,680
how to manipulate time adding or removing weeks or hours or seconds.

198
00:15:22,730 --> 00:15:27,590
What we're going to focus on though out of all of these options is just display.

199
00:15:27,600 --> 00:15:34,890
Our goal is to use moment to display time in a way that makes sense for our application and to do this

200
00:15:35,130 --> 00:15:39,450
moment and provides a format method we can provide no arguments.

201
00:15:39,450 --> 00:15:46,890
And it will find a nice default or we can provide a string this string is a pattern of tokens and those

202
00:15:46,890 --> 00:15:50,910
tokens allow us to customize how the date shows up.

203
00:15:50,910 --> 00:15:55,040
So for example down below we have tokens for month.

204
00:15:55,050 --> 00:16:00,690
I have five different ways I can represent the month and I can see the example outputs over here.

205
00:16:00,690 --> 00:16:05,630
So if I wanted to show Jan or desks excuse me T C for December.

206
00:16:05,640 --> 00:16:06,720
That's not a real word.

207
00:16:06,720 --> 00:16:08,880
I shouldn't have tried to pronounce it.

208
00:16:08,940 --> 00:16:15,480
I would use three M's in my pattern those three ends would be replaced with the correct values.

209
00:16:15,480 --> 00:16:20,240
There's values and tokens for other things as well if I keep scrolling down.

210
00:16:20,280 --> 00:16:28,350
We have a.m. p.m. hour minute and second all of which we can use to get time showing up as we see fit.

211
00:16:28,380 --> 00:16:33,990
So let's go ahead and actually use this format and method with some of these tokens to get our date

212
00:16:34,050 --> 00:16:35,560
showing up correctly.

213
00:16:35,730 --> 00:16:42,000
Right here what we're gonna do is remove the value we currently have for created at and we are going

214
00:16:42,000 --> 00:16:47,910
to call the moment function that's provided by the moment library we loaded in.

215
00:16:47,940 --> 00:16:54,570
Remember in index dot HDL you already grabbed that script tag when you grabbed the mustache library

216
00:16:54,600 --> 00:16:56,690
a few videos ago.

217
00:16:56,760 --> 00:16:59,670
Now we can go ahead and call it passing to it.

218
00:16:59,700 --> 00:17:08,110
Our timestamp so right here that is message dot created at and then we can go ahead and call format.

219
00:17:08,110 --> 00:17:13,150
Now as you mentioned you can call format with no arguments but it's probably not going to show you what

220
00:17:13,150 --> 00:17:14,120
you want.

221
00:17:14,200 --> 00:17:17,990
We can take a quick peek at what exactly we get by default.

222
00:17:18,040 --> 00:17:23,230
It contains a bunch of information in a way that's not necessarily what we want.

223
00:17:23,260 --> 00:17:29,200
Instead we're going to provide our own string pattern using just the tokens that we actually want to

224
00:17:29,200 --> 00:17:30,240
have show up.

225
00:17:30,340 --> 00:17:36,060
So there's no need to show the year or the month if those things don't make sense for your purposes.

226
00:17:36,190 --> 00:17:37,870
And in our case that's true.

227
00:17:38,020 --> 00:17:42,700
All I really want to show is the hour the minute and a.m. or p.m..

228
00:17:42,760 --> 00:17:49,160
Now down below for our there are options for a 24 hour clock or a 12 hour clock.

229
00:17:49,180 --> 00:17:53,620
So feel free to use a pattern that makes sense for where you are in the world.

230
00:17:53,620 --> 00:18:01,450
For me what I'm going to do is use a single H that is the hour from 1 to 12:00 without a padding up

231
00:18:01,450 --> 00:18:07,390
front two Hs adds that padding and making sure it's always two characters that's not something I need.

232
00:18:07,740 --> 00:18:15,250
So right here over inside a format all I do is pass in a string and I type the letter H that character

233
00:18:15,370 --> 00:18:18,760
or token will be replaced with the correct value.

234
00:18:18,760 --> 00:18:25,060
What I'm going to do is save chat dot J S and test things out before we go any further over inside of

235
00:18:25,060 --> 00:18:25,690
the browser.

236
00:18:25,690 --> 00:18:29,880
I'll just give things a quick refresh to generate a new welcome message.

237
00:18:29,950 --> 00:18:33,850
And right here I have 11 and that is correct for the hour.

238
00:18:33,850 --> 00:18:37,360
It is eleven something a M. It's eleven fifty nine.

239
00:18:37,390 --> 00:18:39,140
So almost 12.

240
00:18:39,160 --> 00:18:43,090
Next up we're going to add a couple of other tokens into the mix.

241
00:18:43,150 --> 00:18:49,720
I'm going to show the minute with two characters always so 0 0 instead of just 0 or 59.

242
00:18:49,750 --> 00:18:51,960
They have great examples for all of the tokens.

243
00:18:51,970 --> 00:18:54,610
So you know what you're going to get over here.

244
00:18:54,610 --> 00:18:57,440
We're going to do just that showing the minute.

245
00:18:57,520 --> 00:19:04,180
Now I'm going to put a colon between the hour and the minute and Colon is not a special token and tokens

246
00:19:04,180 --> 00:19:06,400
that aren't special stay as they are.

247
00:19:06,400 --> 00:19:08,530
So moments not going to do anything with that.

248
00:19:08,540 --> 00:19:13,570
It'll show up as is between the correct hour and the correct minute.

249
00:19:13,570 --> 00:19:17,250
Next up a space followed by either a.m. or p.m..

250
00:19:17,440 --> 00:19:25,060
So over here we have a.m. or p.m. I have upper case A for upper case a.m. or p.m. and lower case A for

251
00:19:25,060 --> 00:19:26,810
the lower case version.

252
00:19:26,920 --> 00:19:29,500
Right here I'll stick with the lower case version.

253
00:19:29,560 --> 00:19:32,830
So for me that's just a lower case a loop.

254
00:19:32,860 --> 00:19:34,910
Let's put that inside of the string.

255
00:19:34,990 --> 00:19:36,160
Perfect.

256
00:19:36,160 --> 00:19:42,700
Now with this in place we have a great system for getting the time from the server to the client and

257
00:19:42,700 --> 00:19:48,960
having the client format the time in a way that is useful for users of the application.

258
00:19:49,000 --> 00:19:51,970
What I'm going to do is head back over to the browser.

259
00:19:51,970 --> 00:19:54,340
By now it should be 12 something.

260
00:19:54,340 --> 00:19:58,650
And if I refresh it I can see that it is 12:00 p.m..

261
00:19:58,720 --> 00:19:59,830
Exactly.

262
00:19:59,860 --> 00:20:01,570
Now I believe it's 12 0 1.

263
00:20:01,570 --> 00:20:02,970
I'll give things a refresh.

264
00:20:03,010 --> 00:20:09,040
And now I'm seeing that down below if I were to add other messages into the mix I would expect those

265
00:20:09,040 --> 00:20:13,920
to have timestamps as well and that is exactly what we're seeing right here.

266
00:20:13,930 --> 00:20:19,790
So now we have timestamps set up for our standard messages that we don't have anything like that set

267
00:20:19,840 --> 00:20:22,650
up for our location based messages.

268
00:20:22,660 --> 00:20:25,570
We'll focus on tackling that in the next lesson.

269
00:20:25,570 --> 00:20:27,490
So stay tuned and I'll see you then.
