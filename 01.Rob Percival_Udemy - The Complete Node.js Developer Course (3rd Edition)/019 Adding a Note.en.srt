1
00:00:00,270 --> 00:00:06,210
In this video we're going to wire up the ad command together and in the next video you're going to wire

2
00:00:06,210 --> 00:00:09,810
up the removed command on your own as a challenge.

3
00:00:09,810 --> 00:00:11,740
So let's go ahead and jump in.

4
00:00:11,790 --> 00:00:16,800
The first thing I'm going to do is change directories and the last video we were using that playground

5
00:00:16,830 --> 00:00:21,590
folder I'll be using C.D. dot dot to get out of that directory.

6
00:00:21,630 --> 00:00:26,910
Then forward slash notes hyphen app to get into the notes app project folder.

7
00:00:26,910 --> 00:00:30,420
From there I'll use clear to clear the output and up above.

8
00:00:30,480 --> 00:00:35,640
I'm going to close all open editors and switch over to the notes app directory.

9
00:00:35,640 --> 00:00:43,500
Now we are going to use app dot J.S. and notes dot J as in this video notes that t x t that was created

10
00:00:43,530 --> 00:00:49,380
as an example file of the file that we're going to store our data in as we learned about in the last

11
00:00:49,380 --> 00:00:51,940
video is going to be a Jason File.

12
00:00:51,960 --> 00:00:55,980
So let's take a quick moment to delete that notes dot text file.

13
00:00:56,220 --> 00:01:02,300
Now like we did previously notes dot and J asked is going to define a function that gets called an app

14
00:01:02,300 --> 00:01:05,090
dot J S so let's start there.

15
00:01:05,370 --> 00:01:05,860
Right here.

16
00:01:05,880 --> 00:01:12,600
We're gonna go ahead and define a another function const I'm going to call this ad note and this is

17
00:01:12,600 --> 00:01:15,790
going to be the function responsible for adding a note.

18
00:01:15,930 --> 00:01:22,380
It's going to take in the title for the note as the first argument and it's going to take in the body

19
00:01:22,380 --> 00:01:30,480
of the note as the second argument and its job is to actually get the note saved to the data store.

20
00:01:30,480 --> 00:01:31,890
Now how are we going to do this.

21
00:01:31,890 --> 00:01:33,970
Well we'll talk about that in a second.

22
00:01:33,990 --> 00:01:39,840
The first important thing to discuss is how are we going to export more than one thing from notes dot

23
00:01:39,870 --> 00:01:40,220
J.

24
00:01:40,770 --> 00:01:47,520
And the answer is simple Instead of setting module exports equal to a single function we're going to

25
00:01:47,520 --> 00:01:54,120
set it equal to an object and we'll define multiple properties on there for the multiple functions we

26
00:01:54,120 --> 00:01:55,230
end up creating.

27
00:01:55,270 --> 00:02:01,080
Let's set up both of those properties the first being get notes whose value is going to come from the

28
00:02:01,110 --> 00:02:03,350
get notes function defined up above.

29
00:02:03,360 --> 00:02:09,480
So we have a property of the same name as our function then we're going to do the same thing for ADD

30
00:02:09,480 --> 00:02:16,530
note setting up an add note property and getting its value from the add note variable defined up above.

31
00:02:16,530 --> 00:02:22,800
So now in effect we are exporting an object with two properties one for each function meaning that they're

32
00:02:22,800 --> 00:02:29,430
both getting exported and they can both be used by another file like apt at J S now over in Apt.

33
00:02:29,460 --> 00:02:36,360
J Yes we do indeed require that file we just edit it no longer does it return a single function to the

34
00:02:36,360 --> 00:02:43,110
name and get notes is misleading we should rename that to something like notes utilities or just notes.

35
00:02:43,110 --> 00:02:49,620
This is now an object with two properties we have a guest notes property and we have an add note property

36
00:02:49,770 --> 00:02:55,100
both of which we can now take advantage of in this file and we're gonna start by calling add note in

37
00:02:55,110 --> 00:02:58,520
our handler for the ad command down below right here.

38
00:02:58,530 --> 00:03:04,050
Currently we're just logging the title and the body to the council we're gonna go ahead and instead

39
00:03:04,260 --> 00:03:05,730
call our new method.

40
00:03:05,730 --> 00:03:12,970
So right here that's going to be note dot add note and we're going to pass in the two arguments it expects.

41
00:03:13,020 --> 00:03:17,510
We just defined it the first one is the title The second one is the body.

42
00:03:17,760 --> 00:03:24,630
So the title lives on our v dot title then comma space the second argument that's the body which lives

43
00:03:24,630 --> 00:03:27,040
on Argh the DOT body.

44
00:03:27,150 --> 00:03:28,160
Perfect.

45
00:03:28,200 --> 00:03:29,910
Now the handler is all done.

46
00:03:29,910 --> 00:03:36,480
It's passed the information off to add note and it's up to add note to actually do the job of adding

47
00:03:36,480 --> 00:03:38,620
the note to the data store.

48
00:03:38,610 --> 00:03:44,310
Now currently there is no data file and we don't have any code to read or write from the file system

49
00:03:44,370 --> 00:03:44,850
either.

50
00:03:44,940 --> 00:03:46,610
So we're gonna have to add all of that.

51
00:03:46,650 --> 00:03:49,680
The first thing we have to do is load in the existing notes.

52
00:03:49,680 --> 00:03:52,220
We don't want add note to override any data.

53
00:03:52,260 --> 00:03:55,200
We want to load in the existing ones stored as Jason.

54
00:03:55,200 --> 00:04:00,000
We're gonna pass them we're going to add something new onto the array and then save them back to the

55
00:04:00,000 --> 00:04:01,290
file system.

56
00:04:01,290 --> 00:04:04,790
Now we'll be loading in our notes from multiple functions for example.

57
00:04:04,800 --> 00:04:07,950
We'll need to load in our notes when someone wants to remove a note.

58
00:04:08,160 --> 00:04:14,460
So I'm going to create a little reusable function that just gets that done const load notes equals a

59
00:04:14,460 --> 00:04:15,570
new function.

60
00:04:15,570 --> 00:04:20,670
It does not take in any arguments and it's going to return an array of notes.

61
00:04:20,670 --> 00:04:26,940
So in the end of the day the goal is to be able to use it like this const notes equals and then we'll

62
00:04:26,940 --> 00:04:29,660
just call load notes and get the notes back.

63
00:04:29,820 --> 00:04:33,830
So hopefully we can make this API actually work and we can.

64
00:04:33,960 --> 00:04:37,080
Let's go ahead and move into load notes and get this done.

65
00:04:37,140 --> 00:04:40,300
Now we are going to use f asked to read from the file.

66
00:04:40,320 --> 00:04:46,350
So let's make sure to load that in before we try to use it const F as equals.

67
00:04:46,350 --> 00:04:49,510
We are going to require the file system module.

68
00:04:49,520 --> 00:04:54,500
Now we can actually take advantage of it and we are going to read from the file.

69
00:04:54,510 --> 00:04:57,030
Now we don't have a file yet and that's OK.

70
00:04:57,030 --> 00:05:05,750
So right here const I'm going to call this something like data buffer equals I'll be using F S dot read

71
00:05:06,020 --> 00:05:11,270
file sync to load in a file and we can pick whatever name we like for this.

72
00:05:11,390 --> 00:05:14,050
I'm gonna call it notes dot Jason.

73
00:05:14,240 --> 00:05:20,490
So this is the file we will be reading and writing to from here we can convert that buffer into a string.

74
00:05:20,570 --> 00:05:29,610
So const data Jason equals we'll use data buffer dot to string then finally we're gonna go ahead and

75
00:05:29,640 --> 00:05:30,270
pass it.

76
00:05:30,450 --> 00:05:38,040
So right here I can go ahead and return the following I am going to return the past data by calling

77
00:05:38,100 --> 00:05:43,760
Jason dot pass and passing in the data Jason value.

78
00:05:43,980 --> 00:05:46,920
Now this code is kind of work really well.

79
00:05:46,980 --> 00:05:52,690
If there is a file and it contains Jason but it's actually going to fail.

80
00:05:52,740 --> 00:05:58,830
If there is no file or the file does not contain Jason let's go ahead and prove that by running the

81
00:05:58,830 --> 00:06:02,860
program I'm going to run the program using that app command.

82
00:06:02,860 --> 00:06:06,570
So from the terminal that would be node app.

83
00:06:06,630 --> 00:06:09,870
J.S. ad we'll provide a title.

84
00:06:10,260 --> 00:06:13,950
I'll just stick with the letter T and we'll provide a body.

85
00:06:13,950 --> 00:06:18,050
I'll just stick with the letter B and if we run that command what do we get.

86
00:06:18,060 --> 00:06:24,720
We get a really long error message and if we scroll up I can see that the English readable version is

87
00:06:24,720 --> 00:06:31,380
no such file or directory to open and then it's talking about our notes not Jason File which we're trying

88
00:06:31,380 --> 00:06:32,080
to load.

89
00:06:32,190 --> 00:06:34,140
So clearly that's a problem.

90
00:06:34,140 --> 00:06:35,770
Now we have a couple of options.

91
00:06:35,820 --> 00:06:41,850
We could one create that file or two we could write defensive code that knows how to work.

92
00:06:41,880 --> 00:06:43,850
Even if that file doesn't exist.

93
00:06:43,950 --> 00:06:47,040
And that's the approach that we are going to take to do this.

94
00:06:47,040 --> 00:06:50,100
We're gonna use java scripts try catch statement.

95
00:06:50,100 --> 00:06:52,620
So right here try with a code block.

96
00:06:52,680 --> 00:06:55,260
So we open and close a set of curly braces.

97
00:06:55,290 --> 00:07:00,300
Then after the closing braces we set up our catch block and we define our error which I'll just call

98
00:07:00,330 --> 00:07:00,830
E.

99
00:07:00,960 --> 00:07:03,180
And we set up our catch code block.

100
00:07:03,210 --> 00:07:08,940
Now if any of the code inside of try throws an error that code is immediately gonna stop and it's going

101
00:07:08,940 --> 00:07:11,380
to run the catch block instead.

102
00:07:11,400 --> 00:07:16,390
So that means we can take these three lines cut them out and move them in to try.

103
00:07:16,830 --> 00:07:22,070
So if either of these three lines throws an error the code will immediately stop and it will run catch

104
00:07:22,070 --> 00:07:22,760
instead.

105
00:07:22,830 --> 00:07:27,530
If they all work that's great we will get the past data back as expected.

106
00:07:27,540 --> 00:07:29,150
Now what do we want to do.

107
00:07:29,250 --> 00:07:35,310
If one of these things fails well if there is no file and that throws an error this code is going to

108
00:07:35,310 --> 00:07:35,980
run.

109
00:07:36,000 --> 00:07:39,440
So all we're going to do is return an empty array.

110
00:07:39,450 --> 00:07:42,400
This is basically what would happen if we had an empty file.

111
00:07:42,480 --> 00:07:48,220
So we don't have to worry about overriding data because this code is running we know there is no data.

112
00:07:48,270 --> 00:07:51,150
So we'll just start add note off with an empty array.

113
00:07:51,210 --> 00:07:56,280
It can then add the first item to that array and later on it'll be saved to the file.

114
00:07:56,280 --> 00:08:01,310
So we'll file will actually exist and it can be loaded the next time around.

115
00:08:01,320 --> 00:08:09,380
So let's go ahead and test this out right here console log printing notes I'm gonna save notes dot J

116
00:08:09,380 --> 00:08:15,770
S I'm going to rerun it the exact same command I ran before by using the up arrow key and enter and

117
00:08:15,770 --> 00:08:21,740
this time around what do I get I get my empty array showing up which is great now that we are at least

118
00:08:21,740 --> 00:08:27,470
getting an empty array we can start the process of adding our new note on to the list.

119
00:08:27,620 --> 00:08:29,060
Now how are we going to do that.

120
00:08:29,060 --> 00:08:32,770
Well we're going to use the push method on arrays.

121
00:08:32,780 --> 00:08:41,360
So right here notes dot push and we are going to push on what I'm going to push on an object so we'll

122
00:08:41,360 --> 00:08:46,240
be representing each note as an object with title and body properties.

123
00:08:46,250 --> 00:08:52,870
So right here I'll set the title property equal to whatever value is stored on that title argument and

124
00:08:52,870 --> 00:08:55,090
I'll do the same thing with body down below.

125
00:08:55,220 --> 00:09:02,800
Setting up a body property whose value comes from the body argument up above defined on line 7.

126
00:09:02,810 --> 00:09:07,040
So now we've loaded in the data we've added something to the array.

127
00:09:07,070 --> 00:09:10,910
The next thing we're gonna go ahead and do is save that data.

128
00:09:10,910 --> 00:09:15,770
Now once again we'll be saving data from multiple places in our application as well.

129
00:09:15,770 --> 00:09:21,560
So we're going to create a little reusable function for that down below right before load notes though

130
00:09:21,560 --> 00:09:23,450
the order is not important.

131
00:09:23,450 --> 00:09:30,110
We're going to create a new constant and I'll call this one something like save notes now save notes

132
00:09:30,110 --> 00:09:36,260
is going to be a very simple function but it is indeed going to take an argument it's going to take

133
00:09:36,290 --> 00:09:38,330
in the array.

134
00:09:38,330 --> 00:09:43,970
So remember when we want to save data we take the object or an array we use Jason string ify and then

135
00:09:43,970 --> 00:09:45,890
we write it to the file system.

136
00:09:45,890 --> 00:09:49,350
That's exactly what we're gonna do with whatever data is passed.

137
00:09:49,350 --> 00:09:57,450
And so right here let's use save notes up above I'm going to call save notes.

138
00:09:57,440 --> 00:10:03,500
I'm going to pass in the notes array which has been changed since it was originally loaded in.

139
00:10:03,590 --> 00:10:09,170
So we're going to end up saving that new note and then all we're going to do is string ify the data

140
00:10:09,320 --> 00:10:11,870
and save it to the file system right here.

141
00:10:11,870 --> 00:10:14,240
I'll create a constant for that string a file.

142
00:10:14,300 --> 00:10:16,800
Jason I could call it something like data.

143
00:10:16,820 --> 00:10:23,690
Jason that would work just fine and we'll use the Jason dot string a fine method which we've used plenty

144
00:10:23,690 --> 00:10:24,920
of times before.

145
00:10:25,040 --> 00:10:27,590
And we're going to pass in notes.

146
00:10:27,710 --> 00:10:32,630
Now we have our Jason data and we need to write it to the same file we were loading from.

147
00:10:32,660 --> 00:10:33,820
So we have a note Scott.

148
00:10:33,830 --> 00:10:34,660
Jason File.

149
00:10:34,670 --> 00:10:37,510
Well we don't have it yet but we'll have it shortly.

150
00:10:37,520 --> 00:10:40,740
F S dot right file sync.

151
00:10:40,910 --> 00:10:42,850
Writing two notes Dot.

152
00:10:42,860 --> 00:10:45,050
Jason and what are we writing.

153
00:10:45,050 --> 00:10:47,960
We are writing whatever is stored in that data.

154
00:10:47,960 --> 00:10:50,810
Jason variable above and there we go.

155
00:10:50,810 --> 00:10:52,040
We load in the notes.

156
00:10:52,040 --> 00:10:53,930
We change them and we save them.

157
00:10:53,930 --> 00:10:59,990
This is essentially what you did for your challenge in the last video with just a little more complexity.

158
00:10:59,990 --> 00:11:04,760
Adding a little error handling to make sure that things always work smoothly.

159
00:11:04,760 --> 00:11:06,610
Let's go ahead and test this out.

160
00:11:06,710 --> 00:11:09,670
Now the program should indeed create that file.

161
00:11:09,680 --> 00:11:12,660
I'm going to rerun the same command we were using before.

162
00:11:12,710 --> 00:11:13,570
And what do I get.

163
00:11:13,640 --> 00:11:14,560
I get no output.

164
00:11:14,570 --> 00:11:15,750
That's okay.

165
00:11:15,770 --> 00:11:22,070
There is no console dialogue statement running but I do have my notes that Jason File and if I crack

166
00:11:22,070 --> 00:11:28,460
that open it looks like an array with a single object inside that object has a title property with the

167
00:11:28,460 --> 00:11:35,990
value of t and a body property with the value of b both coming from the options we provided to the command

168
00:11:35,990 --> 00:11:37,250
line down below.

169
00:11:37,310 --> 00:11:41,920
And this is a fantastic step towards creating the notes application.

170
00:11:41,960 --> 00:11:45,320
Now let's go ahead and add one more note right here.

171
00:11:45,320 --> 00:11:51,260
I am going to load in the previous command and just use the arrow keys to change the data so I'll remove

172
00:11:51,260 --> 00:11:57,200
the T for a title and I'll use something like list as the title then for a body.

173
00:11:57,200 --> 00:12:00,350
I'm just going to list out some stuff maybe that I need to buy.

174
00:12:00,650 --> 00:12:05,600
It's getting cold out so let's go ahead and put in sweater and I'll also put in some new pants.

175
00:12:05,630 --> 00:12:06,890
Not plants.

176
00:12:06,890 --> 00:12:07,840
Perfect.

177
00:12:07,850 --> 00:12:13,640
Now if we run this hopefully we don't override the existing data but we just append to it.

178
00:12:13,730 --> 00:12:18,680
I'm going to run the script and what happens well hopefully in just a second we see our refreshed data

179
00:12:18,710 --> 00:12:19,700
and there it is.

180
00:12:19,820 --> 00:12:25,550
We have our existing note from earlier and we have our brand new note with the correct title and body

181
00:12:25,670 --> 00:12:26,690
values.

182
00:12:26,690 --> 00:12:32,780
So this proves that both of the cases for low notes are working the first time around when there was

183
00:12:32,780 --> 00:12:35,540
no file this did indeed throw an error.

184
00:12:35,540 --> 00:12:41,900
So we started off with an empty array giving us a barebones way to actually create that file the next

185
00:12:41,900 --> 00:12:42,810
time we ran it.

186
00:12:42,830 --> 00:12:44,310
This didn't throw an error.

187
00:12:44,340 --> 00:12:49,860
It correctly passed the existing data and then added onto that existing data and saved it.

188
00:12:49,910 --> 00:12:53,600
And in the end of the day we are seeing the correct results over here.

189
00:12:53,600 --> 00:12:58,700
Now let's wrap up this video by adding one more small feature to our function.

190
00:12:58,700 --> 00:13:04,090
We're going to make it so that add note checks if that title is already in use.

191
00:13:04,100 --> 00:13:09,590
So if I'm trying to add a note with a title and that title is already taken the application won't let

192
00:13:09,590 --> 00:13:10,600
you add it again.

193
00:13:10,610 --> 00:13:13,790
So we're gonna prevent duplicate notes from being added.

194
00:13:13,820 --> 00:13:15,590
Let's go ahead and knock this out.

195
00:13:15,590 --> 00:13:18,960
First up I am going to clear the output down below.

196
00:13:18,980 --> 00:13:22,610
Then we're gonna make some changes to the ADD note function.

197
00:13:22,640 --> 00:13:29,030
The first thing we need to do is look through the notes array and see if any of those notes have this

198
00:13:29,150 --> 00:13:32,510
title and to do that we're going to use the array filter method.

199
00:13:32,750 --> 00:13:38,240
And the reason I'm doing this now is because in the next video you're gonna have to use the array filter

200
00:13:38,240 --> 00:13:41,510
method for your challenge as well.

201
00:13:41,510 --> 00:13:45,380
Now let's go ahead and actually knock this out right here.

202
00:13:45,380 --> 00:13:53,120
That's going to be const we are going to create a new array called duplicate notes in here will store

203
00:13:53,150 --> 00:13:56,330
all of the duplicate notes we find if we find none.

204
00:13:56,330 --> 00:13:56,910
Great.

205
00:13:56,960 --> 00:13:59,770
We'll go ahead and run this code if we find some.

206
00:13:59,780 --> 00:14:04,720
That's obviously a problem and we won't add the new one because it would be a duplicate.

207
00:14:04,760 --> 00:14:06,710
Let's go ahead and use the method.

208
00:14:06,710 --> 00:14:07,720
That's an array method.

209
00:14:07,730 --> 00:14:11,150
We'll call it on the notes array it is filter.

210
00:14:11,150 --> 00:14:15,080
This is going to return a subset of the notes array.

211
00:14:15,110 --> 00:14:21,740
So if there's 40 items in here duplicate notes will be either 40 items or less depending on how many

212
00:14:21,770 --> 00:14:29,490
match our criteria and we define that criteria by setting up a function and this function gets called

213
00:14:29,490 --> 00:14:31,380
one time for each note.

214
00:14:31,380 --> 00:14:38,070
So in our current case it would get called two times once with this object then once with this object

215
00:14:38,130 --> 00:14:44,030
and we access the object via that first argument right here we can call this whatever we like.

216
00:14:44,040 --> 00:14:45,290
I have an array of notes.

217
00:14:45,390 --> 00:14:49,850
We have individual items over here so I'll call it singular note.

218
00:14:50,040 --> 00:14:55,500
Now the goal is to return either true or false.

219
00:14:55,500 --> 00:15:02,730
If we return it true filter is going to keep that individual note in the new Array calling it a duplicate.

220
00:15:02,730 --> 00:15:08,520
If we return false filter is not going to keep that in the array saying it's not a duplicate.

221
00:15:08,520 --> 00:15:11,260
Now we don't want to type out the boolean explicitly.

222
00:15:11,260 --> 00:15:17,250
Instead we're gonna use a little conditional logic we're going to use the equality operator to check

223
00:15:17,550 --> 00:15:23,270
if note dot title equals the title argument from up above.

224
00:15:23,280 --> 00:15:29,210
So this function is going to run twice the first time that's going to see if our title equals this.

225
00:15:29,280 --> 00:15:33,010
If it does it's going to return true meaning we have a duplicate.

226
00:15:33,090 --> 00:15:38,760
If it doesn't it's going to return false leaving the duplicate notes or write empty it's then going

227
00:15:38,760 --> 00:15:41,760
to call this function again with the second object.

228
00:15:41,760 --> 00:15:45,360
We're going to compare that title and go through the same process.

229
00:15:45,870 --> 00:15:50,600
So this array is going to have zero items if no duplicates were found.

230
00:15:50,700 --> 00:15:55,120
And now we can use that to conditionally run some code down below.

231
00:15:55,260 --> 00:16:00,210
If a condition and a code block to run the condition.

232
00:16:00,260 --> 00:16:05,870
We're going to look at the duplicate notes array if its length is zero.

233
00:16:05,870 --> 00:16:12,050
We know we didn't find any duplicates which means that we can safely add this note so down below I can

234
00:16:12,050 --> 00:16:18,080
take these two statements I can cut them out and I can paste them inside of the code block and we can

235
00:16:18,080 --> 00:16:24,940
even print a little message console log something like new note added.

236
00:16:24,950 --> 00:16:25,430
Perfect.

237
00:16:26,180 --> 00:16:32,540
Now we could also add on an else clause to this if statement and then here we could run some code if

238
00:16:32,720 --> 00:16:39,980
duplicate notes dot length is not equal to zero in which case we have found a duplicate console log

239
00:16:40,250 --> 00:16:45,740
I can say something along the lines of note title taken.

240
00:16:45,740 --> 00:16:46,730
Perfect.

241
00:16:46,730 --> 00:16:50,620
Now that we have this in place let's go ahead and see it work in action.

242
00:16:50,630 --> 00:16:52,160
I'm gonna try to add a duplicate.

243
00:16:52,160 --> 00:16:57,920
Make sure that fails then I'll try to add a new one and make sure that works from the terminal.

244
00:16:57,950 --> 00:17:03,770
Let's go ahead and cycle through our previous commands looking for one of the ones we've already executed

245
00:17:04,040 --> 00:17:04,550
right here.

246
00:17:04,550 --> 00:17:07,270
This is the command where we added the list.

247
00:17:07,310 --> 00:17:12,470
Note now that already exists in the data that should be caught as a duplicate.

248
00:17:12,470 --> 00:17:15,100
Let's run the program and see what happens right here.

249
00:17:15,110 --> 00:17:17,390
No title taken which is great.

250
00:17:17,390 --> 00:17:22,000
You'll notice that no new note was added because the title was already in use.

251
00:17:22,100 --> 00:17:28,130
So the duplicate notes array had a single item the first time it ran our callback it ran it with the

252
00:17:28,190 --> 00:17:31,360
note object being this one right here.

253
00:17:31,490 --> 00:17:37,940
Now the title t did not match up with the one provided which was list so that returned false and nothing

254
00:17:37,940 --> 00:17:39,340
was in duplicates or right.

255
00:17:39,530 --> 00:17:46,330
The next time it ran used this object seeing if this one was in the array already and it was it compared

256
00:17:46,340 --> 00:17:50,130
note dot title which is this value with the value provided.

257
00:17:50,150 --> 00:17:56,450
And those are identical which means that this returned true which means that item was kept in the duplicate

258
00:17:56,480 --> 00:17:59,240
notes array bringing the length to one.

259
00:17:59,240 --> 00:18:04,880
So this condition did not pass this code was the code that ran.

260
00:18:04,880 --> 00:18:08,050
Now let's load in that same command and change the title.

261
00:18:08,180 --> 00:18:11,870
I'll create a new list called the list to I'll run the command.

262
00:18:11,870 --> 00:18:14,040
And now we can see new note added.

263
00:18:14,120 --> 00:18:19,040
And over in the Jason we have our third note added onto the list.

264
00:18:19,040 --> 00:18:23,930
So now that we have this in place we have one of our commands knocked out in the next video.

265
00:18:23,930 --> 00:18:28,280
It's going to be up to you to wire up the remove functionality.

266
00:18:28,280 --> 00:18:29,940
I'm excited to get to that.

267
00:18:29,960 --> 00:18:32,870
So let's go ahead and jump right in to the next one.
