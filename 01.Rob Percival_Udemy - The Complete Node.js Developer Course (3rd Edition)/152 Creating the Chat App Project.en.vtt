WEBVTT
1
00:00:00.180 --> 00:00:06.870
In this lesson we'll be kicking off the section by setting up a new project folder for the chat application.

2
00:00:06.870 --> 00:00:13.140
We'll also take our first steps towards getting some code inside of there setting up a basic Web server

3
00:00:13.170 --> 00:00:15.930
using Express which we'll be building off of.

4
00:00:15.930 --> 00:00:17.880
Throughout this project.

5
00:00:17.880 --> 00:00:24.990
So for the moment what we can do is close down the task manager directory and I can close all open files

6
00:00:25.260 --> 00:00:29.040
and we'll be creating a new directorate in the node course folder.

7
00:00:29.250 --> 00:00:33.720
I'll create the new folder and I can call it something like chat app.

8
00:00:33.720 --> 00:00:39.210
Now this is the project we'll be working out of throughout this section and down below in the terminal

9
00:00:39.390 --> 00:00:42.110
we're going to navigate into this project folder.

10
00:00:42.240 --> 00:00:48.570
So down here in the terminal control C to shut down the test suite for the task manager.

11
00:00:48.560 --> 00:00:56.040
C D dot dot to get out of that directory and once we're out of that directory I'll use C D chat app

12
00:00:56.070 --> 00:00:59.490
to navigate into the new project folder.

13
00:00:59.640 --> 00:01:02.590
I'll then use clear just to clear the terminal output.

14
00:01:02.640 --> 00:01:06.960
And now we're starting from a nice clean slate over in the browser.

15
00:01:06.960 --> 00:01:11.310
We could also go ahead and close some of the tabs we're no longer gonna be using.

16
00:01:11.640 --> 00:01:15.170
I have this tab for the task manager repository.

17
00:01:15.390 --> 00:01:19.700
I have some just documentation and the extra tests you can create.

18
00:01:19.710 --> 00:01:21.680
We're not going to need any of those.

19
00:01:21.700 --> 00:01:28.910
What we're going to do is start from scratch setting up as I mentioned a basic Express Web server.

20
00:01:28.920 --> 00:01:34.170
Now from here let's go ahead and create a new directory in the chat app folder.

21
00:01:34.200 --> 00:01:40.560
We're going to create the source directory for our node J.S. scripts and in that source directory for

22
00:01:40.560 --> 00:01:44.800
now we're going to create just a single file index.

23
00:01:44.820 --> 00:01:52.050
Dot J S now inside of here it's gonna be up to you to complete the following challenge.

24
00:01:52.290 --> 00:01:59.610
The big picture goal here is to create an express server that serves up some HDMI L and this is something

25
00:01:59.610 --> 00:02:01.170
we've already done before.

26
00:02:01.230 --> 00:02:05.310
So I'm gonna have you do it this time as a challenge.

27
00:02:05.310 --> 00:02:08.300
So we covered this previously in the course.

28
00:02:08.310 --> 00:02:11.130
Right here you're going to do it once again.

29
00:02:11.130 --> 00:02:18.720
So step number one you'll be initializing this chat app project to use NPM and you'll be installing

30
00:02:18.720 --> 00:02:20.160
Express.

31
00:02:20.220 --> 00:02:26.820
Next up in this file you're actually going to create the Express server what you want to do is create

32
00:02:26.850 --> 00:02:30.990
a server that serves up the public directory.

33
00:02:30.990 --> 00:02:35.450
Now currently no public directory exists in chat app.

34
00:02:35.520 --> 00:02:38.700
You're gonna go ahead and fix that by creating it.

35
00:02:38.760 --> 00:02:43.470
Then the server will start up and listen on port three thousand.

36
00:02:43.470 --> 00:02:50.910
Now in that public folder you're going to create an HD email file called index down HDL and then you'll

37
00:02:50.910 --> 00:02:54.400
render the text chat app to the screen.

38
00:02:54.480 --> 00:02:56.850
And finally you'll test your work.

39
00:02:56.850 --> 00:03:03.510
Start the new server and then view local host three thousand in the browser and ensure that you see

40
00:03:03.510 --> 00:03:05.760
your little message showing up.

41
00:03:05.760 --> 00:03:12.240
So take some time to knock this out and feel free to use any previous lesson in the course or any of

42
00:03:12.240 --> 00:03:17.460
the code you already created as guidance for what you need to do.

43
00:03:17.460 --> 00:03:18.060
All right.

44
00:03:18.060 --> 00:03:21.390
Pause the video when you're done come back and click play

45
00:03:25.190 --> 00:03:26.090
Oh right.

46
00:03:26.090 --> 00:03:26.930
How that go.

47
00:03:26.930 --> 00:03:32.120
Let's kick things off by initializing NPM and installing Express.

48
00:03:32.150 --> 00:03:39.370
Now if you remember we can initialize NPM in a project by running NPM in it from the project route.

49
00:03:39.410 --> 00:03:44.960
We don't have to provide any other arguments and it walks us through that little questionnaire we can

50
00:03:44.960 --> 00:03:52.620
use the default value for everything and once we're done we simply confirm the contents of the package.

51
00:03:52.700 --> 00:03:55.790
Jason File and it's created for us.

52
00:03:55.970 --> 00:04:03.260
Now that we have package Jason in place we can move on to the second part of Step 1 which is to install

53
00:04:03.260 --> 00:04:04.410
Express.

54
00:04:04.460 --> 00:04:08.510
We'll do that from the terminal down below NPM ie.

55
00:04:08.660 --> 00:04:14.180
That is expressed at version four point sixteen point four.

56
00:04:14.270 --> 00:04:20.270
Right here I'm going to go ahead and install that version and once we have it installed we'll actually

57
00:04:20.300 --> 00:04:24.890
set up the new express server right here in this file.

58
00:04:24.890 --> 00:04:30.920
Now I'm gonna add all of the code for the file just above the challenge comments as I'll be removing

59
00:04:30.920 --> 00:04:33.430
those challenge comments shortly.

60
00:04:33.650 --> 00:04:38.160
And to kick off step 2 what you needed to do was load express in.

61
00:04:38.460 --> 00:04:45.400
So right here const express equals we'll use require to load in the library.

62
00:04:45.450 --> 00:04:51.770
Then down below we can actually create our new express application and get it configured and up and

63
00:04:51.770 --> 00:04:52.900
running right here.

64
00:04:52.910 --> 00:05:00.430
A new constant app we will get the value by calling the Express function to generate a new application.

65
00:05:00.440 --> 00:05:05.870
Then we're going to go ahead and figure out how we can get the port as well as the public directory

66
00:05:05.870 --> 00:05:06.470
path.

67
00:05:06.470 --> 00:05:09.240
So right here let's start with port.

68
00:05:09.290 --> 00:05:16.940
This will come from process done EMV dot port otherwise we'll fall back to the default value three thousand

69
00:05:16.940 --> 00:05:20.650
which is what we'll be using locally on our machine.

70
00:05:20.660 --> 00:05:24.270
Now maybe you didn't create a variable that checked for this if you did it.

71
00:05:24.290 --> 00:05:32.630
That's OK but I would suggest doing a bit of refactoring to also check for that port environment variable.

72
00:05:32.630 --> 00:05:38.750
Now I also wanted you to serve up the public directory which means we need to get the path to that folder

73
00:05:38.990 --> 00:05:42.530
like we had done before in the web server project.

74
00:05:42.530 --> 00:05:45.860
That means working with the node path module.

75
00:05:45.860 --> 00:05:48.980
So right here const path equals.

76
00:05:48.980 --> 00:05:51.910
I'll go ahead and use require to load in path.

77
00:05:51.920 --> 00:05:58.970
And remember this is a core node module so there's no need to install it down below we can simply use

78
00:05:58.970 --> 00:06:00.160
it right here.

79
00:06:00.160 --> 00:06:03.920
Const public directory path.

80
00:06:03.920 --> 00:06:12.150
Let's go ahead and spell things correctly equals and what we're gonna do is use path not join like we

81
00:06:12.150 --> 00:06:15.590
had done earlier in the web server project.

82
00:06:15.600 --> 00:06:22.410
We join together underscore underscore their name which is the current directory for this file and we

83
00:06:22.410 --> 00:06:28.970
joined that with the following dot dot to get out of the source folder and forward slash public.

84
00:06:28.980 --> 00:06:35.300
Now the public folder is not something that exists but we'll focus on fixing that in just a few moments.

85
00:06:35.310 --> 00:06:39.630
So now we have everything we need to actually configure the server.

86
00:06:39.630 --> 00:06:46.380
First up we're going to use the Express static middleware to serve up what's ever in this directory

87
00:06:46.620 --> 00:06:47.610
right here.

88
00:06:47.610 --> 00:06:49.950
That'll be app dot use.

89
00:06:49.950 --> 00:06:56.160
Then we use Express dot static like we had done earlier in the class and we provide the path to the

90
00:06:56.160 --> 00:07:00.420
folder that is the public directory path.

91
00:07:00.420 --> 00:07:06.360
Now the last thing to do is to actually use app dot listen to start these server up.

92
00:07:06.360 --> 00:07:12.300
I'm going to provide the port I want to listen on as that first argument and optionally I could choose

93
00:07:12.300 --> 00:07:14.610
to provide a callback function.

94
00:07:14.640 --> 00:07:16.920
You did not need to do this but if you did.

95
00:07:16.950 --> 00:07:18.900
That's great as well right here.

96
00:07:18.900 --> 00:07:25.440
Console dialogue and I'll use the S6 template string to print something like.

97
00:07:25.440 --> 00:07:33.360
Server is up on Port followed by that port value right here referencing it and I'll put an exclamation

98
00:07:33.360 --> 00:07:35.100
mark at the end.

99
00:07:35.130 --> 00:07:41.430
So now we have our Express server up and running and it's serving up the contents of that public folder

100
00:07:41.670 --> 00:07:47.460
that brings us to step three actually creating an HDMI all file we can serve up.

101
00:07:47.880 --> 00:07:55.200
So let's go ahead and do just that in the chat app folder you needed to make the public directory and

102
00:07:55.200 --> 00:08:01.580
in the public directory you needed to create a single file index dot HDL.

103
00:08:01.590 --> 00:08:06.620
Now we'll be creating plenty of other files in the public directory throughout this project.

104
00:08:06.630 --> 00:08:10.080
But for now just this one is gonna get the job done.

105
00:08:10.080 --> 00:08:14.480
Now there was no need for anything specific or complex inside of here.

106
00:08:14.490 --> 00:08:21.090
We're going to create a very barebones document starting off with our dock type which will be HDMI all.

107
00:08:21.330 --> 00:08:28.860
Then we'll set up HDL inside of there we'll set up the head for our document and then down below we'll

108
00:08:28.860 --> 00:08:33.710
also take a moment to set up the body and in the body we can put these stuff.

109
00:08:33.720 --> 00:08:40.030
We want to render to the browser and for the moment the text chat app is all we want to show.

110
00:08:40.200 --> 00:08:42.440
We're not even using any sort of header tag.

111
00:08:42.450 --> 00:08:45.100
We're just typing the text right inside.

112
00:08:45.150 --> 00:08:51.500
Now later on we'll add other things to configure this document but for now this is a great start.

113
00:08:51.600 --> 00:08:54.960
And with this in place we're now ready to test our work.

114
00:08:54.960 --> 00:09:01.050
So we completed step 3 we created that file and we hopefully will render the correct message to the

115
00:09:01.050 --> 00:09:02.110
screen.

116
00:09:02.190 --> 00:09:03.600
Now we can test our work.

117
00:09:03.630 --> 00:09:10.260
So from the terminal down below what I'm gonna do is use clear to clear the terminal output and I will

118
00:09:10.260 --> 00:09:18.480
use node source forward slash index dot J ust to start these server up and right here it says it's up

119
00:09:18.480 --> 00:09:20.590
and running on port three thousand.

120
00:09:20.700 --> 00:09:27.720
So over in the browser I'll go to local host on port three thousand to hopefully view our page and right

121
00:09:27.720 --> 00:09:28.740
here what do we see.

122
00:09:28.740 --> 00:09:31.950
We see our chat app message.

123
00:09:31.950 --> 00:09:38.130
So with this in place we now have a basic express server which we can continue to build off of as we

124
00:09:38.130 --> 00:09:41.300
build out the chat application for the moment.

125
00:09:41.310 --> 00:09:47.220
What I'm going to do is remove those challenge comments and save the file and down below.

126
00:09:47.220 --> 00:09:52.620
We'll be moving on to our second challenge for the lesson and we'll wrap up the lesson with this quick

127
00:09:52.620 --> 00:09:56.400
one where you're going to need to set up some scripts in package Dot.

128
00:09:56.400 --> 00:10:02.250
Jason the first thing you're going to do is create a start script which starts up the application using

129
00:10:02.250 --> 00:10:06.600
Node much like we had just done from the terminal down below.

130
00:10:06.600 --> 00:10:11.160
Then you're going to install node mom as a development dependency.

131
00:10:11.160 --> 00:10:17.610
You'll be creating a second script a dev script which starts up the application with node on which we'll

132
00:10:17.610 --> 00:10:21.000
be using as we build the app out locally.

133
00:10:21.000 --> 00:10:27.510
Then number four you're gonna run both scripts to test your work so run them both and view things in

134
00:10:27.510 --> 00:10:32.670
the browser making sure they're working as expected take some time to knock that out.

135
00:10:32.670 --> 00:10:40.000
Test your work and when you're done come back and click play.

136
00:10:40.090 --> 00:10:42.930
Let's go ahead and get to it over in package down.

137
00:10:42.930 --> 00:10:45.580
Jason we'll be setting up both of these scripts.

138
00:10:45.580 --> 00:10:51.820
Now I didn't tell you what to do with the test script so maybe you left it in place or maybe you removed

139
00:10:51.820 --> 00:10:51.990
it.

140
00:10:52.000 --> 00:10:54.280
Either way would be perfectly fine.

141
00:10:54.280 --> 00:10:58.300
I'll go ahead and remove it and then we'll set up those two scripts.

142
00:10:58.300 --> 00:11:01.090
I'm going to set up start to do the following.

143
00:11:01.180 --> 00:11:08.320
It'll be using Node to run index dot J.S. in the source directory and we'll also go ahead and set up

144
00:11:08.320 --> 00:11:12.820
the dev script even though we haven't installed node man just yet.

145
00:11:12.820 --> 00:11:20.180
And right here we'll use node man to run that exact same file index dot J.S. in the source directory.

146
00:11:20.290 --> 00:11:26.080
Now down below in the terminal we can actually install node man as a development dependency.

147
00:11:26.140 --> 00:11:35.200
I need to use control C to shut things down followed by NPM I or install we're installing node on at

148
00:11:35.260 --> 00:11:44.480
one point eighteen point seven and then we'll go ahead and use save dev to save that as a development

149
00:11:44.480 --> 00:11:50.120
dependency because it's something we're only ever going to need when we're running the application locally

150
00:11:50.180 --> 00:11:52.100
on our machines.

151
00:11:52.100 --> 00:11:57.950
Now once this is installed the last thing we'll need to do is to test our work so I'll actually run

152
00:11:57.950 --> 00:12:05.660
both scripts and make sure both are correctly serving up the little chat app HDMI I'll file down here

153
00:12:05.810 --> 00:12:09.840
it has installed correctly and I'm seeing my changes in package.

154
00:12:09.920 --> 00:12:16.880
Jason So what I'm going to do is remove the challenge comments I'll be saving index dot J asked and

155
00:12:16.880 --> 00:12:24.770
I'll run both of those scripts NPM runs start to test out that start script it did indeed start and

156
00:12:24.770 --> 00:12:29.770
if I refresh local host three thousand I can still see my application.

157
00:12:29.930 --> 00:12:39.110
And next up we'll go ahead and run after using controls see NPM run dev to start it up using that development

158
00:12:39.170 --> 00:12:40.700
script right here.

159
00:12:40.700 --> 00:12:46.940
I can see that I have started the application using Node man and it should be up on port three thousand

160
00:12:47.270 --> 00:12:54.120
over in the browser for one final time I'll give things a quick refresh and I am able to view the HDMI

161
00:12:54.120 --> 00:12:56.240
L page which is fantastic.

162
00:12:56.600 --> 00:13:02.570
So now that we have this in place we have a great starting point for the chat application in the next

163
00:13:02.570 --> 00:13:03.230
lesson.

164
00:13:03.320 --> 00:13:08.540
We're actually going to start to explore real time data transfer with node j s.

165
00:13:08.570 --> 00:13:10.840
I'm super excited to get to that.

166
00:13:10.850 --> 00:13:13.900
So let's go ahead and jump right in to the next lesson.
