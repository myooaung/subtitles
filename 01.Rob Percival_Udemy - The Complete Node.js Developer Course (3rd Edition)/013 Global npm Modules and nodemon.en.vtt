WEBVTT
1
00:00:00.240 --> 00:00:06.120
In this video you're going to learn how to install and work with global NPM packages.

2
00:00:06.120 --> 00:00:10.620
These are going to allow us to get a new command we can execute from the terminal.

3
00:00:10.620 --> 00:00:16.050
So far all of the packages we've worked with are known as locally install the packages.

4
00:00:16.050 --> 00:00:21.930
That's when we install the dependency explicitly into our project like we've done with validator and

5
00:00:21.930 --> 00:00:24.570
chuck in the notes app project.

6
00:00:24.570 --> 00:00:28.590
You can tell it's a local dependency because it's listed in package.

7
00:00:28.620 --> 00:00:36.540
Jason like our two dependencies are now local NPM modules those get loaded into your project code with

8
00:00:36.540 --> 00:00:43.410
require like we've seen with chalk and validator when we install a module globally we actually don't

9
00:00:43.410 --> 00:00:49.800
load it indirectly to our source files instead we install it globally and it gives us access to a new

10
00:00:49.800 --> 00:00:52.360
command we can use from the terminal.

11
00:00:52.410 --> 00:00:59.340
Now in the case of this video we're going to install a NPM module globally that is a really nice utility

12
00:00:59.340 --> 00:01:05.340
for working with node because it's going to allow us to run our application and automatically restart

13
00:01:05.370 --> 00:01:08.310
the app whenever the app code changes.

14
00:01:08.310 --> 00:01:13.820
So I can make a change up above and save the file and will immediately see the results down below.

15
00:01:13.890 --> 00:01:19.710
So we won't have to constantly switch to the terminal and rerun the same command over and over again

16
00:01:19.830 --> 00:01:25.650
we can find the package we're going to install by heading over to NPM and J ask.com and going up to

17
00:01:25.650 --> 00:01:28.120
that search bar once again right here.

18
00:01:28.160 --> 00:01:33.670
The package we're gonna use is called a Node mine and is n o d e m o n.

19
00:01:33.810 --> 00:01:39.300
Right here the first result is the package we're looking for and I'm just showing you where this package

20
00:01:39.420 --> 00:01:41.890
lives in case you want to learn more about it.

21
00:01:41.910 --> 00:01:44.780
It's actually a very easy tool to use.

22
00:01:44.790 --> 00:01:46.820
So let's just get right to it.

23
00:01:46.860 --> 00:01:52.800
The first thing we have to do is install it now when we're installing a module globally the Installation

24
00:01:52.800 --> 00:01:56.470
Command is basically the same with one slight difference.

25
00:01:56.490 --> 00:01:58.930
So let's go ahead and get started down below.

26
00:01:59.100 --> 00:02:07.680
We are going to run a command npm install the module name that's node man at one point eighteen point

27
00:02:07.680 --> 00:02:13.400
five and this is the exact format you'd expect if we were to install the module locally.

28
00:02:13.410 --> 00:02:18.150
The only difference is we use the G flag which is short for global.

29
00:02:18.180 --> 00:02:22.130
This is going to install the module globally instead.

30
00:02:22.140 --> 00:02:26.520
Now let's go ahead and run this command and see what happens when the command finishes.

31
00:02:26.520 --> 00:02:33.180
We're gonna notice that node modules package lock Jason and package Jason haven't changed in any way

32
00:02:33.180 --> 00:02:39.570
what so ever when we install a module globally it is not changing the individual project it's installing

33
00:02:39.570 --> 00:02:42.810
the tool on our operating system itself.

34
00:02:42.810 --> 00:02:46.260
So right here it is going through the process of getting everything set up.

35
00:02:46.290 --> 00:02:47.300
Now we're done.

36
00:02:47.370 --> 00:02:48.850
And if I open up package.

37
00:02:48.870 --> 00:02:54.390
Jason what don't we see we don't see node man listed as a dependency.

38
00:02:54.480 --> 00:03:01.020
So it's not something we would ever require in our project and then actually try to use this particular

39
00:03:01.020 --> 00:03:04.290
package wasn't designed to be used like that.

40
00:03:04.290 --> 00:03:09.750
Instead what we got access to was a brand new command from the terminal.

41
00:03:09.750 --> 00:03:14.680
Now when you install an NPM package globally things can indeed go wrong.

42
00:03:14.700 --> 00:03:20.160
I usually get a ton of questions related to this since everyone's environment is slightly different.

43
00:03:20.160 --> 00:03:27.180
If you are running on Linux or Mac and you're getting an error I recommend putting sudo that's S U D

44
00:03:27.210 --> 00:03:30.650
O in front of the command to run it as an administrator.

45
00:03:30.750 --> 00:03:39.360
So that would be pseudo npm install node man at one point eighteen point five with the G flag if you're

46
00:03:39.360 --> 00:03:44.100
on Windows and you're getting some sort of error just crack open a question in the course if you want

47
00:03:44.100 --> 00:03:50.850
a and I'll work with you to get unstuck and back on track we can always verify that node man was installed

48
00:03:50.850 --> 00:03:58.230
correctly by running node man the package name exactly followed by the V flag exactly like we've done

49
00:03:58.230 --> 00:04:04.830
with node and with NPM when I run it what do I get I'll get a version one point eighteen point five

50
00:04:04.860 --> 00:04:10.980
the exact one I specified in my installation command if you're seeing a version that's great if you're

51
00:04:10.980 --> 00:04:11.320
not.

52
00:04:11.340 --> 00:04:16.230
That means once again something went wrong and you can always crack open a question in the Q and A and

53
00:04:16.230 --> 00:04:23.010
we'll work with you to get the global modules working correctly so we have access to this new node man

54
00:04:23.010 --> 00:04:26.420
command and the question is how exactly do we use it.

55
00:04:26.430 --> 00:04:27.570
Well let's explore that.

56
00:04:27.630 --> 00:04:34.290
First up I am going to clear the terminal output to make things a bit easier to read and all we do is

57
00:04:34.290 --> 00:04:39.390
we run our script like we would have with node but we change the command we're using.

58
00:04:39.390 --> 00:04:46.050
So in the past we use node space at DOT J S to run the script once with a man.

59
00:04:46.080 --> 00:04:49.050
We use node man space app dot J.

60
00:04:49.070 --> 00:04:54.350
That's so the only thing we've changed is we've swapped out node for node man.

61
00:04:54.390 --> 00:05:00.410
Now if we run it we're gonna see our script run with a few additional pieces of output right here we

62
00:05:00.410 --> 00:05:01.950
can see it's starting node mom.

63
00:05:01.970 --> 00:05:07.060
And it lists the version as well as some other logs saying that things are getting started.

64
00:05:07.100 --> 00:05:13.610
Then we do indeed see the two lines that come from our script down below we can see that the program

65
00:05:13.610 --> 00:05:17.870
has exited and it's waiting for changes before it restarts.

66
00:05:17.870 --> 00:05:22.400
So now node mine is up and running and you'll notice it's not bringing us back to the command prompt

67
00:05:22.430 --> 00:05:27.740
even though our program has finished the node mind process is still executing.

68
00:05:27.740 --> 00:05:34.250
And if we change something up above we'll see that change instantly printed below when we save the file.

69
00:05:34.250 --> 00:05:40.580
So I'm gonna change chalk dot green over to chalk dot read and then I'm gonna change the message from

70
00:05:40.580 --> 00:05:42.640
success to error.

71
00:05:42.740 --> 00:05:48.680
If I go ahead and save the program down below I can see that basically instantly node mine restarted

72
00:05:48.680 --> 00:05:52.340
the script and now we see the new output from our program.

73
00:05:52.370 --> 00:05:58.070
We're still getting the your notes message and now we're seeing our error shown in red.

74
00:05:58.100 --> 00:06:02.950
We could continue to make changes to our program and see those changes instantly reflected.

75
00:06:02.960 --> 00:06:08.900
I'll switch this to blue save the program and before I'm even done saying I saved it Blue is showing

76
00:06:08.900 --> 00:06:10.160
up down below.

77
00:06:10.220 --> 00:06:12.890
So throughout this class I will be using Node mine.

78
00:06:12.940 --> 00:06:15.360
And I also use it with my client projects.

79
00:06:15.470 --> 00:06:21.740
So we don't have to constantly restart the node script every single time we make a small change.

80
00:06:21.770 --> 00:06:26.950
It is a great utility just to improve your overall developer experience.

81
00:06:26.960 --> 00:06:31.810
Now if you want to stop node man you can do that by going to the terminal and using control.

82
00:06:31.810 --> 00:06:37.580
See that's going to terminate the node mind process and bring us back to the command prompt where we

83
00:06:37.580 --> 00:06:43.730
can do something else like install a new module maybe run the script once with node or maybe restart

84
00:06:43.730 --> 00:06:45.710
it with node man in the future.

85
00:06:45.710 --> 00:06:46.300
All right.

86
00:06:46.310 --> 00:06:51.770
That's where we're going to stop for this video and that is also the end of this section on the Node

87
00:06:51.830 --> 00:06:53.460
modules system.

88
00:06:53.510 --> 00:07:01.160
You now know how to load in core node modules how to load in your own files and how to load in NPM modules.

89
00:07:01.160 --> 00:07:05.990
This is gonna give us a foundation for the rest of the class where we're gonna do those things over

90
00:07:05.990 --> 00:07:08.710
and over again in the next section.

91
00:07:08.780 --> 00:07:13.820
We're gonna start to explore command line arguments and the file system and we're actually going to

92
00:07:13.820 --> 00:07:17.040
work to build out that notes application.

93
00:07:17.060 --> 00:07:18.470
I am excited to get to it.

94
00:07:18.530 --> 00:07:22.610
So let's go ahead and jump right into the section introduction for the next one.
