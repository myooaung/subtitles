WEBVTT
1
00:00:00.240 --> 00:00:06.590
In this video we're going to wrap up the notes application by wiring up the final command the read command.

2
00:00:06.600 --> 00:00:11.730
Now before we get to that there is one thing I want to talk about related to how we're using the array

3
00:00:11.730 --> 00:00:13.820
filter method in notes dot J.

4
00:00:13.830 --> 00:00:20.400
S now an add note we use the filter method right here to help us track down any potential duplicates

5
00:00:20.610 --> 00:00:21.330
and then remove.

6
00:00:21.330 --> 00:00:24.730
Note we use filter to just keep the notes.

7
00:00:24.750 --> 00:00:25.730
We want to keep.

8
00:00:25.770 --> 00:00:31.050
Now we're not going to make any changes to how we use filter in remove note but I do want to talk about

9
00:00:31.050 --> 00:00:36.690
how we're using it and add note and how this code could be improved the filter method as we know looks

10
00:00:36.690 --> 00:00:38.520
through every single item and you're right.

11
00:00:38.520 --> 00:00:40.170
In this case the notes are right.

12
00:00:40.230 --> 00:00:45.570
And it runs at the function for each item determining whether or not that item should be copied over

13
00:00:45.570 --> 00:00:47.270
to the new Array you're creating.

14
00:00:47.360 --> 00:00:49.330
In this case duplicate notes.

15
00:00:49.350 --> 00:00:54.540
Now the problem here is that filter is going to look through every single array item from beginning

16
00:00:54.540 --> 00:00:57.830
to end regardless of what happens along the way.

17
00:00:57.840 --> 00:01:02.070
So let's say we have 1000 notes we're looking through and we find a duplicate.

18
00:01:02.100 --> 00:01:03.960
Let's say it's number eighty nine.

19
00:01:03.960 --> 00:01:07.320
It would be nice to be able to stop right there but filter doesn't do that.

20
00:01:07.350 --> 00:01:13.230
It would still look through the other nine hundred and eleven trying to find other duplicates which

21
00:01:13.230 --> 00:01:18.720
we know it's not going to since the whole point of this code is to prevent duplicates from getting into

22
00:01:18.720 --> 00:01:20.730
the data in the first place.

23
00:01:20.730 --> 00:01:26.790
So it would be nice to be able to stop the process once we find a duplicate that has enough information

24
00:01:26.790 --> 00:01:31.770
to know whether or not the new note should be added by running this code or whether we should show them

25
00:01:31.770 --> 00:01:34.730
an error saying there is indeed a duplicate.

26
00:01:34.870 --> 00:01:40.290
Now to actually get this done we're going to use a new Array method that is defined method.

27
00:01:40.290 --> 00:01:45.340
And you'll also be using that for your challenge in this video to wire up the Reid command.

28
00:01:45.360 --> 00:01:51.420
I'm going to start by creating a new variable called a duplicate note singular so filter returns an

29
00:01:51.420 --> 00:01:56.960
array of matches the find method returns the first match it finds if any.

30
00:01:57.030 --> 00:01:59.200
Otherwise it will return undefined.

31
00:01:59.220 --> 00:02:05.640
Right here we are going to set its value equal to and we're going to call notes that it is still an

32
00:02:05.640 --> 00:02:06.570
Array method.

33
00:02:06.570 --> 00:02:08.740
The method itself is called Find.

34
00:02:08.760 --> 00:02:14.970
Now we pass to the criteria for determining a match and that is exactly the same as what we used up

35
00:02:14.970 --> 00:02:15.690
above.

36
00:02:15.690 --> 00:02:19.140
The only difference is that we're going to stop when we find the first match.

37
00:02:19.140 --> 00:02:22.370
So right here we are going to get in an argument.

38
00:02:22.440 --> 00:02:26.090
This function is going to be called for every item until a match is found.

39
00:02:26.100 --> 00:02:29.730
If no match is found every item will be searched through.

40
00:02:29.790 --> 00:02:35.280
And right here we're looking at the notes title property trying to see if it equals the title argument

41
00:02:35.280 --> 00:02:36.360
from up above.

42
00:02:36.360 --> 00:02:40.410
So this function right here is identical to the one we have right here.

43
00:02:40.470 --> 00:02:46.260
Now we can use duplicate note instead of duplicate notes to determine whether or not we should run this

44
00:02:46.260 --> 00:02:49.950
code right here or the error code down below.

45
00:02:49.950 --> 00:02:53.940
Let's go ahead and kick things off by wiping the if condition in here.

46
00:02:53.940 --> 00:02:59.280
We're going to reference the duplicate note variable the new variable we just created.

47
00:02:59.280 --> 00:03:02.550
Now this actually has the opposite effect of what we want.

48
00:03:02.700 --> 00:03:07.470
If there is a duplicate note we are adding the new note on if there is no duplicate.

49
00:03:07.470 --> 00:03:08.690
We're printing an error.

50
00:03:08.730 --> 00:03:10.350
We want it the other way around.

51
00:03:10.440 --> 00:03:17.010
And we can use the logical not operator to flip the value from true to false or from false to true right

52
00:03:17.010 --> 00:03:17.750
here.

53
00:03:17.760 --> 00:03:24.810
Now if there is no duplicate note we are going to run this code adding it if there is a duplicate note

54
00:03:24.870 --> 00:03:26.990
we'll run the error down below.

55
00:03:27.000 --> 00:03:29.350
So this would be one way you could set up the condition.

56
00:03:29.400 --> 00:03:34.440
You could also check if duplicate note is equal to undefined.

57
00:03:34.440 --> 00:03:40.520
That would work as well as the find method will return undefined if you don't find a match.

58
00:03:40.530 --> 00:03:43.160
So this would read if there is no match.

59
00:03:43.230 --> 00:03:43.920
Add the note.

60
00:03:44.010 --> 00:03:46.080
Otherwise print the error.

61
00:03:46.080 --> 00:03:51.570
I'm going to go ahead and stick with the shorter version I had right here using the logical not operator

62
00:03:51.570 --> 00:03:53.570
and referencing our variable.

63
00:03:53.580 --> 00:03:58.980
Now we can actually remove the duplicate notes line altogether as it's no longer being used.

64
00:03:58.980 --> 00:04:00.000
And there we go.

65
00:04:00.000 --> 00:04:04.720
We have a slightly more efficient version of the ad note function.

66
00:04:04.740 --> 00:04:09.410
Now you're gonna go ahead and wire up the read command on your own.

67
00:04:09.420 --> 00:04:14.370
I've got some challenge comments for this one and I'll paste them right up above in the notes dot J.S.

68
00:04:14.430 --> 00:04:14.940
file.

69
00:04:15.150 --> 00:04:17.700
So the goal is to wire up that Reid command.

70
00:04:17.700 --> 00:04:21.330
First up we have to set up the title option for the Reid command.

71
00:04:21.330 --> 00:04:24.600
So we have to configure yards to take in a title.

72
00:04:24.660 --> 00:04:27.190
That's how we're gonna find the note to read.

73
00:04:27.390 --> 00:04:32.880
And then you're going to create a Reid note function in this file notes Scott J S you want to search

74
00:04:32.880 --> 00:04:35.310
for the note by the title provided.

75
00:04:35.310 --> 00:04:41.190
So that'll have to be accepted as an argument and you're going to find the note and print the title

76
00:04:41.340 --> 00:04:46.800
in a styled fashion and the body in just a plain und styled fashion.

77
00:04:46.800 --> 00:04:52.140
Now if no note is found you can print an error message and read saying something like unable to find

78
00:04:52.170 --> 00:04:53.040
note.

79
00:04:53.130 --> 00:04:57.390
Next up make sure the command handler actually calls the new function you've created.

80
00:04:57.450 --> 00:05:03.500
And then finally test your work try to read one of the notes in your Jason File and make sure you see

81
00:05:03.500 --> 00:05:05.010
it's body printing.

82
00:05:05.120 --> 00:05:10.090
Then try to read a note that doesn't exist and make sure you see that error message.

83
00:05:10.190 --> 00:05:16.010
Take as much time as you need to knock this one out when you're done come back and click play

84
00:05:19.890 --> 00:05:20.580
how'd that go.

85
00:05:20.580 --> 00:05:21.850
Let's start with step 1.

86
00:05:21.870 --> 00:05:27.110
I'm going to set up the title option for the command over an app that J ask near the bottom of my file.

87
00:05:27.110 --> 00:05:31.870
I have the read command and all we have to do is set up that builder object.

88
00:05:31.890 --> 00:05:38.400
So a builder property whose value is an object inside of there the only option we need is title.

89
00:05:38.400 --> 00:05:43.320
So I'll set that property up and we're going to set up the three options we've set up for all of our

90
00:05:43.320 --> 00:05:44.140
options.

91
00:05:44.160 --> 00:05:48.020
We're going to set up describe demand option and type.

92
00:05:48.030 --> 00:05:50.160
So first step describe.

93
00:05:50.160 --> 00:05:51.860
We can pick whatever we want for this.

94
00:05:51.930 --> 00:05:57.240
I've used note title in the past for some of our other similar options so I'll use the same thing here

95
00:05:58.170 --> 00:05:59.730
then for the read command.

96
00:05:59.730 --> 00:06:01.880
We do want to make sure a title is provided.

97
00:06:01.890 --> 00:06:04.780
Otherwise we won't be able to read an individual note.

98
00:06:04.800 --> 00:06:09.230
So right here demand option is indeed going to be true.

99
00:06:09.370 --> 00:06:12.530
And I'm going to set type equal to the string string.

100
00:06:12.760 --> 00:06:18.190
Now that we have this in place we are all done with step 1 and we can move on to step 2 which is to

101
00:06:18.190 --> 00:06:19.980
actually create the function.

102
00:06:20.020 --> 00:06:25.060
Over in this file so I'm going to do just that and I'll stick it down below list notes.

103
00:06:25.090 --> 00:06:29.450
So right here a brand new constant called Read note.

104
00:06:29.610 --> 00:06:33.740
And as mentioned this one is going to need to take in a single argument.

105
00:06:33.760 --> 00:06:38.890
So I'll set up my arrow function and I will accept the title and that's how I'm going to figure out

106
00:06:38.890 --> 00:06:41.640
which note to actually fetch and print.

107
00:06:41.710 --> 00:06:47.930
Now from here we can go ahead and make sure this is exported down below alongside of our other exports

108
00:06:48.560 --> 00:06:53.690
read note whose value comes from the read note function defined up above.

109
00:06:53.690 --> 00:06:57.830
Now we can go back to the function and actually fill it out.

110
00:06:57.830 --> 00:07:03.170
Now the first thing we're going to do is get all of the notes so we can actually look through them similar

111
00:07:03.170 --> 00:07:05.180
to what we've done in some of the other methods.

112
00:07:05.180 --> 00:07:11.420
So right here I'm going to create a concept called notes and in this case I am indeed going to load

113
00:07:11.480 --> 00:07:12.920
those notes in.

114
00:07:12.980 --> 00:07:19.160
Now once I load those notes in we're gonna go ahead and start to search for the one we're looking for.

115
00:07:19.160 --> 00:07:25.310
So I can create a const note which would store the match or undefined if no match was found.

116
00:07:25.310 --> 00:07:28.970
And this is where you needed to use the find array method.

117
00:07:28.970 --> 00:07:33.180
So notes dot find we are looking for a match.

118
00:07:33.260 --> 00:07:38.390
We're going to set up a function that gets called one time for every item in the array until a match

119
00:07:38.390 --> 00:07:40.690
is found right here.

120
00:07:40.700 --> 00:07:46.580
The individual item can be called note and I'm going to use the arrow function shorthand to return true

121
00:07:46.730 --> 00:07:53.340
saying we've found a match when note that title equals the title argument.

122
00:07:53.360 --> 00:07:59.030
So now we have this note variable and it might contain an object or it might not.

123
00:07:59.030 --> 00:08:05.030
The next thing we're gonna do is add some conditional logic so we can knock out the rest of step 2 which

124
00:08:05.030 --> 00:08:06.790
is to print the note information.

125
00:08:06.800 --> 00:08:12.740
If we found it otherwise print an error message and read and we're gonna knock that out with an if statement

126
00:08:12.830 --> 00:08:13.760
right here.

127
00:08:13.850 --> 00:08:19.730
So we'll have an if statement with our condition and a code block and we'll also have our else clause

128
00:08:19.790 --> 00:08:25.370
allowing us to handle both of those cases in the condition we're going to reference the note variable.

129
00:08:25.400 --> 00:08:27.010
So if there is a note we'll print it.

130
00:08:27.110 --> 00:08:28.840
Otherwise we'll print our error.

131
00:08:28.850 --> 00:08:32.780
Let's go ahead and wire up those console dialog calls right here.

132
00:08:32.780 --> 00:08:37.670
We're going to print the title styled so console dialogue.

133
00:08:37.730 --> 00:08:45.560
I'm going to use chalk dot inverse to have a gray background right here passing to the note title that's

134
00:08:45.560 --> 00:08:47.570
note dot title.

135
00:08:47.570 --> 00:08:48.560
Excellent.

136
00:08:48.560 --> 00:08:56.300
Next up we can print the body of the note as standard old text so console log passing in note dot body

137
00:08:56.360 --> 00:08:57.790
would get the job done.

138
00:08:58.010 --> 00:09:03.020
From there we can wire up the else clause in this case we want to go ahead and print an error saying

139
00:09:03.050 --> 00:09:07.630
no note was found so we'll do just that console dot log.

140
00:09:07.970 --> 00:09:15.470
I'll use chalk once again I'll use red dot inverse to print it with a red background and right here

141
00:09:15.500 --> 00:09:17.060
we're gonna say something like.

142
00:09:17.060 --> 00:09:19.790
Note Not Found.

143
00:09:19.790 --> 00:09:20.720
Excellent.

144
00:09:20.750 --> 00:09:26.300
Now that we have this in place the last thing to do before we test our work is to make sure that read

145
00:09:26.300 --> 00:09:31.040
note actually gets called when someone uses the command read.

146
00:09:31.040 --> 00:09:39.070
So over here we have to get ARG V where we can access the title and we have to call the Reid note function

147
00:09:39.160 --> 00:09:39.610
that would be.

148
00:09:39.610 --> 00:09:41.240
Notes dot Reid.

149
00:09:41.260 --> 00:09:48.970
Note passing in ARG the DOT title now that we have this in place we can actually test things out making

150
00:09:48.970 --> 00:09:51.760
sure our functionality works as expected.

151
00:09:51.760 --> 00:09:58.120
I'm going to remove the challenge comments up top make sure all of these source files are indeed saved

152
00:09:58.360 --> 00:10:01.540
and we're gonna go ahead and run the Reid command.

153
00:10:01.540 --> 00:10:05.980
Now I have a couple of notes over here though the only one with a body is this first one.

154
00:10:06.040 --> 00:10:09.590
So that's the one I'll try to read node app.

155
00:10:09.650 --> 00:10:12.340
J.S. Reid passing in right here.

156
00:10:12.340 --> 00:10:15.720
A title value equal to the letter T.

157
00:10:15.850 --> 00:10:18.010
I'm gonna fire that command off and what do I get.

158
00:10:18.010 --> 00:10:22.030
I get the title styled and I get the body in plain text.

159
00:10:22.030 --> 00:10:29.200
Now let's go ahead and rerun these same command but swap out the title T for a title that does not exist

160
00:10:29.380 --> 00:10:32.550
like shopping list if I run that.

161
00:10:32.580 --> 00:10:35.960
And right here we have our note not found message.

162
00:10:35.970 --> 00:10:41.550
So that's where we're gonna stop before this video and that's where we're gonna stop for this section

163
00:10:41.850 --> 00:10:43.260
in the last two sections.

164
00:10:43.260 --> 00:10:50.550
We used the notes application to explore a lot of fundamental topics like the node module system NPM

165
00:10:50.580 --> 00:10:54.960
the file system Jason command line arguments and more.

166
00:10:54.960 --> 00:11:00.840
All of which we're gonna use extensively throughout the rest of the class as we build out back ends

167
00:11:00.840 --> 00:11:05.010
connected databases and create real time applications.

168
00:11:05.010 --> 00:11:11.400
Now over in notes dot J ask before we wrap up there is a function up top called get notes.

169
00:11:11.400 --> 00:11:17.280
We actually created this much earlier in the class but at that time we didn't wire it up.

170
00:11:17.280 --> 00:11:20.010
We've already created functions for everything we need.

171
00:11:20.040 --> 00:11:24.070
So that function get notes can be removed if you still have it in place.

172
00:11:24.210 --> 00:11:27.780
Down below we can remove it from the exports as well.

173
00:11:27.780 --> 00:11:33.400
Now it was never used in app dot J S so there's no need to make any code changes in there.

174
00:11:33.420 --> 00:11:36.950
That's where we're gonna stop for this one in the next section.

175
00:11:37.020 --> 00:11:41.940
We're gonna take a quick moment to talk about how we can debug our node applications.

176
00:11:41.940 --> 00:11:47.430
So when we make typos or get stuck we can get back on track and fix our code quickly.

177
00:11:47.430 --> 00:11:50.700
I'm excited to get to that so I'll see you in the next one.
