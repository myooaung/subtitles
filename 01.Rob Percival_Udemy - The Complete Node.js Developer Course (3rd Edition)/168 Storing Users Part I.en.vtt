WEBVTT
1
00:00:00.240 --> 00:00:06.030
In this lesson you're going to continue to build out the room a feature of our chat application.

2
00:00:06.060 --> 00:00:08.130
So we learn how to use a socket.

3
00:00:08.240 --> 00:00:10.710
Io rooms in the last lesson.

4
00:00:10.710 --> 00:00:13.890
And we saw that in order to take full advantage of them.

5
00:00:13.920 --> 00:00:19.620
We're gonna need to keep track of which users are in which rooms with which user names.

6
00:00:19.620 --> 00:00:25.740
So in this lesson we're going to focus on setting up a few functions to keep track of our users over

7
00:00:25.740 --> 00:00:26.540
time.

8
00:00:26.640 --> 00:00:33.300
That's going to allow us to start tracking them enjoying it and then access that data later such as

9
00:00:33.300 --> 00:00:40.620
Down below inside of the send message callback where we emit the message or the send location callback

10
00:00:40.830 --> 00:00:44.040
where we emit the location message.

11
00:00:44.040 --> 00:00:49.740
Now I'm excited to get do this and in this video we're mostly going to spend time in a new file writing

12
00:00:49.740 --> 00:00:53.280
the functions necessary to track the users.

13
00:00:53.340 --> 00:01:00.630
Then in the next lesson will integrate those into this file index dot J.S. so first things first inside

14
00:01:00.630 --> 00:01:02.480
of the utilize directory.

15
00:01:02.490 --> 00:01:09.720
I'm going to create a new file called users that's users dot J S and in here we're going to focus on

16
00:01:09.720 --> 00:01:16.790
keeping track of our users in an array so we'll start off by creating a constant users plural.

17
00:01:16.860 --> 00:01:22.110
It's going to start off as an empty array and will add and remove data over time.

18
00:01:22.110 --> 00:01:26.530
In total we'll be creating four functions in this lesson for this file.

19
00:01:26.550 --> 00:01:33.390
The first two will be creating together the first one will be add user allowing us to track a new user.

20
00:01:33.390 --> 00:01:39.600
The second one will be remove user allowing us to stop tracking a user when the user leaves such as

21
00:01:39.600 --> 00:01:41.720
closing the chat room and tab.

22
00:01:42.000 --> 00:01:44.790
Then from there you'll be adding two more.

23
00:01:44.790 --> 00:01:51.070
The first is get user allowing us to fetch and existing users data and the final one.

24
00:01:51.090 --> 00:01:58.980
Get users in Room allowing us to get a complete list of all of the users in a specific room.

25
00:01:58.980 --> 00:02:04.550
And that's going to allow us to eventually render that users list to the sidebar.

26
00:02:04.560 --> 00:02:10.440
So let's go ahead and focus on creating this functions in this file and we'll even call them down below.

27
00:02:10.470 --> 00:02:12.270
Just to make sure they're working.

28
00:02:12.270 --> 00:02:14.610
Then we'll export them and then the next lesson.

29
00:02:14.640 --> 00:02:17.090
Integrate them into the application.

30
00:02:17.220 --> 00:02:23.160
So together we'll start by working through add user so you can get a feel for exactly what we're trying

31
00:02:23.160 --> 00:02:24.940
to do right here.

32
00:02:24.990 --> 00:02:31.480
We're going to accept an object with three properties I.D. user name and room.

33
00:02:31.530 --> 00:02:36.500
Now the user name in room we know where those come from they come from the client I.D..

34
00:02:36.510 --> 00:02:41.280
However that's something that's associated with the individual socket.

35
00:02:41.280 --> 00:02:46.740
So every single connection to the server has a unique I.D. generated for it.

36
00:02:46.800 --> 00:02:49.590
You'll learn how to access that in the next lesson.

37
00:02:49.590 --> 00:02:52.640
For now though we'll just make it up by using a number.

38
00:02:52.650 --> 00:02:58.470
Now you could accept three separate arguments or an object with these on there as properties.

39
00:02:58.470 --> 00:03:01.120
Either way would work just fine.

40
00:03:01.310 --> 00:03:04.900
D user name and room are the properties.

41
00:03:04.920 --> 00:03:10.340
I'm de structuring off of this first and only argument now inside of here.

42
00:03:10.350 --> 00:03:15.300
We're gonna do a few different things and I'll be using comments to keep us organized.

43
00:03:15.300 --> 00:03:22.980
So first step we're going to clean the data so the user name and room those are provided from the client.

44
00:03:22.980 --> 00:03:26.540
We're gonna go ahead and convert them to lower case and trim them up.

45
00:03:26.550 --> 00:03:31.980
Removing any extra spaces and we'll also validate they were actually provided.

46
00:03:32.310 --> 00:03:37.020
So right here I'm gonna start by setting a new value for user name.

47
00:03:37.100 --> 00:03:44.370
It will be the old value but we'll be using trim to remove spaces before and after and I'll also be

48
00:03:44.370 --> 00:03:50.310
using to lower case to make sure that those user names are not case sensitive.

49
00:03:50.310 --> 00:03:58.760
I shouldn't be able to have a upper case A Andrew and a lower case A Andrew as two separate users.

50
00:03:58.800 --> 00:04:02.970
Now we're gonna do the exact same thing for room just down below.

51
00:04:03.000 --> 00:04:05.350
So right here we have the original value.

52
00:04:05.370 --> 00:04:11.640
We're going to trim it and we're going to convert its case and know what we're going to do is see if

53
00:04:11.640 --> 00:04:13.290
those were even provided.

54
00:04:13.650 --> 00:04:19.320
So if they are just empty strings at this point obviously that's a problem.

55
00:04:19.320 --> 00:04:22.320
And the following code will allow us to figure that out.

56
00:04:22.350 --> 00:04:26.040
So validate the data right here.

57
00:04:26.040 --> 00:04:32.940
All we're going to do is set up an if statement this if block will run if the data is invalid.

58
00:04:32.940 --> 00:04:36.570
We're going to see if there's no user name or there's no room.

59
00:04:36.570 --> 00:04:44.050
So right here using the logical not operator with user name or there is no room.

60
00:04:44.060 --> 00:04:48.470
So if either of those don't exist that's a problem the code will run.

61
00:04:48.500 --> 00:04:55.580
And what we're going to do is return an error message that can eventually be shared with the client.

62
00:04:55.580 --> 00:04:57.970
So right here return an object.

63
00:04:58.220 --> 00:05:04.130
We're going to set up this object to have an error property which is a string and we'll provide a good

64
00:05:04.130 --> 00:05:05.510
message for this one.

65
00:05:05.510 --> 00:05:11.020
Something like user name and room are required.

66
00:05:11.090 --> 00:05:12.180
Perfect.

67
00:05:12.200 --> 00:05:19.360
So now that we have this in place we know that we at least have user name and room with some value.

68
00:05:19.460 --> 00:05:25.270
And the next thing we want to do is make sure that the name is unique for that room.

69
00:05:25.640 --> 00:05:32.840
So if I'm joining South Philly and that name is already taken I should not be able to join right here.

70
00:05:32.840 --> 00:05:39.240
We're gonna add a little bit of code to get that done check for existing user.

71
00:05:39.440 --> 00:05:43.420
Now to do this let's go ahead and create a new constant.

72
00:05:43.550 --> 00:05:48.440
We'll set up the variable and we'll use an array method on the users array.

73
00:05:48.500 --> 00:05:52.970
The variable here could be called something like existing user.

74
00:05:52.970 --> 00:05:59.240
So we're looking for an existing user and then we're just gonna use something we've used before users

75
00:05:59.330 --> 00:06:01.350
and a write down find.

76
00:06:01.370 --> 00:06:04.110
So we're trying to find a match.

77
00:06:04.130 --> 00:06:11.180
Now we know we provide that callback function we get access to each user that's in the array already

78
00:06:11.390 --> 00:06:15.770
and it's up to us to return true if we've found the match.

79
00:06:15.800 --> 00:06:21.560
So we're going to return true when the following two conditions have been met.

80
00:06:21.590 --> 00:06:27.250
First up this user needs to be in the same room the person trying to join.

81
00:06:27.260 --> 00:06:31.120
It's okay if there's two Andrews as long as they're in separate rooms.

82
00:06:31.160 --> 00:06:38.260
So right here we're gonna look at the user room property the one that already exists and we're gonna

83
00:06:38.270 --> 00:06:45.140
see if it's equal to the room they're trying to join and using double ampersand.

84
00:06:45.140 --> 00:06:49.070
We want to also make sure that the user name is unique.

85
00:06:49.100 --> 00:06:56.900
So right here user dot user name equals the following the user name up above.

86
00:06:56.910 --> 00:07:02.360
So if both of these are true then return is going to end up returning true.

87
00:07:02.370 --> 00:07:06.780
It will be considered a match and existing user will be populated.

88
00:07:06.780 --> 00:07:08.140
Now that's a problem.

89
00:07:08.190 --> 00:07:11.150
We don't want existing user to be populated.

90
00:07:11.160 --> 00:07:13.800
If it is once again we have an error.

91
00:07:13.800 --> 00:07:18.210
We need to report so the client can respond accordingly right here.

92
00:07:18.210 --> 00:07:23.140
Something like validate user name down below.

93
00:07:23.190 --> 00:07:29.930
If there is an existing user that means that this user can't be added to the same room.

94
00:07:30.030 --> 00:07:32.610
So I'll go ahead and return an object.

95
00:07:32.610 --> 00:07:38.520
Setting up an error property like we did for the other error and we can provide whatever sort of text

96
00:07:38.520 --> 00:07:39.660
makes sense.

97
00:07:39.750 --> 00:07:45.110
In this case it's something like user name is in use seems to make a lot of sense.

98
00:07:45.160 --> 00:07:52.290
Now if the data is valid and we can add them to the room it's time to actually store them so down below

99
00:07:52.590 --> 00:07:53.780
this code right here.

100
00:07:53.790 --> 00:07:57.480
It's only going to run when the user is ready to be stored.

101
00:07:57.510 --> 00:07:58.670
So right here.

102
00:07:58.740 --> 00:08:00.370
Store user.

103
00:08:00.630 --> 00:08:07.080
We are going to create the object Push it onto the array and we're also going to return it.

104
00:08:07.080 --> 00:08:11.130
So right here const user equals.

105
00:08:11.390 --> 00:08:19.150
This is going to be a combination of the I.D. the user name and of course the room.

106
00:08:19.250 --> 00:08:22.630
Then we're going to use this in two locations.

107
00:08:22.640 --> 00:08:29.870
Users dot push is going to push that object onto the array and we'll also going to return it.

108
00:08:29.900 --> 00:08:36.110
I'm going to return an object but instead of adding on the error property for when things go wrong I'll

109
00:08:36.110 --> 00:08:40.600
be setting up the user property for when things go well.

110
00:08:40.850 --> 00:08:42.380
So that's it for this function.

111
00:08:42.380 --> 00:08:48.290
Now I say that's it but it's actually quite complex because there are a few different things that need

112
00:08:48.290 --> 00:08:49.310
to go down.

113
00:08:49.640 --> 00:08:55.280
Now that we have this in place we can go ahead and move on down the list and work on some of the other

114
00:08:55.280 --> 00:08:55.930
functions.

115
00:08:55.940 --> 00:09:01.790
But before we do let's test this and make sure it's working as expected and to test it.

116
00:09:01.790 --> 00:09:07.490
We're just going to call the function a couple of times and make sure everything is getting saved as

117
00:09:07.490 --> 00:09:08.660
expected.

118
00:09:08.660 --> 00:09:11.240
Let's go ahead and create a new user.

119
00:09:11.240 --> 00:09:18.980
So right here I'm going to use ad user and I will provide some valid data to get that array populated.

120
00:09:18.980 --> 00:09:26.090
So for the I.D. we could just say it's 20 to pick any number it doesn't matter for the user name.

121
00:09:26.090 --> 00:09:29.540
We'll go ahead and pick something like our first name.

122
00:09:29.540 --> 00:09:34.060
And then for the room name I'll go ahead and use South Philly for me.

123
00:09:34.100 --> 00:09:36.830
Feel free to use whatever you'd like.

124
00:09:36.830 --> 00:09:43.700
So with all of this in place we can go ahead and console dot log the users array to make sure it contains

125
00:09:43.700 --> 00:09:45.230
what we would expect.

126
00:09:45.230 --> 00:09:50.910
Now let's go ahead and run the file down below I'll use control C to shut down node man.

127
00:09:51.080 --> 00:09:56.870
And for the moment we're just going to run this file as a standalone script before we worry about integrating

128
00:09:56.870 --> 00:09:58.250
it into the project.

129
00:09:58.250 --> 00:10:06.820
So right here that is node space source forward slash utilize a forward slash users dot J S that's going

130
00:10:06.820 --> 00:10:13.370
to run just this file from top to bottom and down below I have my users array with the data inside.

131
00:10:13.700 --> 00:10:20.230
I can see that things have been converted to lower case and if I was to add some spaces around the E

132
00:10:20.240 --> 00:10:25.490
room or the user name I would expect those to go away since we're trimming them.

133
00:10:25.700 --> 00:10:31.670
I'll add some spaces rerun the script and we still have the exact same data which is good.

134
00:10:31.820 --> 00:10:36.800
Now from here let's try to add a second user and test out some of that validation.

135
00:10:36.800 --> 00:10:43.450
So what I'm gonna do is create a constant called R E S which is short for results.

136
00:10:43.480 --> 00:10:50.630
Then I'll go ahead and use add user and what I'm going to do is add a user with the following data right

137
00:10:50.630 --> 00:10:57.610
here that's going to be an I.D. equal to something like thirty three just make it different then we'll

138
00:10:57.650 --> 00:11:04.680
set up a user name as an empty string and a room name as an empty string as well down below.

139
00:11:04.880 --> 00:11:07.500
Oh we're going to do is console dialogue.

140
00:11:07.550 --> 00:11:11.890
The results to make sure we actually get our error back.

141
00:11:12.140 --> 00:11:13.010
Right here.

142
00:11:13.010 --> 00:11:19.430
I'll rerun the script and down below we do get that message user and room are required.

143
00:11:19.430 --> 00:11:24.380
Next up we could try to join South Philly with the exact same name that should fail.

144
00:11:24.410 --> 00:11:33.230
So Andrew and South Philly I will save the program rerun things and I would expect that second error

145
00:11:33.260 --> 00:11:34.850
message right here.

146
00:11:34.850 --> 00:11:37.010
User name is in use.

147
00:11:37.280 --> 00:11:40.370
So far things are working really really well.

148
00:11:40.430 --> 00:11:46.310
We're able to add users and we're also performing the validation necessary to make sure that things

149
00:11:46.310 --> 00:11:48.560
are working as expected.

150
00:11:48.560 --> 00:11:53.990
Now with this in place let's go ahead and continue on to the other function we're going to create together

151
00:11:54.260 --> 00:12:01.280
which is remove user which is going to allow us to remove someone from the users array by their I.D.

152
00:12:01.550 --> 00:12:04.610
once that's done I'll set you free for the challenge.

153
00:12:04.610 --> 00:12:12.740
So right here just above our example code and just below the ad user function I'll create a new constant

154
00:12:13.160 --> 00:12:19.520
I'm gonna call this one remove user and then I'll go ahead and set it up to be a function I'll just

155
00:12:19.520 --> 00:12:21.770
use a standard aero function.

156
00:12:21.950 --> 00:12:29.810
And over here I'm going to accept a single parameter just the I.D. of the user to remove from here.

157
00:12:29.810 --> 00:12:33.850
We're going to attempt to find them in that array and if we find them.

158
00:12:33.860 --> 00:12:35.060
We'll remove them.

159
00:12:35.060 --> 00:12:37.600
I'm gonna start by creating a constant.

160
00:12:37.610 --> 00:12:43.400
And what we're gonna do is try to find the index of a user who has the correct I.D..

161
00:12:43.460 --> 00:12:49.880
So right here we'll end up getting the index back it'll be minus 1 for no match it'll be 0 or greater

162
00:12:49.910 --> 00:12:58.040
if there is a match and the array method we're gonna use is users don't find index find index is very

163
00:12:58.040 --> 00:13:04.460
similar to find which we used above though when a match is found instead of getting the array item back

164
00:13:04.670 --> 00:13:07.340
you get back the position of the array item.

165
00:13:07.760 --> 00:13:14.090
So right here we're gonna call it just like we would call find we provide our function we get access

166
00:13:14.150 --> 00:13:15.470
to the user.

167
00:13:15.500 --> 00:13:21.590
This function still runs for every single user in the users array until the match is found.

168
00:13:21.590 --> 00:13:30.200
And what we're going to do is return true when the user I.D. property equals the I.D. We are searching

169
00:13:30.200 --> 00:13:31.110
for.

170
00:13:31.220 --> 00:13:36.110
Now in this case we can take advantage of the shorthand though you could leave it like this if you wanted

171
00:13:36.110 --> 00:13:36.590
to.

172
00:13:36.890 --> 00:13:42.680
Let's go ahead and use these shorthand syntax that means I'll be removing the curly braces and everything

173
00:13:42.680 --> 00:13:48.880
inside that is user dot I.D. equaling the I.D. parameter.

174
00:13:49.040 --> 00:13:55.790
So now index is a number it's minus 1 if we didn't find a match it is 0 or greater.

175
00:13:55.790 --> 00:14:06.060
If we did so in this case if the following If index is not equal to minus one that means we found a

176
00:14:06.060 --> 00:14:06.850
match.

177
00:14:06.900 --> 00:14:08.160
And what are we gonna do.

178
00:14:08.160 --> 00:14:11.580
We're gonna go ahead and remove it right here.

179
00:14:11.580 --> 00:14:14.520
We'll be doing that by first using return.

180
00:14:14.520 --> 00:14:20.790
We're going to remove the user but we're going to return the user that we remove then we're gonna go

181
00:14:20.790 --> 00:14:24.570
ahead and use users dot Splice.

182
00:14:24.570 --> 00:14:29.910
This allows us to remove items from an array by their index.

183
00:14:29.910 --> 00:14:32.310
So we start with the starting index.

184
00:14:32.310 --> 00:14:35.650
If you wanted to remove the first item it would be zero.

185
00:14:35.700 --> 00:14:39.430
In this case we want to remove the item at the position we found.

186
00:14:39.510 --> 00:14:41.790
So we'll just provide index.

187
00:14:41.790 --> 00:14:45.810
And the second argument is the number of items we'd like to remove.

188
00:14:45.840 --> 00:14:48.950
And in this case we just want to remove one.

189
00:14:48.990 --> 00:14:55.200
Now this right here this is going to return an array because we could remove more than just one item

190
00:14:55.530 --> 00:15:01.620
so it would be an array of all of the items we removed in this case where hard coding is saying we're

191
00:15:01.620 --> 00:15:08.520
only ever going to remove one item and we want to return an object so we'll access the first one by

192
00:15:08.520 --> 00:15:09.290
its I.D..

193
00:15:09.750 --> 00:15:16.650
So right here we remove the item we get back in array we then extract the individual item which is the

194
00:15:16.800 --> 00:15:22.320
user object of the user that was removed and that gets returned.

195
00:15:22.320 --> 00:15:25.110
Now there are other ways to get this done as well.

196
00:15:25.110 --> 00:15:31.050
For example you could have used a filter like we did with the notes application to remove a note.

197
00:15:31.080 --> 00:15:36.810
The disadvantage of that though is that filter would keep running even after it found a match.

198
00:15:36.810 --> 00:15:43.890
This code is a bit faster since find index is going to stop searching once the match is found.

199
00:15:43.890 --> 00:15:49.620
Now that we have this in place let's wrap up the video by testing it out then we'll move on to the next

200
00:15:49.620 --> 00:15:52.780
lesson and we'll you'll create those other two functions.

201
00:15:52.860 --> 00:16:00.330
So down below all I'm going to do is remove the second to user we're creating and that console dialog

202
00:16:00.690 --> 00:16:04.130
and I'm going to attempt to remove this user right here.

203
00:16:04.380 --> 00:16:06.010
So what am I going do.

204
00:16:06.120 --> 00:16:09.730
A new constant removed user.

205
00:16:09.870 --> 00:16:16.350
They don't go ahead and use the remove user function providing that I.D. 22 and down below.

206
00:16:16.350 --> 00:16:18.870
I'm going to console dialog two things.

207
00:16:18.870 --> 00:16:25.140
First up I'm going to log removed user to make sure that we got that back correctly.

208
00:16:25.140 --> 00:16:31.020
And then second up I'm also going to log out the users array to make sure it was actually removed from

209
00:16:31.020 --> 00:16:32.080
the array.

210
00:16:32.130 --> 00:16:36.170
So right here let's go ahead and rerun the program and see what we get.

211
00:16:36.300 --> 00:16:39.840
We can see that we have an array as the value for users.

212
00:16:39.840 --> 00:16:41.430
That's from the console dialog.

213
00:16:41.430 --> 00:16:46.390
Right here we can see we have the object of the user that was removed.

214
00:16:46.470 --> 00:16:49.800
That's from the console dialog online fifty.

215
00:16:49.920 --> 00:16:53.390
And then finally what do we get when we print the users array.

216
00:16:53.400 --> 00:16:58.070
It is an empty array which is exactly what we were hoping for.

217
00:16:58.080 --> 00:17:03.180
So now that we have this in place we're in a really good position to start tracking users.

218
00:17:03.180 --> 00:17:06.360
This video went a little longer than I was hoping it would.

219
00:17:06.630 --> 00:17:11.460
So I'm gonna take the challenge and I'm going to move that in to the next lesson.

220
00:17:11.490 --> 00:17:12.780
I'm excited to get to it.

221
00:17:12.840 --> 00:17:14.370
So let's jump right in.
