1
00:00:00,120 --> 00:00:03,420
In this lesson as promised it's going to be a challenge.

2
00:00:03,420 --> 00:00:07,630
Video in this one you'll be using what you learned about socket it done.

3
00:00:07,660 --> 00:00:13,680
I owe to set up the events necessary for the chat application now to get started.

4
00:00:13,680 --> 00:00:20,130
What we're gonna do is comment out all of the code for the little count app we built in the last lesson.

5
00:00:20,130 --> 00:00:25,620
I'll leave that code around though so you can use it as a reference for the stuff you'll be creating

6
00:00:25,620 --> 00:00:26,720
in this one.

7
00:00:26,880 --> 00:00:32,910
So in chat dot Jay asked on the client what I'm going to do is comment out everything except for that

8
00:00:32,910 --> 00:00:40,560
very first line and then over in index dot Jay asked on the server what I'm going to do is comment out

9
00:00:40,560 --> 00:00:46,250
my two calls to socket methods inside of the connection callback.

10
00:00:46,260 --> 00:00:51,930
Now the only thing that runs when someone connects is my log method call up above.

11
00:00:52,080 --> 00:00:57,150
I'm gonna make sure to remove that count variable which is no longer being used.

12
00:00:57,240 --> 00:01:03,840
And right here this is where I'll paste in the challenge comments for the first of the two challenges

13
00:01:03,870 --> 00:01:05,050
you'll be completing.

14
00:01:05,110 --> 00:01:09,170
The goal here is to send a welcome message to new users.

15
00:01:09,210 --> 00:01:15,190
So you're gonna have the server emit a message event when a new client connects.

16
00:01:15,240 --> 00:01:18,880
This is going to send some data back which will be a string.

17
00:01:18,960 --> 00:01:25,390
The message that the client should receive and in this case you could just send something like welcome.

18
00:01:25,530 --> 00:01:31,350
So that would be similar to Down below where we emit count updated and pass in the count.

19
00:01:31,350 --> 00:01:36,930
Here you're emitting message and passing in a string with your welcome message.

20
00:01:36,930 --> 00:01:42,800
Now once the server is correctly emitting that event you want to make sure the client has the code set

21
00:01:42,800 --> 00:01:44,370
up to actually receive it.

22
00:01:44,790 --> 00:01:52,860
So you're gonna have the client listen for the message event and then you're going to print the message

23
00:01:53,070 --> 00:01:54,750
to the console.

24
00:01:54,780 --> 00:01:59,270
So when a new message comes in it should show up down below in the console.

25
00:01:59,340 --> 00:02:02,580
Similar to how our count was showing up before.

26
00:02:02,730 --> 00:02:04,560
Next up test your work.

27
00:02:04,560 --> 00:02:11,000
If you save all of your files and refresh the browser you should see welcome printing in the console.

28
00:02:11,000 --> 00:02:17,670
The Chrome developer tools so take some time to knock that out using what you learned in the last lesson.

29
00:02:17,670 --> 00:02:21,270
When you're done test your work and then come back and click play

30
00:02:25,390 --> 00:02:26,230
how that go.

31
00:02:26,230 --> 00:02:30,610
Let's get to it by first omitting the correct event from the server.

32
00:02:30,640 --> 00:02:36,940
So right here when we do get a new connection we'll use a socket that is meant to send a message to

33
00:02:36,940 --> 00:02:38,910
that particular connection.

34
00:02:39,040 --> 00:02:43,930
Right here the event message followed by the message to send.

35
00:02:43,990 --> 00:02:45,970
And in this case anything would have worked.

36
00:02:45,970 --> 00:02:48,400
I'll go ahead and use welcome.

37
00:02:48,400 --> 00:02:53,680
Next up we want to make sure that the client is actually listening for this event and doing something

38
00:02:53,710 --> 00:02:54,860
when it occurs.

39
00:02:55,180 --> 00:02:57,630
Let's go ahead and move over to chat Dot.

40
00:02:57,680 --> 00:03:00,040
Jay s in here.

41
00:03:00,040 --> 00:03:07,840
We're going to use a socket dot on to listen for message and we know we're going to get access to that

42
00:03:07,840 --> 00:03:11,870
message data as the first argument to this function.

43
00:03:11,980 --> 00:03:17,350
Now down below we can go ahead and do something like print it to the terminal right here.

44
00:03:17,350 --> 00:03:20,950
I'm just going to dump the message variable.

45
00:03:21,040 --> 00:03:28,100
Now I can save chat dot and J.S. and I can save index dot J Yes and we can test our work.

46
00:03:28,240 --> 00:03:35,210
So I'm going to switch over to Chrome from here I'll refresh both of my clients and I would expect both

47
00:03:35,210 --> 00:03:39,490
of them to get that welcome message and that is exactly what's happening.

48
00:03:39,500 --> 00:03:44,230
I have welcome for client 1 and welcome for client 2.

49
00:03:44,300 --> 00:03:50,120
Now from here what we want to do is provide the user with an interface where they can type in a message

50
00:03:50,360 --> 00:03:54,190
submit that message and have that message sent to the server.

51
00:03:54,350 --> 00:03:59,280
The server is then going to relay that message to all connected clients.

52
00:03:59,360 --> 00:04:04,330
So I type something over here and click a button and I should see it show up over here.

53
00:04:04,340 --> 00:04:10,310
As a new message for them to read let's go ahead and talk about how we're going to get that done over

54
00:04:10,310 --> 00:04:11,740
inside of index Dot.

55
00:04:11,750 --> 00:04:17,930
Jay asked what I'm going to do is replace the current challenge comments with a new set right here.

56
00:04:17,930 --> 00:04:22,490
Your goal is to allow clients to send messages to one another.

57
00:04:22,490 --> 00:04:27,770
So the first step is to create a form with a text input and a button.

58
00:04:27,770 --> 00:04:33,440
Now this is similar to what you did with the weather search form previously in the class.

59
00:04:33,440 --> 00:04:38,630
So if you forget how to get that done you can always dig into the code for that project to jog your

60
00:04:38,630 --> 00:04:43,360
memory and you're going to add that form into index dot H2 UML.

61
00:04:43,370 --> 00:04:50,060
Now once you have the form in place in chat dot J.S. Yes you want to add an event listener waiting for

62
00:04:50,060 --> 00:04:54,410
that form to be submitted once the form is submitted.

63
00:04:54,410 --> 00:04:59,810
You're going to emit an event from the client to the server with that data.

64
00:05:00,110 --> 00:05:06,200
So when someone submits the form and you're gonna get the input text value you're then going to emit

65
00:05:06,260 --> 00:05:13,570
send a message and you're going to provide the string message that the user typed as the data.

66
00:05:13,580 --> 00:05:18,320
Next up on the server you're going to listen for send message.

67
00:05:18,350 --> 00:05:24,630
So once that event actually occurs you'll relay that message to all connected clients.

68
00:05:24,740 --> 00:05:29,510
And this is very similar to what we did with increment down below right here.

69
00:05:29,510 --> 00:05:33,410
We relayed the updated count to all connected clients.

70
00:05:33,470 --> 00:05:37,340
You'll simply be relaying the provided message.

71
00:05:37,340 --> 00:05:39,000
Now there's a lot to do here.

72
00:05:39,020 --> 00:05:44,960
So the best way to approach this is to not try to write every single line of code then save the program

73
00:05:44,960 --> 00:05:46,570
and hope it all works.

74
00:05:46,610 --> 00:05:53,030
It's best to move one step at a time get the forum up and running and make sure it renders correctly

75
00:05:53,360 --> 00:06:01,040
add a form this submit event handler then run your project and make sure that triggers from there start

76
00:06:01,040 --> 00:06:04,570
to omit the events and test each step of the way.

77
00:06:04,610 --> 00:06:09,650
There's no need to write all of the code because when it fails it's gonna be really hard to figure out

78
00:06:09,650 --> 00:06:10,760
what failed.

79
00:06:10,790 --> 00:06:16,130
If you write just the code for Step 1 and it fails then you know step 1 failed.

80
00:06:16,130 --> 00:06:18,550
So take some time to move through this one.

81
00:06:18,620 --> 00:06:19,930
There's quite a bit here.

82
00:06:20,030 --> 00:06:25,610
When you're done test your work you should see a form for each client in the browser.

83
00:06:25,610 --> 00:06:31,460
When you type something in that form and click the button you should see the message show up in the

84
00:06:31,490 --> 00:06:35,360
console for all connected clients.

85
00:06:35,360 --> 00:06:36,970
All right knock that out.

86
00:06:37,040 --> 00:06:40,490
Test your work and when you're done come back and click play

87
00:06:44,510 --> 00:06:45,500
how'd that go.

88
00:06:45,500 --> 00:06:49,100
Let's go ahead and kick things off by first creating our form.

89
00:06:49,130 --> 00:06:52,600
So like we did with the weather search form earlier in the class.

90
00:06:52,610 --> 00:06:55,890
We'll be adding something into our HDMI file.

91
00:06:55,910 --> 00:06:59,810
No I didn't tell you to remove the button but you can indeed remove it.

92
00:06:59,870 --> 00:07:05,510
So if you didn't remove it as part of the challenge just take a moment to remove it right now inside

93
00:07:05,510 --> 00:07:11,880
of here we'll be setting up a form exactly like we did with the weather search application.

94
00:07:12,020 --> 00:07:16,050
And right here we're gonna go ahead and provide an input.

95
00:07:16,130 --> 00:07:22,820
So I'm going to set up my text input and I'm gonna provide a placeholder like we did before as well.

96
00:07:22,820 --> 00:07:27,050
And the place holder could just be something like message perfect.

97
00:07:27,050 --> 00:07:33,070
From here we also want to set up a button and I will have the button text to be something like send

98
00:07:33,080 --> 00:07:37,100
though the exact text you use isn't particularly important.

99
00:07:37,280 --> 00:07:43,910
Now when it comes to setting up the form submit event listener we could choose to target it by tag or

100
00:07:43,910 --> 00:07:46,470
you could add an I.D. on right here.

101
00:07:46,520 --> 00:07:48,610
Either way would get the job done.

102
00:07:48,620 --> 00:07:55,700
I'll go ahead and add an I.D. on and I'll call this one something like a message form perfect.

103
00:07:55,730 --> 00:08:01,130
Now with this in place I can go ahead and refresh the browser to make sure that it's actually showing

104
00:08:01,130 --> 00:08:02,160
up correctly.

105
00:08:02,180 --> 00:08:06,480
And right here I'm seeing it which is a great step in the right direction.

106
00:08:06,530 --> 00:08:08,840
With this in place we've actually finished.

107
00:08:08,840 --> 00:08:10,750
Step number one.

108
00:08:10,910 --> 00:08:13,270
Now let's move on to Step number two.

109
00:08:13,280 --> 00:08:18,010
I want to make sure that when the form is submitted we actually do something.

110
00:08:18,050 --> 00:08:25,450
So over in chat dot J Yes let's go ahead and kick that off by targeting the form that is document not

111
00:08:25,460 --> 00:08:28,750
query selector grabbing it by its I.D..

112
00:08:29,000 --> 00:08:38,010
And in this case the idea we just picked is message form and then we're going to use add event listener

113
00:08:38,970 --> 00:08:42,330
and we're going to listen for that submit event.

114
00:08:42,450 --> 00:08:45,440
Now from here we'll go ahead and set up our function.

115
00:08:45,450 --> 00:08:52,770
And if you remember when we listen for form submissions we get access to that e event argument and we

116
00:08:52,770 --> 00:08:59,940
want to use E dot prevent default to prevent that default behavior where the browser goes through a

117
00:08:59,940 --> 00:09:01,980
full page refresh.

118
00:09:02,010 --> 00:09:06,330
This is exactly what we did with the weather web application.

119
00:09:06,330 --> 00:09:09,300
Next up what we want to do is emit an event.

120
00:09:09,300 --> 00:09:16,290
So right here we want to emit send a message with the actual text that the user typed in.

121
00:09:16,290 --> 00:09:19,140
Now currently we're not doing any sort of validation.

122
00:09:19,140 --> 00:09:23,550
So you could have an empty message that is perfectly fine for now.

123
00:09:23,550 --> 00:09:27,990
Let's go ahead and knock this out over inside of our callback function right here.

124
00:09:28,020 --> 00:09:30,150
Let's go ahead and grab the message.

125
00:09:30,160 --> 00:09:33,300
Storing it in something like a message variable.

126
00:09:33,360 --> 00:09:38,850
And I'm going to target that input so document dot query selector.

127
00:09:38,850 --> 00:09:47,130
I'm going to select by tag name in this case input and I will use value to grab the value for the input.

128
00:09:47,130 --> 00:09:54,060
Next up we're going to use socket dot image to emit the event send a message and we're going to provide

129
00:09:54,090 --> 00:09:58,020
the one piece of data I wanted you to provide which was the message.

130
00:09:58,110 --> 00:10:01,100
So I'll go ahead and provide that right here.

131
00:10:01,260 --> 00:10:04,840
Now with this in place the client is actually done.

132
00:10:05,010 --> 00:10:11,040
We can save this and the next thing we need to do is make sure that the server is doing something when

133
00:10:11,100 --> 00:10:13,710
send a message is received.

134
00:10:13,710 --> 00:10:22,080
So over in index dot J.S. that means we'll be setting up a another call to socket dot on right here.

135
00:10:22,080 --> 00:10:26,230
And this time on the server we are listening for send a message.

136
00:10:26,280 --> 00:10:32,610
We have our callback function that runs when a new message is sent and we get access to that message

137
00:10:32,610 --> 00:10:34,170
data right here.

138
00:10:34,170 --> 00:10:39,750
So remember the first argument is the name of the event that we're emitting and everything after that

139
00:10:39,750 --> 00:10:41,980
is provided to the callback function.

140
00:10:42,000 --> 00:10:43,340
On the other end.

141
00:10:43,350 --> 00:10:48,780
So in this case we're providing message to the callback function on the server.

142
00:10:48,780 --> 00:10:52,620
Now once again I could call this variable anything like S G.

143
00:10:52,770 --> 00:10:56,790
That would work just as fine though I will stick with message.

144
00:10:56,790 --> 00:10:57,980
Perfect.

145
00:10:58,050 --> 00:11:04,350
Now down below what do we want to do when I get a new message I want to send it to every single connected

146
00:11:04,380 --> 00:11:06,060
client right here.

147
00:11:06,150 --> 00:11:12,530
That is I O dot omit omitting the message event and sending the message data.

148
00:11:12,540 --> 00:11:18,300
So right here it's very similar to what we did when someone joins and we send them our welcome message

149
00:11:18,540 --> 00:11:23,490
though in this case the text for that message comes from another user.

150
00:11:23,490 --> 00:11:29,310
Now with this in place we can make sure to save both the server and the client and we can go ahead and

151
00:11:29,310 --> 00:11:30,870
test our work.

152
00:11:30,870 --> 00:11:36,420
So what I'm going to do is move over to the browser and I'll just give both of my browser tabs a quick

153
00:11:36,450 --> 00:11:37,430
refresh.

154
00:11:37,470 --> 00:11:43,110
Right here we have the welcome message for both which is great for this first browser tab.

155
00:11:43,110 --> 00:11:49,190
What I'm going to do is type from first client I'll hit enter or click the send button.

156
00:11:49,200 --> 00:11:51,360
And what do I see down below.

157
00:11:51,360 --> 00:11:56,180
I have that message up showing in real time for both clients.

158
00:11:56,220 --> 00:12:01,560
Now if I type something in for the second client this is a test and hit enter.

159
00:12:01,560 --> 00:12:06,080
We can see that in real time all clients have access to that data.

160
00:12:06,240 --> 00:12:12,270
Now currently once again we're not validating that any message is typed and we're not clearing the input

161
00:12:12,510 --> 00:12:14,520
after the message is sent.

162
00:12:14,550 --> 00:12:15,560
This is OK.

163
00:12:15,570 --> 00:12:19,890
We'll work on focusing on those UI improvements throughout the section.

164
00:12:19,890 --> 00:12:26,910
For now the big picture goal was to make sure that we're able to send messages between the clients connected

165
00:12:26,940 --> 00:12:32,480
to our server and we are now over inside a visual studio code.

166
00:12:32,580 --> 00:12:37,160
We can remove all of the code we had for that count application.

167
00:12:37,350 --> 00:12:42,780
I'm gonna remove the commented out code in chat dot J.S. and save this file.

168
00:12:42,780 --> 00:12:49,400
Now it only contains stuff before the chat app and over in index dot J Yes I'll do the same thing.

169
00:12:49,650 --> 00:12:55,410
I'm gonna remove the commented out code in our connection callback end up above.

170
00:12:55,410 --> 00:13:00,900
I'm also going to remove the challenge comments right here since they're no longer necessary.

171
00:13:00,900 --> 00:13:07,620
That challenge is completed and we've tested our work making sure it's functioning as expected.

172
00:13:07,620 --> 00:13:11,310
Now before we go there's one more small tweak I want to make together.

173
00:13:11,310 --> 00:13:13,710
And this is not related to socket dot I.

174
00:13:13,720 --> 00:13:16,130
Oh it's actually related to the input.

175
00:13:16,140 --> 00:13:19,020
We're creating an index dot H2 UML.

176
00:13:19,110 --> 00:13:25,400
Right here we're creating an input and then in chat dot J.S. we are selecting it by its name.

177
00:13:25,410 --> 00:13:30,160
Now if there was another input on the page that could mess up our code breaking it.

178
00:13:30,450 --> 00:13:36,610
So what we're going to do is make a small change when we have element inside of a forum we can setup

179
00:13:36,680 --> 00:13:38,710
the name attribute for them.

180
00:13:38,720 --> 00:13:44,070
For example I can provide this with a name whatever makes sense for what the field is storing.

181
00:13:44,120 --> 00:13:48,640
It could be name before a user's name it could be age or location.

182
00:13:48,680 --> 00:13:52,450
In this case something like message makes a lot of sense.

183
00:13:52,490 --> 00:14:00,500
Now we can actually access this forms element by its name from inside of chat dot J s making sure that

184
00:14:00,500 --> 00:14:04,920
if there was another input on the page it didn't break our application.

185
00:14:05,090 --> 00:14:07,430
So right here we have name set to message.

186
00:14:07,430 --> 00:14:09,880
I'll save the file over here.

187
00:14:09,890 --> 00:14:14,450
All we're going to do is change how we get access to the element in the end.

188
00:14:14,450 --> 00:14:18,360
We're still going to pull the value property off of there.

189
00:14:18,590 --> 00:14:24,710
What we're going to do is remove everything after the equals sign and we're going to access e now E

190
00:14:24,710 --> 00:14:26,880
has something on it called Target.

191
00:14:26,930 --> 00:14:32,790
Target represents the target that we're listening for the event on and in this case that's our form.

192
00:14:32,990 --> 00:14:38,180
So right here we have access to the form from there on our form elements.

193
00:14:38,180 --> 00:14:44,700
We have access to an elements property and we can access any of our inputs by their name.

194
00:14:44,780 --> 00:14:52,490
So that is e dot target to get the form then dot elements dot followed by message which is the value

195
00:14:52,550 --> 00:14:53,690
we picked.

196
00:14:53,690 --> 00:14:57,310
So this is just an alternative way to get our input.

197
00:14:57,560 --> 00:15:03,120
And this one is less likely to break as the H2 UML for the page changes from here.

198
00:15:03,350 --> 00:15:09,130
We're gonna go ahead and grab the value property on the input exactly like we were doing before.

199
00:15:09,170 --> 00:15:15,620
Now if we go ahead and refresh things inside of Google Chrome we should see the exact same functionality

200
00:15:15,980 --> 00:15:16,820
right here.

201
00:15:16,820 --> 00:15:19,170
I could type a message in like test.

202
00:15:19,310 --> 00:15:22,300
I can send it off and it shows up for both.

203
00:15:22,310 --> 00:15:25,550
So now our application is still working as expected.

204
00:15:25,550 --> 00:15:32,600
It's just a little more foolproof preventing changes to the HDL from breaking our javascript code.

205
00:15:32,720 --> 00:15:36,100
Now that we have this in place we'll continue on in the next lesson.

206
00:15:36,110 --> 00:15:38,650
So stay tuned and I'll see you soon.
