WEBVTT
1
00:00:00.240 --> 00:00:05.730
In this video we're going to talk about how we'll be storing the data for our notes application.

2
00:00:05.730 --> 00:00:09.050
Now we already know how we're getting that data into the program.

3
00:00:09.060 --> 00:00:14.640
For now it's via a command line arguments which we have support for thanks to yards.

4
00:00:14.640 --> 00:00:18.830
The question we are aiming to answer here is what do we do with that data.

5
00:00:18.870 --> 00:00:22.620
When our application gets it we need to figure out how we can save it.

6
00:00:22.800 --> 00:00:28.890
So if someone adds a note and then comes back tomorrow they can load that note up once again to read

7
00:00:28.890 --> 00:00:35.460
it or edit it before this app we'll be using the f s core module to save all of our notes data to the

8
00:00:35.460 --> 00:00:36.750
file system.

9
00:00:36.750 --> 00:00:39.570
Now what exactly is going to go inside of that file.

10
00:00:39.570 --> 00:00:42.240
Well it's going to be Jason data.

11
00:00:42.240 --> 00:00:48.430
So Jason is something that's already come up before with our package lock dot Jason and package dot

12
00:00:48.450 --> 00:00:54.660
Jason files both of these use the Jason format to store and structure their data.

13
00:00:54.660 --> 00:01:00.440
We're going to do the exact same thing to store our notes inside of a text file.

14
00:01:00.480 --> 00:01:06.840
So we're going to have an array of objects where each object represents a note and each object will

15
00:01:06.840 --> 00:01:09.900
have various properties like title and body.

16
00:01:09.900 --> 00:01:15.510
And by working with Jason we're gonna be able to read and write to the file system saving and loading

17
00:01:15.600 --> 00:01:16.310
our data.

18
00:01:16.320 --> 00:01:21.840
Jason is something we're going to be using extensively throughout the class in every single application

19
00:01:21.840 --> 00:01:22.440
in this app.

20
00:01:22.440 --> 00:01:25.100
We'll be using it to save our notes in the next app.

21
00:01:25.110 --> 00:01:32.250
We'll be using it as the communication standard when we fetch real time weather data from back end services.

22
00:01:32.250 --> 00:01:38.340
After that we'll be using it when we create our own API with node j s and we'll even be using Jason

23
00:01:38.340 --> 00:01:41.550
in our real time application at the end of the class.

24
00:01:41.550 --> 00:01:45.550
So Jason is a format you're going to run into over and over again.

25
00:01:45.630 --> 00:01:50.940
And the good news is that it has native support in JavaScript and it's super easy to work with since

26
00:01:50.970 --> 00:01:55.440
it's essentially just arrays and objects with various properties.

27
00:01:55.440 --> 00:02:01.430
Now since we are going to use Jason so much throughout the class I want to take a quick moment to explore

28
00:02:01.430 --> 00:02:06.720
it in isolation before we try to integrate it into the notes app that's going to make sure we really

29
00:02:06.720 --> 00:02:13.260
understand how it works and how we can use it inside of JavaScript and no J S so for the moment what

30
00:02:13.260 --> 00:02:19.560
we're going to do is close down all open files and we're gonna collapse the notes app directory and

31
00:02:19.560 --> 00:02:26.190
we're going to create a new folder in the root of the project called playground now the playground directory

32
00:02:26.190 --> 00:02:28.650
is not going to contain a new application.

33
00:02:28.650 --> 00:02:33.330
This is a place I'm going to use at various points throughout the course four times when we want to

34
00:02:33.330 --> 00:02:39.330
create a little one off script to explore a specific topic we'll use it maybe a dozen different times

35
00:02:39.390 --> 00:02:40.340
throughout the class.

36
00:02:40.350 --> 00:02:43.280
For now we're going to use it to explore.

37
00:02:43.290 --> 00:02:48.310
Jason right here all we're going to do is create a single new script.

38
00:02:48.360 --> 00:02:50.360
I'm going to call it one hyphen.

39
00:02:50.380 --> 00:02:57.400
Jason J S will create other scripts throughout the course as we need to mess around with new topics.

40
00:02:57.540 --> 00:03:02.970
And let's go ahead and kick things off by talking about the data we're going to end up working with.

41
00:03:03.150 --> 00:03:07.950
Jason works really well with objects and arrays in JavaScript and that's a good thing because we're

42
00:03:07.950 --> 00:03:13.710
going to use objects and arrays to model all of our data and object can model something like a book

43
00:03:13.740 --> 00:03:18.770
or a user or a note which has various properties to describe it in detail.

44
00:03:18.840 --> 00:03:24.360
And if we have an array of those things then we have an array of items like we would in any database

45
00:03:24.660 --> 00:03:25.140
right here.

46
00:03:25.140 --> 00:03:30.930
As an example let's start with a book variable whose value will be a new object.

47
00:03:30.930 --> 00:03:33.970
Now there are plenty of properties you could use to model a book.

48
00:03:33.990 --> 00:03:35.640
We're going to stick with just two.

49
00:03:35.730 --> 00:03:41.970
We'll have the title for the book which will be a string and we'll have the author for the book as well.

50
00:03:41.970 --> 00:03:47.700
I'll use a book on my bookshelf ego is the enemy for this example and the author for that particular

51
00:03:47.700 --> 00:03:49.960
book is Ryan Holiday.

52
00:03:49.980 --> 00:03:52.820
It's a great book definitely worth checking out.

53
00:03:52.860 --> 00:04:00.210
So now we have our data stored as a javascript object and the goal is to convert this into Jason which

54
00:04:00.210 --> 00:04:01.770
is nothing more than a string.

55
00:04:01.800 --> 00:04:08.610
So we can do something with it like save it to the file system the FSA core module only knows how to

56
00:04:08.610 --> 00:04:10.600
work with string data.

57
00:04:10.620 --> 00:04:16.500
So we need to figure out how we can take an object represented as a string to save it then load that

58
00:04:16.500 --> 00:04:19.560
back in and get the original object back.

59
00:04:19.620 --> 00:04:22.260
The first method we're going to look at is Jason.

60
00:04:22.290 --> 00:04:25.240
That's upper case Jason Dutch string of PHI.

61
00:04:25.380 --> 00:04:32.340
This is a Java Script method that takes in an object or an array or any value for that matter and it

62
00:04:32.340 --> 00:04:36.210
returns the Jason string representation.

63
00:04:36.210 --> 00:04:41.940
So in our case we can pass the book variable in as the one and only argument and what it returns is

64
00:04:41.940 --> 00:04:43.260
our Jason data.

65
00:04:43.290 --> 00:04:50.220
So over here on the left hand side I can create a variable like book Jason to keep the variable names

66
00:04:50.280 --> 00:04:55.830
unique then we can go ahead and log this to the Council using console log book.

67
00:04:55.920 --> 00:04:57.750
Jason perfect.

68
00:04:57.750 --> 00:05:01.230
Now that we have this in place let's go ahead and ask truly run things.

69
00:05:01.260 --> 00:05:04.860
So from the terminal down below we have to switch directories.

70
00:05:04.860 --> 00:05:06.130
I'll be using C D.

71
00:05:06.150 --> 00:05:12.900
Dot dot to get out of the notes directory then forward slash playground to go into that directory all

72
00:05:12.900 --> 00:05:15.300
with a single command from here.

73
00:05:15.420 --> 00:05:18.010
I will use clear to clear the terminal output.

74
00:05:18.030 --> 00:05:20.770
Then we'll run our script node space 1.

75
00:05:20.790 --> 00:05:22.030
Jason dot J.

76
00:05:22.050 --> 00:05:23.160
S I run it.

77
00:05:23.160 --> 00:05:24.130
And what do I get.

78
00:05:24.150 --> 00:05:29.370
I get my data showing up now you'll notice that it looks pretty much like a javascript object.

79
00:05:29.370 --> 00:05:34.410
The only difference is that all of our single quotes have been converted to double quotes and double

80
00:05:34.410 --> 00:05:40.140
quotes have been added to all property names which I mentioned a bit earlier in the course is indeed

81
00:05:40.170 --> 00:05:42.060
a requirement with Jason.

82
00:05:42.060 --> 00:05:44.150
So book Jason is a string.

83
00:05:44.160 --> 00:05:50.180
It is not an object if I tried to access a property like book Jason title.

84
00:05:50.280 --> 00:05:51.600
It's not going to exist.

85
00:05:51.660 --> 00:05:56.080
The book object has the title property the Jason data does not.

86
00:05:56.190 --> 00:06:01.350
If I run the program we can see we get undefined it is unable to find that property.

87
00:06:01.350 --> 00:06:06.450
Now this is the part in the program where we would typically do something like Save the Jason data to

88
00:06:06.450 --> 00:06:11.730
the file system so we could load it in later and work with it and we will get there in just a few seconds

89
00:06:11.730 --> 00:06:17.760
before we do I want to explore the opposite of Jason Dodge Durango fi Jason dodge during if I takes

90
00:06:17.760 --> 00:06:21.120
in the object and gives us a Jason string back.

91
00:06:21.120 --> 00:06:28.830
We also have access to Jason dat pass which takes in the Jason string and gives us back the object.

92
00:06:28.830 --> 00:06:33.000
So right here I am going to pass to the pass method.

93
00:06:33.000 --> 00:06:41.070
Our Jason data we have that stored on the book Jason variable and past returns the object or array it

94
00:06:41.070 --> 00:06:44.120
returns the past Jason's all right here.

95
00:06:44.130 --> 00:06:51.870
I'll create a new concept called past data storing it equal to whatever comes back from the pass method.

96
00:06:51.870 --> 00:06:59.850
Now we have our original object back and we can do something like console dot log past data dot author

97
00:07:00.060 --> 00:07:06.750
to get the actual author value I'm going to save Jason dot J S I'm going to rerun the script and I get

98
00:07:06.750 --> 00:07:14.370
Ryan Holiday printing so we were indeed able to access a property on past data because past data is

99
00:07:14.370 --> 00:07:17.150
indeed a javascript object.

100
00:07:17.250 --> 00:07:20.710
So these are the two core methods for working with Jason.

101
00:07:20.730 --> 00:07:27.360
Jason string if I to take an object and convert it to Jason and Jason pass to take Jason data in and

102
00:07:27.360 --> 00:07:29.050
convert it to an object.

103
00:07:29.070 --> 00:07:33.060
Now let's integrate what we know about Jason with the file system.

104
00:07:33.090 --> 00:07:40.920
So I am going to load that in up above creating an F S variable and requiring the F S module and we're

105
00:07:40.920 --> 00:07:43.470
going to use that method we've used before.

106
00:07:43.500 --> 00:07:46.500
Right file sync to write some data.

107
00:07:46.500 --> 00:07:52.500
Right here we can remove everything except for the line where we create our Jason will remove our two

108
00:07:52.500 --> 00:08:00.930
logs as well as the call to Jason dock pass and old we're going to do is use F S dot right file sync

109
00:08:00.930 --> 00:08:02.850
to create a new file.

110
00:08:02.880 --> 00:08:06.870
Now I'm going to call this something like 1 hyphen Jason dot.

111
00:08:07.050 --> 00:08:13.950
Jason since we're storing Jason data it's not a text file then we're going to provide the data we want

112
00:08:13.950 --> 00:08:14.520
to write.

113
00:08:14.580 --> 00:08:18.540
And in this case we are going to pass in our Jason data book.

114
00:08:18.540 --> 00:08:20.340
Jason be variable.

115
00:08:20.400 --> 00:08:26.810
Now if we save the program and rerun things we're gonna have a brand new file in that playground directory.

116
00:08:26.910 --> 00:08:28.740
And if we crack that open what do we have.

117
00:08:28.740 --> 00:08:32.330
We have our Jason data saved which is awesome.

118
00:08:32.460 --> 00:08:39.840
We could even use visual studio code to format this data in a nicer way or we can do that manually or

119
00:08:39.840 --> 00:08:41.600
we could just leave it as is.

120
00:08:41.610 --> 00:08:47.410
But clearly we have our title property you go as the enemy and we have our author Ryan Holiday.

121
00:08:47.460 --> 00:08:49.080
This is now Jason data.

122
00:08:49.140 --> 00:08:52.890
We could load in at a later time and reuse.

123
00:08:52.890 --> 00:08:55.970
So let's go ahead and see how we would get that done as well.

124
00:08:56.010 --> 00:08:59.190
We're going to load in that file using another FSI method.

125
00:08:59.220 --> 00:09:03.000
We're going to pass it and we're going to access the data to do this.

126
00:09:03.000 --> 00:09:08.220
Let's go ahead and start by commenting out all of the code that creates the book variable and rights

127
00:09:08.220 --> 00:09:14.460
to the file since we already have the file written and we're going to start by using a method called

128
00:09:14.550 --> 00:09:23.790
F S dot read file sync read the file sync as the name suggests is going to allow us to read a file and

129
00:09:23.790 --> 00:09:31.320
we pass to it just a single argument in this case it is the name we used up above with right file sync.

130
00:09:31.320 --> 00:09:36.080
So we are trying to read the following file one hyphen Jason Dot.

131
00:09:36.240 --> 00:09:40.540
Jason now that we have the F S read file St..

132
00:09:40.550 --> 00:09:46.380
Colin place we can go ahead and grab its return value which is going to contain the contents of the

133
00:09:46.380 --> 00:09:46.920
file.

134
00:09:46.950 --> 00:09:52.590
Now we can create a variable to store the contents that came back and I'm going to call this something

135
00:09:52.620 --> 00:09:56.490
like data buffer now why am I calling it buffer.

136
00:09:56.520 --> 00:10:03.840
Because what comes back is not a string it is actually a buffer which is a way for node j asked to represent

137
00:10:03.870 --> 00:10:10.970
binary data and we could see this down below console dialog data buffer.

138
00:10:10.970 --> 00:10:14.930
And what we're not going to get is the contents of our file as we see them.

139
00:10:14.930 --> 00:10:17.720
Instead we're going to get some buffer data.

140
00:10:17.720 --> 00:10:22.030
I'll run the script down below and right here we have those bits and bytes.

141
00:10:22.040 --> 00:10:28.060
Now if we actually want to get our string back there is a two string method we can use to get these

142
00:10:28.060 --> 00:10:30.620
string back as we would have expected.

143
00:10:30.620 --> 00:10:36.320
And if I run this script again with two string in place there we are indeed getting our data being read

144
00:10:36.350 --> 00:10:38.060
from the file system.

145
00:10:38.060 --> 00:10:44.870
So we have the data buffer variable then down below we can create a data Jason variable.

146
00:10:45.020 --> 00:10:50.730
And here we're just going to use data buffer dot to string perfect.

147
00:10:50.750 --> 00:10:56.090
So now we have our Jason that we've read from the file system and we can go ahead and pass it right

148
00:10:56.090 --> 00:10:56.870
here.

149
00:10:56.870 --> 00:10:59.630
I'm going to create a contest called data.

150
00:10:59.630 --> 00:11:06.970
I'll be using Jason dot pass to pass it and we have that data on the data Jason variable.

151
00:11:06.980 --> 00:11:09.900
Now we have our data and we can do something with it.

152
00:11:09.950 --> 00:11:13.600
I could for example console dot log a property off of it.

153
00:11:13.640 --> 00:11:17.960
Let's go ahead and try data dot title which should indeed exist.

154
00:11:17.960 --> 00:11:24.310
Since we have the title and body excuse me title and author properties on our data right here I'm gonna

155
00:11:24.320 --> 00:11:25.670
save the program.

156
00:11:25.670 --> 00:11:29.420
I'm going to run things and I correctly get ego is the enemy.

157
00:11:29.420 --> 00:11:32.280
So we read the file in getting our binary data.

158
00:11:32.360 --> 00:11:36.600
We then converted that data into a standard string in JavaScript.

159
00:11:36.650 --> 00:11:43.220
We then passed that Jason data into an object and finally we access a property from it.

160
00:11:43.220 --> 00:11:44.200
So there we go.

161
00:11:44.240 --> 00:11:49.970
We now know how to work with Jason data in JavaScript and we also know how to read it and write it from

162
00:11:49.970 --> 00:11:56.570
the file system which is everything we need to be able to do to work with our notes application actually

163
00:11:56.570 --> 00:11:58.850
saving a user's notes.

164
00:11:58.880 --> 00:12:02.080
Now it's challenge time and I have a phone one lined up.

165
00:12:02.120 --> 00:12:06.210
So right here I am going to comment out a code that we just wrote.

166
00:12:06.290 --> 00:12:11.930
Making sure this script does nothing in its current state and what we're going to do is first pull ups

167
00:12:11.930 --> 00:12:14.990
and Jason data that you're going to work with for this challenge.

168
00:12:14.990 --> 00:12:22.640
You can find that by heading over to the browser and going to links dot Meade dot I O forward slash

169
00:12:22.930 --> 00:12:30.350
it is Jason hyphen sample when you go to this you are L which is a bitterly link it's going to redirect

170
00:12:30.350 --> 00:12:32.090
you over to some Jason data.

171
00:12:32.090 --> 00:12:38.800
We're gonna use for this challenge right here that you are L redirects me over to a get hub gist.

172
00:12:38.900 --> 00:12:42.050
And right here I have a little bit of Jason data.

173
00:12:42.050 --> 00:12:45.700
I'm going to copy that entire Jason File.

174
00:12:45.740 --> 00:12:51.530
I'm gonna bring it over to visual studio code and I'm going to paste it right inside of our existing

175
00:12:51.530 --> 00:12:57.740
Jason File and you can see that visual studio code has actually automatically formatted it for me.

176
00:12:57.740 --> 00:13:04.040
I can see that we have a name value of Andrew a planet of Earth and an age of twenty seven.

177
00:13:04.080 --> 00:13:08.880
Now let's go ahead and talk about what exactly I'd like you to do for this challenge and we're gonna

178
00:13:08.900 --> 00:13:13.760
do that over here in the Jason J J.S. file down below.

179
00:13:13.970 --> 00:13:18.130
I'm gonna add a few empty lines and paste in the challenge comments.

180
00:13:18.140 --> 00:13:22.720
Your job is to work with Jason and the file system to complete this one.

181
00:13:22.730 --> 00:13:29.450
First up you are going to load and pass the Jason data the data that we just pasted in to the Jason

182
00:13:29.450 --> 00:13:30.260
File.

183
00:13:30.410 --> 00:13:35.510
So we want to make sure we get an actual javascript object out of that like we did above.

184
00:13:35.520 --> 00:13:41.830
Then you're going to alter that object changing the name and age property to match up with your information.

185
00:13:41.900 --> 00:13:46.100
You're going to leave Earth alone since I'm pretty sure that's where you currently live.

186
00:13:46.100 --> 00:13:48.580
If not hello from another planet.

187
00:13:48.620 --> 00:13:56.300
Now once you have name and age edited in the object in this file you want to string a fi that object

188
00:13:56.360 --> 00:13:58.660
and override the original data.

189
00:13:58.670 --> 00:14:03.150
So right here you're going to use what we learned about string application and writing.

190
00:14:03.170 --> 00:14:09.290
Jason to override the contents of this file with the new information then you're going to test your

191
00:14:09.290 --> 00:14:12.670
work by running the script and viewing the data over here.

192
00:14:12.800 --> 00:14:20.600
You should see a new value for name and a new value for age which line up with the values you chose.

193
00:14:20.600 --> 00:14:23.580
Take as much time as you need to knock this out.

194
00:14:23.600 --> 00:14:28.640
You have everything you need just up above in order to get this done when you are done.

195
00:14:28.640 --> 00:14:32.240
Don't forget to test your work then come back and click play

196
00:14:36.230 --> 00:14:37.120
how that go.

197
00:14:37.130 --> 00:14:38.990
Let's go ahead and jump right in.

198
00:14:38.990 --> 00:14:41.170
By first passing the data.

199
00:14:41.240 --> 00:14:47.380
So right here I'm going to create a variable something along the lines of a data buffer.

200
00:14:47.570 --> 00:14:54.190
We will be using F S dot read file sync to load that Jason data in B file one hyphen.

201
00:14:54.200 --> 00:14:55.130
Jason.

202
00:14:55.190 --> 00:14:59.290
Jason next up we're going to convert that to a string so data.

203
00:14:59.300 --> 00:15:05.350
Jason which is gonna be a string we'll get its value from using the buffers to string method.

204
00:15:05.390 --> 00:15:12.220
So data buffer dot to string perfect from here we can pass that into an object.

205
00:15:12.230 --> 00:15:14.780
So I'm going to call this one user.

206
00:15:14.780 --> 00:15:17.720
You could have called it data or anything you wanted.

207
00:15:17.720 --> 00:15:24.770
And I'll be using Jason dot pass to pass my data Jason variable right here.

208
00:15:24.770 --> 00:15:27.180
Data upper case Jason.

209
00:15:27.380 --> 00:15:29.200
So now we've completed step 1.

210
00:15:29.210 --> 00:15:31.480
We've loaded the data in and we've passed it.

211
00:15:31.550 --> 00:15:34.020
Step two is to change that data.

212
00:15:34.040 --> 00:15:38.780
I'm gonna set user dot name equal to a different name from my own.

213
00:15:38.810 --> 00:15:46.260
I'll go ahead and use something like Gunther and then I'm going to update the age user dot age.

214
00:15:46.290 --> 00:15:48.930
Let's go ahead and say that he's 54.

215
00:15:49.170 --> 00:15:51.150
That completes step two.

216
00:15:51.150 --> 00:15:57.020
Now we're going to string a fi that object and save it exactly like we did up above.

217
00:15:57.030 --> 00:16:07.370
So right here we are going to create something like user Jason getting its value from Jason dot string

218
00:16:07.370 --> 00:16:08.240
a fine.

219
00:16:08.270 --> 00:16:11.810
What are we trying to string ify that user object.

220
00:16:11.810 --> 00:16:16.140
Once we have that and we can write it using F S dot right.

221
00:16:16.430 --> 00:16:20.530
File sync we are writing to the exact same file.

222
00:16:20.540 --> 00:16:23.280
I wanted you to override the original data.

223
00:16:23.600 --> 00:16:25.350
So right here one hyphen.

224
00:16:25.370 --> 00:16:26.270
Jason.

225
00:16:26.300 --> 00:16:31.940
Jason is the file name where we got our data from and we have to pass it in the data we want to write.

226
00:16:31.970 --> 00:16:35.030
We have that in the user Jason string.

227
00:16:35.060 --> 00:16:35.980
Excellent.

228
00:16:35.990 --> 00:16:38.540
Now that we have this in place we can test our work.

229
00:16:38.600 --> 00:16:41.590
So over in the Jason File we have the data we had before.

230
00:16:41.600 --> 00:16:45.340
I have Andrew and 27 down below in the terminal.

231
00:16:45.350 --> 00:16:51.410
I'm going to rerun the exact same script we were running before and right away we can see the data has

232
00:16:51.410 --> 00:16:52.370
changed.

233
00:16:52.370 --> 00:16:58.070
I have a name value of Gunther which has changed I have a planet value of earth which has stayed the

234
00:16:58.070 --> 00:17:01.760
same and I have an age of 54 which is indeed unique.

235
00:17:01.760 --> 00:17:04.280
That is the value I used over here.

236
00:17:04.280 --> 00:17:09.440
Now that we have this in place we know how to work with Jason and we know how to work with Jason.

237
00:17:09.440 --> 00:17:11.620
With respect to the file system.

238
00:17:11.690 --> 00:17:17.300
So we are ready to move on to the next video and actually use all of this to save notes in the notes

239
00:17:17.390 --> 00:17:18.560
application.

240
00:17:18.560 --> 00:17:24.110
The reason I spent so much time talking about just Jason in this video is because we're going to use

241
00:17:24.110 --> 00:17:25.880
it so much throughout the class.

242
00:17:25.880 --> 00:17:29.100
And I wanted you to have a good grasp of exactly what it is.

243
00:17:29.120 --> 00:17:35.690
It is nothing more than a string representation of what looks like an object or an array over inside

244
00:17:35.690 --> 00:17:36.760
of our Jason File.

245
00:17:36.770 --> 00:17:42.800
I'll remove all of the commented out code to clean things up leaving just our little challenge example

246
00:17:43.010 --> 00:17:47.560
although I don't believe will actually be coming back to this file throughout the rest of the class.

247
00:17:47.660 --> 00:17:49.610
And that's where we're going to stop for this one.

248
00:17:49.640 --> 00:17:51.050
I'll see you in the next one.
