1
00:00:00,270 --> 00:00:05,090
In this video it's time for you to do the same thing we just did to geo code.

2
00:00:05,100 --> 00:00:07,230
But for fetching the forecast.

3
00:00:07,380 --> 00:00:09,530
Now of course there are challenged comments.

4
00:00:09,530 --> 00:00:14,460
I'm going to walk you through exactly what I'd like you to do although it's going to be very similar

5
00:00:14,460 --> 00:00:16,130
to what we just did.

6
00:00:16,140 --> 00:00:22,470
Now before I even pull those up we can remove the old commented out code where we were making our geo

7
00:00:22,470 --> 00:00:29,430
code request that's no longer necessary as we have a replacement for that over in the geo code file.

8
00:00:29,430 --> 00:00:35,850
Now I am going to still leave the commented out forecast code in place as there's no need to re go through

9
00:00:35,850 --> 00:00:37,330
the logic in our head.

10
00:00:37,380 --> 00:00:41,620
We can essentially copy and paste that stuff into the new function.

11
00:00:41,640 --> 00:00:43,330
We're gonna end up creating.

12
00:00:43,440 --> 00:00:48,660
Now it's time to talk about what I'd like you to do and I do have comments for this challenge.

13
00:00:48,690 --> 00:00:54,150
Now I'm going to include an example function call as well so I'll show you where you can find all of

14
00:00:54,150 --> 00:00:55,360
that on the web.

15
00:00:55,440 --> 00:01:00,950
Once again it is over at Lynx dot Mead dot I O forward slash.

16
00:01:00,960 --> 00:01:08,160
This one is forward slash forecast when you visit that it is going to bring you over to a set of challenge

17
00:01:08,160 --> 00:01:15,130
comments as well as an example function call to make sure we're all working towards the same goal.

18
00:01:15,180 --> 00:01:17,660
I'm gonna take the contents of this file.

19
00:01:17,760 --> 00:01:24,480
I'm gonna bring them over to app dot J S and I'll paste them down at the bottom below the call to geo

20
00:01:24,480 --> 00:01:25,770
code if you'd like.

21
00:01:25,770 --> 00:01:28,470
You could also comment out the call to geo code.

22
00:01:28,500 --> 00:01:31,210
So you're not seeing so much output in the terminal.

23
00:01:31,290 --> 00:01:34,100
Now let's go ahead and talk about what I'd like you to do.

24
00:01:34,110 --> 00:01:40,470
The goal here is to create a reusable function for getting the forecast much like we created a reusable

25
00:01:40,470 --> 00:01:43,910
function for geo coding a given address.

26
00:01:43,920 --> 00:01:48,030
Now you're going to create this function forecast in a separate file.

27
00:01:48,150 --> 00:01:53,910
You can create it in the forecast dot J S file which you'll make in the utilize directory.

28
00:01:53,910 --> 00:02:00,420
Once you have the basics set up once you have the function defined and exported you can require it in

29
00:02:00,420 --> 00:02:03,900
app dot J S and call it as shown below.

30
00:02:03,900 --> 00:02:08,460
So this is a sample call you can use as you're building out the function.

31
00:02:08,460 --> 00:02:13,240
It's nice to know what we're working towards in terms of the arguments expected.

32
00:02:13,380 --> 00:02:18,570
Now step three once you have that basic structure in place it's time to fill out the function.

33
00:02:18,720 --> 00:02:23,210
In the end of the day you're going to use the same conditional logic we used up above.

34
00:02:23,220 --> 00:02:25,510
If there's an error we're gonna do one thing.

35
00:02:25,620 --> 00:02:29,190
If there is an Arab property on the body we're gonna do something else.

36
00:02:29,220 --> 00:02:34,020
Otherwise we will go ahead and generate that forecast string down below.

37
00:02:34,020 --> 00:02:38,430
You're still going to do those same three things right here for each of those.

38
00:02:38,430 --> 00:02:44,370
You're going to call the callback function exactly like we did for geo code where we have three separate

39
00:02:44,370 --> 00:02:50,220
distinct calls to callback depending on what exactly happened when the request was made.

40
00:02:50,250 --> 00:02:56,790
So over here for low level errors pass a string for the error just like we did with GEO code we got

41
00:02:56,790 --> 00:03:01,580
a string argument back and the same thing is gonna be true for coordinate errors.

42
00:03:01,620 --> 00:03:07,110
You can always test that by converting one of these to a string and adding a letter inside of it.

43
00:03:07,110 --> 00:03:14,010
Last up the success case in this case I would expect that our callback gets called with not an error

44
00:03:14,160 --> 00:03:20,790
but with data now data should be a string matching up with the forecast string we had generated up above

45
00:03:21,120 --> 00:03:26,280
where we use the summary and then we move on to say it's currently the temperature out and there's an

46
00:03:26,280 --> 00:03:28,020
X percent chance of rain.

47
00:03:28,620 --> 00:03:32,790
So in the end of the day the goal isn't to change the functionality at all.

48
00:03:32,790 --> 00:03:38,580
The goal is to just break all of that out into this separate function that we can then use and reuse

49
00:03:38,610 --> 00:03:40,350
throughout our application.

50
00:03:40,350 --> 00:03:43,460
If at any point along the way you're not quite sure what to do.

51
00:03:43,470 --> 00:03:48,740
Just look at the code you wrote for the geo coding example because in the end of the day both are going

52
00:03:48,740 --> 00:03:54,780
to look very similar though obviously the response data and the U.R.L. are slightly different.

53
00:03:54,780 --> 00:03:56,760
All right take some time to knock that out.

54
00:03:56,760 --> 00:04:00,410
Test your work and when you're done come back and click play.

55
00:04:04,460 --> 00:04:05,420
How did you do.

56
00:04:05,420 --> 00:04:08,900
Hopefully you were able to get through that without too much trouble.

57
00:04:08,900 --> 00:04:12,140
As always we're going to work through these solution together now.

58
00:04:12,140 --> 00:04:16,370
This was by far the most code you had to write for a challenge.

59
00:04:16,370 --> 00:04:22,160
And as these challenges get harder you might have a harder time solving them and that is okay.

60
00:04:22,160 --> 00:04:23,440
It is by design.

61
00:04:23,450 --> 00:04:30,100
The goal is to give you more room to experiment play and learn and less guidance.

62
00:04:30,170 --> 00:04:32,710
And that is going to be an important piece to the puzzle.

63
00:04:32,720 --> 00:04:38,510
Though it can be frustrating at first because you'll feel like you just learned this thing and you get

64
00:04:38,510 --> 00:04:41,300
it but you can't put it into action and that's OK.

65
00:04:41,300 --> 00:04:43,400
That's what the challenges are here to help with.

66
00:04:43,910 --> 00:04:45,600
So let's go ahead and get started.

67
00:04:45,620 --> 00:04:47,990
I want to create that function in a new file.

68
00:04:48,020 --> 00:04:52,130
Export it and require it over here in utilize dot J S.

69
00:04:52,160 --> 00:04:55,470
I'm going to create the forecast J S file.

70
00:04:55,550 --> 00:05:01,190
Let's go ahead and start by not misspelling things then we're gonna go ahead and do what we need to

71
00:05:01,190 --> 00:05:04,160
do which is to create a forecast function.

72
00:05:04,190 --> 00:05:07,860
So right here forecast equals a brand new function.

73
00:05:07,910 --> 00:05:13,640
We'll worry about the arguments in just a moment and once we have this function in place what are we

74
00:05:13,640 --> 00:05:14,340
going to do.

75
00:05:14,360 --> 00:05:15,730
We are going to export it.

76
00:05:15,800 --> 00:05:19,410
So down below module dot exports.

77
00:05:19,520 --> 00:05:22,070
Exporting the forecast function.

78
00:05:22,070 --> 00:05:26,930
Now we can go ahead and require this file to get the function in app dot J.

79
00:05:26,930 --> 00:05:31,160
S that's gonna make our function call actually work up above.

80
00:05:31,160 --> 00:05:32,890
Let's go ahead and get that done.

81
00:05:33,850 --> 00:05:41,330
Const forecast equals I'll be using require to require one of my own files.

82
00:05:41,350 --> 00:05:44,640
So dot forward slash in the utilize directory.

83
00:05:44,740 --> 00:05:46,840
Forward slash the file name.

84
00:05:46,840 --> 00:05:50,140
Forecast leaving off the J.S. extension.

85
00:05:50,140 --> 00:05:56,020
So now we actually have access to that function which means that when I try to call it at least things

86
00:05:56,020 --> 00:05:57,370
won't crash and burn.

87
00:05:57,730 --> 00:06:00,400
So that is step one and step two.

88
00:06:00,490 --> 00:06:02,800
We have the basic functions set up.

89
00:06:02,800 --> 00:06:06,430
We've loaded it in and we have our example call down below.

90
00:06:06,430 --> 00:06:10,990
From here we actually need to fill out that function and let's start with its arguments.

91
00:06:10,990 --> 00:06:13,520
Now as I showed you below we have the latitude.

92
00:06:13,600 --> 00:06:15,220
Then we have the longitude.

93
00:06:15,220 --> 00:06:17,170
Then we have the callback function.

94
00:06:17,260 --> 00:06:24,390
So we have to setup all three as arguments for forecast right here latitude.

95
00:06:24,420 --> 00:06:27,390
Next up would be longitude.

96
00:06:27,540 --> 00:06:31,840
And then finally the callback which once again you could have called anything at all.

97
00:06:31,860 --> 00:06:34,290
These names are particularly important.

98
00:06:34,290 --> 00:06:39,210
You could pick anything that makes sense in my opinion though these make the most sense.

99
00:06:39,240 --> 00:06:40,110
Down below.

100
00:06:40,170 --> 00:06:43,560
It's time to start the process of making that request.

101
00:06:43,560 --> 00:06:48,950
Now if we are going to use the request module we should probably load it in right here.

102
00:06:48,960 --> 00:06:51,180
Const request equals.

103
00:06:51,180 --> 00:06:58,260
I'll use require to load in the request module and once we have it loaded in we're going to actually

104
00:06:58,320 --> 00:06:59,000
use it.

105
00:06:59,010 --> 00:07:05,940
Now we do need the U.R.L. and we already have that you are L an apt J s so you could have copy and pasted

106
00:07:05,940 --> 00:07:07,950
this over up above.

107
00:07:07,950 --> 00:07:13,770
I'm going to grab the U.R.L. I'll grab everything inside of the quotes I'm going to copy it to the clipboard

108
00:07:14,250 --> 00:07:18,450
scroll back down and bring it over to the forecast file right here.

109
00:07:18,450 --> 00:07:25,510
I will also create a const you are El variable I'm going to paste the value in and now we need to swap

110
00:07:25,570 --> 00:07:32,080
out thirty seven point eight to six seven with whatever value we have for latitude and we want to swap

111
00:07:32,080 --> 00:07:35,970
out the minus one 1 2 with whatever value is passed in.

112
00:07:36,160 --> 00:07:37,690
The longitude right here.

113
00:07:37,690 --> 00:07:38,920
Let's go ahead and get that done.

114
00:07:38,920 --> 00:07:41,260
Remember we need a comma in between.

115
00:07:41,710 --> 00:07:46,950
So I'm gonna remove the LAT and the long and the comma ending with that forward slash.

116
00:07:46,990 --> 00:07:52,930
Then I will concatenate on the latitude by referencing that variable after the plus operator and then

117
00:07:52,930 --> 00:07:55,690
I'm gonna concatenate on a comma.

118
00:07:55,720 --> 00:07:58,560
Then finally Alarcón can it on the longitude.

119
00:07:58,600 --> 00:07:59,710
Perfect.

120
00:07:59,710 --> 00:08:04,420
Now this is gonna be the complete U R L with the dynamic coordinates inside.

121
00:08:04,540 --> 00:08:10,330
We can now actually fire off the request to get the response which would be the forecast information

122
00:08:10,570 --> 00:08:12,840
for this particular location.

123
00:08:12,880 --> 00:08:18,250
I'm going to kick things off by calling request like we have done plenty of times before with those

124
00:08:18,250 --> 00:08:19,160
two arguments.

125
00:08:19,180 --> 00:08:24,790
Our options object being the first one and the callback function being the second one.

126
00:08:24,820 --> 00:08:30,550
Now we can provide the correct options for the options object we have are which is going to come from

127
00:08:30,570 --> 00:08:34,550
the you are all variable and we have Jason devalue true.

128
00:08:34,630 --> 00:08:35,530
Perfect.

129
00:08:35,530 --> 00:08:38,170
Next up we have the callback function itself.

130
00:08:38,170 --> 00:08:43,300
This is for request and we know that it gets called with an error if any and a response.

131
00:08:43,300 --> 00:08:44,920
If there is no error.

132
00:08:45,130 --> 00:08:49,220
Now we can actually setup the if statement much like we had before.

133
00:08:49,270 --> 00:08:54,880
So we'll start by checking if there are any low level errors by looking for the existence of the error

134
00:08:54,910 --> 00:08:55,920
object.

135
00:08:55,930 --> 00:09:02,380
Next up we'll use else if to check if the coordinates are bad right here to do that we're gonna look

136
00:09:02,380 --> 00:09:08,750
at a response dot body dot error and that is exactly what we did before inapt dot J.

137
00:09:08,770 --> 00:09:13,150
S the old code used that condition from there.

138
00:09:13,150 --> 00:09:18,840
We have to set up some code to run if the coordinates are bad and last but definitely not least.

139
00:09:18,850 --> 00:09:21,170
Else this is the code we run.

140
00:09:21,220 --> 00:09:27,760
If everything went well and there's a forecast to provide now let's go ahead and actually call the callback

141
00:09:27,760 --> 00:09:30,710
function which currently is not being used.

142
00:09:30,760 --> 00:09:34,380
So if there is a low level error what are we going to choose to do.

143
00:09:34,420 --> 00:09:40,540
We are going to go ahead and call the callback with the first argument the error and no value for the

144
00:09:40,540 --> 00:09:42,580
second argument which is data.

145
00:09:42,790 --> 00:09:47,570
So we want to provide a value here and we don't want to provide a value here.

146
00:09:47,650 --> 00:09:48,910
Let's go ahead and get that done.

147
00:09:49,330 --> 00:09:55,480
I'm gonna call a callback passing in a string for the first argument and undefined for the second.

148
00:09:55,480 --> 00:10:01,270
Now once again you can leave the second argument off completely as undefined as the default value for

149
00:10:01,270 --> 00:10:03,790
an on provided argument anyways.

150
00:10:03,790 --> 00:10:10,090
Now we can pick our message I'm going to use the message we used before unable to connect to weather

151
00:10:10,510 --> 00:10:11,330
service.

152
00:10:11,350 --> 00:10:12,340
Perfect.

153
00:10:12,370 --> 00:10:16,990
Next up if there's a problem with the coordinates we are once again gonna call a callback.

154
00:10:16,990 --> 00:10:23,560
Now things went poorly so we provide a value for the first argument and we leave off a value for the

155
00:10:23,560 --> 00:10:24,930
second argument.

156
00:10:25,000 --> 00:10:30,070
We can pick whatever message we like for this one I'll use the same one we had before.

157
00:10:30,070 --> 00:10:34,240
Unable to find location now inside of else.

158
00:10:34,240 --> 00:10:40,870
This is where things went well so we want to leave off the first argument to call back for that we are

159
00:10:40,870 --> 00:10:47,240
going to have to provide undefined then as the second argument we can provide our forecast string.

160
00:10:47,260 --> 00:10:52,090
Now we already have that string created in app dot J s up above.

161
00:10:52,090 --> 00:10:57,160
It starts right here in console dialog where we use response to get the summary.

162
00:10:57,280 --> 00:11:02,520
It goes all the way to the end where we close the single quote right here.

163
00:11:02,680 --> 00:11:08,270
I'm going to shift click to highlight everything in between and I'm just going to take that I'm gonna

164
00:11:08,290 --> 00:11:15,130
copy it to the clipboard scroll back down to the call and over in forecast dot J S we can paste it right

165
00:11:15,130 --> 00:11:18,340
here between the comma and the closing parentheses.

166
00:11:18,340 --> 00:11:20,500
I'm gonna paste it in and there we go.

167
00:11:20,500 --> 00:11:24,190
We now have our four cached string getting sent back correctly.

168
00:11:24,190 --> 00:11:29,410
Now the function is done and we already have a call in place so we can go ahead and fire things off

169
00:11:29,410 --> 00:11:32,310
in their current state to get the forecast.

170
00:11:32,320 --> 00:11:34,660
This time it should not produce an error.

171
00:11:34,660 --> 00:11:39,140
I'm gonna run node app dot J S and that is exactly what we end up getting.

172
00:11:39,220 --> 00:11:44,380
Right here we have the data to find we have our summary with our temperature and percent chance of rain

173
00:11:44,680 --> 00:11:45,400
and up above.

174
00:11:45,400 --> 00:11:47,730
We have undefined for the error.

175
00:11:47,740 --> 00:11:51,780
Now let's go ahead and make sure that the error message shows up when it should.

176
00:11:51,790 --> 00:11:56,190
The first thing I'm going to do is just do something like shut down my internet connection.

177
00:11:56,350 --> 00:11:58,120
Right here I'll turn off Wi-Fi.

178
00:11:58,510 --> 00:12:03,820
I'm then going to rerun the script and I do indeed get unable to connect to weather service which is

179
00:12:03,820 --> 00:12:04,600
great.

180
00:12:04,660 --> 00:12:10,110
Let's go ahead and test that middle case by providing a bad coordinate value up above.

181
00:12:10,150 --> 00:12:16,510
I'm going to bring myself back online and then I'm going to update either one or the other.

182
00:12:16,630 --> 00:12:22,590
I'm gonna make this first value a string and all I'm gonna do is put a letter inside which is indeed

183
00:12:22,650 --> 00:12:24,770
an invalid coordinate pair.

184
00:12:24,960 --> 00:12:28,900
From here we can go ahead and rerun the script down below.

185
00:12:28,950 --> 00:12:30,630
I'm gonna run things and what do I get.

186
00:12:30,630 --> 00:12:34,320
I get unable to find a location which is fantastic.

187
00:12:34,320 --> 00:12:41,310
Now we can remove the challenge comments and we can see how much easier our code got to use right here.

188
00:12:41,310 --> 00:12:45,320
I have a call to geo code right here I have a call to forecast.

189
00:12:45,330 --> 00:12:52,160
I could easily take these four lines move them into the callback and then do one thing before the next.

190
00:12:52,170 --> 00:12:55,980
That is exactly what we're going to end up doing in the next video.

191
00:12:55,980 --> 00:13:01,380
Now that we have these two functions in place it's gonna be easy to use them together and it's gonna

192
00:13:01,410 --> 00:13:05,630
be easy to reuse them throughout our code should we need to.

193
00:13:05,640 --> 00:13:10,590
All right I'm gonna wrap this video up by undoing that change I made.

194
00:13:10,770 --> 00:13:14,500
I'll remove the letter A and remove the quotes.

195
00:13:14,610 --> 00:13:18,930
I'm gonna save the file and that's where we're gonna stop for this one up above.

196
00:13:18,930 --> 00:13:26,010
Before we go we can actually also remove the old commented out forecast request leaving ourselves with

197
00:13:26,010 --> 00:13:33,120
just 13 lines of code an app dot J S we can actually make that twelve because request actually isn't

198
00:13:33,120 --> 00:13:39,840
being used in this file anymore which means we can remove that first line entirely bringing us down

199
00:13:39,900 --> 00:13:40,630
to twelve.

200
00:13:40,990 --> 00:13:43,230
All right I'll see you in the next one.
