WEBVTT
1
00:00:00.300 --> 00:00:05.970
In this lesson you're going to learn how to render messages to the browser window as opposed to having

2
00:00:05.970 --> 00:00:08.640
them show up down below in the terminal.

3
00:00:08.670 --> 00:00:15.150
Now to get this done we'll be using the very popular mustache templating library that's gonna give us

4
00:00:15.180 --> 00:00:22.500
everything we need to define HDL templates and render them with our data from javascript so we'll be

5
00:00:22.500 --> 00:00:26.300
able to render all sorts of dynamic content to the page.

6
00:00:26.310 --> 00:00:32.220
The first thing we're gonna do is move into index Don HCM CML and we'll be setting up a new script tag

7
00:00:32.250 --> 00:00:38.130
to load in the library that we're going to need and we can find that over in the browser.

8
00:00:38.130 --> 00:00:44.010
So all of the libraries we'll be using for the chat application I've put together at the following link

9
00:00:44.400 --> 00:00:50.020
that is links dot Mead dot I O forward slash chat libs.

10
00:00:50.190 --> 00:00:56.610
If you visit this it's going to redirect you over to a get hub Gist and this contains a few different

11
00:00:56.610 --> 00:00:59.750
script tags with three libraries.

12
00:00:59.760 --> 00:01:04.770
Now we're only going to use one of them in this lesson we'll use the other two shortly though.

13
00:01:04.770 --> 00:01:08.120
So I figured we might as well just grab them all right now.

14
00:01:08.130 --> 00:01:14.100
The first library is mustache which we'll be using in this lesson to render our templates and the next

15
00:01:14.100 --> 00:01:21.060
library is moment which we'll be using to manipulate time and show the time a message was sent in the

16
00:01:21.060 --> 00:01:22.360
browser window.

17
00:01:22.470 --> 00:01:29.570
And finally Q S which stands for query string and that's going to allow us to setup room names and user

18
00:01:29.580 --> 00:01:32.090
names a bit later in the section.

19
00:01:32.100 --> 00:01:36.970
Now once again we'll talk about all of these libraries in detail when we start to use them.

20
00:01:37.080 --> 00:01:43.450
But for now let's grab all three script tags and bring them over to index dot H2 UML.

21
00:01:43.500 --> 00:01:47.040
Right here what I'm going to do is paste them in right up top.

22
00:01:47.040 --> 00:01:54.620
So I loaded my libraries I load in socket dot I O then I load in my custom javascript code.

23
00:01:54.630 --> 00:02:02.130
Now here we're loading all of the libraries in via CDM J.S. dot com that is a C the N for JavaScript

24
00:02:02.160 --> 00:02:03.250
libraries.

25
00:02:03.300 --> 00:02:08.820
If you wanted to you could also choose to download all of these files and include them in your public

26
00:02:08.820 --> 00:02:14.100
directory and then load them in like we did with our chat dot in J.S. file.

27
00:02:14.100 --> 00:02:19.650
Now let's go ahead and create our very first template and that's gonna happen right here inside of index

28
00:02:19.680 --> 00:02:21.060
dot HDL.

29
00:02:21.150 --> 00:02:25.860
We can define a template and then we can render it as many times as we need to.

30
00:02:25.860 --> 00:02:31.260
Now this template is going to be for an individual message which means we'll be using this template

31
00:02:31.260 --> 00:02:36.390
multiple times for every single message that needs to get shown to the user.

32
00:02:36.390 --> 00:02:42.420
Now to actually create the template what we do is we setup a script tag which might seem a bit weird

33
00:02:42.420 --> 00:02:49.100
at first but bear with me for the moment we're going to set up a script tag and inside of here we're

34
00:02:49.100 --> 00:02:51.410
gonna end up putting HDMI all.

35
00:02:51.440 --> 00:02:59.450
So for example I can create a div element right here opening and closing it and then inside of there

36
00:02:59.450 --> 00:03:07.010
I could create a paragraph as well with some text like this is a message I'll go ahead and close that

37
00:03:07.010 --> 00:03:07.880
paragraph.

38
00:03:08.390 --> 00:03:13.880
And now what we're gonna do is set up a couple actually buttes on script to get all of this working.

39
00:03:13.970 --> 00:03:20.420
The first thing we're gonna do for all of our templates is define an I.D. a way to target this template

40
00:03:20.630 --> 00:03:24.420
from chat dot J.S. in just a few moments right here.

41
00:03:24.530 --> 00:03:28.640
I'm going to call this one message hyphen template.

42
00:03:28.640 --> 00:03:31.540
I like to end all of my templates with template.

43
00:03:31.640 --> 00:03:34.960
Just to be explicit about what exactly it is.

44
00:03:35.090 --> 00:03:42.950
And next up we're going to set type equal to text forward slash HDL to let the browser know that we

45
00:03:42.950 --> 00:03:49.250
have HDL right inside of here for the template now that we have the template created we can actually

46
00:03:49.250 --> 00:03:54.290
use the mustache library to render this somewhere in our application.

47
00:03:54.290 --> 00:03:58.450
Now currently we don't have a good place to put our messages on the screen.

48
00:03:58.550 --> 00:04:04.880
So what I'm gonna do is create one then we'll actually render some inside of here anywhere on the page

49
00:04:04.910 --> 00:04:07.500
just below the title for the page.

50
00:04:07.500 --> 00:04:15.590
What we're going to do is create a div this is just going to be a container for all new messages right

51
00:04:15.590 --> 00:04:16.280
here.

52
00:04:16.370 --> 00:04:19.820
I'll give it the I.D. of messages and we're done.

53
00:04:19.820 --> 00:04:22.430
There's no need to put anything inside of here.

54
00:04:22.430 --> 00:04:29.300
We'll be adding things inside of their dynamically as chat and J.S. goes through the process of getting

55
00:04:29.330 --> 00:04:31.270
new chat messages.

56
00:04:31.310 --> 00:04:37.880
Now with all of this code in place we have made zero changes to how our chat application is going to

57
00:04:37.880 --> 00:04:38.730
render.

58
00:04:38.870 --> 00:04:44.340
If I head over to the browser go to local host three thousand and give things a refresh.

59
00:04:44.390 --> 00:04:46.780
We're not seeing our template code anywhere.

60
00:04:46.790 --> 00:04:48.350
And that's a good thing.

61
00:04:48.440 --> 00:04:51.080
We should not see hard templates by default.

62
00:04:51.200 --> 00:04:54.670
We should only see them when we actually render content.

63
00:04:54.800 --> 00:04:58.920
Now in a few moments we'll learn how to add dynamic values inside of here.

64
00:04:59.000 --> 00:05:04.610
But for the moment let's get this static template rendered now inside of chat Dot.

65
00:05:04.620 --> 00:05:10.580
J ust we have to figure out where it makes sense to render messages and that's right here in these socket

66
00:05:10.610 --> 00:05:13.600
event listener for the message event.

67
00:05:13.610 --> 00:05:17.280
Now in order to render the template we need two important things.

68
00:05:17.280 --> 00:05:23.180
One I need the template itself and two I need access to the place I want to render the template that

69
00:05:23.180 --> 00:05:24.940
is my div up above.

70
00:05:24.980 --> 00:05:28.570
So we're going to end up selecting both of those under elements.

71
00:05:28.580 --> 00:05:33.500
I'll create a single new variable called Dollar Sign messages.

72
00:05:33.500 --> 00:05:40.160
And for this one I'll use document dot query selector once again to grab an element by its I.D..

73
00:05:40.280 --> 00:05:44.720
And in this case messages is going to allow us to grab that div.

74
00:05:44.720 --> 00:05:47.990
Now we also want to grab our template right here.

75
00:05:47.990 --> 00:05:52.460
I'll create a new little section using a comment called templates.

76
00:05:52.460 --> 00:05:58.340
Now for the moment we only have a single one but we'll be adding more as we continue through this section.

77
00:05:58.340 --> 00:06:03.260
And right here we'll create a single constant called message template.

78
00:06:03.260 --> 00:06:07.620
And we're going to do is select that script tag by its I.D..

79
00:06:07.700 --> 00:06:14.600
So that's document dot query selector selecting by I.D. just like we have done plenty of times before.

80
00:06:14.990 --> 00:06:21.500
But in this case the I.D. is the one we put on that script tag which mine was a message hyphen template

81
00:06:21.770 --> 00:06:25.270
matching up exactly with what we have right here.

82
00:06:25.280 --> 00:06:28.430
Now this is going to give us access to that element itself.

83
00:06:28.430 --> 00:06:34.610
What we really need for our templates though is the HCM l contained inside and our elements have an

84
00:06:34.640 --> 00:06:39.320
inner HDMI l property which gives us access to that.

85
00:06:39.470 --> 00:06:43.460
This is what we need in order to render the template correctly.

86
00:06:43.460 --> 00:06:49.250
So we have the template right here and we have the location we want to render the template up above

87
00:06:49.670 --> 00:06:51.050
with both of those in place.

88
00:06:51.050 --> 00:06:56.210
We're now ready to actually render something into the browser when a new message comes in.

89
00:06:56.210 --> 00:06:58.210
Now this is a two step process.

90
00:06:58.220 --> 00:07:03.300
And the first step is to compile our template with the data we want to render inside of it.

91
00:07:03.320 --> 00:07:08.750
Now for the moment this is a static template so it's not too exciting but we have to work through this

92
00:07:08.750 --> 00:07:13.240
step nonetheless and we'll add dynamic data in in just a couple of minutes.

93
00:07:13.370 --> 00:07:19.490
What we're going to do is create a constant called HDMI all this is going to store the final HDMI all

94
00:07:19.490 --> 00:07:22.020
will actually be rendering in the browser.

95
00:07:22.220 --> 00:07:25.550
Then right here we use the mustache library to get it.

96
00:07:25.670 --> 00:07:28.100
That is mustache spelled this way.

97
00:07:28.100 --> 00:07:33.260
I know there are other spellings for mustache depending on where in the world you are but this is the

98
00:07:33.260 --> 00:07:35.660
spelling used by the library.

99
00:07:35.840 --> 00:07:41.500
Then it's dot render followed by the template as the first and only required argument.

100
00:07:41.930 --> 00:07:46.640
Now there are other arguments we'll talk about in just a moment where we can provide the data we want

101
00:07:46.640 --> 00:07:50.180
to use but once again no data just yet.

102
00:07:50.180 --> 00:07:55.940
Now the next line and the final line We're going to add in order to get this to work has to do with

103
00:07:55.940 --> 00:07:57.430
the messages div.

104
00:07:57.770 --> 00:08:01.150
So we have that div and we want to add stuff inside of it.

105
00:08:01.190 --> 00:08:07.650
For that we'll be using the insert adjacent HDL method.

106
00:08:07.840 --> 00:08:14.500
This allows us to insert other t UML adjacent to the element we've selected in this case that message

107
00:08:14.500 --> 00:08:15.760
is div.

108
00:08:15.760 --> 00:08:21.790
And the first argument is a string and right here we have a few different options I have after begin

109
00:08:22.030 --> 00:08:25.320
which would add it just at the top inside of the div.

110
00:08:25.330 --> 00:08:28.610
This would mean that newer messages would show up first.

111
00:08:28.630 --> 00:08:35.020
I also have after end this would be after the element closes so it wouldn't even be the inside of our

112
00:08:35.020 --> 00:08:42.790
messages Div I have before begin which is before that messages div and then I have before end which

113
00:08:42.790 --> 00:08:45.170
is before the messages div end.

114
00:08:45.180 --> 00:08:46.740
So inside of it.

115
00:08:46.750 --> 00:08:53.200
So right here before end would add new messages at the bottom inside of the div and then after begin

116
00:08:53.200 --> 00:08:59.380
would add new messages at the top inside of the div before end is the option we want and then we just

117
00:08:59.380 --> 00:09:05.370
provide the HDL which I have in that variable defined on the line just above.

118
00:09:05.470 --> 00:09:08.430
From here we can now see our template rendered.

119
00:09:08.440 --> 00:09:10.830
So make sure all your files are saved.

120
00:09:10.870 --> 00:09:14.170
Head over to the browser and give things a refresh.

121
00:09:14.230 --> 00:09:20.800
Right here I see this is a message showing up because we got that welcome message from the server.

122
00:09:20.800 --> 00:09:26.080
If I type something else and hit enter we can see our template is rendered a second time.

123
00:09:26.530 --> 00:09:31.990
Now this alone is a good start but it's not particularly useful because what we really want to do is

124
00:09:31.990 --> 00:09:34.870
render the message text inside of there.

125
00:09:34.870 --> 00:09:37.880
Let's go ahead and figure out how we can get that done.

126
00:09:38.140 --> 00:09:45.400
Now over an index dot HDL to do this we'll be making a small change to our template when we're working

127
00:09:45.400 --> 00:09:46.380
with mustache.

128
00:09:46.390 --> 00:09:51.070
There's a syntax we can use to inject values inside.

129
00:09:51.160 --> 00:09:54.900
So first up we find the place we want to put the value for us.

130
00:09:54.910 --> 00:10:01.120
We're going to clear the paragraph tag of any static content and we're going to put the message right

131
00:10:01.120 --> 00:10:02.160
here.

132
00:10:02.170 --> 00:10:07.500
Then we open to curly braces and we close to curly braces.

133
00:10:07.660 --> 00:10:11.770
Inside of there we reference one of the values we pass in.

134
00:10:11.800 --> 00:10:17.510
Now we haven't passed any values in yet but we're about to and we're going to call that message.

135
00:10:17.530 --> 00:10:22.390
So right here we can go ahead and put the message right inside of the paragraph.

136
00:10:22.840 --> 00:10:29.590
So when the mustache library actually compiles this template everything I have highlighted will be replaced

137
00:10:29.590 --> 00:10:32.050
with the value for message.

138
00:10:32.050 --> 00:10:35.800
Now let's go ahead and actually provide a value for message.

139
00:10:35.800 --> 00:10:39.390
So we see something render when a new message comes in.

140
00:10:39.610 --> 00:10:45.080
Over here we provide data for our template as the second argument to render.

141
00:10:45.220 --> 00:10:46.680
This is an object.

142
00:10:46.690 --> 00:10:51.240
And on here we can provide as many key value pairs as we want.

143
00:10:51.280 --> 00:10:57.250
Now the keys are the things we're accessing in the template and in our case we just said we wanted to

144
00:10:57.250 --> 00:11:00.010
access message right here.

145
00:11:00.010 --> 00:11:03.760
That means we need to setup message on this object.

146
00:11:03.760 --> 00:11:09.850
So I'm going to setup message and its value will come from the variable with the same name up above

147
00:11:09.880 --> 00:11:11.540
our function parameter.

148
00:11:11.740 --> 00:11:14.440
And I can just use these shorthand syntax for that.

149
00:11:14.590 --> 00:11:15.680
Perfect.

150
00:11:15.700 --> 00:11:18.880
So now we're passing the data into the template.

151
00:11:18.880 --> 00:11:25.330
Mustache is going to compile things correctly and this time around we should see our dynamic messages

152
00:11:25.390 --> 00:11:26.470
showing up.

153
00:11:26.470 --> 00:11:31.200
What I'm gonna do is save chat not in jail yes and give the browser a refresh.

154
00:11:31.210 --> 00:11:36.590
Once again right here I see welcome which is excellent and I'll type out a message.

155
00:11:36.640 --> 00:11:38.500
This is dynamic.

156
00:11:38.680 --> 00:11:41.710
I'll hit enter and that shows up as well.

157
00:11:41.800 --> 00:11:48.820
So now using mustache and just maybe 12 lines of code we're able to render dynamic templates to the

158
00:11:48.820 --> 00:11:55.450
browser allowing the user to actually see the messages without needing to dig into the Chrome developer

159
00:11:55.480 --> 00:11:56.290
tools.

160
00:11:56.290 --> 00:12:02.890
Now this system works really well for our text based messages but if I try to share my location what

161
00:12:02.890 --> 00:12:05.530
am I going to get over here in the browser.

162
00:12:05.530 --> 00:12:10.120
I just get the location you are spit out in its entirety.

163
00:12:10.120 --> 00:12:16.570
It would be much nicer to render this inside of a clickable link with the text showing like this is

164
00:12:16.570 --> 00:12:17.890
my location.

165
00:12:17.930 --> 00:12:23.430
There's no need to show the entire U.R.L. when a simple link would get the job done.

166
00:12:23.470 --> 00:12:28.190
Now actually getting all of that done is going to require a small amount of restructuring.

167
00:12:28.300 --> 00:12:35.110
We're going to create a separate event for those location based messages so a separate event that the

168
00:12:35.110 --> 00:12:37.620
server will send to the client.

169
00:12:37.660 --> 00:12:42.610
We're gonna talk about that in the next lesson and it will be your challenge to get done.

170
00:12:42.610 --> 00:12:44.860
So let's jump right in to the next one.
