1
00:00:01,540 --> 00:00:07,090
It's nice when things go right when someone searches for a location and we're able to find a match or

2
00:00:07,090 --> 00:00:12,490
when someone asks for the weather a set of coordinates and we're able to get and display the forecast

3
00:00:12,670 --> 00:00:12,970
now.

4
00:00:12,970 --> 00:00:16,240
We always hope that things go right but that's not always the case.

5
00:00:16,240 --> 00:00:21,790
There are plenty of things that could go wrong with our HDTV requests and in this video we're going

6
00:00:21,790 --> 00:00:27,730
to focus on handling those potential errors giving the user a better experience when things don't go

7
00:00:27,850 --> 00:00:28,740
as expected.

8
00:00:28,810 --> 00:00:32,900
Together we'll set up error handling for the weather API request.

9
00:00:32,920 --> 00:00:38,720
Then as your challenge for the video you'll be setting up error handling for our geo coding request.

10
00:00:38,800 --> 00:00:44,380
For the moment I'm going to comment out all of the geo coding related information down below.

11
00:00:44,380 --> 00:00:49,280
By using Command Forward slash which would be control forward slash on windows.

12
00:00:49,390 --> 00:00:55,510
When I have all of those lines selected and we're going to focus on what we have up above just the weather

13
00:00:55,570 --> 00:00:56,840
request now.

14
00:00:56,890 --> 00:01:03,820
One really obvious way things can go wrong when making an HDTV network request is if there is no network

15
00:01:03,850 --> 00:01:04,690
available.

16
00:01:04,690 --> 00:01:06,390
If you're not connected to the Internet.

17
00:01:06,400 --> 00:01:08,800
This is indeed going to fail.

18
00:01:08,800 --> 00:01:11,680
Let's go ahead and see this in action up above.

19
00:01:11,710 --> 00:01:18,150
I'm going to temporarily turn off my Wi-Fi and we're going to do is run our script.

20
00:01:18,150 --> 00:01:23,000
So from the terminal node space app dot J s when I do this what do I get.

21
00:01:23,010 --> 00:01:31,070
I get a really long error message and the actual error says cannot read property body of undefined.

22
00:01:31,110 --> 00:01:38,100
So in this case when things go wrong and there is no network request the error argument contains a value

23
00:01:38,310 --> 00:01:40,290
and response does not.

24
00:01:40,320 --> 00:01:45,360
So we have to go ahead and add a little bit of conditional logic making sure we're checking that there

25
00:01:45,360 --> 00:01:49,550
is no error before we try to interact with the response.

26
00:01:49,560 --> 00:01:53,370
Right now it's trying to read body of undefined right here.

27
00:01:53,370 --> 00:01:57,620
Response is indeed undefined and that's what's causing the problem.

28
00:01:57,630 --> 00:02:01,960
Now once again we can't fix the lack of network connectivity.

29
00:02:01,980 --> 00:02:05,250
That's not the job of error handling in our case.

30
00:02:05,250 --> 00:02:07,820
The goal is to do something a bit better than this.

31
00:02:07,830 --> 00:02:15,630
Tell them in a regular human readable way that they currently don't have access to the weather API so

32
00:02:15,630 --> 00:02:20,460
to get that done we're going to add an if statement right inside of our function before we do.

33
00:02:20,490 --> 00:02:22,670
Let's go ahead and just console that log.

34
00:02:22,680 --> 00:02:27,960
The error argument to the console so we can see exactly what we're dealing with and I'm going to comment

35
00:02:27,990 --> 00:02:32,490
out the line down below which is currently causing the program to crash.

36
00:02:32,490 --> 00:02:39,450
Now I will clear the terminal out but rerun the command and what do we end up getting.

37
00:02:39,460 --> 00:02:41,760
We end up getting an error message now.

38
00:02:41,800 --> 00:02:48,250
What's inside of here is not as bad as what we had before but it still doesn't contain information that

39
00:02:48,250 --> 00:02:53,020
would be useful to someone unless they really knew a good deal about programming.

40
00:02:53,020 --> 00:02:58,990
So what we're going to do is just check for the existence of that error object right here.

41
00:02:58,990 --> 00:03:03,370
The if statement if there is an error we're gonna do one thing.

42
00:03:03,430 --> 00:03:07,390
Otherwise inside of the else statement we'll do something else.

43
00:03:07,390 --> 00:03:12,440
Now if there is an error we're going to go ahead and print a statement using console log.

44
00:03:12,440 --> 00:03:15,420
Something that a person would actually understand.

45
00:03:15,460 --> 00:03:21,800
Let's try unable to connect to whether service.

46
00:03:21,890 --> 00:03:22,850
Excellent.

47
00:03:22,850 --> 00:03:28,160
Now that we have that message showing up we can fill out the else part of the if statement in this case.

48
00:03:28,160 --> 00:03:34,570
We want to print our forecast exactly like we were already doing so on comment out that line down below.

49
00:03:34,760 --> 00:03:40,640
And then going to take the entire thing cut it out of its current location remove the extra lines and

50
00:03:40,640 --> 00:03:42,400
paste it right here inside of.

51
00:03:42,400 --> 00:03:45,410
Else so if error print an error message.

52
00:03:45,410 --> 00:03:47,820
Otherwise print that forecast.

53
00:03:47,840 --> 00:03:52,260
Now let's go ahead and try things out again from the terminal down below.

54
00:03:52,280 --> 00:03:54,570
I'm going to rerun the program and what do I get.

55
00:03:54,590 --> 00:04:00,380
Unable to connect to weather service showing up which is a great step in the right direction.

56
00:04:00,560 --> 00:04:05,390
Now that we have this in place let's go ahead and make sure that our app still works when the network

57
00:04:05,420 --> 00:04:06,260
request.

58
00:04:06,260 --> 00:04:09,190
Excuse me when the network connectivity is re enabled.

59
00:04:09,560 --> 00:04:13,380
So right here I am going to re enable Wi-Fi once again.

60
00:04:13,430 --> 00:04:17,600
I'll wait just a couple of seconds then we'll rerun the script down below.

61
00:04:17,630 --> 00:04:22,580
And this time there should not be an error and response should indeed show up.

62
00:04:22,850 --> 00:04:29,180
So right here I am going to fire that often what do I get I get my forecast clear throughout the day.

63
00:04:29,270 --> 00:04:35,020
It is currently fifty seven point seven five degrees with a zero percent chance of rain.

64
00:04:35,090 --> 00:04:36,060
And there we go.

65
00:04:36,080 --> 00:04:41,360
Now we have a little bit of error handling in our program making sure that when things don't go well

66
00:04:41,510 --> 00:04:44,820
we at least give the user information that's useful.

67
00:04:44,820 --> 00:04:48,710
And so in summary we have these two arguments error and response.

68
00:04:48,710 --> 00:04:51,320
Only one is ever going to be populated.

69
00:04:51,320 --> 00:04:53,640
The other is going to be undefined.

70
00:04:53,660 --> 00:04:58,170
So if we have a value for error there's not gonna be a value for response.

71
00:04:58,190 --> 00:05:03,020
If I have a value for response we're not going to have a value for error.

72
00:05:03,020 --> 00:05:04,950
So that's why our condition works so well.

73
00:05:04,970 --> 00:05:09,710
If there is an error then we know we have one and we'll print the message if there is no error then

74
00:05:09,710 --> 00:05:14,140
we know by definition we have a response and we can go ahead and use it.

75
00:05:14,180 --> 00:05:17,870
Now this isn't the only type of error we want to guard against.

76
00:05:17,900 --> 00:05:20,270
The other relates to user input.

77
00:05:20,270 --> 00:05:26,240
What if we get a bad set of coordinates that's not going to be handled given our current setup.

78
00:05:26,240 --> 00:05:30,830
Let's go ahead and explore that by cracking open the U RL in the browser.

79
00:05:30,830 --> 00:05:37,080
So what I'm going to do is take this U.R.L. copy it to the clipboard and for the moment we're going

80
00:05:37,080 --> 00:05:43,030
to take it over to Chrome so I'm going to open it up in a new tab like we did a few videos ago.

81
00:05:43,110 --> 00:05:44,090
And what do I get back.

82
00:05:44,100 --> 00:05:47,040
I get back the weather forecast as expected.

83
00:05:47,040 --> 00:05:51,240
Now let's go ahead and mess up the input in the U.R.L. up above.

84
00:05:51,240 --> 00:05:56,360
We could go ahead and demonstrate this by removing the longitude from the you are well up above.

85
00:05:56,430 --> 00:05:59,160
I'm going to fire off their request and what do we get back.

86
00:05:59,160 --> 00:06:05,130
We do not get back a forecast because we haven't provided enough information for a dark sky to know

87
00:06:05,130 --> 00:06:07,770
where we want to get the forecast for.

88
00:06:07,770 --> 00:06:11,270
So in this case we do indeed get a response with two properties.

89
00:06:11,370 --> 00:06:17,190
We have the code property and the error or property on the response body and in this case we need to

90
00:06:17,190 --> 00:06:23,430
add a little bit of defensive programming to make sure we print a useful error message to the user in

91
00:06:23,490 --> 00:06:25,020
this situation.

92
00:06:25,020 --> 00:06:31,170
So it's important to note that when we have invalid input the server the server in this case for Dark

93
00:06:31,170 --> 00:06:37,620
Sky might respond and it's going to respond with data that might be considered an error but it's not

94
00:06:37,620 --> 00:06:40,460
going to populate this error object.

95
00:06:40,500 --> 00:06:46,380
This is used for lower level OS things like the complete lack of a network connection.

96
00:06:46,560 --> 00:06:52,110
If the specific server you're contacting can't find the exact data you need that's typically going to

97
00:06:52,110 --> 00:06:54,500
come back on the response body.

98
00:06:54,510 --> 00:07:00,780
So right here we want to add an else if clause to our if statement to look at response and see if there

99
00:07:00,780 --> 00:07:06,600
is an error code set up if there is we'll print a different error message saying something like unable

100
00:07:06,600 --> 00:07:08,570
to find a location.

101
00:07:08,660 --> 00:07:15,000
Otherwise once again we'll continue to print the forecast if we actually have the data we need right

102
00:07:15,000 --> 00:07:16,580
here before the else.

103
00:07:16,620 --> 00:07:21,900
I'm going to hit enter a couple of times adding some new lines we'll bring that back into the picture

104
00:07:21,900 --> 00:07:23,080
in just a moment.

105
00:07:23,190 --> 00:07:28,290
And on onto the end of the current if statement we're going to add on and else if clause.

106
00:07:28,380 --> 00:07:32,870
So we'll have our condition and the code to run if that condition is true.

107
00:07:32,940 --> 00:07:35,700
Now I can back the else clause up to the end of.

108
00:07:35,700 --> 00:07:41,910
Else if so if there is a low level OS error we're going to print this message if this thing happens

109
00:07:41,910 --> 00:07:43,950
we'll do something else in a second.

110
00:07:43,950 --> 00:07:46,650
Otherwise we'll print the forecast.

111
00:07:46,650 --> 00:07:55,560
Now in this case we are going to look at response dat body and we're going to see if that error property

112
00:07:55,560 --> 00:07:56,400
exists.

113
00:07:56,400 --> 00:07:59,510
If it does we know that something has gone wrong.

114
00:07:59,520 --> 00:08:03,990
So right here we can use console dialog to print a message.

115
00:08:03,990 --> 00:08:11,460
And in this case let's do something like unable to find location unable to find location.

116
00:08:11,460 --> 00:08:14,570
Now we have some pretty decent error handling set up.

117
00:08:14,700 --> 00:08:18,460
If things fail at a low level we're gonna make sure we get that message.

118
00:08:18,510 --> 00:08:21,450
If things go wrong with the input we'll get another message.

119
00:08:21,450 --> 00:08:26,160
And finally if everything goes right we will indeed get our forecast showing up.

120
00:08:26,880 --> 00:08:28,620
Let's go ahead and test things out.

121
00:08:28,620 --> 00:08:34,040
So over here what I'm going to do is break you are L exactly like we broke it over there.

122
00:08:34,080 --> 00:08:38,350
I'm going to remove the comma and the long tube leaving just the latitude in place.

123
00:08:38,370 --> 00:08:40,400
Now let's go ahead and save the script.

124
00:08:40,410 --> 00:08:45,630
And down below we're going to rerun the program so node app J S.

125
00:08:45,740 --> 00:08:51,620
Now I do have a network connection so there should not be a low level error but in this case I do have

126
00:08:51,620 --> 00:08:57,200
invalid input so I would expect this condition to run I'm going to fire off the command and what do

127
00:08:57,200 --> 00:08:58,280
I get down below.

128
00:08:58,310 --> 00:09:00,860
Unable to find location.

129
00:09:00,860 --> 00:09:07,410
So now we have some pretty decent error handling set up allowing us to catch a lot of these edge cases.

130
00:09:07,430 --> 00:09:13,460
Now if we go ahead and fix things I'll add a comma on and I believe it was something like minus 1 1

131
00:09:13,460 --> 00:09:15,320
2 or 1 2 2.

132
00:09:15,320 --> 00:09:21,290
We can go ahead and save the program rerun things for a final time and ensure we are still getting the

133
00:09:21,290 --> 00:09:22,040
weather.

134
00:09:22,040 --> 00:09:28,160
Clearly I was off I got a lot colder and a short period of time but we do indeed have a valid coordinate

135
00:09:28,160 --> 00:09:34,520
pair and we are indeed getting to the end no low level errors no problems with the input which means

136
00:09:34,610 --> 00:09:40,550
we print the forecast now it's challenge time where you're going to do the same thing for our geo coding

137
00:09:40,550 --> 00:09:41,240
request.

138
00:09:41,240 --> 00:09:46,580
So to kick things off I am going to comment out all of the code related to our weather request will

139
00:09:46,610 --> 00:09:48,820
obviously come back to that soon.

140
00:09:48,860 --> 00:09:53,510
I'm just commenting it out so we don't have a bunch of different things printing to the terminal and

141
00:09:53,510 --> 00:09:59,240
down below we are going to uncommon the code for the geo coding API request.

142
00:09:59,240 --> 00:10:04,820
Now right here I had a couple comments to illustrate exactly how geo coding was going to fit into the

143
00:10:04,820 --> 00:10:05,860
big picture.

144
00:10:05,900 --> 00:10:10,940
I'm going to remove those and this is where I will paste in the challenge comments.

145
00:10:10,940 --> 00:10:16,550
Now in this case it's gonna be your job to setup error handling for the geo coding request and there

146
00:10:16,550 --> 00:10:18,540
are four steps for getting this done.

147
00:10:18,560 --> 00:10:25,160
Step one you want to set up an error handler for low level errors so that's when the error argument

148
00:10:25,220 --> 00:10:25,910
exists.

149
00:10:25,940 --> 00:10:27,860
And the response does not.

150
00:10:27,980 --> 00:10:33,420
In that case you can print a message like unable to connect to location services.

151
00:10:33,440 --> 00:10:38,840
Now once you have that in place I'd like you to test your work by disabling your network request and

152
00:10:38,840 --> 00:10:42,790
making sure that when you run the app you see that error message print.

153
00:10:42,860 --> 00:10:49,550
Instead of seeing a really long cryptic stack trace now inside of the else clause you're going to continue

154
00:10:49,550 --> 00:10:54,510
to do whatever you're currently doing so that handles the first type of error.

155
00:10:54,560 --> 00:11:00,020
The other one is to set up an error handler when there's no matching results and we're going to explore

156
00:11:00,020 --> 00:11:04,680
that right now by taking our U.R.L. from the browser and messing it up.

157
00:11:04,730 --> 00:11:10,340
So over here in my other tab I had that you are well we explored when we initially set up geo coding

158
00:11:10,670 --> 00:11:13,760
and if you remember these search terms sits right here.

159
00:11:13,760 --> 00:11:21,620
So it is forward slash geo coding forward slash v five forward slash map box dot places forward slash

160
00:11:21,860 --> 00:11:24,550
your search term dot Jason.

161
00:11:24,680 --> 00:11:27,340
So in our case we're searching for Los Angeles.

162
00:11:27,380 --> 00:11:32,450
If I search for something like twelve what what am I going to get back.

163
00:11:32,450 --> 00:11:34,230
I get back the following.

164
00:11:34,310 --> 00:11:40,270
We still have those same four root properties type of query features and attribution.

165
00:11:40,290 --> 00:11:43,670
You'll notice that this time around features is an empty array.

166
00:11:44,090 --> 00:11:49,550
So if we are getting an empty you're right obviously we're not gonna be able to look in that array like

167
00:11:49,550 --> 00:11:53,700
we're doing right here to pull out the latitude and longitude.

168
00:11:53,720 --> 00:11:56,720
So you want to set up and else if like we did above.

169
00:11:56,810 --> 00:12:00,470
But you want to check if the features array has a length of zero.

170
00:12:00,500 --> 00:12:06,590
If it does you want to go ahead and print a message saying something like unable to find a location.

171
00:12:06,590 --> 00:12:13,190
Try again with different search term then you want to go ahead and actually test that out by messing

172
00:12:13,190 --> 00:12:19,400
up the you are well over here to generate zero search results running the program and making sure you

173
00:12:19,400 --> 00:12:21,290
see that message print.

174
00:12:21,290 --> 00:12:27,490
So just to demonstrate if I do swap out Los Angeles in the you are L right here with something like

175
00:12:27,530 --> 00:12:28,520
twelve what.

176
00:12:28,790 --> 00:12:30,230
And save the file.

177
00:12:30,230 --> 00:12:33,050
I can indeed rerun the script down below.

178
00:12:33,050 --> 00:12:33,860
And what do I get.

179
00:12:33,860 --> 00:12:36,050
We're back to a big ugly stack trace.

180
00:12:36,050 --> 00:12:42,980
The problem being that there is no center property on undefined undefined being the object we're trying

181
00:12:42,980 --> 00:12:49,460
to access which does not exist in the features array because in this case the features array has zero

182
00:12:49,550 --> 00:12:50,720
items inside.

183
00:12:50,750 --> 00:12:55,290
I'm going to undo that change bringing these search term back to a valid one.

184
00:12:55,310 --> 00:12:57,710
Now it's time for you to knock this one out.

185
00:12:57,710 --> 00:13:02,600
Take a moment to pause the video test your work and when you're done come back and click play and we'll

186
00:13:02,600 --> 00:13:04,400
work through the solution together

187
00:13:08,280 --> 00:13:09,150
how'd that go.

188
00:13:09,150 --> 00:13:13,850
I'm going to start with step 1 and ensure that we're handling those low level errors.

189
00:13:13,980 --> 00:13:15,960
So right here what am I going to do.

190
00:13:15,990 --> 00:13:20,160
I am going to start by disabling my network connection.

191
00:13:20,160 --> 00:13:21,650
I'm gonna turn off Wi-Fi.

192
00:13:22,050 --> 00:13:26,250
Then if we were to rerun the program obviously things would indeed fail.

193
00:13:26,250 --> 00:13:28,750
Let's take a quick moment to do just that.

194
00:13:28,770 --> 00:13:31,020
I'll use the up arrow key and enter.

195
00:13:31,020 --> 00:13:31,980
And what do I get.

196
00:13:32,010 --> 00:13:38,610
I get the very long cryptic message saying that there is no response so we can't access the body property

197
00:13:38,670 --> 00:13:39,400
on it.

198
00:13:39,540 --> 00:13:44,060
We can address this by adding the if statement in if there is an error.

199
00:13:44,070 --> 00:13:46,410
Then we know we want to print a message.

200
00:13:46,410 --> 00:13:52,380
Otherwise inside of else we know there's a response and we can go ahead and do what we were doing before.

201
00:13:52,470 --> 00:13:54,240
So I'm gonna take these three lines.

202
00:13:54,300 --> 00:13:59,020
You might have had just one if you chose to solve that challenge in a different way.

203
00:13:59,070 --> 00:14:02,500
I'm going to cut them out and bring them up inside of else.

204
00:14:02,820 --> 00:14:08,830
Once we have that in place we can go ahead and pick an error message for when there is no network connection.

205
00:14:08,910 --> 00:14:15,480
Right here a console that log call to print something and I'll use something like unable to connect

206
00:14:15,840 --> 00:14:18,280
to location services.

207
00:14:18,300 --> 00:14:19,330
Excellent.

208
00:14:19,350 --> 00:14:25,050
Now that we have this in place we finished Step 1 at least hopefully and we can test things out down

209
00:14:25,050 --> 00:14:25,950
below.

210
00:14:25,950 --> 00:14:31,860
Once again I'll use the up arrow key and enter to run the script and right here we get unable to connect

211
00:14:31,890 --> 00:14:33,890
to location services.

212
00:14:33,900 --> 00:14:40,320
Now if I was to re enable my network connection I would expect that we do indeed get a latitude and

213
00:14:40,320 --> 00:14:42,000
longitude printing.

214
00:14:42,000 --> 00:14:46,650
I'm going to rerun the program with the network enabled and what do I get right here.

215
00:14:46,650 --> 00:14:50,040
I do indeed get my coordinates which is awesome.

216
00:14:50,040 --> 00:14:54,720
Next up we want to make sure that when the search term returns no results.

217
00:14:54,720 --> 00:14:59,610
We do indeed print a message letting them know we can't find that location.

218
00:14:59,610 --> 00:15:03,440
First up let's recreate this error by messing up that search term.

219
00:15:03,690 --> 00:15:07,500
I'm going to remove Los Angeles I'll replace it with some mumbo jumbo.

220
00:15:07,500 --> 00:15:10,200
Like 12 followed by the word what.

221
00:15:10,290 --> 00:15:15,530
And now if we were to rerun the program once again we would be back into a failing state.

222
00:15:15,540 --> 00:15:19,460
And that's okay because we're gonna address that in just a moment right here.

223
00:15:19,560 --> 00:15:26,040
Cannot read property center of undefined so the undefined thing is the object we're trying to access

224
00:15:26,040 --> 00:15:30,640
from the features array the features array is empty in this case as we saw.

225
00:15:30,690 --> 00:15:33,980
So there is not going to be an object and that object doesn't exist.

226
00:15:33,990 --> 00:15:38,100
So it definitely won't have a center property to address this.

227
00:15:38,130 --> 00:15:39,470
All we're going to do is add.

228
00:15:39,480 --> 00:15:41,360
Else if like we did before.

229
00:15:41,520 --> 00:15:44,370
I'll move else down below for just a moment.

230
00:15:44,370 --> 00:15:44,710
Add.

231
00:15:44,710 --> 00:15:50,640
Else if with a condition and some code to run when that condition passes then I'll bring the else clause

232
00:15:50,640 --> 00:15:52,980
back into the mix tacking it on to the end.

233
00:15:53,490 --> 00:15:54,530
Excellent.

234
00:15:54,540 --> 00:15:56,910
Now what's the condition in this case.

235
00:15:56,910 --> 00:16:00,150
We want to run this code printing another error message.

236
00:16:00,180 --> 00:16:09,140
If the array is empty so if response dot body dot features has a length equal to zero.

237
00:16:09,230 --> 00:16:10,780
If it does that's a problem.

238
00:16:10,790 --> 00:16:14,640
And we're going to print a message console dot log.

239
00:16:14,780 --> 00:16:18,740
I'll print something like unable to find location.

240
00:16:18,740 --> 00:16:22,790
Try another search perfect.

241
00:16:22,940 --> 00:16:28,430
Now that we have this in place we can move on to the final step which is to make sure we actually see

242
00:16:28,430 --> 00:16:29,170
this message.

243
00:16:29,180 --> 00:16:34,490
When that array is empty I'm gonna go ahead and rerun the program once again and what do I get.

244
00:16:34,490 --> 00:16:36,020
Unable to find location.

245
00:16:36,020 --> 00:16:37,460
Try another search.

246
00:16:37,520 --> 00:16:41,570
Now let's wrap things up by bringing it back to a working state.

247
00:16:41,570 --> 00:16:46,730
I'm gonna remove 12 and what it'll be forward slash Philadelphia Dot.

248
00:16:46,730 --> 00:16:49,100
Jason I'm gonna save the program.

249
00:16:49,190 --> 00:16:51,800
That should indeed return a result.

250
00:16:51,800 --> 00:16:57,770
And if I rerun the program I would expect to see the coordinates for Philadelphia and that is exactly

251
00:16:57,800 --> 00:16:58,770
what I'm getting.

252
00:16:58,970 --> 00:17:05,030
So error handling isn't the most fun thing to add to your application but it goes a long way towards

253
00:17:05,030 --> 00:17:10,590
making sure you have a professional setup where users actually understand what's happening.

254
00:17:10,670 --> 00:17:16,920
If things fail for the moment I am going to remove those challenge comments and save the file.

255
00:17:16,940 --> 00:17:19,190
That's where we're going to stop for this one.

256
00:17:19,220 --> 00:17:25,370
We now have a pretty good setup printing the nicer results when we get them but obviously sometimes

257
00:17:25,370 --> 00:17:27,170
we don't go down that happy path.

258
00:17:27,170 --> 00:17:30,980
And in this case we are indeed also handling those errors.

259
00:17:30,980 --> 00:17:32,050
That's it for this one.

260
00:17:32,060 --> 00:17:33,500
I'll see you in the next one.
