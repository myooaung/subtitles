WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.890
Hello everyone, Welcome back.

00:00:01.890 --> 00:00:06.495
So we discussed a lot about ERC-20 APIs and how to implement them,

00:00:06.495 --> 00:00:08.250
how to use the get method,

00:00:08.250 --> 00:00:10.185
postman thought and delete method.

00:00:10.185 --> 00:00:13.440
And what are the other functionality which you can build on top of

00:00:13.440 --> 00:00:16.620
your rest APIs like how to handle the exception,

00:00:16.620 --> 00:00:19.334
how to handle the exception for every entire application.

00:00:19.334 --> 00:00:21.690
How to validate your models,

00:00:21.690 --> 00:00:27.195
and how do content negotiation and how to apply filters light.

00:00:27.195 --> 00:00:28.635
So we did a lot of things,

00:00:28.635 --> 00:00:31.035
but one thing we haven't tried yet so far,

00:00:31.035 --> 00:00:35.400
the database grid, we only use the hard-coded information,

00:00:35.400 --> 00:00:37.125
which is an offline information.

00:00:37.125 --> 00:00:39.315
So now we need to communicate to the database.

00:00:39.315 --> 00:00:43.775
Let's implement the database functionality using a GPU here.

00:00:43.775 --> 00:00:46.055
So first of all, what is GPA?

00:00:46.055 --> 00:00:48.815
Gps, nothing but it's Java persistence API,

00:00:48.815 --> 00:00:50.945
that functionality, which I mean,

00:00:50.945 --> 00:00:54.890
that's a framework which will allow us to communicate to the database,

00:00:54.890 --> 00:00:59.690
but not using our SQL queries using our Java object.

00:00:59.690 --> 00:01:04.070
So how the Java object is communicated to the database.

00:01:04.070 --> 00:01:08.525
So that is the entire architecture I would Java persistence API.

00:01:08.525 --> 00:01:10.460
Okay, let's take a look at the diagram.

00:01:10.460 --> 00:01:14.120
Just how a look at the orange color portion here.

00:01:14.120 --> 00:01:15.620
So this is our Java.

00:01:15.620 --> 00:01:19.415
And Java is pretty much object-oriented, right?

00:01:19.415 --> 00:01:20.960
That is what Java is very familiar, right?

00:01:20.960 --> 00:01:22.115
It is object oriented.

00:01:22.115 --> 00:01:23.420
So under the object or entity,

00:01:23.420 --> 00:01:25.670
how a lot of elements in it like variables,

00:01:25.670 --> 00:01:29.000
methods and functions and loop concept like abstraction,

00:01:29.000 --> 00:01:30.725
polymorphism in her inheritance.

00:01:30.725 --> 00:01:33.530
It's entirely different from the database perspective.

00:01:33.530 --> 00:01:35.570
At the other way, Let's go back the other side,

00:01:35.570 --> 00:01:37.205
the database, the green shaded area.

00:01:37.205 --> 00:01:39.830
So everything is a relational based.

00:01:39.830 --> 00:01:42.005
And we have tables in it,

00:01:42.005 --> 00:01:45.260
and we have a columns and procedures, triggers, a sequence.

00:01:45.260 --> 00:01:47.660
Everything is relationally information.

00:01:47.660 --> 00:01:51.245
So this is object and this is a relational database.

00:01:51.245 --> 00:01:56.450
How an object and a relational is going to communicate, correct?

00:01:56.450 --> 00:02:00.770
Because we receive all the data through our Java object and

00:02:00.770 --> 00:02:05.465
we are transforming the Java object into a database relational data.

00:02:05.465 --> 00:02:08.750
So somehow we are,

00:02:08.750 --> 00:02:15.275
we are able to convert our Java object into a relational properties.

00:02:15.275 --> 00:02:19.455
How we can do that, that is where the Java Persistence API comes into place.

00:02:19.455 --> 00:02:23.290
So for example, we have a class called class user,

00:02:23.290 --> 00:02:28.360
and we'd have the single attribute SL firstName.

00:02:28.360 --> 00:02:32.364
And we can compare the same with our relational database.

00:02:32.364 --> 00:02:36.715
So let's say you can compare your class to you in a table.

00:02:36.715 --> 00:02:38.815
So I have a table,

00:02:38.815 --> 00:02:41.215
which is a User table,

00:02:41.215 --> 00:02:44.245
and it has a column which is the first underscore name.

00:02:44.245 --> 00:02:45.835
And the type is America.

00:02:45.835 --> 00:02:48.009
So pretty much everything is available.

00:02:48.009 --> 00:02:50.890
But only thing is both a different kind of a property,

00:02:50.890 --> 00:02:53.605
that is object property and this is a relational property.

00:02:53.605 --> 00:02:55.885
So the Java Persistence API,

00:02:55.885 --> 00:02:58.690
which will help us to communicate from Java object

00:02:58.690 --> 00:03:01.890
to relational object, relational property.

00:03:01.890 --> 00:03:06.650
So let us what we're going to talk about this entire session, this section.

00:03:06.650 --> 00:03:09.650
And, and one important thing which we need to know

00:03:09.650 --> 00:03:12.710
about before we are implementing the JPA,

00:03:12.710 --> 00:03:15.739
how it has been done before JPA.

00:03:15.739 --> 00:03:19.865
So before GPA, we have concept called JDBC.

00:03:19.865 --> 00:03:25.070
It's an ABA provided by Java which will help us to communicate to the database.

00:03:25.070 --> 00:03:30.605
And we have a spring JDBC using JDBC template.

00:03:30.605 --> 00:03:34.050
Let's talk about each and every one in detail.
