WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.565
Hello everyone, Welcome back.

00:00:02.565 --> 00:00:06.300
So let's start implementing the, the security here.

00:00:06.300 --> 00:00:11.650
So implement security.

00:00:12.830 --> 00:00:16.020
Okay? So the security that you are going to use,

00:00:16.020 --> 00:00:21.420
it's going to be a spring web security.

00:00:21.420 --> 00:00:22.860
So in order to do that vein,

00:00:22.860 --> 00:00:24.750
you'd have some additional dependency.

00:00:24.750 --> 00:00:26.550
So I'm going to copy paste that dependency,

00:00:26.550 --> 00:00:28.765
but you can do it manually.

00:00:28.765 --> 00:00:31.190
I'll attach the bomb dot xml in that resource,

00:00:31.190 --> 00:00:36.230
you can directly copy the data from the bomb dot xml as well.

00:00:36.230 --> 00:00:38.150
So let's go back with a polymer.

00:00:38.150 --> 00:00:39.275
Take some model here.

00:00:39.275 --> 00:00:40.400
We have the dependency rate,

00:00:40.400 --> 00:00:41.720
so we add the last one,

00:00:41.720 --> 00:00:43.250
which we already said this is for j.

00:00:43.250 --> 00:00:48.815
And then we're going to add a few other dependencies for our security implementation.

00:00:48.815 --> 00:00:54.500
So though security but dividends is going to be 0 or Spring framework WAS,

00:00:54.500 --> 00:00:56.795
which is nothing but web security and

00:00:56.795 --> 00:01:00.050
the adversity of security and we need something else as well.

00:01:00.050 --> 00:01:02.450
So XML is red WSS, WSS,

00:01:02.450 --> 00:01:06.005
which is required when we provide the username password authentication.

00:01:06.005 --> 00:01:08.375
So we'll talk about that later.

00:01:08.375 --> 00:01:12.035
And then these are the dependencies much needed.

00:01:12.035 --> 00:01:14.825
So once you added a something in your palm that XML,

00:01:14.825 --> 00:01:17.150
the one thing which we always need to do,

00:01:17.150 --> 00:01:22.250
just go to your Marvin and make a build on it so that it's the safest way to do that.

00:01:22.250 --> 00:01:26.720
So let's build it once and then we'll move on to the implementation pattern.

00:01:26.720 --> 00:01:29.370
So you just keep going.

00:01:35.440 --> 00:01:38.780
So the spring loaded.

00:01:38.780 --> 00:01:42.155
Okay, I hopefully the middle success,

00:01:42.155 --> 00:01:44.510
we'll be giving out any implementation that we just added,

00:01:44.510 --> 00:01:47.000
the dependencies. Okay, then build a success.

00:01:47.000 --> 00:01:49.790
So now let's go to

00:01:49.790 --> 00:01:53.330
our Obviously the configuration service and let's start implementing that.

00:01:53.330 --> 00:01:56.795
Okay, the first one which you're going to do, right?

00:01:56.795 --> 00:02:00.260
X WAS security.

00:02:00.260 --> 00:02:07.010
Right? So let's go and it's going to be a public matter.

00:02:07.010 --> 00:02:12.965
And x ws SWS security interceptor.

00:02:12.965 --> 00:02:15.170
Yes. That's what we're talking about.

00:02:15.170 --> 00:02:18.170
Let's go down and I'm going to name them at that

00:02:18.170 --> 00:02:21.780
as security intercept already question to subtract.

00:02:24.190 --> 00:02:29.335
So reckless interceptor and hips open implementation.

00:02:29.335 --> 00:02:30.725
So this is what we're going to return, right?

00:02:30.725 --> 00:02:37.460
Sorry. So we are going to implement the security interceptor.

00:02:37.460 --> 00:02:40.110
So let's create an object for that.

00:02:40.210 --> 00:02:44.465
Intercept directly put a new intercept 0.

00:02:44.465 --> 00:02:47.450
So as I mentioned earlier that I do think this needs to be added.

00:02:47.450 --> 00:02:49.670
The first one is callback handler,

00:02:49.670 --> 00:02:53.640
which means that we had to provide the username and the password.

00:02:54.520 --> 00:03:00.890
So interceptor dot set callback handler.

00:03:00.890 --> 00:03:04.475
So what I'm gonna do, I'm gonna create a method to provide the information.

00:03:04.475 --> 00:03:06.005
So let's make the corn,

00:03:06.005 --> 00:03:13.040
Let's name Odessa callback handler.

00:03:16.050 --> 00:03:19.700
And it's great that one.

00:03:20.340 --> 00:03:23.335
Yes. Okay.

00:03:23.335 --> 00:03:25.180
So here what I'm gonna do

00:03:25.180 --> 00:03:30.010
is we're going to give it a private lives given to the public here.

00:03:30.010 --> 00:03:32.890
Okay, so now we have the call back handler.

00:03:32.890 --> 00:03:36.145
Okay, and what kind of call back handler I'm going to use.

00:03:36.145 --> 00:03:41.245
I'm not going to use any complicated password validations rights, as I mentioned,

00:03:41.245 --> 00:03:44.000
I'm going to use a simple password,

00:03:44.700 --> 00:03:47.800
simple password validation callback handler,

00:03:47.800 --> 00:03:49.345
so which will work for us.

00:03:49.345 --> 00:03:53.630
So let's create the simple password handler.

00:03:53.830 --> 00:03:58.910
And let is equal to, okay,

00:03:58.910 --> 00:04:01.110
the one thing which we need to hear.

00:04:01.570 --> 00:04:07.080
So in the handler unit is said the user details,

00:04:07.810 --> 00:04:10.850
which means your username and password dots it.

00:04:10.850 --> 00:04:14.330
Maybe you can use the HashMap or if you know that you are going to use

00:04:14.330 --> 00:04:16.520
only one username and password because

00:04:16.520 --> 00:04:18.995
I don't have a multiple username passwords, just one-to-one.

00:04:18.995 --> 00:04:23.495
So it means you're going to use the user map where we can use a collection to set a map.

00:04:23.495 --> 00:04:25.505
Collections dot.

00:04:25.505 --> 00:04:27.515
We can use the single map.

00:04:27.515 --> 00:04:35.130
So the first key is going to be a username and a password.

00:04:35.140 --> 00:04:37.415
Okay, so now we have the,

00:04:37.415 --> 00:04:40.925
I use an impossible word added in Dover simple password validation.

00:04:40.925 --> 00:04:42.845
So whenever that equals triggered it,

00:04:42.845 --> 00:04:47.405
if it has the admin and password as the authentication details

00:04:47.405 --> 00:04:52.790
that I equals has been allowed to use our methods and so on.

00:04:52.790 --> 00:04:56.730
It is it then all we need to do is just return the handler.

00:05:01.690 --> 00:05:04.700
Okay, let's come back here.

00:05:04.700 --> 00:05:11.329
And the next thing which we need to do is interceptor dot state policy configuration.

00:05:11.329 --> 00:05:15.740
So policy configuration, you need to use a security policy dot XML,

00:05:15.740 --> 00:05:17.210
which you don't have to write one.

00:05:17.210 --> 00:05:19.220
Because I'm going to add it in the resource you can use.

00:05:19.220 --> 00:05:21.275
It is just a two or three lines of a code.

00:05:21.275 --> 00:05:23.930
So what I'm gonna do, so let's create under

00:05:23.930 --> 00:05:26.885
the resource folder so far now what I'm gonna do,

00:05:26.885 --> 00:05:30.050
I'm gonna do classpath resource and the classwork resource.

00:05:30.050 --> 00:05:36.755
I'm going to provide security policy dot xml.

00:05:36.755 --> 00:05:38.390
I haven't created this file yet,

00:05:38.390 --> 00:05:43.740
so let's graded later and written the interceptor.

00:05:45.130 --> 00:05:48.035
Okay, so we are good then.

00:05:48.035 --> 00:05:49.715
So now what do we need to do?

00:05:49.715 --> 00:05:55.205
We had to go to the our resource folder and there we have to create the same file name.

00:05:55.205 --> 00:05:57.739
Security policy, don't XML.

00:05:57.739 --> 00:06:02.960
Just right-click on your resource and create a new file, security dot xml.

00:06:02.960 --> 00:06:04.310
And all you need to do,

00:06:04.310 --> 00:06:06.470
you just provide some XML configuration,

00:06:06.470 --> 00:06:08.974
which is X and W S, S configuration.

00:06:08.974 --> 00:06:12.800
So this is a service we are going to use when you are

00:06:12.800 --> 00:06:16.460
executing this RVs in the browser. I'll show you that later.

00:06:16.460 --> 00:06:19.880
So this needs to be added into your security policy.

00:06:19.880 --> 00:06:23.435
Not to validate your question there is, I mean, requesters.

00:06:23.435 --> 00:06:25.340
So now we have security policy in place.

00:06:25.340 --> 00:06:27.875
Let's go back to our withdrew conflicts arise here.

00:06:27.875 --> 00:06:28.955
So let's see.

00:06:28.955 --> 00:06:32.360
So this is going to be a interceptor and this is going to be same symbol,

00:06:32.360 --> 00:06:36.245
path or validation, but how it is going to be mapped, right?

00:06:36.245 --> 00:06:39.215
That is no communication between any of it.

00:06:39.215 --> 00:06:40.025
Correct?

00:06:40.025 --> 00:06:43.130
Because we need to add the bean here.

00:06:43.130 --> 00:06:45.170
The reason why we are adding beam,

00:06:45.170 --> 00:06:47.030
because I want to happen automatically,

00:06:47.030 --> 00:06:52.350
I don't have to do the manual mapping so and vein.

00:06:53.290 --> 00:06:55.535
Okay, So now what whenever,

00:06:55.535 --> 00:06:57.935
the moment you modify the method as a bean method,

00:06:57.935 --> 00:06:59.105
you know what happened, right?

00:06:59.105 --> 00:07:00.500
When the application launches,

00:07:00.500 --> 00:07:01.880
when the application starts.

00:07:01.880 --> 00:07:04.070
All of them are added into a context.

00:07:04.070 --> 00:07:06.950
So in the context it automatically detect the beans.

00:07:06.950 --> 00:07:09.785
Okay, That is one thing else is, which is missed out.

00:07:09.785 --> 00:07:12.530
As I mentioned earlier, we already have a lot of

00:07:12.530 --> 00:07:15.905
interceptor running in the spring, right?

00:07:15.905 --> 00:07:20.255
And we need to add our newly created intercept are in our existing.

00:07:20.255 --> 00:07:21.755
So how we can do that?

00:07:21.755 --> 00:07:27.200
So you need to extend a class here WAS configure adapted.

00:07:27.200 --> 00:07:29.570
This class needs to be extended so into

00:07:29.570 --> 00:07:34.715
the AWS configure after we have a method called add into subtasks.

00:07:34.715 --> 00:07:37.440
So we're going to override the method.

00:07:39.850 --> 00:07:42.935
So over it method.

00:07:42.935 --> 00:07:44.735
So the model we are going to use,

00:07:44.735 --> 00:07:46.430
we are going to use the add interceptor,

00:07:46.430 --> 00:07:49.525
which contains the list of interceptor.

00:07:49.525 --> 00:07:51.125
So let's go over it, the method.

00:07:51.125 --> 00:07:56.570
So basically what I'm gonna do this is the existing list interceptor and what

00:07:56.570 --> 00:08:02.030
I'm going to do interceptor, don't add.

00:08:02.030 --> 00:08:03.305
And we have a method,

00:08:03.305 --> 00:08:04.730
we have a question to set.

00:08:04.730 --> 00:08:08.370
Alright, so let's add that.

00:08:10.870 --> 00:08:13.400
Okay, so that's all we need to do.

00:08:13.400 --> 00:08:14.990
So we have the interceptor and we get

00:08:14.990 --> 00:08:17.240
the password validation and their interceptor has been added

00:08:17.240 --> 00:08:21.455
into our existing interceptor, right.

00:08:21.455 --> 00:08:23.945
So now all we need to do just to stop the service.

00:08:23.945 --> 00:08:26.870
So why do we make lots of changes now, right?

00:08:26.870 --> 00:08:30.860
So all we need to do is just compile the code and build it once.

00:08:30.860 --> 00:08:32.240
And let's start the application.

00:08:32.240 --> 00:08:34.560
I'm going to shut the application now.

00:08:39.490 --> 00:08:41.765
Might take a few seconds.

00:08:41.765 --> 00:08:48.010
The spring is now just a few seconds.

00:08:48.010 --> 00:08:50.435
I don't I hope we don't have any issues.

00:08:50.435 --> 00:08:53.690
Okay, the damn good starter 800, 800.

00:08:53.690 --> 00:08:56.585
So now we'll go back to our browser and started.

00:08:56.585 --> 00:08:59.780
So this is a service which we executed earlier, right?

00:08:59.780 --> 00:09:02.060
So let's go back to visit at a fresh ones.

00:09:02.060 --> 00:09:06.155
And now what I'm gonna do is I'm going to call the get all employees men thought.

00:09:06.155 --> 00:09:10.475
And now if I tried to access a method, see what happened.

00:09:10.475 --> 00:09:11.765
That is a failed response.

00:09:11.765 --> 00:09:14.090
That is no security exemptions.

00:09:14.090 --> 00:09:17.810
So what it is saying that as some security policy in place,

00:09:17.810 --> 00:09:18.860
but in your records,

00:09:18.860 --> 00:09:23.510
I don't find any user authentication information.

00:09:23.510 --> 00:09:25.700
So how we can implement that?

00:09:25.700 --> 00:09:28.070
Let's go back to the Get all employees method again.

00:09:28.070 --> 00:09:30.290
And before even together request,

00:09:30.290 --> 00:09:31.790
you need to add the authenticators,

00:09:31.790 --> 00:09:33.485
which means the username and the password.

00:09:33.485 --> 00:09:35.269
So we're going to use the authentication.

00:09:35.269 --> 00:09:36.515
So under the drop-down,

00:09:36.515 --> 00:09:38.255
use the authentication here.

00:09:38.255 --> 00:09:39.980
And here is the important thing.

00:09:39.980 --> 00:09:43.925
We need to use WSSE password takes to authentication.

00:09:43.925 --> 00:09:45.950
And Let's go back to IntelliJ.

00:09:45.950 --> 00:09:49.130
And I'll show you the security policy here.

00:09:49.130 --> 00:09:51.110
Have you seen what is that?

00:09:51.110 --> 00:09:58.745
So WSS, so that is why we are choosing WSSE password authentication, right?

00:09:58.745 --> 00:10:02.780
And because it's nothing but it's a XW security into subtasks.

00:10:02.780 --> 00:10:07.759
So the username is going to be admin and my password is going to be password.

00:10:07.759 --> 00:10:12.020
So if I get the request the previous time and I tried it,

00:10:12.020 --> 00:10:14.360
we got a security policy exception.

00:10:14.360 --> 00:10:16.355
Now I'm going to try it again.

00:10:16.355 --> 00:10:20.000
See now I'm able to access all the employer response.

00:10:20.000 --> 00:10:22.175
Let's try for some other method as well.

00:10:22.175 --> 00:10:25.340
So let's try it for a good employee,

00:10:25.340 --> 00:10:26.970
just getting it on employee.

00:10:26.970 --> 00:10:31.989
So I'm going to trigger with the one employee which 123,

00:10:31.989 --> 00:10:34.140
we have our employee existing rights,

00:10:34.140 --> 00:10:35.980
so it's supposed to return a single employee.

00:10:35.980 --> 00:10:38.710
But again, failure because when I trigger that echoes,

00:10:38.710 --> 00:10:40.540
I did not add any authentication.

00:10:40.540 --> 00:10:45.160
Right? So let's do that again with the proper authentication.

00:10:45.160 --> 00:10:48.715
So I'm going to provide a key.

00:10:48.715 --> 00:10:50.140
And not only that,

00:10:50.140 --> 00:10:52.330
I had to provide some authentication as well.

00:10:52.330 --> 00:10:56.004
And we're gonna use the WSSE password authentication.

00:10:56.004 --> 00:11:00.640
So the username is going to be admin and the password is going to be a password.

00:11:00.640 --> 00:11:02.830
So let's trigger it again.

00:11:02.830 --> 00:11:05.095
See, we got it.

00:11:05.095 --> 00:11:09.315
So now we have our Web Services and it has its own methods.

00:11:09.315 --> 00:11:14.630
And not everyone can access our method because we have the security in place.

00:11:14.630 --> 00:11:19.624
So if somebody is trying to access our request or all access our wisdom methods,

00:11:19.624 --> 00:11:21.710
they need to have that proper authentication.

00:11:21.710 --> 00:11:28.265
So this is how we need to implement the whip security forever, my thoughts.

00:11:28.265 --> 00:11:32.285
Okay, So in the next video we'll talk about what is the wisdom.

00:11:32.285 --> 00:11:34.460
And individually, we have a lot of things here, right?

00:11:34.460 --> 00:11:37.295
So pretty much we rely on no idea what all of them.

00:11:37.295 --> 00:11:38.930
So we'll talk about in the next video.

00:11:38.930 --> 00:11:40.620
Thank you.
