WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.545
Hello everyone.

00:00:01.545 --> 00:00:02.475
Welcome back.

00:00:02.475 --> 00:00:04.830
So let's talk about what is GPA.

00:00:04.830 --> 00:00:06.480
So as I mentioned earlier,

00:00:06.480 --> 00:00:09.795
GPA is Java persistence API.

00:00:09.795 --> 00:00:15.450
And it is used to persist our data between a Java object and a relational database.

00:00:15.450 --> 00:00:19.905
Java means is object-based and database relation and based.

00:00:19.905 --> 00:00:26.265
So JP acts as a bridge between object-oriented and relational database system.

00:00:26.265 --> 00:00:28.710
Okay, So as the JP and,

00:00:28.710 --> 00:00:29.760
and just a specification,

00:00:29.760 --> 00:00:32.400
it doesn't perform any operation by itself.

00:00:32.400 --> 00:00:38.060
It requires and implementation like war and tools like hibernate,

00:00:38.060 --> 00:00:40.310
top link and iPadOS implementation.

00:00:40.310 --> 00:00:44.330
So JPA specification for data persistence.

00:00:44.330 --> 00:00:48.305
Okay, so let's talk about the JP architecture.

00:00:48.305 --> 00:00:54.725
So we have an application and we do have a database, how they're communicating.

00:00:54.725 --> 00:00:58.700
That is C, That is where JPA comes into picture.

00:00:58.700 --> 00:01:01.700
So just take a look at the image we have application and

00:01:01.700 --> 00:01:04.760
then we are integrating JPA into our application.

00:01:04.760 --> 00:01:09.260
And the JPA, which will internally communicate with the JDBC driver.

00:01:09.260 --> 00:01:14.330
Whether you're using JDBC or JDBC template or JPA,

00:01:14.330 --> 00:01:18.125
or you're using hibernate or EGP, everything.

00:01:18.125 --> 00:01:22.085
They always communicate to the JDBC driver.

00:01:22.085 --> 00:01:26.510
But the way how they are communicating the ODBC driver that depends on the framework,

00:01:26.510 --> 00:01:29.015
but for now we're using JV integrations.

00:01:29.015 --> 00:01:33.455
Okay, so application we have the object model and J database.

00:01:33.455 --> 00:01:36.110
As I mentioned, it's a relational model.

00:01:36.110 --> 00:01:41.225
So the GPAs work as a broker or its work as an interface in the middle.

00:01:41.225 --> 00:01:42.575
Right?

00:01:42.575 --> 00:01:46.100
So what, what is most important thing when it comes to JB?

00:01:46.100 --> 00:01:47.600
So if you're talking about JB,

00:01:47.600 --> 00:01:51.230
there are relationship pants, think entities.

00:01:51.230 --> 00:01:54.185
So and if you have a introduce,

00:01:54.185 --> 00:01:56.840
each and entities have a relationship with them.

00:01:56.840 --> 00:02:00.695
Multiple tables are one-to-many or one-to-one, many-to-many.

00:02:00.695 --> 00:02:02.030
And JP QL.

00:02:02.030 --> 00:02:03.260
So JPEG relation, I think,

00:02:03.260 --> 00:02:06.035
but it's Java Persistence query language.

00:02:06.035 --> 00:02:08.749
Just like select star from employee,

00:02:08.749 --> 00:02:12.335
we can write the same query using objects as well.

00:02:12.335 --> 00:02:14.615
And then obviously the mapping,

00:02:14.615 --> 00:02:17.840
this is the important Asian till parts of JP.

00:02:17.840 --> 00:02:22.505
So without this, we cannot create any JB, right?

00:02:22.505 --> 00:02:24.410
So and then JDBC driver,

00:02:24.410 --> 00:02:26.870
we all know that what is the JDBC driver contains

00:02:26.870 --> 00:02:30.499
a connection driver manager statement and the results, it, and etc.

00:02:30.499 --> 00:02:34.925
So these things are internal taken care by the JDBC driver,

00:02:34.925 --> 00:02:38.675
but how the JPS communicating JDBC driver, it matters.

00:02:38.675 --> 00:02:41.480
Okay, so let's take an example.

00:02:41.480 --> 00:02:43.295
So in our application,

00:02:43.295 --> 00:02:45.560
how we're going to communicate to the database.

00:02:45.560 --> 00:02:48.320
We need to create entities.

00:02:48.320 --> 00:02:49.865
For example, you have a database,

00:02:49.865 --> 00:02:51.620
you have a table called employee.

00:02:51.620 --> 00:02:53.660
So if you have a table called employee,

00:02:53.660 --> 00:02:55.580
you need to create a table called, I mean,

00:02:55.580 --> 00:02:58.294
you need to create a Java class called an employee.

00:02:58.294 --> 00:03:03.335
And both of them pretty much have the same kind of a naming convention.

00:03:03.335 --> 00:03:06.500
But there are times it does not match with the naming convention.

00:03:06.500 --> 00:03:08.195
But in that scenario,

00:03:08.195 --> 00:03:09.230
how we can handle that,

00:03:09.230 --> 00:03:12.664
we'll talk about that when you're discussing a simple example.

00:03:12.664 --> 00:03:20.120
Right? So I'm going to create one DTO class which represents a database.

00:03:20.120 --> 00:03:22.550
How come your deed you will represent a database.

00:03:22.550 --> 00:03:27.845
The DDO, which represents a database called as a entity.

00:03:27.845 --> 00:03:29.720
So because entity means it has

00:03:29.720 --> 00:03:33.875
the database information and it has my Java object informations as well.

00:03:33.875 --> 00:03:36.019
So how these things are achieved,

00:03:36.019 --> 00:03:40.400
they are achieved using annotations.

00:03:40.400 --> 00:03:44.195
Let, let's, let's, let me move to the next tab.

00:03:44.195 --> 00:03:45.770
I can show you a simple example.

00:03:45.770 --> 00:03:47.030
Here is an entity.

00:03:47.030 --> 00:03:50.240
So entity is nothing but its normal Java class with the annotated

00:03:50.240 --> 00:03:53.825
with some specific attributes.

00:03:53.825 --> 00:03:58.220
So here I have a class called Student, right?

00:03:58.220 --> 00:03:59.735
So this is an entity.

00:03:59.735 --> 00:04:06.710
So which means the student that represents a table in my relational called SS student.

00:04:06.710 --> 00:04:08.119
There are scenarios.

00:04:08.119 --> 00:04:12.080
So my class name is student and my table ME student details.

00:04:12.080 --> 00:04:15.020
So if that name is mismatch,

00:04:15.020 --> 00:04:17.510
then only you need to use the add table.

00:04:17.510 --> 00:04:19.580
So this is my class name,

00:04:19.580 --> 00:04:25.985
but this class name is communicating to the student underscore detail table.

00:04:25.985 --> 00:04:29.975
And also we have some different kinds of annotations.

00:04:29.975 --> 00:04:32.480
So we have ID and we heard generated value.

00:04:32.480 --> 00:04:33.515
So what is ID?

00:04:33.515 --> 00:04:37.205
So ID, which represents the primary key.

00:04:37.205 --> 00:04:40.100
If you find any ID in any Java class,

00:04:40.100 --> 00:04:42.395
it's called as a primary key.

00:04:42.395 --> 00:04:46.055
And we have something called column aswell.

00:04:46.055 --> 00:04:51.710
So here my Java name is student name.

00:04:51.710 --> 00:04:53.735
Even in your database,

00:04:53.735 --> 00:04:55.205
it might be student name,

00:04:55.205 --> 00:04:59.630
but it might be a possibility they might have stored in Alice code name as well.

00:04:59.630 --> 00:05:03.215
So if you think that might be a naming convention issue,

00:05:03.215 --> 00:05:05.315
it's better to provide the column name.

00:05:05.315 --> 00:05:07.910
But most, most other scenario you don't need to

00:05:07.910 --> 00:05:11.210
because when you convert this JPA entity into a database,

00:05:11.210 --> 00:05:13.415
it's automatically creates student underscore name,

00:05:13.415 --> 00:05:16.910
but it's good that we provide the column name aswell.

00:05:16.910 --> 00:05:19.280
And you can provide some conditions as well.

00:05:19.280 --> 00:05:20.870
So if you're providing a pseudonym,

00:05:20.870 --> 00:05:23.780
It must be contained the length of 50 and whether nullable,

00:05:23.780 --> 00:05:25.700
false or true or optional or not.

00:05:25.700 --> 00:05:27.755
You can provide all this information here.

00:05:27.755 --> 00:05:28.610
Okay?

00:05:28.610 --> 00:05:30.170
For that same student I created,

00:05:30.170 --> 00:05:32.975
we created the table here.

00:05:32.975 --> 00:05:35.945
So create table, student ID, integer,

00:05:35.945 --> 00:05:39.665
student name, Wacker, h, integer and country.

00:05:39.665 --> 00:05:42.650
So bad care. And primary keys ID.

00:05:42.650 --> 00:05:45.905
Okay, so here, take a look at the field name here,

00:05:45.905 --> 00:05:50.030
my field name, first-order name is student name as a Java object.

00:05:50.030 --> 00:05:53.165
But for my relational,

00:05:53.165 --> 00:05:55.010
relational properties, student underscore name.

00:05:55.010 --> 00:05:58.235
So if you update a student and name,

00:05:58.235 --> 00:05:59.990
it will update you on your table.

00:05:59.990 --> 00:06:01.370
Student underscore name.

00:06:01.370 --> 00:06:06.005
You might think my table has a relationship with the other databases, are other tables.

00:06:06.005 --> 00:06:07.010
How it can be put away.

00:06:07.010 --> 00:06:08.330
Which means, for example,

00:06:08.330 --> 00:06:09.470
we have a books right away.

00:06:09.470 --> 00:06:12.065
How odd that one might have multiple books.

00:06:12.065 --> 00:06:13.340
So in those conducts analysis,

00:06:13.340 --> 00:06:15.410
that is a one-to-many scenario rate.

00:06:15.410 --> 00:06:19.055
So you how to use the one-to-many annotation,

00:06:19.055 --> 00:06:23.465
which will help you to identify this particular element,

00:06:23.465 --> 00:06:28.385
is mapped with the other table with these particular field.

00:06:28.385 --> 00:06:31.250
Obviously, you have Arthur,

00:06:31.250 --> 00:06:34.055
he must be having multiple books.

00:06:34.055 --> 00:06:35.270
So in that scenario,

00:06:35.270 --> 00:06:38.030
one-to-many and there are different scenarios as well.

00:06:38.030 --> 00:06:40.745
We have many-to-many. We have many to one.

00:06:40.745 --> 00:06:44.255
That is also possible in okay, Let's enough.

00:06:44.255 --> 00:06:46.160
So in the next video, what we want to talk about it.

00:06:46.160 --> 00:06:48.394
So we're going to talk about a simple example.

00:06:48.394 --> 00:06:52.640
To create a simple project in the JPA, we aren't going to implement anything.

00:06:52.640 --> 00:06:54.410
Just create a simple project and what are

00:06:54.410 --> 00:06:58.170
the essential dependencies which you need to add.
