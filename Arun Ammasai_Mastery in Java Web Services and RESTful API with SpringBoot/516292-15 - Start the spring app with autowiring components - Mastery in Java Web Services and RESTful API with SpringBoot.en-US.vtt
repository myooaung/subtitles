WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.385
Hello everyone, Welcome back.

00:00:02.385 --> 00:00:06.540
So now let's try to implement the auto wide functionality.

00:00:06.540 --> 00:00:07.770
So we already mapped,

00:00:07.770 --> 00:00:09.975
competent out or white all we need to do.

00:00:09.975 --> 00:00:13.245
So we need to read the context first,

00:00:13.245 --> 00:00:16.020
the application context, and the way we can do that.

00:00:16.020 --> 00:00:18.540
So for now what I'm going to do, I'm going to comment out these two lines

00:00:18.540 --> 00:00:21.555
so we can see only the outer white part.

00:00:21.555 --> 00:00:25.890
So I'm going to use the application context here.

00:00:25.890 --> 00:00:30.554
Because all the auto wiring things are stored in the context.

00:00:30.554 --> 00:00:32.880
So from the context we can read the beam,

00:00:32.880 --> 00:00:34.420
which is V required.

00:00:34.420 --> 00:00:37.970
So how to get the context?

00:00:37.970 --> 00:00:40.010
See here, we are running this application,

00:00:40.010 --> 00:00:41.810
write it, this will return the contacts.

00:00:41.810 --> 00:00:44.960
So what I'm gonna do, I'm going to comment these out and I'm gonna,

00:00:44.960 --> 00:00:47.345
I receive them ASA context here.

00:00:47.345 --> 00:00:50.180
So when your application rents the contract is the loaded, right?

00:00:50.180 --> 00:00:53.795
So this is where the obligation is initiated and it's running everywhere, right?

00:00:53.795 --> 00:00:57.740
So it will return an application context and you're going to need the context now.

00:00:57.740 --> 00:00:59.300
So now what I'm gonna do,

00:00:59.300 --> 00:01:00.680
I want to read a specific,

00:01:00.680 --> 00:01:02.000
we have a different beans, right?

00:01:02.000 --> 00:01:04.805
We have engineered doctor and a sale I mean,

00:01:04.805 --> 00:01:05.975
under photographs are right.

00:01:05.975 --> 00:01:08.000
So let's try to read any one of them.

00:01:08.000 --> 00:01:12.980
So what I'm gonna do context dot, get bean method.

00:01:12.980 --> 00:01:15.515
So what is the main we are trying to look for?

00:01:15.515 --> 00:01:18.560
Maybe the doctor, so DOC, sorry.

00:01:18.560 --> 00:01:23.495
So we're going to use dr dot class.

00:01:23.495 --> 00:01:27.200
And which well-written paper.

00:01:27.200 --> 00:01:30.540
So I can simply uses a job here.

00:01:32.260 --> 00:01:37.380
So I'm going to receiving using the same interface shell.

00:01:39.070 --> 00:01:41.855
So now we got the bean,

00:01:41.855 --> 00:01:45.800
which means the beam is loaded and it is stored in the job.

00:01:45.800 --> 00:01:52.070
So all we can do is just simply use a job here and then use call that display method.

00:01:52.070 --> 00:01:54.365
So is it, It is that simple.

00:01:54.365 --> 00:01:59.280
So now all we need to do is just right-click and run the applications.

00:02:02.160 --> 00:02:04.960
So this spring loaded now.

00:02:04.960 --> 00:02:13.420
So it might take a few more seconds to give you the output C.

00:02:13.420 --> 00:02:15.250
Now we got the data back,

00:02:15.250 --> 00:02:20.605
but now we are not used the previous to be like creating an object.

00:02:20.605 --> 00:02:25.345
So now we used the spring auto wiring concept.

00:02:25.345 --> 00:02:27.280
I'm in the spring,

00:02:27.280 --> 00:02:33.520
which has the capability to do the mapping automatically without our intervention.

00:02:33.520 --> 00:02:36.385
So we don't have to explicitly provide the mapping.

00:02:36.385 --> 00:02:38.320
But in previous examples,

00:02:38.320 --> 00:02:43.190
we did the manner mapping here we used constructor to do the mapping.

00:02:43.190 --> 00:02:45.455
But if you take a look at the auto height example,

00:02:45.455 --> 00:02:48.680
I just simply create an instance for a job and I mount as Ottawa it.

00:02:48.680 --> 00:02:50.240
So basically what happened?

00:02:50.240 --> 00:02:53.570
This will automatically create the mapping,

00:02:53.570 --> 00:02:55.475
which means the wiring.

00:02:55.475 --> 00:02:57.020
So that is called a wiring process.

00:02:57.020 --> 00:03:01.684
The writing process will happen through the help of a spring,

00:03:01.684 --> 00:03:03.695
so which will be loaded into context.

00:03:03.695 --> 00:03:05.720
So then once it is loaded in the context,

00:03:05.720 --> 00:03:08.450
we can simply using

00:03:08.450 --> 00:03:11.015
the application context and read that whichever bean which we wrote here,

00:03:11.015 --> 00:03:13.040
which we are looking for, so we'd adopt.

00:03:13.040 --> 00:03:15.570
All right, let's try something else.

00:03:15.700 --> 00:03:18.650
So I'm trying photographer now and I'm going to

00:03:18.650 --> 00:03:20.870
run it again and we'll see what's going to happen.

00:03:20.870 --> 00:03:22.565
Eventually it will written Yes,

00:03:22.565 --> 00:03:24.885
I'm and I'm a photographer.

00:03:24.885 --> 00:03:27.100
So the spring has been loaded now,

00:03:27.100 --> 00:03:36.745
so it might take a few seconds to give me the output C.

00:03:36.745 --> 00:03:40.300
You got it. So now just think about it.

00:03:40.300 --> 00:03:41.455
What we done so far,

00:03:41.455 --> 00:03:44.410
we did the tight coupling and we resolve that I'd coupling

00:03:44.410 --> 00:03:47.545
using loose coupling and the loose coupling, it's a perfect.

00:03:47.545 --> 00:03:49.900
And the one important thing is a loose coupling doesn't

00:03:49.900 --> 00:03:52.540
have the auto wiring functionality since we are using Spring,

00:03:52.540 --> 00:03:54.970
we can make use of the the component in

00:03:54.970 --> 00:03:58.330
the auto wiring functionality to do the auto wiring.

00:03:58.330 --> 00:03:59.875
And we did that.

00:03:59.875 --> 00:04:02.245
Okay, so in the next video we'll talk about what,

00:04:02.245 --> 00:04:03.865
when we're running this application,

00:04:03.865 --> 00:04:05.560
what is happening in the background,

00:04:05.560 --> 00:04:07.260
how the auto wiring is happening.

00:04:07.260 --> 00:04:12.270
So we can see all of them in the console disrupt over the next video. Thank you.
