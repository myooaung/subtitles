WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.115
Hello everyone, Welcome back.

00:00:02.115 --> 00:00:05.145
So now let's create a simple example.

00:00:05.145 --> 00:00:06.405
So what I'm gonna do,

00:00:06.405 --> 00:00:08.655
let's not touch our existing project.

00:00:08.655 --> 00:00:13.275
So we're going to implement the GB of functionalities, right?

00:00:13.275 --> 00:00:17.040
So let's create a separate project and we'll work with some simple,

00:00:17.040 --> 00:00:21.105
for example, will discard one-to-one simple entity.

00:00:21.105 --> 00:00:23.700
And we'll work with the entity and then we'll understand

00:00:23.700 --> 00:00:26.430
what are the JP and how it is communicating the database.

00:00:26.430 --> 00:00:28.385
And let's have some basic understanding.

00:00:28.385 --> 00:00:31.130
Then we'll come back to the old project and we'll

00:00:31.130 --> 00:00:34.160
implement the JB and our existing project.

00:00:34.160 --> 00:00:36.170
Okay, so the first thing I'm gonna do,

00:00:36.170 --> 00:00:38.120
I'm gonna put a new project here.

00:00:38.120 --> 00:00:39.680
But while creating a new project,

00:00:39.680 --> 00:00:41.525
there are certain things you want to keep it in mind.

00:00:41.525 --> 00:00:44.720
There are important dependencies that you need to add.

00:00:44.720 --> 00:00:48.320
So I'm going to create a spring assistant.

00:00:48.320 --> 00:00:50.930
So here you need to provide,

00:00:50.930 --> 00:00:54.920
maybe let's work with the student information like simple one.

00:00:54.920 --> 00:01:04.430
So student surveys, and I'm going to call them as a service as well.

00:01:04.430 --> 00:01:14.199
And I'm going to name my project ASA, a service application.

00:01:14.199 --> 00:01:18.745
And I'm going to keep my blog name as my default package,

00:01:18.745 --> 00:01:20.785
bytecode. Well, last city.

00:01:20.785 --> 00:01:23.785
Okay, So, sorry.

00:01:23.785 --> 00:01:25.360
So I think we are good to go.

00:01:25.360 --> 00:01:26.410
Let's click Next.

00:01:26.410 --> 00:01:28.105
And here is the important.

00:01:28.105 --> 00:01:31.010
Okay, I need to choose a Java 8 version.

00:01:32.130 --> 00:01:34.345
Let's click Next.

00:01:34.345 --> 00:01:37.690
And here is the important,

00:01:37.690 --> 00:01:40.570
because we need to choose what are the dependencies.

00:01:40.570 --> 00:01:45.430
First thing I need are the Spring Web,

00:01:45.430 --> 00:01:48.250
and eventually we need,

00:01:48.250 --> 00:01:51.355
that's amassed one, we need a JP, right?

00:01:51.355 --> 00:01:54.465
So let's search for JPA here.

00:01:54.465 --> 00:01:58.925
Jp, and we need to choose a spring JPA.

00:01:58.925 --> 00:02:00.995
And then what else we need?

00:02:00.995 --> 00:02:08.225
We need hij to database H2, in-memory database.

00:02:08.225 --> 00:02:10.265
Just think about this scenario.

00:02:10.265 --> 00:02:14.090
You wanted to work with some database and you don't have time

00:02:14.090 --> 00:02:18.020
to create a installer software and create tables and everything.

00:02:18.020 --> 00:02:22.250
So this hash to database works as a offline database.

00:02:22.250 --> 00:02:25.220
It will create a database and the runtime,

00:02:25.220 --> 00:02:26.525
and it will create the object.

00:02:26.525 --> 00:02:28.715
And you can perform all the data with operations.

00:02:28.715 --> 00:02:32.060
And finally, what you can do is while going for the production,

00:02:32.060 --> 00:02:34.955
you can just simply modify the database configuration. That's all.

00:02:34.955 --> 00:02:39.515
It will work like. Perfect.

00:02:39.515 --> 00:02:41.975
So let's click Next.

00:02:41.975 --> 00:02:45.155
And I'm going to call them as students service.

00:02:45.155 --> 00:02:50.100
Okay, let's finish up.

00:02:50.500 --> 00:02:55.610
So it may take a few more seconds to download all the dependencies here.

00:02:55.610 --> 00:02:58.400
So the application is created.

00:02:58.400 --> 00:03:03.230
First thing, let's open up POM file and verify all the dependencies are available.

00:03:03.230 --> 00:03:05.435
It's shrink them down here.

00:03:05.435 --> 00:03:07.115
So we have the starter web,

00:03:07.115 --> 00:03:08.810
which is good and shatter test.

00:03:08.810 --> 00:03:09.860
And most important thing,

00:03:09.860 --> 00:03:15.410
we have the data GP and we have the haiku data with these

00:03:15.410 --> 00:03:17.030
are the important things which is required for

00:03:17.030 --> 00:03:21.215
this particular change, what you are going to discuss.

00:03:21.215 --> 00:03:22.835
Okay, so let's close this.

00:03:22.835 --> 00:03:24.320
So whenever you create a new project,

00:03:24.320 --> 00:03:26.945
first thing I always do build,

00:03:26.945 --> 00:03:28.795
update your map and projects.

00:03:28.795 --> 00:03:30.560
It's not going to take much of a time.

00:03:30.560 --> 00:03:32.315
Okay, so next thing, what I'm gonna do,

00:03:32.315 --> 00:03:35.045
first thing we are going to create an entity.

00:03:35.045 --> 00:03:37.880
So the entity which will represent

00:03:37.880 --> 00:03:41.990
asset Zhao at the same time represent ASA database as well.

00:03:41.990 --> 00:03:44.795
And you might think so how I'm going to create a database handle?

00:03:44.795 --> 00:03:48.500
I'm not gonna get any database here or any tables here because I have

00:03:48.500 --> 00:03:52.250
my hashtag in place that will automatically create the details for me.

00:03:52.250 --> 00:03:58.340
So first thing, let's go back and let's create a class here.

00:03:58.340 --> 00:04:01.745
So I'm going to create a new package,

00:04:01.745 --> 00:04:04.259
Let's call it as a model.

00:04:04.390 --> 00:04:06.440
And instead the model,

00:04:06.440 --> 00:04:08.435
I'm going to create a class called,

00:04:08.435 --> 00:04:10.190
let's call it as a student.

00:04:10.190 --> 00:04:13.550
Why I always go for employee student.

00:04:13.550 --> 00:04:17.555
So the next thing, Let's create some unnecessary fields.

00:04:17.555 --> 00:04:24.830
First thing, private int and ID,

00:04:24.830 --> 00:04:28.040
it's finite or private long ID.

00:04:28.040 --> 00:04:33.124
And the next thing which I need to do, private,

00:04:33.124 --> 00:04:35.550
string,

00:04:37.420 --> 00:04:44.240
string, student name.

00:04:44.240 --> 00:04:51.185
And the next thing, wri, wait, maybe h.

00:04:51.185 --> 00:04:55.025
Okay, the first thing which I need to do, create the constructor.

00:04:55.025 --> 00:04:57.680
But don't think for ID,

00:04:57.680 --> 00:05:00.290
we don't want to create any constructor because I'm

00:05:00.290 --> 00:05:03.335
going to pass the ID as an auto-increment are.

00:05:03.335 --> 00:05:07.670
So for now, I'm going to create some constructor here.

00:05:07.670 --> 00:05:11.165
We're only including the shorter name and the age.

00:05:11.165 --> 00:05:14.660
And then we have, sorry.

00:05:14.660 --> 00:05:21.395
So we have to create a citizen getters for all of them.

00:05:21.395 --> 00:05:23.525
Okay, and let me,

00:05:23.525 --> 00:05:28.865
let's implement the toString method asked for.

00:05:28.865 --> 00:05:34.280
So you can easily printed it and see all of them.

00:05:34.280 --> 00:05:37.220
Okay, so now everything is ready.

00:05:37.220 --> 00:05:39.485
We have our Java object ready.

00:05:39.485 --> 00:05:40.910
So now what I'm gonna do,

00:05:40.910 --> 00:05:43.040
we're gonna convert this into us an entity.

00:05:43.040 --> 00:05:47.900
The first thing you have to provide the annotation called entity,

00:05:47.900 --> 00:05:50.430
but make sure they,

00:05:50.430 --> 00:05:55.175
the package that you're trying to import it comes under Java x-dot persistence.

00:05:55.175 --> 00:05:59.540
Okay, so not from because the same package might be available in the hybrid as well,

00:05:59.540 --> 00:06:02.700
but the one, whichever you want to use this Java effects.

00:06:03.880 --> 00:06:08.645
So next thing, when it comes to entity.

00:06:08.645 --> 00:06:12.755
Primary key is musty cannot use the Internet without a primary key.

00:06:12.755 --> 00:06:19.355
So how, how did we mention primary key using ID annotation?

00:06:19.355 --> 00:06:25.670
And I'm going to generate whenever this student ID student is going to be created,

00:06:25.670 --> 00:06:27.695
I want to create some random number,

00:06:27.695 --> 00:06:30.575
which means we can call them as auto-generated value.

00:06:30.575 --> 00:06:34.924
So I'm going to use at generated value.

00:06:34.924 --> 00:06:39.455
And the strategy, Anything generation type, dot-dot-dot.

00:06:39.455 --> 00:06:43.490
So it automatically creates some data to eat and then strings to rename.

00:06:43.490 --> 00:06:46.010
Here I'm gonna blow or something like column.

00:06:46.010 --> 00:06:48.245
Because for the same studies,

00:06:48.245 --> 00:06:53.270
scholar, because here my Java name is student,

00:06:53.270 --> 00:06:56.165
but in my database I'm going to use student underscore name.

00:06:56.165 --> 00:07:02.330
So I'm going to create something like you have to provide a name here.

00:07:02.330 --> 00:07:07.940
So name is equal to student underscore name.

00:07:07.940 --> 00:07:10.880
And I'm going to leave the age as it is.

00:07:10.880 --> 00:07:12.710
I'm not, I'm going to modify it because I know

00:07:12.710 --> 00:07:15.320
that my field name is same in my database as well.

00:07:15.320 --> 00:07:19.235
So which means you don't how to create mentioned the column, right?

00:07:19.235 --> 00:07:21.485
So let's run the application.

00:07:21.485 --> 00:07:24.365
Let's start the application once.

00:07:24.365 --> 00:07:27.570
Let's see whether it's up and running

00:07:34.180 --> 00:07:37.560
applications getting starter.

00:07:39.340 --> 00:07:43.595
So our obligation to start out is running on the board number 800,

00:07:43.595 --> 00:07:46.370
80, okay, So that is nauseous, it is running.

00:07:46.370 --> 00:07:51.390
So in the next video, we'll try to implement some database functionality.
