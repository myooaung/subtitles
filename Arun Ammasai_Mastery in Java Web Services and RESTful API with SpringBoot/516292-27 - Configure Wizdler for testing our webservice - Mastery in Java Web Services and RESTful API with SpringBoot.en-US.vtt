WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.070
Hello everyone, Welcome back.

00:00:02.070 --> 00:00:03.975
So everything in place, all we need to do,

00:00:03.975 --> 00:00:05.790
just run the application and see the outcome.

00:00:05.790 --> 00:00:08.505
But before we have to make one small change,

00:00:08.505 --> 00:00:10.890
we created a request is pressure and we get

00:00:10.890 --> 00:00:13.500
it as schema and we get rid of this del as well.

00:00:13.500 --> 00:00:16.005
But if you take a look at the create wisdom,

00:00:16.005 --> 00:00:20.040
wisdom, you are really the one thing which we want to provide to the other parties.

00:00:20.040 --> 00:00:23.865
And we're still needs to have an end point.

00:00:23.865 --> 00:00:26.520
So that is the end point we need to provide to the other party.

00:00:26.520 --> 00:00:28.680
So when you're creating a method as a bean,

00:00:28.680 --> 00:00:30.720
you have to provide a name for it.

00:00:30.720 --> 00:00:34.905
So I'm going to name the AMP surveys.

00:00:34.905 --> 00:00:37.855
So what happened? So the way how this implies that this will load.

00:00:37.855 --> 00:00:40.370
So whoever is calling our local host and

00:00:40.370 --> 00:00:42.905
this particular Pat and after this particular patent,

00:00:42.905 --> 00:00:44.570
if we have an employee service,

00:00:44.570 --> 00:00:47.420
which mean that is our end point.

00:00:47.420 --> 00:00:51.290
So our wisdom when they're able to access our visit,

00:00:51.290 --> 00:00:54.545
which means they can access what other method which will turn the end point.

00:00:54.545 --> 00:00:56.990
Okay, so now we have everything in place,

00:00:56.990 --> 00:00:58.895
all we need to do how to run this,

00:00:58.895 --> 00:01:05.105
since it is a soap web services we can run using as co-PI or you can use Postman.

00:01:05.105 --> 00:01:07.925
And we have some other interfaces available to run it,

00:01:07.925 --> 00:01:09.980
but we want to make it simple.

00:01:09.980 --> 00:01:15.275
So we want to use Chrome plugin called as a whistler,

00:01:15.275 --> 00:01:19.925
which is a simple, a simple tool to taste the soup services and we're going to use that.

00:01:19.925 --> 00:01:23.465
So let's go back to the Chrome browser once.

00:01:23.465 --> 00:01:28.655
And I'm going to so with Chrome plugin.

00:01:28.655 --> 00:01:30.890
So the moment do you try to search for this plugin,

00:01:30.890 --> 00:01:33.170
you to take you to this particular page.

00:01:33.170 --> 00:01:35.975
And here, since I already installed my,

00:01:35.975 --> 00:01:38.660
the same plugging in my logo in my Chrome browser,

00:01:38.660 --> 00:01:41.795
it will say, It says like removed from Chrome.

00:01:41.795 --> 00:01:45.410
But when you try if it is not intelligent machine and say add to your Chrome.

00:01:45.410 --> 00:01:48.080
So once you did, it will have one normal happened,

00:01:48.080 --> 00:01:50.975
so it'll be available in your browser.

00:01:50.975 --> 00:01:53.090
Just take a look at here. Here it is available.

00:01:53.090 --> 00:01:55.670
You can click it and see wizard and remove from Grumman.

00:01:55.670 --> 00:01:57.095
There are some other options as well.

00:01:57.095 --> 00:02:01.625
So we can use a visitor to just have a services bad one more thing.

00:02:01.625 --> 00:02:03.005
Let's go back to our code.

00:02:03.005 --> 00:02:05.915
So we added some wisdom, right?

00:02:05.915 --> 00:02:09.725
So when you try to end application will end up with the class not found exception.

00:02:09.725 --> 00:02:13.850
Because when you're creating the visuals it needs see how wisdom

00:02:13.850 --> 00:02:18.140
for J support and that particular dependency is not added in the POM file.

00:02:18.140 --> 00:02:20.930
So before we need to start the application of what we can do,

00:02:20.930 --> 00:02:24.660
we can, we need to add one more dependency here.

00:02:24.670 --> 00:02:28.410
So that is going to be still for J,

00:02:29.380 --> 00:02:32.975
Mr for j and 7%.

00:02:32.975 --> 00:02:37.190
So now we have the additional wisdom for G as well,

00:02:37.190 --> 00:02:39.305
so will not end up with the class and foundation.

00:02:39.305 --> 00:02:41.210
So we made some changes in the mountain,

00:02:41.210 --> 00:02:42.290
right in the POM file.

00:02:42.290 --> 00:02:47.210
So all we need to do just you don't need to do the mountain building.

00:02:47.210 --> 00:02:49.940
And either you can click Install and you can run it,

00:02:49.940 --> 00:02:51.350
or you can open a terminal,

00:02:51.350 --> 00:02:52.535
since it's the intelligence,

00:02:52.535 --> 00:02:54.635
you should be able to access your terminal here.

00:02:54.635 --> 00:02:56.300
Or else you can, if it is a Windows,

00:02:56.300 --> 00:02:58.280
you're gonna go to a command prompt and that you

00:02:58.280 --> 00:03:01.190
can go to the project location and then you're gonna initiate a comment.

00:03:01.190 --> 00:03:03.965
So here what I'm gonna do, I'm gonna use the command prompt now,

00:03:03.965 --> 00:03:07.880
this simple command, MEN in stock.

00:03:07.880 --> 00:03:10.250
So whatever I'm doing here,

00:03:10.250 --> 00:03:13.100
this and the install both are same.

00:03:13.100 --> 00:03:15.575
So let's wait for a few more minutes.

00:03:15.575 --> 00:03:19.550
The compelling, I mean, the bill has to complete.

00:03:19.550 --> 00:03:22.130
Once the build is done, then we can start

00:03:22.130 --> 00:03:25.800
our application and when we will start our testing.

00:03:30.400 --> 00:03:33.840
Okay, loading spring now,

00:03:37.030 --> 00:03:41.490
string something, come on, make it fast.

00:03:43.180 --> 00:03:45.560
Okay, so the build is success,

00:03:45.560 --> 00:03:49.265
which means all the mountain configuration is done.

00:03:49.265 --> 00:03:51.590
So because we added the new independent stride,

00:03:51.590 --> 00:03:52.730
so after adding the dependency,

00:03:52.730 --> 00:03:54.470
we need to make sure the building success.

00:03:54.470 --> 00:03:55.880
So now the build is sexes.

00:03:55.880 --> 00:03:58.790
We are good to go and run our service.

00:03:58.790 --> 00:04:02.790
So good over vacation, right-click and run.

00:04:03.070 --> 00:04:05.930
Since the server is already running,

00:04:05.930 --> 00:04:08.520
I'm going to stop and rerun it again.

00:04:08.560 --> 00:04:11.940
It's maximize the console.

00:04:17.080 --> 00:04:19.970
So the dam gets, I don't have been shorter than it is

00:04:19.970 --> 00:04:22.115
looking for the port number 800. 800.

00:04:22.115 --> 00:04:23.030
So which is good.

00:04:23.030 --> 00:04:27.215
So all we need to just hit the urine and see what are the responses coming.

00:04:27.215 --> 00:04:28.550
But do you know the URL?

00:04:28.550 --> 00:04:31.565
Of course, we know if we go to the visceral configuration,

00:04:31.565 --> 00:04:33.215
this is our pattern.

00:04:33.215 --> 00:04:37.295
So if you're running your solver on http,

00:04:37.295 --> 00:04:39.350
localhost and the port number,

00:04:39.350 --> 00:04:41.855
the port number which we're looking for is 880.

00:04:41.855 --> 00:04:46.325
And the part, and we're going to use This is the patent soap.

00:04:46.325 --> 00:04:50.300
And so one is identified,

00:04:50.300 --> 00:04:52.085
which means they're hitting our wisdom.

00:04:52.085 --> 00:04:53.735
So within our visitor,

00:04:53.735 --> 00:04:56.090
we have to have the name for our visitor, right?

00:04:56.090 --> 00:04:59.165
So that is a AMP surveys recorded here.

00:04:59.165 --> 00:05:01.610
And let's go back and paste it here.

00:05:01.610 --> 00:05:05.224
Okay, so this is our visited URL.

00:05:05.224 --> 00:05:06.320
So now what we can do,

00:05:06.320 --> 00:05:11.270
we can go to our Chrome browser and paste the URL,

00:05:11.270 --> 00:05:15.440
since it is a visitor, we need to add 10 here.

00:05:15.440 --> 00:05:18.590
See what happen. We got some XML loader,

00:05:18.590 --> 00:05:20.975
which means if you take a look at the XML,

00:05:20.975 --> 00:05:22.400
it's pretty much our xs,

00:05:22.400 --> 00:05:24.140
d and u are input requests.

00:05:24.140 --> 00:05:26.660
We'll talk about what is the schema and what is the

00:05:26.660 --> 00:05:29.660
Boat elements N, what are the operations?

00:05:29.660 --> 00:05:33.515
We'll talk about that after a few more videos.

00:05:33.515 --> 00:05:35.630
But now what we're gonna do, we're gonna take it out, right?

00:05:35.630 --> 00:05:38.390
So, so once you load and the urine,

00:05:38.390 --> 00:05:39.590
this button will be enabled,

00:05:39.590 --> 00:05:41.165
which is the whistler around.

00:05:41.165 --> 00:05:42.635
Just click on the add-on,

00:05:42.635 --> 00:05:44.690
you should be able to see get employee.

00:05:44.690 --> 00:05:46.820
So click on the Get employee.

00:05:46.820 --> 00:05:49.940
And now, anyway, it's a hardcore dead, right?

00:05:49.940 --> 00:05:51.230
You can pass any information here.

00:05:51.230 --> 00:05:57.785
So 123 and hit yell and you're getting fail to get response.

00:05:57.785 --> 00:05:59.870
So it says no upper end point.

00:05:59.870 --> 00:06:01.670
So you would get the employee response,

00:06:01.670 --> 00:06:03.380
it's not configured properly.

00:06:03.380 --> 00:06:06.860
So what is trying to say is let's go back to the code and see.

00:06:06.860 --> 00:06:09.390
So for now I'm going to stop the server.

00:06:09.390 --> 00:06:11.770
Let's go back to the end point.

00:06:11.770 --> 00:06:15.370
So this is a method which is initiated so they get employee, right.

00:06:15.370 --> 00:06:19.030
So it is has that request payload and the response payload.

00:06:19.030 --> 00:06:21.730
But the problem is sometimes it will not work.

00:06:21.730 --> 00:06:23.920
So basically, this is Jack speed responses, right?

00:06:23.920 --> 00:06:26.980
So the response payload if identify that is Ajax response.

00:06:26.980 --> 00:06:29.935
We need to cast in gas d,

00:06:29.935 --> 00:06:32.514
the input and the output, the outputs.

00:06:32.514 --> 00:06:34.150
So inputted not necessary for output.

00:06:34.150 --> 00:06:35.410
You need to cast it.

00:06:35.410 --> 00:06:38.710
So I'm going to mark this get employee response as that

00:06:38.710 --> 00:06:48.280
Jack's be XB element.

00:06:48.280 --> 00:06:52.470
Okay, so and within the jacks element, I'm going to return this.

00:06:52.470 --> 00:06:53.945
Okay?

00:06:53.945 --> 00:06:55.790
And the way how we return it,

00:06:55.790 --> 00:06:57.260
we can adapt to send SOS1.

00:06:57.260 --> 00:06:59.870
And because we are Look, we need to send us a jacks way.

00:06:59.870 --> 00:07:01.970
So what I'm gonna do when you're creating the jacks,

00:07:01.970 --> 00:07:05.480
we will have something like object factory.

00:07:05.480 --> 00:07:07.850
You should be able to see here object factory.

00:07:07.850 --> 00:07:12.755
Using this method, you can convert the appropriate response.

00:07:12.755 --> 00:07:15.380
You can open it and just have a look at it.

00:07:15.380 --> 00:07:20.555
For now, I'm going to create a new object factory

00:07:20.555 --> 00:07:26.195
and create great employee responds and I'm going to pass the response.

00:07:26.195 --> 00:07:30.170
So it lot happen, it will convert your response as a jacks,

00:07:30.170 --> 00:07:32.915
we're response and it will be sent back to the client.

00:07:32.915 --> 00:07:34.400
So now the changes has been done.

00:07:34.400 --> 00:07:37.440
So all we need to do just start the server on wartime.

00:07:45.640 --> 00:07:48.990
Spring is starting now.

00:07:51.690 --> 00:07:53.980
Just a few more seconds,

00:07:53.980 --> 00:07:57.910
it will get done. Okay.

00:07:57.910 --> 00:07:59.395
Tara.

00:07:59.395 --> 00:08:03.040
So the sorrow has been started and it's looking for the port aids or AIDS-related.

00:08:03.040 --> 00:08:08.125
Go back to our Chrome and it closes and refresh their visual.

00:08:08.125 --> 00:08:12.355
And then click the visceral layer again and click the Get employee.

00:08:12.355 --> 00:08:14.620
So it's a hardcore data in your,

00:08:14.620 --> 00:08:17.690
you can send any inputs here.

00:08:18.750 --> 00:08:22.450
I'm going to pass one here and click Go.

00:08:22.450 --> 00:08:25.270
See, we got the hard-coded information.

00:08:25.270 --> 00:08:28.840
So now we hit the request and we'd gotten a response back.

00:08:28.840 --> 00:08:34.100
Okay, So we got our first API response.

00:08:34.100 --> 00:08:36.740
We created our first soap web service

00:08:36.740 --> 00:08:39.665
and we tested it and it's working fine. It's a hard-coded.

00:08:39.665 --> 00:08:41.585
The next thing what we need to do,

00:08:41.585 --> 00:08:44.000
we don't want to hard-code some information, right?

00:08:44.000 --> 00:08:46.610
We have, we are binding to write down an element that's asked for later.

00:08:46.610 --> 00:08:48.620
It's just getting one employee response,

00:08:48.620 --> 00:08:51.515
but we need to get the multiple employer response as well.

00:08:51.515 --> 00:08:54.560
So we're going to make some other changes like I'm

00:08:54.560 --> 00:08:57.020
going to create offline depository it offline

00:08:57.020 --> 00:09:02.900
repository as a class which will give me some five to six number of employees.

00:09:02.900 --> 00:09:05.660
So we'll, we'll, we'll, we'll try to create that one and

00:09:05.660 --> 00:09:09.060
we'll see how it will work with the real data.
