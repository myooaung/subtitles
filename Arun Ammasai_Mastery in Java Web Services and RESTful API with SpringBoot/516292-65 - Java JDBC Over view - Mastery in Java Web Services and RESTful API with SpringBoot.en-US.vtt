WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
Hello everyone, Welcome back.

00:00:02.250 --> 00:00:04.755
Let's talk about Java and shared VPC,

00:00:04.755 --> 00:00:07.215
which is before NCPA concepts.

00:00:07.215 --> 00:00:09.179
So first of all, what is a JDBC?

00:00:09.179 --> 00:00:12.885
We all know that JDBC stands for Java Database Connectivity.

00:00:12.885 --> 00:00:18.570
And JDBC the Java API to connect and execute the query with the databases.

00:00:18.570 --> 00:00:23.160
And it's a part of java standards and we'll call the method Java SE, right?

00:00:23.160 --> 00:00:28.740
And not only that JDBC API uses multiple drivers to connect to the database.

00:00:28.740 --> 00:00:33.540
And there are four major drivers which we used get the first one is JDBC,

00:00:33.540 --> 00:00:36.210
ODBC bridge driver, which people not commonly used.

00:00:36.210 --> 00:00:38.935
And then native drivers and network protocol

00:00:38.935 --> 00:00:43.010
River and the last one is a thin driver, right?

00:00:43.010 --> 00:00:46.235
So first of all, the JDBC is an API.

00:00:46.235 --> 00:00:50.465
So API has the capability of communicate to the database.

00:00:50.465 --> 00:00:53.000
And in our Java application,

00:00:53.000 --> 00:00:57.620
we can use the JDBC API to connect with the JDBC driver.

00:00:57.620 --> 00:01:01.850
The JDBC driver will get communicate to the database.

00:01:01.850 --> 00:01:07.190
That is how we normally connect the database using normal Java JDBC.

00:01:07.190 --> 00:01:09.380
But what is the problem with Java JDBC?

00:01:09.380 --> 00:01:12.470
Why we need to go for the spring JDBC.

00:01:12.470 --> 00:01:16.760
And then we discussed about why we went to JP.

00:01:16.760 --> 00:01:18.410
So think about this scenario.

00:01:18.410 --> 00:01:24.500
I have an employee DTO and I need to query the table, employee table.

00:01:24.500 --> 00:01:29.360
And I want to face the data unwritten the employee DTO, how it can be done.

00:01:29.360 --> 00:01:32.030
In normal JDBC, it's not possible at all.

00:01:32.030 --> 00:01:35.825
All you need to do is call the all employee tables.

00:01:35.825 --> 00:01:37.894
Select star from employee.

00:01:37.894 --> 00:01:39.140
And then what do you need to do?

00:01:39.140 --> 00:01:42.215
You need to loop the results it,

00:01:42.215 --> 00:01:45.080
and then you need to create each and every instance of an employee.

00:01:45.080 --> 00:01:48.290
And then you need to add the employee into a list,

00:01:48.290 --> 00:01:50.389
which is a manual process.

00:01:50.389 --> 00:01:53.239
Even though an employee and the database,

00:01:53.239 --> 00:01:55.625
the attribute and columns are same still,

00:01:55.625 --> 00:01:56.720
it's not going to work out.

00:01:56.720 --> 00:01:58.955
You have do the manual mapping.

00:01:58.955 --> 00:02:04.130
So that is why we moved from JDBC too.

00:02:04.130 --> 00:02:05.525
Spring.

00:02:05.525 --> 00:02:09.800
Jdbc will talk about spring JDBC in the next video.

00:02:09.800 --> 00:02:12.260
But before that, there are four essential things,

00:02:12.260 --> 00:02:14.390
as I mentioned, unit another driver.

00:02:14.390 --> 00:02:16.460
And then if you have the driver using driver,

00:02:16.460 --> 00:02:18.995
you can use a driver manager to, to get the connection.

00:02:18.995 --> 00:02:20.630
But while you're getting the connection,

00:02:20.630 --> 00:02:23.300
we all know that you have to pass the proper data,

00:02:23.300 --> 00:02:26.374
this URL, and the username and the password.

00:02:26.374 --> 00:02:29.000
And just in case if you don't have the US,

00:02:29.000 --> 00:02:31.895
him and data bisphosphate, we need to use the data source name.

00:02:31.895 --> 00:02:35.390
So data source names, nothing but you'll create a data source name and it

00:02:35.390 --> 00:02:39.095
will be conferred in some WebLogic server or something like that.

00:02:39.095 --> 00:02:40.835
So in that particular WebLogic server,

00:02:40.835 --> 00:02:43.055
you should be able to find all the data source name.

00:02:43.055 --> 00:02:46.550
And that particular data source name contains the username and password. It will.

00:02:46.550 --> 00:02:49.670
Those things we tried only if you don't want to use

00:02:49.670 --> 00:02:52.775
your username password directly into your code,

00:02:52.775 --> 00:02:54.440
because it's kinda hard-coded identity

00:02:54.440 --> 00:02:56.240
even though if you're reading it from property file,

00:02:56.240 --> 00:02:59.885
still it concert as a hard-coded value.

00:02:59.885 --> 00:03:01.040
Right?

00:03:01.040 --> 00:03:03.815
And then we have the statement, not only statement,

00:03:03.815 --> 00:03:06.080
we have a multiple types of statement,

00:03:06.080 --> 00:03:10.355
Andy, prepare statement, and we do have a callable statement as well.

00:03:10.355 --> 00:03:13.250
So there are a lot of familiar interfaces in

00:03:13.250 --> 00:03:16.460
the JDBC driver interface connection statement,

00:03:16.460 --> 00:03:20.150
prepared statement, and a callable results it and

00:03:20.150 --> 00:03:24.230
not only results it in the resource that we have a metadata interface as well.

00:03:24.230 --> 00:03:25.295
And all.

00:03:25.295 --> 00:03:27.260
The one thing is a lift.

00:03:27.260 --> 00:03:30.050
I think I, yeah, we have a row set interface as

00:03:30.050 --> 00:03:34.175
for each and every interface has their own advantages.

00:03:34.175 --> 00:03:37.985
But still, it's kind of a traditional way.

00:03:37.985 --> 00:03:40.595
So let's see why we are moved into

00:03:40.595 --> 00:03:44.840
a spring JDBC and what is the advantage we have and we're using in spring JDBC,

00:03:44.840 --> 00:03:47.190
let's talk about in the next video.
