WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.740
Hello everyone, Welcome back.

00:00:01.740 --> 00:00:04.785
So we just open out postman and

00:00:04.785 --> 00:00:08.955
a motto is you want to use it's going to post and discover target URL.

00:00:08.955 --> 00:00:10.410
And since it's a post method,

00:00:10.410 --> 00:00:13.650
we need to send the inputs,

00:00:13.650 --> 00:00:17.295
right, as a student at DTO.

00:00:17.295 --> 00:00:19.965
So I'm going to pass as a JSON here.

00:00:19.965 --> 00:00:23.320
So let's go back to our code.

00:00:23.660 --> 00:00:25.620
Okay, here.

00:00:25.620 --> 00:00:28.920
Okay, I'm pretty sure this method is not gonna work.

00:00:28.920 --> 00:00:32.550
Okay, so let's see whether you guys are able to

00:00:32.550 --> 00:00:36.555
identify why I'm saying this method is not going to walk. Can you give it a guess?

00:00:36.555 --> 00:00:38.820
Just going to guess. Meanwhile, I'll just

00:00:38.820 --> 00:00:45.575
modify that equals to so all we need to pass student name and age.

00:00:45.575 --> 00:00:50.315
So student name, student name.

00:00:50.315 --> 00:00:53.910
Maybe I'm missing Danielle.

00:00:57.520 --> 00:01:00.890
And the next one is age.

00:01:00.890 --> 00:01:05.075
So age is going to be maybe I'm gonna provide a 26 or something like that.

00:01:05.075 --> 00:01:07.100
Okay, Let's be defined.

00:01:07.100 --> 00:01:09.905
So now I'm going to hit the Send button.

00:01:09.905 --> 00:01:12.440
It says 400 bad request.

00:01:12.440 --> 00:01:14.615
Why do you think it's a bad request?

00:01:14.615 --> 00:01:18.244
I have the information I would think think about this scenario.

00:01:18.244 --> 00:01:19.580
We have the storm control,

00:01:19.580 --> 00:01:21.260
but it's just a normal input.

00:01:21.260 --> 00:01:26.750
You need to tell the rest method this is a input request body, right?

00:01:26.750 --> 00:01:30.060
So you how to annotate with the request body.

00:01:33.910 --> 00:01:39.140
Request body. Okay, so there's a request body and even though this maternal not work,

00:01:39.140 --> 00:01:41.390
because we just create a simple skeleton, right?

00:01:41.390 --> 00:01:47.255
So now we need to use the diego dot and we integrate the inset third,

00:01:47.255 --> 00:01:48.860
and I'm going to pass a student.

00:01:48.860 --> 00:01:50.180
So now all we need to do,

00:01:50.180 --> 00:01:53.255
just reach out to your server and stop and rerun.

00:01:53.255 --> 00:01:56.465
And still, that is something we will think.

00:01:56.465 --> 00:01:59.180
Where is the database? We didn't create a database.

00:01:59.180 --> 00:02:00.320
Okay, As you mentioned,

00:02:00.320 --> 00:02:03.080
it automatically creates the database using the hash too.

00:02:03.080 --> 00:02:08.120
But where I can go and see the database and how I can explore the data first,

00:02:08.120 --> 00:02:09.830
right, we have all the quotient.

00:02:09.830 --> 00:02:12.545
Let's talk about that in a while.

00:02:12.545 --> 00:02:15.330
Or applications are getting started.

00:02:17.410 --> 00:02:22.385
Okay, so our application is started and it's running and the port number 800, 800.

00:02:22.385 --> 00:02:27.890
And to go back to the request and will trigger again 200.

00:02:27.890 --> 00:02:34.730
Okay, so which means the data is stored successfully, right?

00:02:34.730 --> 00:02:38.300
Okay, let's go back to our slide here and I'll show you

00:02:38.300 --> 00:02:42.650
something where you can see the hashtag information.

00:02:42.650 --> 00:02:45.530
Let's go to the next tab here.

00:02:45.530 --> 00:02:49.775
Okay, So here is your application and here is a database.

00:02:49.775 --> 00:02:55.385
And I just initiated at my request and it got saying like it created successfully,

00:02:55.385 --> 00:02:56.840
but how it happened.

00:02:56.840 --> 00:02:59.735
So that is where the hash two comes into place.

00:02:59.735 --> 00:03:03.755
Okay, so H2 has a default database.

00:03:03.755 --> 00:03:08.075
So this is a DB URL and DB name and the driver and they use a name.

00:03:08.075 --> 00:03:11.120
So this is the database connectivity information,

00:03:11.120 --> 00:03:15.785
which we can use to open the database and see what are the tables inside,

00:03:15.785 --> 00:03:18.275
okay, but how do we access them?

00:03:18.275 --> 00:03:22.910
To accessing your hash to database,

00:03:22.910 --> 00:03:24.770
you need to use our local host 800,

00:03:24.770 --> 00:03:27.395
800 hash two I offend console.

00:03:27.395 --> 00:03:29.940
Let's try to access that.

00:03:32.830 --> 00:03:36.695
So local host we have,

00:03:36.695 --> 00:03:39.395
okay, so we've got some error message here.

00:03:39.395 --> 00:03:41.915
So let's read it one more time.

00:03:41.915 --> 00:03:46.280
Okay? So this might happen sometimes.

00:03:46.280 --> 00:03:49.565
So all we need to do, just go back to your ID and see what happened.

00:03:49.565 --> 00:03:54.635
So normally, after a spring 2.3 Oh,

00:03:54.635 --> 00:03:59.000
we don't have to provide the database information in the application that properties.

00:03:59.000 --> 00:04:01.625
But for now, if you take a look at the application at properties,

00:04:01.625 --> 00:04:05.630
we haven't provided any information inside the obligation that properties.

00:04:05.630 --> 00:04:12.275
But before a 2.3, you have to provide the details, man Willy?

00:04:12.275 --> 00:04:14.735
But now we don't have to.

00:04:14.735 --> 00:04:18.245
But how do you identify which data is used to identify that?

00:04:18.245 --> 00:04:21.630
We need to enable the logs.

00:04:21.790 --> 00:04:25.400
For now, I'm gonna do something else as well.

00:04:25.400 --> 00:04:27.525
Let's enable some original information.

00:04:27.525 --> 00:04:28.115
See it.

00:04:28.115 --> 00:04:33.395
So like spring dot,

00:04:33.395 --> 00:04:40.550
JPA, dot show, I think if an SQL,

00:04:40.550 --> 00:04:41.765
okay, IF and SQL.

00:04:41.765 --> 00:04:44.420
So whenever our application starts,

00:04:44.420 --> 00:04:46.655
I need to know what other.

00:04:46.655 --> 00:04:47.855
I mean.

00:04:47.855 --> 00:04:50.270
Whenever I create any APIs and I am triggering them,

00:04:50.270 --> 00:04:53.975
I need to know what is the APA running and what is a query executed for that month odd.

00:04:53.975 --> 00:04:55.895
So I want to use that.

00:04:55.895 --> 00:05:01.175
So, and then I'm going to enable the console as well, right?

00:05:01.175 --> 00:05:02.030
So that is a problem.

00:05:02.030 --> 00:05:03.560
I haven't enabled the hash to control,

00:05:03.560 --> 00:05:05.795
but I'm just trying to open the hashtag and sold.

00:05:05.795 --> 00:05:06.830
That's the first problem.

00:05:06.830 --> 00:05:14.540
So spring dot to dot console,

00:05:14.540 --> 00:05:19.745
dot enable is equal to true.

00:05:19.745 --> 00:05:25.340
So now if you go back and go to your browser and if you try again, it will work.

00:05:25.340 --> 00:05:28.115
Because I just enabled the hatch to console.

00:05:28.115 --> 00:05:33.350
Alright, And also I want to enable the logging information as well.

00:05:33.350 --> 00:05:42.530
So logging dot.org, dot Spring Framework,

00:05:42.530 --> 00:05:45.905
dot, I think spring from until finite.

00:05:45.905 --> 00:05:48.155
Certainly if we're called to debug.

00:05:48.155 --> 00:05:50.015
So now you know what to do, right?

00:05:50.015 --> 00:05:53.280
Just stop your server and start them again.

00:05:54.520 --> 00:05:56.720
So something wrong here.

00:05:56.720 --> 00:06:00.950
Autism fail to bind properties logging level to or the Spring framework.

00:06:00.950 --> 00:06:04.010
Okay, let's see what happen.

00:06:04.010 --> 00:06:06.110
So let me read it one more time.

00:06:06.110 --> 00:06:07.610
I'm not sure what happened.

00:06:07.610 --> 00:06:12.020
It happens sometimes when you're working with a different IDEs.

00:06:12.020 --> 00:06:14.690
Okay, let's debug later this one.

00:06:14.690 --> 00:06:16.775
So for now what I'm going to do, Let's come on in.

00:06:16.775 --> 00:06:19.685
So we need to debug why the logger is not working.

00:06:19.685 --> 00:06:21.380
They can know the data, but for now we need to start

00:06:21.380 --> 00:06:23.540
the obligation to see the hash to console.

00:06:23.540 --> 00:06:27.420
That's the first priority applications getting started.

00:06:28.270 --> 00:06:31.340
Okay, so if you see here,

00:06:31.340 --> 00:06:35.810
you should be able to see our drop table if Xist and cas can,

00:06:35.810 --> 00:06:38.960
because I enabled show IF and SQL is equal to true, right?

00:06:38.960 --> 00:06:40.985
So that is why we should be able to see all of this.

00:06:40.985 --> 00:06:43.460
And it creates a table as well,

00:06:43.460 --> 00:06:48.860
student ID and age and disorder underscore name C. That is what happening.

00:06:48.860 --> 00:06:51.770
Whenever we start your application,

00:06:51.770 --> 00:06:53.330
it will find out all the entities in

00:06:53.330 --> 00:06:56.060
your entire project and it'll create the tables automatically.

00:06:56.060 --> 00:06:59.165
It'll create the linkage. We don't have to do anything manually.

00:06:59.165 --> 00:07:01.910
Okay, so let's go back to our browser and

00:07:01.910 --> 00:07:05.270
see whether we are able to access the cache to console.

00:07:05.270 --> 00:07:07.265
So initially we had there, right?

00:07:07.265 --> 00:07:09.560
So let's try to run it one more time.

00:07:09.560 --> 00:07:12.245
See now, it got kinda Datalab.

00:07:12.245 --> 00:07:13.715
Let's try this connection.

00:07:13.715 --> 00:07:16.085
Okay? So this is another problem.

00:07:16.085 --> 00:07:16.835
Okay?

00:07:16.835 --> 00:07:19.175
So normally it will work,

00:07:19.175 --> 00:07:22.955
but sometimes it will not work because some were version mismatch issue.

00:07:22.955 --> 00:07:24.140
So basically what you need to do,

00:07:24.140 --> 00:07:27.020
you need to provide these details, ma'am,

00:07:27.020 --> 00:07:31.595
really in newer application at properties,

00:07:31.595 --> 00:07:34.160
Let's go back to our ID as,

00:07:34.160 --> 00:07:35.480
as the documentation plus per day,

00:07:35.480 --> 00:07:38.585
whenever you start your application in the logs,

00:07:38.585 --> 00:07:40.700
it will give you the information,

00:07:40.700 --> 00:07:41.975
but it is not given here.

00:07:41.975 --> 00:07:44.735
So let's follow our own approach.

00:07:44.735 --> 00:07:46.520
What we can do is, okay,

00:07:46.520 --> 00:07:49.490
so here I just took until availability or to hatch to console.

00:07:49.490 --> 00:07:51.125
Okay. So what is the database name here?

00:07:51.125 --> 00:07:52.625
Yeah, seats here.

00:07:52.625 --> 00:07:56.570
Say that is that one that is the advantage of the new versions.

00:07:56.570 --> 00:07:59.145
Okay? So when erasing world version,

00:07:59.145 --> 00:08:05.665
this is static whenever how many times you run the start and star and the server,

00:08:05.665 --> 00:08:07.495
the database is going to be the same.

00:08:07.495 --> 00:08:09.100
So you don't have to modify anything.

00:08:09.100 --> 00:08:10.720
But in the newer version,

00:08:10.720 --> 00:08:12.325
it will create new ones.

00:08:12.325 --> 00:08:16.900
So now what we need to do, copy this

00:08:16.900 --> 00:08:23.540
until C and go back and paste it again and disconnection.

00:08:25.380 --> 00:08:29.935
Okay, so now the test cup successfully, right?

00:08:29.935 --> 00:08:31.645
So let's connect to the database.

00:08:31.645 --> 00:08:36.895
Now, let's go to the student and run that is no recurse on it.

00:08:36.895 --> 00:08:41.595
Let's go back to our postman and will trigger the same request to one more time.

00:08:41.595 --> 00:08:45.440
Just click Send to 100, which means success.

00:08:45.440 --> 00:08:47.780
Let's go back to the table and refresh again.

00:08:47.780 --> 00:08:50.495
See now we've got 126.

00:08:50.495 --> 00:08:53.915
And Danielle, when we inserted a first record,

00:08:53.915 --> 00:08:57.110
we did not get any tables with that grid, any database.

00:08:57.110 --> 00:09:00.650
All we did is we just created a simple entity,

00:09:00.650 --> 00:09:02.945
so everything happened automatically.

00:09:02.945 --> 00:09:05.495
So what we've done so far,

00:09:05.495 --> 00:09:11.360
I just created a student using our normal entity manager implementation.

00:09:11.360 --> 00:09:13.370
The next thing which I'm gonna do is I'm going to use

00:09:13.370 --> 00:09:18.690
the JPA repository to create the same kind of information.
