WEBVTT
1
00:00:02.320 --> 00:00:08.050
So we want to be able to emit an event whenever we click on one of these lists items. For that first

2
00:00:08.050 --> 00:00:08.360
of all,

3
00:00:08.410 --> 00:00:14.640
let's add a new method that fires when we click on one of them, onSelectSymbol maybe

4
00:00:14.950 --> 00:00:19.880
and there I expect to get the symbol as a string which was selected as an argument

5
00:00:20.380 --> 00:00:22.920
and in there, I want to emit my own custom event.

6
00:00:22.930 --> 00:00:27.730
Now we learned how we can emit custom events in vanilla web component, stencil gives us a very easy

7
00:00:27.730 --> 00:00:30.120
way of emitting our events too.

8
00:00:30.190 --> 00:00:37.920
We add a new property with the name we want to use as an event, maybe SymbolSelected. Now it is a

9
00:00:37.920 --> 00:00:43.020
good practice to turn this into a unique event name in case we have multiple web components on the page

10
00:00:43.020 --> 00:00:48.950
that might emit clashing event names, so we add our prefix here too, ucSymbolSelected

11
00:00:49.130 --> 00:00:52.830
and that would be the case for web components written without stencil too,

12
00:00:52.830 --> 00:00:54.430
it is a good practice to do that.

13
00:00:55.710 --> 00:00:57.900
This now needs a decorator,

14
00:00:57.970 --> 00:01:05.700
the event decorator which needs to be imported from @stencil/core. Add parentheses here and then the

15
00:01:05.700 --> 00:01:08.040
type of this property should be event emitter,

16
00:01:11.640 --> 00:01:18.210
also imported from @stencil/core. Event emitter actually is a generic type which means we can pass

17
00:01:18.270 --> 00:01:25.140
extra information with this type definition here where we tell Typescript which type of data will eventually

18
00:01:25.140 --> 00:01:26.990
be emitted with this event emitter.

19
00:01:27.300 --> 00:01:31.770
We do this by adding greater and smaller than signs which has nothing to do with TSX here which

20
00:01:31.770 --> 00:01:38.100
is just Typescript syntax for generic types and the type of data we'll emit here will be a string, the

21
00:01:38.100 --> 00:01:40.150
name of the symbol.

22
00:01:40.150 --> 00:01:46.270
Now we have this event set up and we can configure it by passing an object to the event decorator

23
00:01:46.270 --> 00:01:52.760
and there, you can set bubbles and composed just as you could do it for your own custom events

24
00:01:52.900 --> 00:01:56.650
in vanilla web components which we covered in the first part of this course.

25
00:01:58.650 --> 00:02:00.190
Now we have this custom event,

26
00:02:00.480 --> 00:02:08.000
we can now use it here in onSelectSymbol to emit it, you simply call emit. That is a nice simplified

27
00:02:08.000 --> 00:02:10.080
way of dispatching the event stencil

28
00:02:10.150 --> 00:02:14.450
gives you and you simply pass the symbol here as an argument.

29
00:02:14.450 --> 00:02:17.490
Now we just need to hook this up, onSelectSymbol,

30
00:02:17.720 --> 00:02:20.570
let's go to a list item and whenever this is clicked,

31
00:02:20.600 --> 00:02:26.240
so on a click here, I'll execute this onSelectSymbol,

32
00:02:26.680 --> 00:02:33.790
bind this but also pass a second argument here which will be the first argument received in onSelectSymbol

33
00:02:33.790 --> 00:02:37.500
and this should be the symbol we selected,

34
00:02:37.640 --> 00:02:41.520
so in this case, the result.symbol down there, right.

35
00:02:41.520 --> 00:02:44.250
That is also the symbol we output in JSX,

36
00:02:44.310 --> 00:02:49.120
that is the symbol we want to pass to the onSelectSymbol function when it's executed.

37
00:02:49.800 --> 00:02:55.290
And now I'll just add a little bit more styling here to show that we can click this,

38
00:02:55.320 --> 00:03:02.560
so when we hover over this or when it is active, then I want to give this a background color of let's

39
00:03:02.570 --> 00:03:09.720
say a nice purple and text color of white and I'll give my list items a cursor

40
00:03:09.860 --> 00:03:13.830
of a pointer to make sure, to indicate that we can click this.

41
00:03:14.130 --> 00:03:21.560
Now if I reload this and I search for BMW here, that looks clickable. Now if I click it,

42
00:03:21.560 --> 00:03:23.820
how can we confirm whether it worked?

43
00:03:23.960 --> 00:03:25.550
Well let's go to the index.html

44
00:03:25.560 --> 00:03:27.120
file and there,

45
00:03:27.140 --> 00:03:34.870
I'll add a little script section and here, I'll get access to my stock finder element by using document

46
00:03:35.260 --> 00:03:38.200
query selector and then my own tag

47
00:03:38.220 --> 00:03:42.460
here, ucStockFinder and just as with any other

48
00:03:42.510 --> 00:03:48.190
HTML element, we can add an event listener because you already learned web components are treated like

49
00:03:48.190 --> 00:03:50.170
normal HTML elements here

50
00:03:51.350 --> 00:03:58.090
and I want to listen to the ucSymbol and the name was ucSymbolSelected.

51
00:03:58.090 --> 00:04:01.740
So we want to listen to that event name here

52
00:04:01.950 --> 00:04:09.720
and when this is fired, I get some event data and I will console log this event data here so that

53
00:04:09.720 --> 00:04:11.180
we can see what's inside.

54
00:04:11.950 --> 00:04:14.150
Now this is in the normal index.html file,

55
00:04:14.170 --> 00:04:17.110
this is not a web component.

56
00:04:17.110 --> 00:04:26.460
Now let's try this, let's clear the console here, search for BMW and then simply select one of these results

57
00:04:27.660 --> 00:04:33.220
and here's our event and there, we'll have a detail key which holds the event data we emitted.

58
00:04:33.250 --> 00:04:35.790
In our case, that was a string, that was just a symbol,

59
00:04:35.890 --> 00:04:37.390
it was the symbol we selected,

60
00:04:37.540 --> 00:04:42.110
so this is looking pretty good. So now we have a way of emitting a custom event,

61
00:04:42.130 --> 00:04:44.230
how can we now listen to it from inside

62
00:04:44.250 --> 00:04:45.400
another component?
