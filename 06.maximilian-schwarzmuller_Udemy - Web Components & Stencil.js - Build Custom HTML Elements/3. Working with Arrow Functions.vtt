WEBVTT
1
00:00:02.280 --> 00:00:08.000
You learned about let and const, another thing, another construct you're going to see a lot in

2
00:00:08.000 --> 00:00:10.990
this course, our arrow functions,

3
00:00:11.400 --> 00:00:15.710
that's a different syntax for creating Javascript functions.

4
00:00:15.900 --> 00:00:18.480
A normal Javascript function of course looks like this

5
00:00:18.480 --> 00:00:27.480
with the function keyword, you might also know the syntax where you have var myFunc equals function.

6
00:00:27.480 --> 00:00:30.170
Now an arrow function looks like this,

7
00:00:30.210 --> 00:00:34.220
here I'm storing it in a constant and then on the right side of the equals sign,

8
00:00:34.230 --> 00:00:36.690
that's the arrow function syntax.

9
00:00:36.780 --> 00:00:42.470
A list of arguments, here it's none but it could hold some arguments and then an arrow,

10
00:00:42.660 --> 00:00:46.840
so an equal sign and a greater than sign and then the function body.

11
00:00:47.220 --> 00:00:52.860
The arrow function syntax is a bit shorter than the normal syntax since it omits the function keyword

12
00:00:53.490 --> 00:00:56.610
and it also and that is the great benefit,

13
00:00:56.640 --> 00:00:59.750
solves a lot of the issues you often had with the

14
00:00:59.750 --> 00:01:02.660
this keyword in Javascript.

15
00:01:02.880 --> 00:01:10.230
If you've worked with Javascript a bit, you probably know that the this keyword doesn't always refer to what

16
00:01:10.230 --> 00:01:15.120
you might have expected it to refer to during you writing your code,

17
00:01:15.120 --> 00:01:22.770
when you use this inside an arrow function, it will always keep its context and not change it surprisingly

18
00:01:22.770 --> 00:01:24.390
on runtime.

19
00:01:24.390 --> 00:01:28.060
So let's now move to JSBin to see that arrow function syntax

20
00:01:28.080 --> 00:01:31.190
in practice. Back in JSBin,

21
00:01:31.320 --> 00:01:38.840
let's create a normal function, printMyName, like this.

22
00:01:38.850 --> 00:01:46.970
Now here we can of course output console log name and pass name as an argument.

23
00:01:47.160 --> 00:01:54.870
Now if I call printMyName like this and hit control enter, we get undefined because I didn't pass

24
00:01:54.870 --> 00:01:59.150
anything, if I do the same with Max passed as an argument,

25
00:01:59.220 --> 00:02:06.840
we get Max. Now the arrow function equivalent is to store this in a constant named

26
00:02:06.840 --> 00:02:07.350
printMyName,

27
00:02:07.350 --> 00:02:09.570
it could also be created with let

28
00:02:09.600 --> 00:02:15.360
if you plan on reassigning this variable, printMyName as a constant

29
00:02:15.470 --> 00:02:22.400
and now don't forget to add this arrow between the list of arguments and the function body. If you now clear

30
00:02:22.410 --> 00:02:24.560
and rerun this, you'll still see Max,

31
00:02:24.560 --> 00:02:27.510
so here it behaves exactly in the same way.

32
00:02:27.560 --> 00:02:32.150
Now the this keyword thing is something you'll see throughout the course, it becomes important once you

33
00:02:32.150 --> 00:02:34.950
and functions to objects of course,

34
00:02:35.090 --> 00:02:40.900
first of all let me show you some alternatives to this syntax though, regarding the argument list

35
00:02:40.910 --> 00:02:48.270
to be precise. If we only receive one argument as we do here, you can also use a shortcut of omitting

36
00:02:48.360 --> 00:02:49.810
the parentheses around it,

37
00:02:49.970 --> 00:02:56.280
that's only valid for exactly one argument though, not for more and not for less,

38
00:02:56.300 --> 00:02:59.320
here you will still get the same result.

39
00:02:59.810 --> 00:03:06.220
If you had a function which receives no arguments, this is not valid syntax,

40
00:03:06.290 --> 00:03:11.780
you then need to pass an empty pair of parentheses, like this.

41
00:03:11.780 --> 00:03:15.540
If we execute this now, we also still see Max,

42
00:03:15.560 --> 00:03:19.010
so this works. If you have more than one argument,

43
00:03:19.010 --> 00:03:20.600
you also need parentheses,

44
00:03:20.690 --> 00:03:23.420
so name and age like this won't work,

45
00:03:23.420 --> 00:03:32.510
you will need to wrap this in parentheses and now you could output name and age and pass both as arguments

46
00:03:32.630 --> 00:03:33.800
here.

47
00:03:33.860 --> 00:03:35.750
So these are the different syntaxes

48
00:03:35.750 --> 00:03:38.230
you might see regarding the arguments.

49
00:03:38.330 --> 00:03:39.930
There also is an alternative

50
00:03:39.950 --> 00:03:41.800
regarding the function body,

51
00:03:41.870 --> 00:03:44.110
so on the right side of the arrow.

52
00:03:44.510 --> 00:03:47.870
Obviously a lot of functions just return something,

53
00:03:47.930 --> 00:03:58.860
so let's say here, we actually want to multiply something and we get a number as an argument,

54
00:03:58.860 --> 00:04:07.500
now we want to return number times two. Obviously what we can do as we can console log

55
00:04:07.510 --> 00:04:09.100
the result of

56
00:04:09.120 --> 00:04:12.560
multiply and pass two here.

57
00:04:12.810 --> 00:04:16.540
If I now clear this and run this, we should see four and we do.

58
00:04:16.680 --> 00:04:24.900
If you have this case where all you do in your function body is return and you have no other code in

59
00:04:24.900 --> 00:04:34.950
there, you can omit the curly braces and write this in one line and then you also have to omit the return

60
00:04:34.950 --> 00:04:41.730
keyword. This is a very short version of writing this function, it gets a bit shorter if we take advantage

61
00:04:41.730 --> 00:04:45.840
of the other shortcut of removing the parentheses around the single argument

62
00:04:46.200 --> 00:04:50.250
and now what this does is it still returns the result of this code

63
00:04:50.250 --> 00:04:54.140
here, we just omit the return keyword and we have to omit it

64
00:04:54.390 --> 00:05:00.420
and we have a very concise and short way of writing a function that takes one or more arguments and

65
00:05:00.420 --> 00:05:01.790
return something,

66
00:05:01.800 --> 00:05:05.600
so here clearing and running this still yields 4.

67
00:05:06.030 --> 00:05:11.290
So this is all just syntax you might see and the arrow function in general is something you'll see a lot.

68
00:05:11.370 --> 00:05:15.850
You saw the various syntaxes, you don't have to remember all of them right now,

69
00:05:16.020 --> 00:05:21.180
just be aware that there are different syntaxes and if we then use them, they'll quickly come back

70
00:05:21.180 --> 00:05:25.060
to your mind and you know why we use a given syntax.
