WEBVTT
1
00:00:02.250 --> 00:00:08.160
We have that spinner.css code and that spinner,html code and since we also need a spinner in the

2
00:00:08.160 --> 00:00:11.860
stock finder, it would make sense to reuse that.

3
00:00:11.970 --> 00:00:19.650
So I would create a new component, the spinner component I'll name it with my spinner.tsx file and

4
00:00:19.650 --> 00:00:27.780
my spinner.css file and I can already grab all that CSS code here from my stock price component

5
00:00:28.350 --> 00:00:38.150
and move that into the spinner.css file and then here in the spinner.tsx file, I'll export a class,

6
00:00:38.190 --> 00:00:44.690
spinner of course and just as always I'll add my component decorator which is imported from

7
00:00:44.690 --> 00:00:48.410
@stencil/core, add the tag which is ucSpinner here, 

8
00:00:50.030 --> 00:00:56.510
add the style URL and point at the spinner.css file and of course also add shadow

9
00:00:56.510 --> 00:01:06.590
true. Now in the render function of this component, I will simply return this content here, right,

10
00:01:06.620 --> 00:01:09.780
this div zip. I'll return this here

11
00:01:11.450 --> 00:01:16.280
and now with that, I have everything I need to display the spinner in here. I will not add the logic whether

12
00:01:16.290 --> 00:01:18.030
the spinner should be shown or not,

13
00:01:18.030 --> 00:01:22.230
instead I will just use that spinner as a normal HTML element,

14
00:01:22.230 --> 00:01:24.610
what custom elements are in the end

15
00:01:24.660 --> 00:01:26.210
in my other components.

16
00:01:26.460 --> 00:01:34.350
So here in the stock price, when I'm in the loading mode, I'll set data content to ucSpinner and

17
00:01:34.350 --> 00:01:36.080
that is all you need.

18
00:01:36.300 --> 00:01:42.660
There is no need for any imports at the top because this will be an HTML element that is globally

19
00:01:42.660 --> 00:01:43.330
available,

20
00:01:43.330 --> 00:01:48.660
that's the idea behind web components. So I add ucSpinner like this

21
00:01:48.660 --> 00:01:54.740
and if I save that, you'll see that whenever I'm entering something else,

22
00:01:54.960 --> 00:02:03.760
we still have the spinner here, just like that and that works with our own web component where we now

23
00:02:03.860 --> 00:02:07.900
enclosed all the spinning functionality and style.

24
00:02:07.900 --> 00:02:13.930
Now the interesting thing here is that we simply embed this like a normal HTML element in our JSX

25
00:02:13.930 --> 00:02:18.430
or TSX code because it is a normal HTML element in the end

26
00:02:18.430 --> 00:02:24.370
and this is how you can nest and embed components into components and that of course means that I can

27
00:02:24.370 --> 00:02:29.030
now go to the stock finder and also add some loading logic there,

28
00:02:30.530 --> 00:02:31.220
loading.

29
00:02:31.280 --> 00:02:34.120
Initially it's false here too but just as before

30
00:02:34.160 --> 00:02:40.610
whenever we find stocks in this case here, I'll set loading to true and then once we're done, I'll set loading

31
00:02:40.620 --> 00:02:42.190
to false

32
00:02:42.290 --> 00:02:46.910
and I'll also set loading to false if we have an error because then we might show some error message but we

33
00:02:46.910 --> 00:02:48.930
don't want to show the spinner anymore.

34
00:02:49.160 --> 00:02:57.440
And with that we can go to the render function and have like a content variable and that by default

35
00:02:57.800 --> 00:03:00.810
could be our mapped list items here

36
00:03:04.340 --> 00:03:07.430
but if we are loading,

37
00:03:07.430 --> 00:03:18.820
if this is true, then content will simply be our ucSpinner like this. And now I'll output content down there

38
00:03:18.820 --> 00:03:22.670
between the unordered list or to be precise,

39
00:03:22.860 --> 00:03:28.240
the unordered list should probably be part of what's in my content up there,

40
00:03:28.430 --> 00:03:38.130
so I'll add the opening and closing tags up here. Need to wrap this search result maps inside of curly braces

41
00:03:38.120 --> 00:03:40.790
then since it's now inside of the unordered list

42
00:03:46.430 --> 00:03:53.060
and then down there, remove the closing unordered list and now, I can also get rid of the curly braces

43
00:03:53.070 --> 00:03:59.580
here. Now where I have two actually, now I have the content being output there and the content is either

44
00:03:59.640 --> 00:04:03.960
my unordered list with the mapped search results or the spinner

45
00:04:04.410 --> 00:04:06.510
and you can use such a self-closing tag here

46
00:04:06.510 --> 00:04:12.360
by the way if you have no content in between for your custom components too. Only inside of TSX code

47
00:04:12.390 --> 00:04:18.220
though, not in the index.html file, this is only valid syntax in TSX, in JSX.

48
00:04:18.690 --> 00:04:27.180
So now with that, if I search for BMW here, you also see the spinner here, we can select it here and that all

49
00:04:27.180 --> 00:04:27.920
works

50
00:04:28.050 --> 00:04:33.960
and now we have our reusable code in our own embedded component and obviously we cannot just use that

51
00:04:33.960 --> 00:04:35.990
component in our own components,

52
00:04:36.000 --> 00:04:38.360
we could still use this in index.html too.

53
00:04:38.580 --> 00:04:41.770
Just as I just mentioned, not with a self-closing tag

54
00:04:41.850 --> 00:04:44.730
because that is not supported in normal HTML, 

55
00:04:44.940 --> 00:04:47.430
it is only supported in TSX, in JSX

56
00:04:47.550 --> 00:04:50.540
but here's our spinner now. Not too beautiful,

57
00:04:50.580 --> 00:04:51.240
I'll get rid of it.
