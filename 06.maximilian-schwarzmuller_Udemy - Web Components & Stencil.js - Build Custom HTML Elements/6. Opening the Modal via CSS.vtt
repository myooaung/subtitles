WEBVTT
1
00:00:02.250 --> 00:00:09.750
To act when we add this opened attribute, we need to listen to changes in attributes obviously and you

2
00:00:09.750 --> 00:00:11.750
learned how that works, right?

3
00:00:11.760 --> 00:00:14.410
Thus far, we have all the logic in the constructor,

4
00:00:14.430 --> 00:00:23.250
now it's simply time to add more methods here and I will add the attributeChangedCallback here and

5
00:00:23.250 --> 00:00:29.050
you remember that you here get the name of the attribute which changed, the old value and the new value

6
00:00:29.310 --> 00:00:33.330
and then this will trigger for any observed attribute which changed.

7
00:00:33.330 --> 00:00:41.520
For this, we also have to add our static getter here, observedAttributes and make sure you get the naming

8
00:00:41.520 --> 00:00:42.170
right here

9
00:00:42.180 --> 00:00:43.820
otherwise it will not work

10
00:00:44.280 --> 00:00:49.880
and there you have to return square brackets and then the name of the attributes you want to watch

11
00:00:50.040 --> 00:00:55.680
and here it's the opened attribute and if you chose a different name that will be added here outside

12
00:00:55.680 --> 00:00:57.660
of your component,

13
00:00:57.660 --> 00:01:01.340
then you also have to listen to a different name in here of course.

14
00:01:01.380 --> 00:01:06.820
Now for the addition of the open attribute, this should be triggered and then when this runs,

15
00:01:06.900 --> 00:01:09.470
maybe we also have other attributes.

16
00:01:09.540 --> 00:01:13.170
So here I will check if name is equal to opened

17
00:01:14.330 --> 00:01:17.870
and if that is the case, we know that something happened on the opened attribute,

18
00:01:18.080 --> 00:01:26.720
so we probably want to show our modal but I can simply add another if check and see if this has an attribute

19
00:01:26.810 --> 00:01:30.110
of opened now because if that is now available,

20
00:01:30.110 --> 00:01:37.310
then we know it has been added and then I know I want to change the styling, to set the opacity to 1

21
00:01:37.700 --> 00:01:39.880
and to set pointer events to all,

22
00:01:39.890 --> 00:01:46.710
so to react to two clicks on my backdrop and my modal again and there are a couple of ways of doing that.

23
00:01:46.960 --> 00:01:57.720
One thing we can do is we can access our shadow root and there of course, query for our backdrop

24
00:01:59.240 --> 00:02:06.890
and set the style of the backdrop and here, simply add opacity or set opacity to one and then also the

25
00:02:06.890 --> 00:02:09.140
style of the backdrop pointer

26
00:02:09.170 --> 00:02:18.110
events should be set to all to react to all clicks on the backdrop. And now we do exactly the same here

27
00:02:19.430 --> 00:02:27.020
for our modal, so there we also set the opacity to one and the pointer events to all.

28
00:02:27.060 --> 00:02:34.650
And if you save that and you reload that page and you click that button, indeed both shows up here and

29
00:02:34.650 --> 00:02:38.580
now we can't click this button here anymore because the pointer events are on,

30
00:02:38.670 --> 00:02:42.190
we now catch any clicks with the backdrop and with the modal.

31
00:02:42.620 --> 00:02:44.760
This is one possible way of doing this,

32
00:02:44.760 --> 00:02:47.050
there are other possible ways too

33
00:02:47.340 --> 00:02:49.860
but I will actually comment this out.

34
00:02:49.980 --> 00:02:54.710
It might seem like the obvious way of reacting to the opened attribute

35
00:02:54.960 --> 00:03:04.080
but if all you want to do is change some styling, then there is a way easier approach to do that, to get

36
00:03:04.080 --> 00:03:04.960
there.

37
00:03:05.190 --> 00:03:08.520
You don't need attributeChangedCallback for that,

38
00:03:08.520 --> 00:03:10.280
you don't need to listen to these changes

39
00:03:10.290 --> 00:03:13.390
even, so I'll comment all of that out.

40
00:03:13.410 --> 00:03:18.720
It's nice knowing that and you wouldn't need that if you had any other logic you want to execute like start

41
00:03:18.720 --> 00:03:19.380
a timer,

42
00:03:19.380 --> 00:03:25.470
change some text, add an element but if you just want to change some styles, you can do that with CSS

43
00:03:25.470 --> 00:03:32.220
only because what happens when the opened attribute is added to our tag here?

44
00:03:33.180 --> 00:03:35.020
Well then it looks like this here,

45
00:03:35.080 --> 00:03:35.670
right,

46
00:03:35.710 --> 00:03:38.090
our tag and then the opened attribute

47
00:03:38.400 --> 00:03:43.340
and you might remember that in CSS, there are attributes selectors.

48
00:03:43.770 --> 00:03:50.940
So we can simply write a CSS rule that changes the style when the opened attribute is available on

49
00:03:50.970 --> 00:03:54.470
our root element, on our host element.

50
00:03:54.480 --> 00:03:58.440
So what I'll do is I'll add a new rule here,

51
00:03:59.330 --> 00:04:06.490
:host with the condition that the opened attribute is there and this is all I need to write for this,

52
00:04:06.500 --> 00:04:12.980
this now means for the host element which is our custom tag, when the opened attribute is available

53
00:04:13.070 --> 00:04:16.640
and this is the normal attribute syntax you know from CSS,

54
00:04:16.850 --> 00:04:22.580
then I want to change this style and I want to change the style of my backdrop, so I can still combine

55
00:04:22.580 --> 00:04:25.870
the selectors and this just means select the backdrop

56
00:04:25.970 --> 00:04:32.660
if my host has the opened attribute and then I want to set the opacity to one and I want to set pointer

57
00:04:32.660 --> 00:04:33.980
events to all

58
00:04:36.770 --> 00:04:47.720
and I can now of course do the same for my modal by simply repeating this with #modal. And with

59
00:04:47.780 --> 00:04:53.530
this change in place, please keep in mind that I commented out my attributeChangedCallback,

60
00:04:53.570 --> 00:05:00.350
so with this change in place up here, we can go back and reload our page and still click that button and

61
00:05:00.350 --> 00:05:02.150
see the modal and the backdrop

62
00:05:02.150 --> 00:05:05.230
and this is now the more elegant way of solving this

63
00:05:05.330 --> 00:05:12.350
if you only need to change styles. If you need it to do anything else, like add an HTML element, then of

64
00:05:12.350 --> 00:05:18.650
course you would need to listen to that and then run whichever logic, add whichever element you want

65
00:05:18.650 --> 00:05:21.090
to add in your attributeChangedCallback.
