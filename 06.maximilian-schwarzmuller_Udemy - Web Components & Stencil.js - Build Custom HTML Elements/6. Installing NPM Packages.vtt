WEBVTT
1
00:00:02.450 --> 00:00:07.490
So back in our deployment project with the different demos, let me show it to you

2
00:00:07.490 --> 00:00:14.240
first of all in the Node project and yes, there we already use our component, we manually copied it into

3
00:00:14.320 --> 00:00:15.920
the scripts folder,

4
00:00:15.920 --> 00:00:19.510
now let me show you how you could install it from npm.

5
00:00:19.580 --> 00:00:25.100
There you could now simply run npm install --save and then that name you chose for your package,

6
00:00:25.280 --> 00:00:27.800
uc-components for example

7
00:00:29.170 --> 00:00:32.680
and make sure you unpublished your package after playing around with it here

8
00:00:32.770 --> 00:00:37.570
if you don't want to leave it published and open to the public on npm which you especially should not

9
00:00:37.570 --> 00:00:42.080
if there is any sensitive code in there or anything you don't want to share with the public.

10
00:00:42.400 --> 00:00:44.100
So now I installed it here,

11
00:00:44.280 --> 00:00:48.160
it gets added as a dependency here with the latest version I published

12
00:00:48.280 --> 00:00:53.420
and now we could import it here but we want to load it in the front-end not on the back-end.

13
00:00:53.500 --> 00:00:56.900
So importing it would be kind of difficult, we would have to mark

14
00:00:56.960 --> 00:01:03.640
Node modules as a static folder and therefore, we would probably end up dragging it into our own scripts

15
00:01:03.640 --> 00:01:04.810
folder anyways

16
00:01:04.810 --> 00:01:07.300
but it's nice to see how we can install it.

17
00:01:07.360 --> 00:01:13.450
This will be more useful if we do it in one of our front-end projects where all the Node modules will

18
00:01:13.450 --> 00:01:18.940
actually be bundled together by some build tool and we'll end up with a project where all of that is

19
00:01:18.940 --> 00:01:20.700
neatly packed together.

20
00:01:20.710 --> 00:01:25.140
So for that, let's start with Angular in the next lecture.
