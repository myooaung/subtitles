WEBVTT
1
00:00:02.270 --> 00:00:09.200
We added our shadow DOM and this changed things by a lot. It is the right way to go but we're now

2
00:00:09.200 --> 00:00:17.180
missing our text we had there initially and we'll now dive into a feature called templates to define

3
00:00:17.240 --> 00:00:23.900
our base HTML structure of this HTML element, of our custom element and to later also bring

4
00:00:23.900 --> 00:00:30.820
back that text we passed between the opening and closing tags of our custom element.

5
00:00:30.930 --> 00:00:34.820
Now for templates, we got two alternatives.

6
00:00:34.820 --> 00:00:43.040
The first alternative for adding a template to our custom element is to go into our HTML document and

7
00:00:43.040 --> 00:00:50.410
there, we can add a new element, the template element. This is a HTML element built into the browser,

8
00:00:50.420 --> 00:00:52.010
understood by the browser

9
00:00:52.220 --> 00:00:58.740
and the important thing here is that this element is not rendered automatically.

10
00:00:58.760 --> 00:01:10.900
Now here we can take our question mark and add it in there like this, we had it in the span so let's wrap

11
00:01:10.900 --> 00:01:15.870
it in a span here too, so like that.

12
00:01:15.870 --> 00:01:21.170
Now we have a template which in the end is just that span with the questionmark inside of it.

13
00:01:21.180 --> 00:01:29.730
So this is now our template and now we want to use that template as a blueprint for the HTML content

14
00:01:29.790 --> 00:01:32.420
that makes up our custom element.

15
00:01:32.460 --> 00:01:39.780
So previously, we simply created that HTML content in the connected callback and we happened to

16
00:01:39.780 --> 00:01:42.970
have a very simple HTML template for our tooltip,

17
00:01:42.990 --> 00:01:48.600
we only have this span with the questionmark being added but it's easy to imagine more complex custom

18
00:01:48.600 --> 00:01:53.210
elements, like a video player which has dozens of buttons and so on.

19
00:01:53.370 --> 00:01:59.880
Now to use that content of the template in our web component now, I'll first of all give this template

20
00:01:59.880 --> 00:02:09.670
an ID of tooltip-template for example and now in the tooltip.js file, in the constructor where we

21
00:02:09.670 --> 00:02:16.080
can access the normal DOM, just not the DOM of this tooltip but we don't need that here, there

22
00:02:16.420 --> 00:02:25.850
I will now get my template and I'll store it in a constant by using the document query selector, again accessing

23
00:02:25.850 --> 00:02:33.980
the normal page DOM not the DOM of this custom component and there, I will use the ID selector to

24
00:02:33.980 --> 00:02:43.050
select the tooltip-template, so I'm using that ID which I just added to my template. Now I get access

25
00:02:43.050 --> 00:02:49.490
to this template and now I want to basically copy the code I set up in that template,

26
00:02:49.560 --> 00:02:57.090
so this span in this case here and use it as a template for my custom component and for that, I will

27
00:02:57.090 --> 00:03:05.220
simply access my shadow root which is available because I attach it to the shadow DOM and there, I will

28
00:03:05.220 --> 00:03:07.220
call append child.

29
00:03:07.470 --> 00:03:12.960
I can do that here because I can already access the shadow DOM even before the element has been rendered

30
00:03:12.960 --> 00:03:19.460
to the real DOM because the shadow DOM remember, is kind of abstracted away from the real DOM anyways,

31
00:03:19.560 --> 00:03:22.530
so this is available in the constructor

32
00:03:22.850 --> 00:03:30.050
and now I will append a child here and the child is my template and there, we can access a content property

33
00:03:30.080 --> 00:03:37.980
to access basically the content inside of the template and on the content, we can call cloneNode

34
00:03:38.480 --> 00:03:44.870
and there you have to pass a boolean indicating whether you want to do a deep clone or a shallow clone.

35
00:03:45.210 --> 00:03:49.420
A deep clone means that you would clone any nested elements in there too,

36
00:03:49.490 --> 00:03:53.850
so if you had like a h1 tag inside of that span, you would clone that too

37
00:03:53.890 --> 00:04:01.030
if you set the argument to true, if you set it to false, you will only clone the top level of elements.

38
00:04:01.040 --> 00:04:06.300
Now I will perform a deep clone here by setting this to true

39
00:04:06.480 --> 00:04:10.070
and with that if I now save that

40
00:04:10.200 --> 00:04:15.030
and we reload the page, we see double quotation marks here actually.

41
00:04:15.090 --> 00:04:20.670
The reason for that being that we still have our own code in there to add another questionmark,

42
00:04:20.730 --> 00:04:22.280
so we should remove that

43
00:04:22.530 --> 00:04:27.150
and in addition, I will just change this a little bit down there, here

44
00:04:27.480 --> 00:04:33.670
I will set my tooltip icon equal to this shadow root

45
00:04:33.720 --> 00:04:39.810
and now here I want to find that span by simply adding a query selector because we can query the shadow DOM

46
00:04:39.810 --> 00:04:42.670
just as we can query the normal DOM and I'll

47
00:04:42.690 --> 00:04:47.970
find that span there. Now with that if I save that and we reload this page,

48
00:04:48.000 --> 00:04:49.720
we have one questionmark only

49
00:04:49.830 --> 00:04:52.040
but I can still hover over that.

50
00:04:52.080 --> 00:04:58.660
So now we are using our template, our HTML template here. Now this is one way of doing it

51
00:04:58.860 --> 00:05:01.500
but of course this has a couple of drawbacks,

52
00:05:01.500 --> 00:05:09.180
for example this web component now requires some content to be added to our HTML file where are

53
00:05:09.180 --> 00:05:12.300
we in the end  just want to use that web component

54
00:05:12.300 --> 00:05:15.340
and of course we're still losing that text here.

55
00:05:15.360 --> 00:05:20.370
Now we can fix that text even with this approach but I will also show you an alternative

56
00:05:20.370 --> 00:05:26.880
to this approach because it would be nice to have all the web component being composed in our Javascript

57
00:05:26.880 --> 00:05:32.140
file here, so that we don't have to add a template to the HTML code.

58
00:05:32.140 --> 00:05:37.190
And I will show you both this solution and a solution for our lost text here

59
00:05:37.320 --> 00:05:38.490
over the next lectures.
