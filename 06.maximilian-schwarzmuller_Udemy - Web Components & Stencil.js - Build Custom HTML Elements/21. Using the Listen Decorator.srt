1
00:00:02,180 --> 00:00:09,160
We're emitting a custom event and we're listening to it here in our web application. How can we now do that

2
00:00:09,160 --> 00:00:13,900
directly from inside another component though and that would not be an uncommon use case?

3
00:00:14,050 --> 00:00:20,980
Let's say you have a set of web components you're sharing and each of them should work standalone but

4
00:00:21,130 --> 00:00:26,680
you still can add some utility functionality to make sure they can work together seamlessly in case

5
00:00:26,720 --> 00:00:28,870
they are used both on the same page

6
00:00:28,930 --> 00:00:35,050
and that is exactly what I want to have here. When we select a stock here in the stock finder,

7
00:00:35,050 --> 00:00:39,510
I want to automatically update it here in the stock price component.

8
00:00:39,520 --> 00:00:46,050
Now of course I could update the attribute here from inside this code since I already have the symbol,

9
00:00:46,060 --> 00:00:48,200
it's an event detail here as you learned

10
00:00:48,490 --> 00:00:49,840
but this is not what I want to do,

11
00:00:50,050 --> 00:00:53,680
I want to listen to that event from inside that other component

12
00:00:53,890 --> 00:00:55,710
and how can we do that now?

13
00:00:56,140 --> 00:01:02,590
Now for this, we'll go into the stock price which is where I went to listen and there, I will first of

14
00:01:02,590 --> 00:01:11,120
all add a new method. I'll do that here below my lifecycle hooks above my fetchStockPrice method and I'll

15
00:01:11,120 --> 00:01:17,850
name this onStock symbol selected and here,

16
00:01:18,940 --> 00:01:27,690
I will get event data of type custom event, custom event has a built-in type and there, I can check if

17
00:01:27,690 --> 00:01:40,240
event detail is set, if there is any data in event detail and if event detail is unequal to this stock symbol,

18
00:01:40,250 --> 00:01:41,870
so the current stock symbol,

19
00:01:41,870 --> 00:01:48,650
if that is the case, then I want to fetch the stock price for event detail which should be assembled

20
00:01:48,650 --> 00:01:50,700
in.

21
00:01:50,710 --> 00:01:55,420
Now the question just is, how do we make sure that this gets triggered whenever the stock symbol changes,

22
00:01:55,510 --> 00:02:02,170
whenever we select a stock symbol in that other component? We do this by adding a special decorator, the listen

23
00:02:02,200 --> 00:02:10,200
decorator which needs to be imported from @stencil/core. The listen decorator allows us to listen to

24
00:02:10,260 --> 00:02:15,490
any events emitted. You pass the event name here between the parentheses,

25
00:02:15,630 --> 00:02:18,650
in my case that is ucSymbolSelected

26
00:02:18,840 --> 00:02:19,800
right,

27
00:02:19,800 --> 00:02:22,090
that is the name we're emitting here

28
00:02:22,260 --> 00:02:29,280
in that other component. Now whenever this is emitted, onStockSymbolSelected should execute.

29
00:02:29,290 --> 00:02:41,830
So here I'll just log StockSymbolSelected and maybe output that symbol plus events detail. If I now

30
00:02:41,950 --> 00:02:45,600
save this and I reload,

31
00:02:45,790 --> 00:02:54,570
if I search for BMW here, clear the console and I select this first element, we see nothing in the console

32
00:02:54,690 --> 00:02:56,700
and it doesn't change up there, right.

33
00:02:57,940 --> 00:03:00,830
The reason for that is that by default,

34
00:03:00,940 --> 00:03:08,260
listen listens for events emitted inside of the render function, so of the DOM, of the shadow DOM belonging

35
00:03:08,260 --> 00:03:09,320
to this component

36
00:03:09,400 --> 00:03:12,660
and obviously we're not using the stock finder component in here,

37
00:03:12,730 --> 00:03:19,190
we're using it as a sibling to the stock price, not inside of the DOM of the stock price component. So

38
00:03:19,220 --> 00:03:22,410
to ensure that we can still listen to this,

39
00:03:22,760 --> 00:03:30,200
I need to add body: in here in front of the event name, this tells stencil that it should listen for

40
00:03:30,200 --> 00:03:31,410
this globally

41
00:03:31,850 --> 00:03:40,010
and if our other event bubbles up to DOM tree, all the way to the body element and you might remember that events

42
00:03:40,010 --> 00:03:45,050
can bubble up in Javascript and in the stock finder, we set bubbling to true,

43
00:03:45,110 --> 00:03:52,940
so it will indeed bubble up, then at some point if not stopped, it will reach the body Node and then we

44
00:03:52,940 --> 00:03:55,390
can listen to that with this prefix and

45
00:03:55,400 --> 00:03:58,010
this only works with the body by the way.

46
00:03:58,010 --> 00:04:09,280
So now with that if we save again, let me enter BMW and select BMW here and you see the price updates.

47
00:04:09,390 --> 00:04:11,470
Now to also update the ticker up there,

48
00:04:12,480 --> 00:04:19,890
all I need to do is in the stock price component, we'll also update the ticker. Now to update that value,

49
00:04:19,890 --> 00:04:23,500
we just have to change our logic here a little bit in the listen function,

50
00:04:23,620 --> 00:04:29,630
I'll set this stock symbol equal to event detail here.

51
00:04:29,760 --> 00:04:34,320
Remember that we have a watcher for the stock symbol property up there,

52
00:04:34,470 --> 00:04:38,580
so this will fire whenever we change this to a new value and it will then automatically fetch the new

53
00:04:38,580 --> 00:04:50,060
value from the API. Here by the way I should also set the validity to true and with that, if we now reload this

54
00:04:50,120 --> 00:04:56,780
and I search for BMW again, if I select BMW, it gets updated here and the price as well.

55
00:04:56,780 --> 00:05:03,050
So now we have this cross component communication with the help of custom events and the very helpful

56
00:05:03,110 --> 00:05:07,740
listen decorator which does not just work with custom vendors

57
00:05:07,740 --> 00:05:08,430
by the way,

58
00:05:08,430 --> 00:05:11,070
you can also listen to built-in events like click events.

59
00:05:11,160 --> 00:05:14,050
It just might be hard to identify the right element,

60
00:05:14,160 --> 00:05:20,790
so therefore for built-in events or whenever you're listening to the event directly thrown from inside

61
00:05:20,830 --> 00:05:22,670
the rendered JSX code,

62
00:05:22,680 --> 00:05:27,330
I personally prefer to use onSubmit and onInput and so on.

63
00:05:27,330 --> 00:05:32,580
It's also worth noting that for onSubmit for example it wouldn't even work if you listened to the summit

64
00:05:32,610 --> 00:05:38,070
event with the @listen decorator because the listen decorator basically waits for the event to bubble

65
00:05:38,070 --> 00:05:40,320
up all the way to the host element

66
00:05:40,470 --> 00:05:45,600
and that would already lead to the default behavior of the form element being executed which is to reload

67
00:05:45,600 --> 00:05:50,880
the page or to send a request and then reload the page upon the submit event. For other events like clicking

68
00:05:51,210 --> 00:05:51,800
or input,

69
00:05:51,810 --> 00:05:57,450
it would work but then again, it might be hard to find out on which exact element that event occurred

70
00:05:57,690 --> 00:06:00,960
or to which elements you want to restrict your @listen decorator.

71
00:06:00,960 --> 00:06:03,530
So I mostly use it for custom events.
