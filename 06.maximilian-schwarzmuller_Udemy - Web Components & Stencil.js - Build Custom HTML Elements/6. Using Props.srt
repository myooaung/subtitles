1
00:00:02,400 --> 00:00:07,680
We added styling to the side drawer, let's now make sure that we can configure it from outside, that we

2
00:00:07,680 --> 00:00:10,290
can pass data in from outside

3
00:00:10,740 --> 00:00:17,700
and for this, I want to show various techniques and various things because stencil has a lot of flexibility

4
00:00:17,700 --> 00:00:19,430
when it comes to that.

5
00:00:19,470 --> 00:00:26,400
Now let's say we want to have a title in our drawer, so I will actually add a header section there, by

6
00:00:26,400 --> 00:00:31,590
the way, you can always just type the name of a tag in Visual Studio Code at least and then hit tab

7
00:00:31,590 --> 00:00:36,530
to auto-complete that and the header here should have a h1 tag in there

8
00:00:36,540 --> 00:00:44,580
but I want to set this dynamically, I want to pass this in as a property and attribute for this component.

9
00:00:44,580 --> 00:00:52,490
I also want to have my main section in here, so we can use a main element here and in that section,

10
00:00:52,590 --> 00:00:57,710
I want to use a slot and slots are supported in stencil as well.

11
00:00:57,840 --> 00:01:03,030
By the way a little convenience feature, if you have an empty opening and closing tag like here, you can

12
00:01:03,030 --> 00:01:07,320
also use one tag only and self-close it like this,

13
00:01:07,320 --> 00:01:09,480
not required but possible.

14
00:01:09,480 --> 00:01:12,090
Now let's focus on the slot in the second step,

15
00:01:12,090 --> 00:01:18,700
how about this property attribute which I want to display between the h1 tags here? Now with vanilla

16
00:01:18,720 --> 00:01:23,580
web components, we had to manage all those property attribute stuff on our own.

17
00:01:23,640 --> 00:01:28,830
For example if we had attributes that can be changed from outside and that is definitely possible for

18
00:01:28,830 --> 00:01:35,190
almost all attributes if people change them programmatically, then we had to set up the attributeChangedCallback

19
00:01:35,240 --> 00:01:37,080
and so on.

20
00:01:37,080 --> 00:01:38,500
Now that's a lot of extra work

21
00:01:38,500 --> 00:01:42,440
and the more attributes we have, the more complex that code becomes.

22
00:01:42,740 --> 00:01:43,590
In stencil,

23
00:01:43,650 --> 00:01:44,630
this is easier.

24
00:01:44,880 --> 00:01:49,380
We can add a property to our class here by simply adding it directly in the class,

25
00:01:49,440 --> 00:01:55,490
that is a feature which is not supported in vanilla Javascript classes but it is supported in Typescript

26
00:01:56,130 --> 00:01:57,890
and I can name this however I want,

27
00:01:58,020 --> 00:01:59,210
I can maybe name it

28
00:02:01,780 --> 00:02:07,420
title. Now we use Typescript here and in Typescript, it's a good practice to be clear about the type a variable

29
00:02:07,420 --> 00:02:14,020
or a property holds and you assign such a type by adding a colon after the name of the variable or

30
00:02:14,170 --> 00:02:15,650
in this case, the property

31
00:02:15,850 --> 00:02:16,900
and then you set a type,

32
00:02:16,900 --> 00:02:19,120
in this case this is a string.

33
00:02:19,120 --> 00:02:23,110
Now we're telling Typescript that we will have a title property here,

34
00:02:23,230 --> 00:02:27,710
initially it's undefined as you can tell which will hold a string in the end

35
00:02:28,150 --> 00:02:35,090
and then if we want to output this between the h1 tags, we simply add single curly braces in here,

36
00:02:35,200 --> 00:02:42,430
that is a feature provided by JSX, it allows us to basically output normal Javascript content between

37
00:02:42,460 --> 00:02:46,300
our to-be-transformed JSX statements

38
00:02:46,690 --> 00:02:49,640
and there, I point at this property.

39
00:02:49,960 --> 00:02:51,820
Now this is a class property,

40
00:02:51,820 --> 00:02:53,390
so we don't reference it with

41
00:02:53,460 --> 00:02:58,910
title, that would try to get a variable named title defined in the render method,

42
00:02:59,140 --> 00:03:04,310
instead it's this title because it's part of this class.

43
00:03:04,390 --> 00:03:11,320
This will generally work, it will give us a property named title but when we try to set this from outside,

44
00:03:11,620 --> 00:03:13,600
stencil will not pick it up,

45
00:03:13,720 --> 00:03:19,780
it will not listen to an attribute named title or to changes to such an attribute and even if you set

46
00:03:19,780 --> 00:03:24,660
it programmatically from outside, stencil will not call the render method again.

47
00:03:24,700 --> 00:03:28,560
Instead what you have to do is you have to add a special decorator here again,

48
00:03:28,750 --> 00:03:33,760
this time it's not the component decorator but the prop decorator.

49
00:03:33,760 --> 00:03:39,740
You also call this like a function and you need to import it from @stencil/core,

50
00:03:39,760 --> 00:03:42,170
my IDE added the import automatically,

51
00:03:42,190 --> 00:03:45,100
make sure you do it manually in case this was not the case,

52
00:03:45,130 --> 00:03:51,600
so prop needs to be imported from @stencil/core. Prop is a special decorator,

53
00:03:51,600 --> 00:03:53,660
we don't need to configure it,

54
00:03:53,670 --> 00:03:57,410
there are some configurations we can pass but we don't need them right now.

55
00:03:57,770 --> 00:04:01,280
Out of the box when we add it, it does one important thing,

56
00:04:01,530 --> 00:04:11,280
stencil will now watch for attributes named title on our component and if we set or change such an attribute

57
00:04:11,550 --> 00:04:20,040
or if we directly programmatically set or change the title property from outside Javascript for example,

58
00:04:20,580 --> 00:04:27,930
then stencil will detect this change and it will automatically rerun the render method and it will do

59
00:04:27,930 --> 00:04:33,500
so in a very efficient manner so that it does not re-render the entire DOM that was generated

60
00:04:33,510 --> 00:04:34,300
based on that

61
00:04:34,530 --> 00:04:37,220
but only the parts of the DOM that changed.

62
00:04:37,230 --> 00:04:43,240
So in this case, it would only re-render this part of the DOM when we change or set the title because this

63
00:04:43,250 --> 00:04:47,920
is the only place where we use the title. This is what the prop decorator does,

64
00:04:47,940 --> 00:04:49,930
it adds an automatic watcher

65
00:04:49,950 --> 00:04:57,000
you could say. And with that, we can go into the index.html file and indeed add the title here and set

66
00:04:57,000 --> 00:04:59,890
it to main menu for example,

67
00:04:59,910 --> 00:05:09,110
so to a string, main menu. If I now save this and we go back, we indeed see main menu here because we

68
00:05:09,230 --> 00:05:16,480
set this attribute here and just to show that programmatic part too, if I add script tags in my index.html

69
00:05:16,570 --> 00:05:21,200
file and that is therefore Javascript code and not Typescript code because this will now not

70
00:05:21,200 --> 00:05:27,630
be picked up by stencil, if I do that and I get access to my custom element here,

71
00:05:27,770 --> 00:05:37,010
so to the side drawer with document query selector and now again, I can just use my own tag that does

72
00:05:37,010 --> 00:05:42,860
work in exactly the same way it did with vanilla components because stencil spits out of a vanilla web

73
00:05:42,860 --> 00:05:49,970
component, then I can also set the title here to it changed

74
00:05:50,170 --> 00:05:54,580
and that becomes even more interesting if we wrap this into a set

75
00:05:54,580 --> 00:06:01,000
timeout call to do this after a given amount of time, let's say after three seconds, then we want to execute

76
00:06:01,000 --> 00:06:03,920
this code and this will have one important effect.

77
00:06:04,060 --> 00:06:09,730
If this reloads, we have main menu but after three seconds, it changed

78
00:06:09,730 --> 00:06:12,420
and this proves that stencil watches this

79
00:06:12,520 --> 00:06:16,720
and please note that here, I'm not changing the attribute on the element,

80
00:06:16,720 --> 00:06:22,840
that indeed is still the same if we inspect it, the attribute here is still main menu

81
00:06:23,860 --> 00:06:25,780
but we changed it programmatically.

82
00:06:25,780 --> 00:06:29,440
Of course we could have changed the attribute though and it would have worked as well.

83
00:06:29,500 --> 00:06:37,780
If I comment this out and I set side drawer set attribute and I set the title attribute to it changed

84
00:06:37,840 --> 00:06:44,170
via attribute here and I save this and reload it,

85
00:06:44,220 --> 00:06:47,270
then we see it changed to this text after three seconds

86
00:06:47,340 --> 00:06:54,810
and now of course the attribute here updated as well because well, we updated it here. So we can do both

87
00:06:54,960 --> 00:06:59,940
and that shows us how we can interact with that and what the prop decorator does.
