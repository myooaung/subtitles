WEBVTT
1
00:00:02.170 --> 00:00:08.150
With that if we have another look at this stencil project, we see there is a github folder which you

2
00:00:08.150 --> 00:00:09.640
can ignore for now, 

3
00:00:09.740 --> 00:00:14.240
there is node modules folder which holds all the dependencies this project needs

4
00:00:14.240 --> 00:00:17.270
and these are really just dependencies of the stencil compiler,

5
00:00:17.300 --> 00:00:24.740
so basically packages the compiler uses to compile our code. The source folder then holds our code,

6
00:00:24.960 --> 00:00:30.590
here we will store the files for the components we create and then we've got some config files,

7
00:00:30.620 --> 00:00:38.540
most importantly package.json, this file here has a couple of scripts we can execute to for example

8
00:00:38.540 --> 00:00:42.900
generate our web components and it also holds our dependencies

9
00:00:42.910 --> 00:00:49.480
and here we really only have one and that is the stencil package. Now in the source folder,

10
00:00:49.480 --> 00:00:53.380
we get this index.html file which we can use to test our web components

11
00:00:53.380 --> 00:00:58.410
and there you see we have an import, this build folder doesn't actually exist here,

12
00:00:58.450 --> 00:01:04.050
it is generated on the fly by stencil when we run a certain command which I'll show you in a second

13
00:01:04.250 --> 00:01:11.470
and here, we then use our components just as we did it in our other project where I also just used my component

14
00:01:12.970 --> 00:01:18.190
and we write the code for the components in the components folder and stencil automatically picks up

15
00:01:18.280 --> 00:01:22.880
any components we add here, registers them and allows us to use them,

16
00:01:22.900 --> 00:01:26.810
we don't even need to add an import in the index.html file manually,

17
00:01:26.860 --> 00:01:29.650
stencil will do that for us in the future.

18
00:01:29.650 --> 00:01:34.900
Now a component in stencil looks a bit differently than a component did when we wrote it with vanilla

19
00:01:34.930 --> 00:01:40.170
Javascript. As you can tell, it consists of a couple of files actually. 

20
00:01:40.240 --> 00:01:42.070
Now you can ignore this

21
00:01:42.070 --> 00:01:42.560
e2e.ts

22
00:01:42.610 --> 00:01:45.460
and that spec.ts file, we can actually delete them,

23
00:01:45.610 --> 00:01:50.310
that is used for unit testing and end-to-end testing, something I'll not cover here.

24
00:01:50.410 --> 00:01:58.300
The meat of our component lives in this file, in this any component name you want, .tsx file

25
00:01:58.870 --> 00:02:00.630
and this uses Typescript,

26
00:02:00.700 --> 00:02:03.660
for example this decorator here is a Typescript feature,

27
00:02:03.700 --> 00:02:08.890
it would not work in vanilla Javascript, at least not in the current version

28
00:02:09.010 --> 00:02:13.750
and we also have a CSS file here and that simply is a little convenience feature of stencil, we

29
00:02:13.750 --> 00:02:20.080
can outsource the styles for our component into a separate file where we can get nice CSS auto-completion

30
00:02:20.080 --> 00:02:21.520
support and so on

31
00:02:21.910 --> 00:02:27.970
instead of putting our CSS code into such a template here where we might not even get good IDE

32
00:02:27.990 --> 00:02:35.120
support and then we have a more declarative way of creating our components. On first sight,

33
00:02:35.140 --> 00:02:37.220
this looks totally different than our component,

34
00:02:37.360 --> 00:02:43.270
for example we don't extend the HTML element, that is because stencil will do that for us automatically

35
00:02:43.930 --> 00:02:47.420
and we also have no innerHTML template

36
00:02:47.650 --> 00:02:52.990
but in a stencil component, we have a render function and this returns something which looks like HTML

37
00:02:53.380 --> 00:03:00.170
which in the end is exactly our template, our HTML code for this web component.

38
00:03:00.370 --> 00:03:09.430
So basically what we had in here, in our innerHTML part, this part, that is what we render in stencil.

39
00:03:10.240 --> 00:03:15.280
And this HTML in Javascript code here which might look totally new to you,

40
00:03:15.340 --> 00:03:20.960
it might also not if you know ReactJS but otherwise, it probably does look very strange to you,

41
00:03:21.190 --> 00:03:23.440
this is a special feature,

42
00:03:23.680 --> 00:03:27.740
JSX is the name, it looks like HTML in Javascript, in the end

43
00:03:27.760 --> 00:03:33.970
this does not run in the browser but there are tools and stencil includes such a tool that in the

44
00:03:33.970 --> 00:03:36.830
end compile that to normal Javascript.

45
00:03:37.090 --> 00:03:43.330
It was first introduced by ReactJS which is a library you can use for building reactive web

46
00:03:43.330 --> 00:03:48.140
applications with Javascript and in the end as I mentioned, it is normal Javascript,

47
00:03:48.190 --> 00:03:54.280
it is compiled to Javascript or to commands that will actually render the appropriate HTML content

48
00:03:54.280 --> 00:04:01.580
to the screen but that will happen behind the scenes and you as a developer can just use this HTML

49
00:04:01.590 --> 00:04:07.960
in Javascript syntax and you don't need to worry about manually writing code that accesses the DOM and

50
00:04:07.960 --> 00:04:09.930
writes your content into the DOM,

51
00:04:09.940 --> 00:04:16.830
that will be handled behind the scenes. Stencil.js simply contains a tool that parses this code

52
00:04:16.840 --> 00:04:24.070
here and converts it to Javascript that will then write it into the real DOM and it has a couple of

53
00:04:24.070 --> 00:04:25.760
convenience features included,

54
00:04:25.900 --> 00:04:31.570
for example it has a couple of features that will automatically rerun this render function when you

55
00:04:31.570 --> 00:04:34.720
change some input to the render functions.

56
00:04:34.750 --> 00:04:39.200
So in this case, we got a couple of props here which are basically properties of this component

57
00:04:39.370 --> 00:04:44.610
and if any of these changes, then stencil will automatically rerun render and therefore update the

58
00:04:44.610 --> 00:04:46.280
DOM automatically

59
00:04:46.420 --> 00:04:52.090
and what I mean with this is it will output the code that gives us a web component that has all the

60
00:04:52.090 --> 00:04:57.180
code in it to automatically watch such properties and then update the DOM

61
00:04:57.430 --> 00:05:04.500
and this will probably become clearer if we actually turn this stencil component into a real web component

62
00:05:05.050 --> 00:05:13.650
with npm run build. Execute this command in the terminal of this project, so you can simply open an integrated

63
00:05:13.660 --> 00:05:15.230
terminal of your IDE

64
00:05:15.310 --> 00:05:22.240
as I did here or use your normal system terminal and navigate into this project folder and that in the

65
00:05:22.240 --> 00:05:31.750
project folder, run npm run build and this will now generate a web component based on this TSX file

66
00:05:31.870 --> 00:05:36.690
and if you have multiple components, it would generate component files for all of them and thereafter,

67
00:05:36.700 --> 00:05:41.770
you'll have this dist folder and in there, you'll have a bunch of files and I will show you how

68
00:05:41.770 --> 00:05:46.710
to use them when you want to start using web components in your project later

69
00:05:46.960 --> 00:05:52.390
but what you can simply do as you can go into that my-component folder and click on that my-component.html

70
00:05:52.430 --> 00:05:53.380
.

71
00:05:53.400 --> 00:05:59.800
Javascript file here and there, this in the end is the output of the stencil compiler.

72
00:05:59.800 --> 00:06:06.830
Obviously this is not readable at all but this is really just a native web component

73
00:06:09.030 --> 00:06:14.540
and you can prove that by searching for HTML element in there and you will see extends HTML

74
00:06:14.540 --> 00:06:20.000
element and that might look familiar to you because that is of course what we did in our own component

75
00:06:20.270 --> 00:06:21.340
as well.

76
00:06:21.470 --> 00:06:27.110
So we get this optimized and it's good that this is small because this makes it run very fast.

77
00:06:27.110 --> 00:06:32.720
We get this optimized component here which we can simply start using in our HTML files

78
00:06:32.720 --> 00:06:35.480
and again, I will show you how to start using later.

79
00:06:35.540 --> 00:06:37.770
For now, we can just take it as it is,

80
00:06:37.880 --> 00:06:43.790
stencil will build such native web components for us and it gives us a nicer syntax for doing so

81
00:06:43.790 --> 00:06:49.790
and obviously in the next modules, I will walk you through this syntax step-by-step to teach you stencil

82
00:06:50.180 --> 00:06:53.920
and that will then give us a much nicer way of creating web components.
