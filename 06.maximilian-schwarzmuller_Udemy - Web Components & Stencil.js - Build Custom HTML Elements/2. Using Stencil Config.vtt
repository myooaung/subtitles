WEBVTT
1
00:00:02.380 --> 00:00:09.700
For that, let's start in our stencil project here and in this stencil project, let's first of all have

2
00:00:09.700 --> 00:00:12.690
a look at that stencil config file.

3
00:00:13.060 --> 00:00:20.980
Now that is an important file because this file here is actually responsible for configuring how your

4
00:00:20.980 --> 00:00:25.020
stencil project or how your stencil components get built.

5
00:00:25.030 --> 00:00:29.980
I'll just quickly rerun npm install here because I deleted my Node modules folder in-between, you can just

6
00:00:29.980 --> 00:00:30.800
ignore that,

7
00:00:31.090 --> 00:00:33.970
so let's have a look at what we can set there.

8
00:00:34.000 --> 00:00:39.090
The first thing we can configure in this config object is the namespace.

9
00:00:39.100 --> 00:00:45.640
Now this namespace doesn't matter if you plan on creating a component library that you want to share,

10
00:00:45.790 --> 00:00:49.110
even if you only share it amongst your own projects,

11
00:00:49.240 --> 00:00:55.090
then you want to pick something which is kind of unique here, like udemywc

12
00:00:55.270 --> 00:00:57.620
for web components course

13
00:00:57.730 --> 00:01:04.060
and this is the pattern of how you typically name your namespace. As a next step, you add your output

14
00:01:04.090 --> 00:01:06.880
targets and you can't enter anything there,

15
00:01:07.090 --> 00:01:16.570
instead stencil knows two different types, dist and www. Now the www type spits out a full project which you

16
00:01:16.570 --> 00:01:22.630
could deploy to a static host and that is useful when you build your entire Front-End out of stencil

17
00:01:22.630 --> 00:01:24.500
components and only out of that,

18
00:01:24.550 --> 00:01:30.480
so when you use your stencil components as a replacement for frameworks like React or Angular.

19
00:01:30.640 --> 00:01:35.480
Now I don't want to have this kind of output here so I'll comment this out, instead

20
00:01:35.500 --> 00:01:43.840
here I will go with my dist mode and this mode or this type of project is simply a collection of components

21
00:01:43.840 --> 00:01:45.520
that you can share.

22
00:01:45.520 --> 00:01:46.880
You can also configure that,

23
00:01:46.930 --> 00:01:52.710
for example here you can add a dir item to define in which output folder

24
00:01:52.720 --> 00:01:55.150
these components should be stored in and by default,

25
00:01:55.150 --> 00:02:00.340
that folder is also named dist but you could rename it here. As an important side note,

26
00:02:00.340 --> 00:02:01.010
you can always

27
00:02:01.020 --> 00:02:07.040
stenciljs.com and there, dive into the official docs and then under tooling config,

28
00:02:07.250 --> 00:02:12.310
you will find detailed instructions on how you can configure your project and what all these config

29
00:02:12.310 --> 00:02:16.110
items do, so that can be very helpful for understanding a bit better

30
00:02:16.180 --> 00:02:17.490
what you can configure.

31
00:02:17.620 --> 00:02:20.990
I want to highlight something which they also say here though.

32
00:02:21.100 --> 00:02:29.020
In most cases, this does not need much or any customization because the default config is quite nice. 

33
00:02:29.050 --> 00:02:33.350
Now I only want to dive into one other config item and that is the bundles

34
00:02:33.550 --> 00:02:38.020
item. It's not added here and by default, you don't need it.

35
00:02:38.020 --> 00:02:45.280
Bundles allows you to define how your different components are bundled together and as you can see here,

36
00:02:45.460 --> 00:02:51.130
it takes an array of objects where each object describes one code bundle.

37
00:02:51.280 --> 00:02:58.060
Now by default, stencil will go ahead and analyze your components to detect their dependencies,

38
00:02:58.060 --> 00:03:05.230
for example stencil will detect that both the stock finder and price use the spinner component and therefore,

39
00:03:05.230 --> 00:03:12.520
it will spit out code bundles, code files which always include stock finder and spinner or stock price

40
00:03:12.520 --> 00:03:17.080
and spinner but not just one huge bundle which contains all components

41
00:03:17.080 --> 00:03:24.990
because by keeping the bundles as small as possible but as big as required, you can load and stencil will

42
00:03:25.000 --> 00:03:25.860
do that for you,

43
00:03:25.960 --> 00:03:31.430
you can load a component only when it is rendered to the DOM, so only when it is needed

44
00:03:31.630 --> 00:03:36.930
instead of loading all components upfront in the application of where you're using your component bundle.

45
00:03:37.400 --> 00:03:44.510
So you got automated code splitting built into your generated web components because they will only load the

46
00:03:44.530 --> 00:03:47.620
scripts that back them up when they really are required and

47
00:03:47.620 --> 00:03:55.030
that's a default feature baked into stencil and it determines what should go into one code package by

48
00:03:55.210 --> 00:03:57.670
the dependencies it can determine. For example

49
00:03:57.730 --> 00:04:03.820
as I mentioned, since we use uc-spinner and both stock price and stock finder, it will bundle that spinner

50
00:04:03.910 --> 00:04:08.360
into these components packages and load it together with them automatically.

51
00:04:08.410 --> 00:04:13.630
On the other hand when you load stock price or when you use stock price, stencil will not automatically

52
00:04:13.630 --> 00:04:17.430
load stock finder because these two are not really connected.

53
00:04:17.440 --> 00:04:23.070
You could force such a connection though by adding your own object here into the bundles array

54
00:04:23.970 --> 00:04:29.340
and then there you can add a components key and now name all the tags of the components that should

55
00:04:29.340 --> 00:04:35.010
be merged into one code package by stencil but only override that if you know what you're doing,

56
00:04:35.050 --> 00:04:41.100
otherwise stencil will have a smart default of trying to implement as much code splitting as possible

57
00:04:41.220 --> 00:04:46.230
because smaller code bundles of course means that your application where you use your web components

58
00:04:46.400 --> 00:04:48.160
loads up faster.

59
00:04:48.270 --> 00:04:51.110
Now that is already it about this configuration

60
00:04:51.120 --> 00:04:56.280
and again if you want to learn about all the contact items, you can dive into the official docs but the

61
00:04:56.280 --> 00:04:57.850
default should be fine.
