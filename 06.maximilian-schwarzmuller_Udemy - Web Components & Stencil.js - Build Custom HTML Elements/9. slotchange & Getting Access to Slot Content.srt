1
00:00:02,280 --> 00:00:11,740
Now with named slots explored, let's dig a bit deeper into slots and let's see how we could actually get access

2
00:00:11,740 --> 00:00:16,200
to the content we pass in our slot, in our code in the component

3
00:00:16,220 --> 00:00:20,950
and with that I don't mean get access in the sense of render it, what we do here automatically by simply

4
00:00:20,950 --> 00:00:22,030
using the slot

5
00:00:22,120 --> 00:00:29,710
but what if we would need to kind of read our list of data, our list of HTML nodes that

6
00:00:29,750 --> 00:00:31,750
gets passed into our slots?

7
00:00:32,110 --> 00:00:36,000
Now for that, let me first of all show you something else.

8
00:00:36,070 --> 00:00:40,790
After setting up my innerHTML template here,

9
00:00:40,900 --> 00:00:48,120
so in the next line after this statement basically, I want to get access to all my slots and I'll store

10
00:00:48,120 --> 00:00:49,560
them in a constant and

11
00:00:49,580 --> 00:00:55,920
we can simply query for them on our shadow root with the query selector all method and then querying

12
00:00:55,920 --> 00:01:01,500
for a slot element because this is in a normal HTML tag by which we can query of course.

13
00:01:01,500 --> 00:01:04,720
Now here, we can access our slots,

14
00:01:04,770 --> 00:01:11,790
this will basically be an array or a node list of HTML elements and we have two slots.

15
00:01:11,790 --> 00:01:13,810
The first one will be at index 0,

16
00:01:13,800 --> 00:01:15,790
the second one at index 1.

17
00:01:15,810 --> 00:01:19,270
Now let's say we want to have a look at our second slot,

18
00:01:19,280 --> 00:01:20,940
so the one with index one

19
00:01:21,120 --> 00:01:27,600
and then we can add an event listener here and the event to which we can listen is the slot change event

20
00:01:28,050 --> 00:01:34,950
and that will be triggered whenever new content arrives, which will happen at least once when our shadow

21
00:01:34,950 --> 00:01:42,240
DOM basically is used to render our component into the real DOM and we project the content we pass into

22
00:01:42,240 --> 00:01:44,370
our component into our slot,

23
00:01:44,370 --> 00:01:49,920
this will be the first time this triggers but then also if we would updated programmatically from outside

24
00:01:50,240 --> 00:01:56,640
and the content we pass in would change, then slot change for this given slot would also trigger again

25
00:01:56,940 --> 00:02:03,600
and in this function which then triggers, we get an event object and in here most importantly, we'll be

26
00:02:03,600 --> 00:02:07,950
able to analyze the content that's inside of our slot.

27
00:02:07,950 --> 00:02:14,820
So here, I will actually console dir, dir prints an object in the console which we can inspect instead

28
00:02:14,820 --> 00:02:15,490
of the

29
00:02:15,750 --> 00:02:17,430
HTML element console

30
00:02:17,490 --> 00:02:18,740
log would print

31
00:02:19,020 --> 00:02:23,340
and there, I will print that slot we're listening to.

32
00:02:23,760 --> 00:02:32,090
So now, if I save this and I reload, you'll see we now have a slot output here and that gets printed by

33
00:02:32,090 --> 00:02:33,040
this line,

34
00:02:33,080 --> 00:02:38,410
so that means that the slot change event did indeed fire which it, as I mentioned does when you render

35
00:02:38,410 --> 00:02:44,090
this component to the screen because that is when the slot here will be replaced with the projected content

36
00:02:44,090 --> 00:02:45,950
for the first time

37
00:02:45,950 --> 00:02:53,660
and if we now have a look in to this slot here, we can see a couple of interesting elements but some

38
00:02:53,660 --> 00:03:00,970
very interesting data can be seen if we call the assigned nodes method on our slot.

39
00:03:00,980 --> 00:03:04,520
So this is not a property, this is a method.

40
00:03:04,520 --> 00:03:12,290
If we do that and we go back, if I reload, then we see an array of all the content that was projected

41
00:03:12,410 --> 00:03:14,170
into our slot.

42
00:03:14,180 --> 00:03:20,250
Now you might be wondering why we have four elements instead of just one paragraph tag.

43
00:03:20,430 --> 00:03:25,070
The reason for that simply is that the whitespace in front of the paragraph tag and after paragraph

44
00:03:25,070 --> 00:03:32,010
tag also is treated as text. In the end, we have this paragraph tag we're interested in and if we would

45
00:03:33,170 --> 00:03:39,020
optimize our code here and basically write this all in line which is harder to read but gets rid of

46
00:03:39,020 --> 00:03:40,430
all the excess whitespace,

47
00:03:40,640 --> 00:03:46,340
if we would do that here for our component in the html file, then you would see we only have the paragraph

48
00:03:46,340 --> 00:03:52,090
element in there and this is now the paragraph DOM node which gets projected into our slot.

49
00:03:52,220 --> 00:03:58,310
So this is also not part of the shadow DOM but still of the light DOM, just the content at which our

50
00:03:58,310 --> 00:03:59,390
slot points

51
00:03:59,390 --> 00:04:04,750
so to say. Now I do now restructure this again to make it easier to read

52
00:04:04,880 --> 00:04:10,010
but now if I reload, I get these four elements again but again, it is the paragraph tag which we get

53
00:04:10,010 --> 00:04:10,910
in the end here.

54
00:04:11,120 --> 00:04:17,240
And if you ever need to get access to the content that is projected into your slot, then this is how

55
00:04:17,240 --> 00:04:18,030
you can do it,

56
00:04:18,260 --> 00:04:25,360
you can use assigned nodes. And as a little side note, on the projected element, you also find this

57
00:04:25,370 --> 00:04:33,510
assigned slot property here which you can on the other hand use to find out into which slot this was projected,

58
00:04:33,650 --> 00:04:40,220
so this also maybe an interesting information depending on which kind of application you are writing.

59
00:04:40,520 --> 00:04:47,570
So slot change combined with a side note can be very helpful if you for example also have an application

60
00:04:47,840 --> 00:04:51,090
where the content in your slot might change at runtime too,

61
00:04:51,140 --> 00:04:56,030
so not just this initial change which we have here, but also a change at a later point of time,

62
00:04:56,180 --> 00:05:01,650
maybe because you loaded some data from the web and you want to change something in your modal when

63
00:05:01,650 --> 00:05:03,080
that is done.

64
00:05:03,080 --> 00:05:08,510
So this is just another thing I wanted to show you which can be helpful when you're working with slots.
