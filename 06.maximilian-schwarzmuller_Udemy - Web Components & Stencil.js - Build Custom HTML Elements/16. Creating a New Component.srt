1
00:00:02,270 --> 00:00:04,340
So let's build another component,

2
00:00:04,380 --> 00:00:10,040
I'll do that in the components folder, add a new sub-folder and I'll name that stock finder.

3
00:00:10,970 --> 00:00:17,200
Create a stock-finder.tsx file in there and also a stock-finder.css file for the styling and

4
00:00:17,200 --> 00:00:26,960
create a component just as we did it before, export a class, StockFinder and give it to that @ component

5
00:00:27,050 --> 00:00:31,310
decorator which is imported from @stencil/core. In there,

6
00:00:31,310 --> 00:00:33,160
assign a name, a tag,

7
00:00:33,170 --> 00:00:41,150
ucStockFinder in my case, I will point at my style URL of course and I will use the shadow DOM

8
00:00:41,150 --> 00:00:44,430
here by setting shadow to true, right.

9
00:00:44,440 --> 00:00:47,270
So now we have that component set up,

10
00:00:47,270 --> 00:00:51,340
obviously we now also need a render method here and in that render method,

11
00:00:51,950 --> 00:00:55,440
I'll return an array again and there,

12
00:00:55,460 --> 00:01:04,490
I want to add an input box and a button where the user can enter the name of a company for example and

13
00:01:04,490 --> 00:01:08,610
then below that, I want to output a list of search results.

14
00:01:08,650 --> 00:01:16,530
Now for that, I can actually reuse this input box and the button I have in my stock price component.

15
00:01:16,880 --> 00:01:20,050
Obviously feel free to also the pause the video and do this all on your own now

16
00:01:20,060 --> 00:01:25,620
of course, I will just grab that form and move that over into my stock finder here

17
00:01:25,670 --> 00:01:27,160
as a first element.

18
00:01:27,200 --> 00:01:33,140
Now of course on submit, I'll do something different here and I will keep the reference actually but

19
00:01:33,140 --> 00:01:34,950
I'll not use that value, I'll not use that

20
00:01:34,970 --> 00:01:37,920
two-way binding, I'll not add any validation here.

21
00:01:37,940 --> 00:01:43,700
You can definitely do that if you want to, I'll keep this a bit simpler and that button here, I'll also not

22
00:01:43,770 --> 00:01:47,600
as I've just said, have any validation, so it'll never be disabled.

23
00:01:48,490 --> 00:01:57,280
I'll find elements here, so I'll add the caption find here to the button and then here, I have my stock name

24
00:01:57,490 --> 00:02:02,120
input property, that is to which I want to bind here,

25
00:02:02,160 --> 00:02:09,460
whoops, it's not a string though, it's a HTML input element of course. So that is which I bind here

26
00:02:09,460 --> 00:02:10,830
with this reference

27
00:02:11,050 --> 00:02:17,670
and then I need to add a method, onFindStocks.

28
00:02:17,680 --> 00:02:23,920
This will be what I execute when we submit this, so this onFindStocks, bind the this to make sure the this

29
00:02:23,920 --> 00:02:27,310
keyword works correctly in this method.

30
00:02:27,370 --> 00:02:35,830
There we get an event object and I will call even prevent default to prevent default of this built-in form

31
00:02:35,830 --> 00:02:38,300
element, this HTML built-in form element

32
00:02:38,800 --> 00:02:45,700
and thereafter, I want to send a request to an API which finds me all fitting stock symbols. And for

33
00:02:45,700 --> 00:02:48,640
that, we can go into the alphavantage documentation and

34
00:02:48,770 --> 00:02:56,310
there we have this search endpoint and we have some examples below which shows us how we can search for

35
00:02:56,310 --> 00:03:00,660
company names or symbols and hopefully get helpful results.

36
00:03:01,870 --> 00:03:09,450
So here, I'll just copy that and point this URL and I want to send a request with the fetch API to

37
00:03:09,450 --> 00:03:18,160
this endpoint. Again I'll use back ticks here so that I can inject dynamic values like my API key, so let me import

38
00:03:18,220 --> 00:03:18,880
this,

39
00:03:18,880 --> 00:03:21,930
this already shows the advantage of having it in a global file.

40
00:03:22,030 --> 00:03:24,910
If I ever change it, I don't need to change it in different components,

41
00:03:24,910 --> 00:03:33,280
I just need to change it in that global file and there, I will import my AV_API_KEY and use that instead

42
00:03:33,280 --> 00:03:34,820
of demo down there.

43
00:03:36,230 --> 00:03:38,330
And then the search keyword,

44
00:03:38,510 --> 00:03:45,470
well that of course should be whatever the user entered into the stock name input. So I'll extract that

45
00:03:45,470 --> 00:03:51,690
here, stock name equals this.stockNameInput.value.

46
00:03:51,720 --> 00:03:53,400
Obviously I have no validation,

47
00:03:53,400 --> 00:03:55,870
so this could be empty but that's fine for me here

48
00:03:57,210 --> 00:04:03,170
and then I'll replace the bi dummy here with this, not with this but just with the stockName constant

49
00:04:03,170 --> 00:04:04,890
here.

50
00:04:04,980 --> 00:04:09,780
Now let me add then and catch and let's see what we get here.

51
00:04:10,050 --> 00:04:14,380
So then gives me the response, you can add error handling

52
00:04:14,390 --> 00:04:20,850
as you learned, I'll just extract the JSON response, I'll use the shorthand version of this arrow

53
00:04:20,870 --> 00:04:27,110
function where if you only have one expression after the arrow, you can omit the curly braces and this

54
00:04:27,110 --> 00:04:32,630
will automatically return the result of this expression and then here, I'll therefore have the parsed

55
00:04:32,690 --> 00:04:38,020
response and I will simply console log this for the moment

56
00:04:39,280 --> 00:04:47,250
and yes you could add a catch error handler here to handle any errors you might be getting in whichever

57
00:04:47,260 --> 00:04:51,670
way you want. I'll just log them to the console.

58
00:04:52,270 --> 00:04:58,880
Now with this, with everything in place for us to start using that component, the ucStockFinder,

59
00:04:59,140 --> 00:05:04,470
so let's head over to index.html and add this next to our ucStockPrice

60
00:05:04,530 --> 00:05:10,110
and obviously this will not have any styling or anything like that but if I now reload my component,

61
00:05:10,140 --> 00:05:11,940
I have this input.

62
00:05:12,180 --> 00:05:19,460
Let's now open the Javascript console in the developer tools, clear it and then let's search for BMW

63
00:05:19,980 --> 00:05:26,850
and indeed, we find an object with a best matches key which is an array of objects where each object

64
00:05:27,150 --> 00:05:28,840
has a symbol

65
00:05:28,890 --> 00:05:32,460
and BMW just seems to be listed on different exchanges,

66
00:05:32,460 --> 00:05:33,960
hence we get multiple hits here

67
00:05:34,170 --> 00:05:36,350
but this generally seems to work.

68
00:05:36,550 --> 00:05:41,700
Now obviously we don't want to output it here in the Javascript console in the developer tools, we want to output it

69
00:05:41,760 --> 00:05:45,300
in the DOM and that is what we'll work on the next lectures.

70
00:05:45,360 --> 00:05:48,660
Now first of all in the very next lecture, we'll add some styling.

71
00:05:48,720 --> 00:05:49,700
You don't have to skip it,

72
00:05:49,710 --> 00:05:54,270
it will be very fast as you will see and thereafter we'll work on outputting the search results.
