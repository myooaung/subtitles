1
00:00:02,240 --> 00:00:08,810
So let's make sure that the text that shows up on our tooltip can be set from outside

2
00:00:08,810 --> 00:00:16,760
and for that, we will use an attribute. Now attributes are not something that is exclusive to your web

3
00:00:16,760 --> 00:00:24,170
components or your custom elements, attributes exist on a lot of built-in HTML elements. Take a link for

4
00:00:24,170 --> 00:00:25,560
example, here

5
00:00:25,790 --> 00:00:32,350
the ref thing here, that is an attribute and it allows you to configure this element,

6
00:00:32,390 --> 00:00:38,440
so the link here in a declarative way which means you don't have to write any code,

7
00:00:38,540 --> 00:00:43,910
no Javascript code to set the target of this link

8
00:00:44,000 --> 00:00:49,100
and we want to use the same approach for our own tooltip, for example it would make sense that on our

9
00:00:49,100 --> 00:00:58,520
uc-tooltip tag here, we can use a text attribute or TooltipText attribute or whatever you want to

10
00:00:58,520 --> 00:00:59,260
name it.

11
00:00:59,540 --> 00:01:02,240
I will name it just text and here,

12
00:01:03,040 --> 00:01:07,850
web components is a set of standards

13
00:01:08,950 --> 00:01:17,760
for example. This could be the text I want to display when I hover over this uc-tooltip element and

14
00:01:18,330 --> 00:01:19,260
for the second one,

15
00:01:19,260 --> 00:01:21,220
I won't set a text attribute,

16
00:01:21,240 --> 00:01:24,590
so here we maybe want to have a default value.

17
00:01:24,690 --> 00:01:28,690
How do we now use that attribute from inside our tooltip?

18
00:01:29,100 --> 00:01:30,740
Well it's actually pretty simple.

19
00:01:31,480 --> 00:01:41,790
Inside of our constructor, we can initialize a new private variable and I will name it TooltipText.

20
00:01:41,820 --> 00:01:50,320
Now there I will call get attribute and now enter the name of the attribute for which I want to extract

21
00:01:50,320 --> 00:01:51,150
the value

22
00:01:51,360 --> 00:01:56,850
and in my case that is text because I chose text as the attribute name here.

23
00:01:58,220 --> 00:02:06,680
So now we save whatever we stored as text or as the text attribute value, we save that in TooltipText and

24
00:02:06,680 --> 00:02:11,990
we can now use that down there where we stay or where we set up some text to be displayed.

25
00:02:12,020 --> 00:02:20,320
So here instead of this hardcoded text, I will set this TooltipText as a value.

26
00:02:20,350 --> 00:02:25,310
Now with that if we save this, we can go back and reload this page

27
00:02:25,340 --> 00:02:30,290
and now if you hover over that, we don't see anything there, right?

28
00:02:30,720 --> 00:02:36,210
Well the reason for that is that here, we're initializing it in the constructor

29
00:02:36,270 --> 00:02:42,750
but as you learned, the custom element has been created at this point but it has not been mounted to

30
00:02:42,750 --> 00:02:43,950
the DOM yet,

31
00:02:44,010 --> 00:02:47,280
this will only have happened inside of the connected callback.

32
00:02:47,670 --> 00:02:54,240
So we should move this line into our connected callback so that we can safely access this DOM Node's

33
00:02:54,330 --> 00:02:55,110
attributes

34
00:02:55,110 --> 00:02:58,960
because at this point of time, it will have been rendered into the DOM

35
00:02:59,250 --> 00:03:06,160
and now if we save that and we reload this page, we see web components is the set of standard.

36
00:03:06,300 --> 00:03:12,110
Now for the second question mark, we don't see anything because we have no default value there.

37
00:03:12,180 --> 00:03:19,740
Now to make sure we have a solution for both cases, I will actually go back into the constructor and

38
00:03:19,740 --> 00:03:24,150
set the TooltipText here to use some dummy TooltipText,

39
00:03:24,150 --> 00:03:26,930
maybe something that makes a little bit more sense than that

40
00:03:27,120 --> 00:03:32,940
and here I only want to overwrite it when we have that attribute. For this I'll add an if check where I

41
00:03:32,940 --> 00:03:40,710
see if this has attribute text, so only if we have that attribute being set, I will extract that attribute

42
00:03:40,860 --> 00:03:43,400
and store its text in the TooltipText

43
00:03:43,560 --> 00:03:48,310
otherwise this will not be overwritten and will be using our dummy text.

44
00:03:48,390 --> 00:03:54,660
So now we have the basic initialization which does not access the DOM in the constructor and then we

45
00:03:54,660 --> 00:03:59,730
do access the DOM and override the default value with a more specific value

46
00:03:59,910 --> 00:04:07,230
if we have the text attribute being set in the connected callback. And now we can reload this page

47
00:04:07,230 --> 00:04:13,470
once again, we see web components is a set of standards for the first tooltip, for the second,

48
00:04:13,500 --> 00:04:15,660
we see our dummy TooltipText.

49
00:04:15,660 --> 00:04:18,200
Now this is how we can work with attributes.

50
00:04:18,210 --> 00:04:23,810
Now there is a special thing when we then later change attribute values

51
00:04:23,940 --> 00:04:29,710
and you will also learn that there is another way of setting something like this

52
00:04:29,910 --> 00:04:33,690
then through the attributes but that is something we'll come back to later,

53
00:04:33,690 --> 00:04:35,970
for now we have that.

54
00:04:35,970 --> 00:04:42,990
Let me now show you how you can add some styling to this component because that obviously is missing.
