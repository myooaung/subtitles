WEBVTT
1
00:00:02.380 --> 00:00:10.530
Now last but not least, let me show one totally optional optimization or restructuring in the code.

2
00:00:10.930 --> 00:00:16.990
Right now, I access the DOM here in showTooltip when I append my tooltipContainer and in

3
00:00:16.990 --> 00:00:20.700
hideTooltip when I remove it and there is nothing wrong with it

4
00:00:20.710 --> 00:00:27.220
and for a web component as simple as this one, this might actually be the best way of doing it but it's

5
00:00:27.280 --> 00:00:32.590
also worth looking at a pattern which you see from time to time and which I at least want to get you

6
00:00:32.590 --> 00:00:34.090
thinking about.

7
00:00:34.150 --> 00:00:38.150
You can add a method in your class as we did it before,

8
00:00:38.320 --> 00:00:42.380
let's say we call it _render, the name is totally up to you though,

9
00:00:42.430 --> 00:00:43.950
it's not a reserved name,

10
00:00:44.110 --> 00:00:48.850
I just want to make sure it's private to really make clear that we only call it from inside this class

11
00:00:49.240 --> 00:00:56.260
and I name it render because this should be a method which is responsible for updating the DOM.

12
00:00:56.260 --> 00:01:03.280
So what I now will do is I will go up to my constructor and add a new property, this _tooltipVisible

13
00:01:03.280 --> 00:01:06.700
and I'll set it to false initially,

14
00:01:06.700 --> 00:01:08.570
so initially this should not be visible.

15
00:01:08.680 --> 00:01:11.320
Now of course we're not using this property yet.

16
00:01:11.500 --> 00:01:13.180
I want to use that in the render method

17
00:01:13.180 --> 00:01:18.770
now, here I'll check if this.tooltipVisible is true

18
00:01:19.090 --> 00:01:24.010
and if it is true, then I want to create and append this element. So here,

19
00:01:24.190 --> 00:01:25.140
I'll go there,

20
00:01:25.150 --> 00:01:29.880
copy that code and append this child, else

21
00:01:30.160 --> 00:01:34.410
I will execute the code for removing the child.

22
00:01:34.530 --> 00:01:36.420
Let me grab that and paste it in there.

23
00:01:38.790 --> 00:01:44.720
This also means that the tooltipContainer now can be converted back to a constant that only exists

24
00:01:44.720 --> 00:01:45.710
in the render method

25
00:01:45.830 --> 00:01:48.140
because I don't access it anywhere else.

26
00:01:48.890 --> 00:01:58.640
So I can go up there, remove the tooltipContainer in my constructor and in the render method, I'll simply

27
00:01:58.670 --> 00:02:07.940
add a new variable with let tooltipContainer and I'll then simply initialize it here, set its text

28
00:02:07.940 --> 00:02:10.960
content here and add it here in the end

29
00:02:11.030 --> 00:02:12.610
or remove it here.

30
00:02:14.910 --> 00:02:21.780
For this, I'll just check if tooltipContainer is defined and I only try to remove it if it is defined

31
00:02:22.020 --> 00:02:22.770
otherwise

32
00:02:22.890 --> 00:02:28.350
if this was undefined still and we somehow would end up here, we would face a problem.

33
00:02:28.590 --> 00:02:34.380
Now with the render method defined in showTooltip, all I have to do is I have to switch the tooltipVisible

34
00:02:34.660 --> 00:02:37.280
property to false, to true,

35
00:02:37.290 --> 00:02:38.370
excuse me

36
00:02:38.370 --> 00:02:40.670
and then execute the render method again

37
00:02:40.800 --> 00:02:45.510
because in there, I will then have all the logic for checking tooltipVisible and adding the container.

38
00:02:46.230 --> 00:02:53.220
And in hideTooltip I'll do the opposite, I'll set tooltipVisible to false and then execute the

39
00:02:53.220 --> 00:02:57.030
render method.

40
00:02:57.040 --> 00:02:59.040
Now what's the idea behind this approach?

41
00:02:59.380 --> 00:03:04.840
Well the more and more logic you add, maybe you also render other things in your component at some point

42
00:03:04.840 --> 00:03:05.660
of time,

43
00:03:05.740 --> 00:03:12.010
the more sense it makes to do all that rendering in a central place, so that you quickly can have a look

44
00:03:12.010 --> 00:03:18.580
at all your rendering related code in one place instead of having different parts of rendering, different

45
00:03:18.580 --> 00:03:21.560
parts of your DOM distributed throughout your component.

46
00:03:21.850 --> 00:03:28.900
Instead now we know in the render method, we have all the logic for accessing our shadow DOM and for

47
00:03:28.900 --> 00:03:31.600
adding our tooltipContainer in this case

48
00:03:31.600 --> 00:03:35.640
but if we had any other things we wanted to render, we would do it in there too

49
00:03:35.770 --> 00:03:41.560
and so we could always quickly see what we're doing with our DOM in our component. And all the other

50
00:03:41.560 --> 00:03:48.040
places and all the other methods of our component are only responsible for updating data which is then

51
00:03:48.040 --> 00:03:54.610
getting used in render to update the DOM correctly, like we're using tooltipVisible to update the DOM

52
00:03:54.610 --> 00:04:01.510
correctly by either adding or removing our tooltipContainer and we're only setting the data here and then

53
00:04:01.510 --> 00:04:06.490
of course we always have to call render when we know that we changed something that should trigger a

54
00:04:06.490 --> 00:04:07.720
re-render.

55
00:04:07.900 --> 00:04:13.120
We can also call render initially here, even though we don't require it for this component but we can

56
00:04:13.120 --> 00:04:14.620
call it initially here

57
00:04:15.260 --> 00:04:21.570
in the connectedCallback to say, hey when this component gets loaded for the first time, we also want

58
00:04:21.570 --> 00:04:23.770
to render it for the first time.

59
00:04:23.850 --> 00:04:30.350
Now if I reload here, this of course has no special effect because we don't show the tooltip because initially,

60
00:04:31.410 --> 00:04:38.210
we have the tooltipVisible state is set to false but we do render it as soon as I hover over this.

61
00:04:38.220 --> 00:04:40.210
Now it's not getting removed any more, if I hover

62
00:04:40.230 --> 00:04:43.500
away, let me quickly check that.

63
00:04:43.530 --> 00:04:44.370
Yes, this makes sense,

64
00:04:44.410 --> 00:04:48.640
this check here and also the way we remove this will not work. tooltipContainer

65
00:04:48.790 --> 00:04:53.740
always get re-initialized to an empty, to an undefined variable when render gets called, the old

66
00:04:53.740 --> 00:04:54.040
state is

67
00:04:54.040 --> 00:04:55.670
of course not carried over,

68
00:04:55.750 --> 00:04:57.950
so this will not be set

69
00:04:58.150 --> 00:05:03.810
if we call render after changing tooltipVisible to false.

70
00:05:03.850 --> 00:05:11.110
So what I should do instead is I should initialize this with my loaded tooltipContainer if available,

71
00:05:11.230 --> 00:05:15.870
so I will simply access my shadow root here

72
00:05:17.630 --> 00:05:25.190
and there, I'll query for either a div because I know my tooltipContainer will be the only div

73
00:05:25.190 --> 00:05:29.880
or of course you could also assign a class to our tooltipContainer to query by that or an ID.

74
00:05:29.990 --> 00:05:31.300
But here I'll do it by this

75
00:05:31.430 --> 00:05:34.920
and now if this is set, then I can remove it

76
00:05:35.030 --> 00:05:37.400
and I do load it whenever render is called.

77
00:05:37.550 --> 00:05:40.160
So with this change in place, if I now reload this,

78
00:05:40.190 --> 00:05:41.330
still everything works,

79
00:05:41.330 --> 00:05:42.570
no errors here.

80
00:05:42.710 --> 00:05:44.990
If I hover over this, it gets shown and

81
00:05:44.990 --> 00:05:48.720
I can hover away and this now all works with this central render method.

82
00:05:48.730 --> 00:05:55.040
Again, not something we need so much for this trivial component but the more complex your components get, the

83
00:05:55.040 --> 00:06:00.650
more different parts of your shadow DOM you might be updating, the more sense it makes to do all this

84
00:06:00.650 --> 00:06:06.170
updating in one central place where you can then quickly see all your updating logic instead of having

85
00:06:06.170 --> 00:06:10.730
it distributed across your entire component and all the methods in your component.
