WEBVTT
1
00:00:02.180 --> 00:00:06.140
Now with all the events and cross component things going on,

2
00:00:06.270 --> 00:00:12.690
let me go back to the styling of the components and how stencil can help us there too, especially when

3
00:00:12.690 --> 00:00:17.060
it comes to changing the styles depending on the component state.

4
00:00:17.070 --> 00:00:25.400
For example when we enter something here for which we can't find a result. Right now this is not working

5
00:00:25.400 --> 00:00:26.970
anymore as I just noticed

6
00:00:26.990 --> 00:00:32.400
and besides throwing an error message, I also want to change the style of this component anyways,

7
00:00:32.510 --> 00:00:34.730
let's say I want to change the border color.

8
00:00:34.730 --> 00:00:35.530
How could we do that,

9
00:00:35.540 --> 00:00:40.770
how could we mark this overall component as having an error or as being invalid?

10
00:00:41.000 --> 00:00:44.490
Well first of all let me fix that when I click fetch,

11
00:00:44.750 --> 00:00:49.590
I get an error if we can't find something for that symbol.

12
00:00:49.590 --> 00:00:52.420
The problem is I already have a fetch price here,

13
00:00:52.470 --> 00:01:00.380
so if we have an error, I simply want to set the fetch price equal to null again here and now with that,

14
00:01:00.400 --> 00:01:02.160
my old check will work again

15
00:01:05.550 --> 00:01:08.390
and I get the invalid symbol here. So that's this fixed

16
00:01:08.400 --> 00:01:11.070
but I want to work on the styling most of all.

17
00:01:11.070 --> 00:01:15.800
Now it would be convenient if we could just add a class to the overall element,

18
00:01:15.960 --> 00:01:21.660
so here, add a class, hydrated is there by default, stencil adds that and you should not touch that

19
00:01:21.810 --> 00:01:27.760
but then you add your own class, let's say error and you have some CSS code in place that change

20
00:01:27.890 --> 00:01:32.910
changes the look of this component and that even the user of your components,

21
00:01:32.910 --> 00:01:39.180
so the developer using your components can take advantage of because this class is directly on your custom

22
00:01:39.180 --> 00:01:44.520
element, so in global CSS, we could target it and change its style and override the default styles if

23
00:01:44.520 --> 00:01:50.030
we wanted to but I also want to provide some default styles. But it all starts with adding this error 

24
00:01:50.130 --> 00:01:52.230
class when we have an error

25
00:01:52.560 --> 00:01:57.480
and for this, there is a special method we can add to any stencil component.

26
00:01:57.480 --> 00:02:03.450
It's the host data method and this is a special reserved name which you, well have to get right if you

27
00:02:03.450 --> 00:02:05.020
want to take advantage of it.

28
00:02:05.340 --> 00:02:11.520
There you return an object with some metadata about your host element,

29
00:02:11.520 --> 00:02:17.880
so your custom element, the tag itself of your custom element so to say. And for example, there

30
00:02:17.880 --> 00:02:24.060
is a class key and this allows you to add a class that will be set on your custom element, like in this

31
00:02:24.060 --> 00:02:25.350
case, error

32
00:02:25.680 --> 00:02:30.510
and so now if reload this, you see the error class is now available too

33
00:02:30.690 --> 00:02:34.110
and I didn't add it now, it just reloaded page.

34
00:02:34.140 --> 00:02:40.980
Now of course, adding static classes like this can be helpful but it's not the primary use case of this

35
00:02:41.460 --> 00:02:43.880
but you can use dynamic code here.

36
00:02:44.040 --> 00:02:50.130
You can check whether this error is true and if it is true and I'm just using a ternary expression here,

37
00:02:50.580 --> 00:02:52.210
I'll set the error class

38
00:02:52.260 --> 00:02:58.510
otherwise I set no class. This would just be one example of how this could get used

39
00:02:58.610 --> 00:03:03.440
and of course, you could also set multiple classes here, besides error,

40
00:03:03.500 --> 00:03:06.610
you also can set the style of the host data

41
00:03:06.610 --> 00:03:13.230
by the way, if you directly want to set something like background red. Now here I want to set this

42
00:03:13.230 --> 00:03:19.950
class and now host data is executed whenever render is executed and therefore whenever a state or

43
00:03:20.010 --> 00:03:26.870
a prop changes and hence whenever error changes and it's not false anymore, it's not undefined anymore,

44
00:03:26.880 --> 00:03:33.130
we add the error class and hence by default, we now don't have the error class

45
00:03:33.270 --> 00:03:39.540
but if I enter an invalid symbol here, you'll see as soon as we see invalid symbol there, we get the error

46
00:03:39.540 --> 00:03:45.840
class here too. And this now allow us to take advantage of this, both from outside

47
00:03:45.850 --> 00:03:51.010
as I mentioned, you can target this, it's a normal class which you can target in your global styles

48
00:03:51.580 --> 00:03:56.170
or of course from inside the component. There on host

49
00:03:56.170 --> 00:04:03.220
when the error class is present and this is how you have this extra condition on the host element, then

50
00:04:03.220 --> 00:04:09.170
you might want to set the border color to let's say orange,

51
00:04:09.400 --> 00:04:11.740
you could of course also use red.

52
00:04:11.760 --> 00:04:12.600
Now we have this

53
00:04:12.680 --> 00:04:20.610
orange here here let's say whenever the error class is present and therefore now, we aready see it, we have

54
00:04:20.620 --> 00:04:27.140
this orange border to kind of indicate something is wrong here and that can be very helpful.

55
00:04:27.270 --> 00:04:33.930
So being aware of host data and how you may use it to conditionally add data to your host element can

56
00:04:33.930 --> 00:04:35.020
be extremely useful.
