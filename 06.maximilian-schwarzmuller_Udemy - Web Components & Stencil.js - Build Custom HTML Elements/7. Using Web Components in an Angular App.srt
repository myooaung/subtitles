1
00:00:02,330 --> 00:00:07,660
So let's use our own package of components in the Angular project.

2
00:00:07,880 --> 00:00:14,050
Now the Angular folder you find here is a folder, is a project created with the Angular CLI,

3
00:00:14,110 --> 00:00:17,480
it's a default Angular project without any changes,

4
00:00:17,510 --> 00:00:23,390
so it's really just what you get when you create a brand new project with the CLI. Now in there, I can

5
00:00:23,390 --> 00:00:30,930
now first of all also install my uc-components, so I can do it like that.

6
00:00:31,090 --> 00:00:36,670
Now with the package installed there and now the next steps really only makes sense if you understand

7
00:00:36,670 --> 00:00:41,430
a little bit of Angular, otherwise you can probably skip that because it's not that interesting to you

8
00:00:41,620 --> 00:00:47,280
but now with that installed, you have to do two things to make your components work. In the source app

9
00:00:47,290 --> 00:00:49,220
folder in the app module,

10
00:00:49,480 --> 00:00:57,060
you have to enable a certain schema by which Angular will validate the HTML elements you're using

11
00:00:57,070 --> 00:01:03,130
here in your templates because by default, Angular throws an error when you are using a non-standard

12
00:01:03,180 --> 00:01:08,220
HTML element which is not an Angular component and that is exactly what we will do.

13
00:01:08,230 --> 00:01:14,680
We'll use our own web components which are neither a standard HTML element nor an Angular element

14
00:01:15,070 --> 00:01:21,010
and for that to work, we just need to do two important changes or adjustments.

15
00:01:21,010 --> 00:01:28,600
The first one is done here in the app module from @angular/core, we import the custom elements schema

16
00:01:29,080 --> 00:01:36,520
and we add to this under this schemas key here in our ngModule object here as a value in that

17
00:01:36,520 --> 00:01:37,030
array and

18
00:01:37,030 --> 00:01:41,170
that simply tells Angular, hey there are custom elements present.

19
00:01:41,170 --> 00:01:48,430
The next step is that we need to register these custom elements and we do that in the main.ts file here

20
00:01:49,410 --> 00:01:57,570
by simply importing something which is generated by stencil from our own package. We import from

21
00:01:57,570 --> 00:02:03,930
and now you add your package name, uc-components and there, the dist folder and there, the loader folder,

22
00:02:04,470 --> 00:02:08,390
from there you import define custom elements.

23
00:02:08,410 --> 00:02:15,240
This is now a function which you need to execute down there and you pass the window object as an argument

24
00:02:15,330 --> 00:02:20,820
and this ensures that your custom elements are added to your project

25
00:02:20,820 --> 00:02:25,790
and now let's add a custom element in the app component. I'll delete all the default content here

26
00:02:25,920 --> 00:02:31,030
and I'll add uc-stock-price.

27
00:02:31,100 --> 00:02:38,020
Now we can start your project by running npm start or with ngServe, npm start uses ngServe

28
00:02:38,130 --> 00:02:40,860
behind the scenes with the local Angular CLI

29
00:02:40,950 --> 00:02:47,840
version and this will now build your project and it should launch it on a development server which you

30
00:02:47,840 --> 00:02:56,390
find under http://www.localhost:4200 where indeed we can find our own component which works just fine with different

31
00:02:56,390 --> 00:02:58,000
stock indices.

32
00:02:58,060 --> 00:02:59,630
So that is pretty neat

33
00:02:59,630 --> 00:03:05,210
and now if we again inspect this in the network tab and we load this, you see there are a bunch of

34
00:03:05,210 --> 00:03:11,600
requests being made and it's this 6.js file in my case, might be named differently for you,

35
00:03:11,750 --> 00:03:19,220
where in the end, our own component data is loaded and is well, mounted into this DOM and you see it's

36
00:03:19,220 --> 00:03:20,230
super small,

37
00:03:20,230 --> 00:03:25,850
so super easy to add to any project, especially since this already include some extra functionality to load

38
00:03:25,850 --> 00:03:28,390
more and other components and so on. Here

39
00:03:28,400 --> 00:03:36,320
I can now also show you how stencil adds code so that your components only get loaded when they really are

40
00:03:36,320 --> 00:03:37,280
rendered,

41
00:03:37,310 --> 00:03:44,600
let's add that uc-stock-finder. If I now save this, this app will reload and you'll find not just the

42
00:03:44,600 --> 00:03:46,900
6.js but also the 8.js file

43
00:03:46,980 --> 00:03:50,550
and this happens to hold the code for my uc-stock-finder.

44
00:03:50,810 --> 00:04:04,170
Now please note that when I remove this by adding ngIf here and I'll bind this to showStockFinder and

45
00:04:04,260 --> 00:04:12,030
showStockFinder is added in my app component Typescript code here, showStockFinder here and it's

46
00:04:12,030 --> 00:04:14,370
false and therefore, since this is false,

47
00:04:15,000 --> 00:04:16,180
this will not be loaded.

48
00:04:16,260 --> 00:04:22,860
If I add this, you see that in your network tab, you only see just 6.js file,

49
00:04:22,870 --> 00:04:27,770
so the other component is indeed not loaded here because it's not rendered to the DOM yet

50
00:04:27,950 --> 00:04:31,140
and this is this cleverness stencil.js brings.

51
00:04:31,160 --> 00:04:34,230
And now we can see how this is dynamically reloaded

52
00:04:34,490 --> 00:04:42,000
when I add a button here let's say, load finder, where I add an Angular click listener and this is

53
00:04:42,000 --> 00:04:44,170
now all Angular syntax I'm using here

54
00:04:44,260 --> 00:04:47,400
and I set showStockFinder to true here.

55
00:04:48,540 --> 00:04:54,180
The fact of this is that initially when I reload this, we only have the 6.js file,

56
00:04:54,310 --> 00:04:57,640
so our web component code for the stock finder is not loaded.

57
00:04:57,640 --> 00:05:01,550
Now let me clear the network tab so that we can see any other requests clearly 

58
00:05:01,810 --> 00:05:07,720
and now if I click load finder, now this is loaded and this is super efficient because it means we load

59
00:05:07,800 --> 00:05:12,080
the data for this script, for this component only when it is really needed

60
00:05:12,190 --> 00:05:14,200
and that is super efficient of course.

61
00:05:15,960 --> 00:05:19,350
So that is how we can use web components in an Angular app.

62
00:05:19,530 --> 00:05:25,140
You need to do these two adjustments at the beginning and then you can just add them as normal HTML

63
00:05:25,320 --> 00:05:30,560
elements with all the benefits of lazy loading and code splitting added by stencil automatically.
