WEBVTT
1
00:00:02.350 --> 00:00:09.640
So now that we had a detailed look at how we can create autonomous web components by extending HTML element,

2
00:00:09.640 --> 00:00:16.030
let me also show you that alternative way which I mentioned, where you can create web components by basing

3
00:00:16.030 --> 00:00:22.100
them on specific built-in components or HTML elements I should say.

4
00:00:22.540 --> 00:00:31.050
And for that, I will create a new component, I'll create it in a new Javascript file which I'll name

5
00:00:32.860 --> 00:00:36.470
confirm-link.js. Now in there,

6
00:00:36.470 --> 00:00:40.640
I will create a new class and I'll name this ConfirmLink as well

7
00:00:40.790 --> 00:00:47.510
and here, I want to extend the HTML anchor tag element.

8
00:00:47.550 --> 00:00:54.920
Now the HTML anchor tag element belongs to the a HTML element,

9
00:00:54.990 --> 00:00:56.570
so to this href

10
00:00:56.590 --> 00:01:05.770
here. Now here, we could be forwarding the user to Google.com, Google and obviously if we wrote

11
00:01:05.760 --> 00:01:11.100
this and we click this link, we are forwarded to that page.

12
00:01:11.420 --> 00:01:19.040
Now the idea is that we wrap this in our own web component or that we create a web component based on

13
00:01:19.040 --> 00:01:24.770
that anchor tag which still has all the functionalities of the built-in anchor tag,

14
00:01:24.920 --> 00:01:33.770
so which still takes the ref attribute and forwards us but which in addition asks us if we really want

15
00:01:33.770 --> 00:01:36.690
to go there before redirecting us

16
00:01:36.860 --> 00:01:41.870
and this is a use case you could certainly have on a webpage where you want to have links leading to

17
00:01:41.930 --> 00:01:49.580
external resources where you want to ask the user before really, well forwarding the user.

18
00:01:49.580 --> 00:01:55.950
Now for that here in ConfirmLink, I'll add the connected callback right away,

19
00:01:56.000 --> 00:01:58.820
don't need the constructor really right now,

20
00:01:58.820 --> 00:02:05.670
just want to have that callback and there, I want to register a click listener on this element,

21
00:02:05.720 --> 00:02:13.760
so on the anchor tag which I am in the end extending here. We could set up a shadow DOM here and

22
00:02:13.770 --> 00:02:14.960
that is really important.

23
00:02:14.990 --> 00:02:21.800
I'm not doing it here because I don't need it but when extending a specific element, you can use all

24
00:02:21.800 --> 00:02:26.670
the same features we used here in the tooltip. So you can attach a shadow root,

25
00:02:26.720 --> 00:02:28.700
you can add your own template,

26
00:02:28.730 --> 00:02:31.970
you can do all these things here too. Here

27
00:02:31.970 --> 00:02:38.480
I just happen to not need anything of that, I want to keep all the default look and behavior and all

28
00:02:38.480 --> 00:02:39.180
of that,

29
00:02:39.200 --> 00:02:45.200
I just want to add an extra click listener and I do that here in the connected callback by adding an

30
00:02:45.200 --> 00:02:52.790
event listener and by adding it directly to the this keyword, I add it to my custom element which extends

31
00:02:52.790 --> 00:03:01.760
this built-in element and I add my click listener here and when this click happens, then I will execute

32
00:03:01.760 --> 00:03:02.590
a function

33
00:03:02.720 --> 00:03:07.530
and here, I will use an ES6 arrow function which takes an argument,

34
00:03:07.760 --> 00:03:14.250
the default event object which will be created by the Javascript engine, by the browser so to say

35
00:03:14.510 --> 00:03:18.130
and then here, I have that function body which gets executed.

36
00:03:18.530 --> 00:03:23.480
Now we could also assign some method of this class which you create here

37
00:03:23.480 --> 00:03:25.370
but here I want to keep it really simple,

38
00:03:25.430 --> 00:03:33.830
I just have this function which gets executed upon a click and what I want to do here is I want to check

39
00:03:33.920 --> 00:03:35.770
if confirm,

40
00:03:35.780 --> 00:03:42.370
confirm is a method or a function built into Javascript, it's a globally available function, where I ask,

41
00:03:42.370 --> 00:03:45.310
do you really want to leave?

42
00:03:45.480 --> 00:03:52.620
And if this is yes, then confirm or if the user clicks yes, then this will return true.

43
00:03:53.060 --> 00:03:56.210
If this is not the case and hence an exclamation mark,

44
00:03:56.300 --> 00:04:02.760
so if the user clicks cancel or doesn't confirm this, then I want to stop the default behavior,

45
00:04:02.780 --> 00:04:10.430
I don't want to forward the user. And therefore on the incoming event object, I can call prevent default

46
00:04:10.820 --> 00:04:17.540
to suppress the default behavior which would be to, well basically redirect the user to the target of

47
00:04:17.540 --> 00:04:25.170
the link which would be the default behavior of an anchor tag. Now with that created, we just need to define

48
00:04:25.170 --> 00:04:25.480
it.

49
00:04:25.650 --> 00:04:32.070
So again we'll use custom elements in there, the define method and just as before, we now choose our own

50
00:04:32.190 --> 00:04:40.980
selector, our own tag for that element and just as for the tooltip, we still should use a name which

51
00:04:40.980 --> 00:04:46.210
has a dash in it and which also has some unique prefix.

52
00:04:46.290 --> 00:04:51.770
So here I'll again use uc and then confirm link for example.

53
00:04:52.830 --> 00:04:59.630
The second argument then is our ConfirmLink class here which extends the HTML anchor element,

54
00:04:59.640 --> 00:05:08.730
so just as before but now since we don't extend HTML element but this specific HTML element, the anchor

55
00:05:08.730 --> 00:05:15.590
element and that would be the case no matter if we extend the anchor or a paragraph or an image or whatever

56
00:05:15.590 --> 00:05:22.890
it is, whenever we extend a specific element and not that generic HTML element,

57
00:05:22.980 --> 00:05:28.080
so whenever we have such a specific element, we need to pass a third argument here which is an object

58
00:05:28.860 --> 00:05:35.090
where I set extends to the tag of the element we extend,

59
00:05:35.090 --> 00:05:36.890
in this case it's an anchor element,

60
00:05:36.890 --> 00:05:39.650
so we have to use the a tag here.

61
00:05:39.650 --> 00:05:46.430
So our custom element extends the built-in anchor tag, the a element.

62
00:05:46.570 --> 00:05:53.180
And now with that, we can go to the index.html file and in there, I first of all want to import

63
00:05:53.310 --> 00:05:58.140
this, so I will copy that import and add an import to confirm-link.js

64
00:05:58.690 --> 00:06:05.290
and now at the bottom here, instead of my anchor tag like this, I want to use my custom element.

65
00:06:05.290 --> 00:06:12.250
Now when extending a built-in element, you don't use your custom element as you did before by placing

66
00:06:12.250 --> 00:06:13.980
your own tag here,

67
00:06:13.990 --> 00:06:16.650
instead you keep the original tag,

68
00:06:16.720 --> 00:06:24.880
so the anchor tag, the a tag but you add a new attribute, the is attribute and the value of that attribute

69
00:06:24.940 --> 00:06:27.760
now is your custom selector here.

70
00:06:27.760 --> 00:06:34.340
So that is how you use a web component or a custom element based on a built-in element, like the anchor

71
00:06:34.360 --> 00:06:35.560
in this case.

72
00:06:35.560 --> 00:06:43.450
So now I say is uc-ConfirmLink on the anchor tag and with that, if I now save this and I reload

73
00:06:43.480 --> 00:06:47.400
that, when I click this link, I get asked if I really want to leave.

74
00:06:47.590 --> 00:06:55.150
If I click cancel, then I stay here because if I click cancel, we basically execute this code and we prevent

75
00:06:55.260 --> 00:06:55.910
the default

76
00:06:55.990 --> 00:06:58.740
hence the navigation is canceled.

77
00:06:58.780 --> 00:07:02.200
If I click OK instead,

78
00:07:02.360 --> 00:07:06.590
then we proceed as before and that is pretty cool

79
00:07:06.590 --> 00:07:14.450
This is a cool example for how you could extend a built-in element, keep all its style and all its functionality,

80
00:07:14.750 --> 00:07:20.180
though as I mentioned, you could replace for example the look by adding your own shadow DOM and your own

81
00:07:20.180 --> 00:07:21.080
template

82
00:07:21.140 --> 00:07:28.190
but here, I'm just adding a little bit of functionality to all of a sudden have a brand new element based

83
00:07:28.460 --> 00:07:30.820
on that original built-in element.
