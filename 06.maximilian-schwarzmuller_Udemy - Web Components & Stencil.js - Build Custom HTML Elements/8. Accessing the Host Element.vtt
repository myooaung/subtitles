WEBVTT
1
00:00:02.730 --> 00:00:09.540
So I added my API key, let me now fetch the input the user entered and for that, we'll actually have different

2
00:00:09.570 --> 00:00:10.730
ways.

3
00:00:10.740 --> 00:00:17.010
Let's start by simply using the good old query selector and what we could do here in onFetchStockPrice

4
00:00:17.010 --> 00:00:17.970
,

5
00:00:18.060 --> 00:00:21.170
we could try using this query selector.

6
00:00:21.180 --> 00:00:27.300
The problem is I already get an error here by Typescript because this refers to my class and this class

7
00:00:27.300 --> 00:00:29.640
doesn't have a query selector method,

8
00:00:29.640 --> 00:00:36.690
we can't access this in the same way we could access it in our own component when we used vanilla Javascript

9
00:00:37.080 --> 00:00:43.230
because whilst this component, this class here gets transformed to a real native web component behind the

10
00:00:43.230 --> 00:00:46.240
scenes by stencil, when we write it,

11
00:00:46.290 --> 00:00:52.860
it isn't one yet, it's a normal Javascript class instead and therefore, this query selector is just not

12
00:00:52.890 --> 00:00:54.430
available here.

13
00:00:54.570 --> 00:01:01.350
So we somehow need to get access to our element, to the underlying element, to our host element so to

14
00:01:01.350 --> 00:01:01.880
say

15
00:01:02.070 --> 00:01:05.220
and in CSS, we can do so with :host,

16
00:01:05.220 --> 00:01:08.530
how do we now get access to our host element,

17
00:01:08.580 --> 00:01:16.240
so the component itself, to the web component itself from inside our Typescript class? There is a special decorator

18
00:01:16.240 --> 00:01:23.290
which we should use, the @element decorator which also needs to be imported from @stencil/core and

19
00:01:23.290 --> 00:01:29.640
you add this in front of a property which will then hold a reference to your web component.

20
00:01:29.830 --> 00:01:34.240
I'll name this el and this is a convention you see quite a lot but you can name this however you want and

21
00:01:34.240 --> 00:01:39.610
this will be of type HTML element because this will be your web component that stencil creates for

22
00:01:39.610 --> 00:01:41.140
you, so to say.

23
00:01:41.140 --> 00:01:46.960
And there, you have all the methods available you have available on any HTML element because it is

24
00:01:46.960 --> 00:01:49.210
of type HTML element.

25
00:01:49.210 --> 00:01:54.730
So even though it's undefined initially here, stencil will assign a value to this property and it will

26
00:01:54.730 --> 00:01:57.730
be a reference to our web component. Now

27
00:01:57.730 --> 00:02:00.870
therefore here after we prevented the default,

28
00:02:00.940 --> 00:02:04.680
we can simply access this.el and then query selector

29
00:02:04.810 --> 00:02:08.270
and here we can now simply get access to our input.

30
00:02:08.380 --> 00:02:12.420
This input has the ID stock symbol, so I will use that ID selector here,

31
00:02:12.670 --> 00:02:21.720
#stock-symbol and this now will be an input, so we can extract the value from there.

32
00:02:21.760 --> 00:02:29.260
However if I try to access value like this, Typescript does not like this because Typescript does not

33
00:02:29.260 --> 00:02:33.800
know that query selector yields us a HTML input element.

34
00:02:34.150 --> 00:02:39.640
It of course can't know which element we're selecting and therefore, it assumes a general HTML element

35
00:02:39.940 --> 00:02:45.730
and most HTML elements have no value field and therefore Typescript gives us an error here, even though we

36
00:02:45.730 --> 00:02:52.720
know this code would work. We can simply tell Typescript that we know that this will fetch a HTML input

37
00:02:52.720 --> 00:03:00.320
element by wrapping this.el query selector in parentheses and adding as HTML

38
00:03:00.370 --> 00:03:02.050
input element here

39
00:03:02.050 --> 00:03:07.720
and this simply tells Typescript hey what we get here will be an HTML input element.

40
00:03:07.750 --> 00:03:11.040
Now we can safely access the value without Typescript complaining

41
00:03:11.230 --> 00:03:20.240
and we can store this in a constant, so stockSymbol for example. Now we can use this constant in our

42
00:03:20.270 --> 00:03:24.650
HTTP request as well, here where MSFT is hardcoded,

43
00:03:24.690 --> 00:03:31.370
I'll also inject that dynamic value and I'll add the stock symbol the user entered. And now with that, we can

44
00:03:31.370 --> 00:03:33.030
save that and go back 

45
00:03:33.590 --> 00:03:40.850
and if I now enter fetch, we'll get an error and that error has nothing to do with the fact that I didn't

46
00:03:40.880 --> 00:03:47.390
enter a value but with how I tried to query for my stock symbol input. I use query selector on the element

47
00:03:47.960 --> 00:03:51.010
but remember that on this element, we use the shadow DOM

48
00:03:51.260 --> 00:03:56.010
and how did we get access to the elements in the shadow DOM in our vanilla component?

49
00:03:56.420 --> 00:04:00.140
Well there, we always called this shadow root query selector and

50
00:04:00.200 --> 00:04:06.540
we need to do the same here. On our element, we first of all need to access the shadow root and then

51
00:04:06.540 --> 00:04:10.470
we can call the query selector on that but only use shadow root here

52
00:04:10.500 --> 00:04:13.240
if you are using the shadow DOM, if you're not using that,

53
00:04:13.350 --> 00:04:14.670
you don't need that.

54
00:04:15.200 --> 00:04:19.870
Now with that, if I reload and I click fetch again,

55
00:04:20.160 --> 00:04:26.040
well now I just get an error here that we can't read property price of undefined which makes sense because

56
00:04:26.100 --> 00:04:30.000
I try to fetch data for some stock that doesn't exist

57
00:04:30.270 --> 00:04:36.210
and indeed if we check the network tab in the developer tools, clear that and I send another request

58
00:04:36.300 --> 00:04:39.420
without entering a value,

59
00:04:39.490 --> 00:04:40.540
we see that here.

60
00:04:41.050 --> 00:04:45.340
We actually get a 200 response code, that is just how this API works

61
00:04:45.430 --> 00:04:51.100
but in the response, we just have this error message key which holds an error message showing us that

62
00:04:51.100 --> 00:04:53.800
we somehow have an invalid API call.

63
00:04:54.070 --> 00:04:59.090
So not the most useful error message here from the API unfortunately but it is what it is. 

64
00:04:59.110 --> 00:05:03.480
We'll just have to check for this at a later point of time to avoid invalid inputs

65
00:05:03.710 --> 00:05:07.080
but before we do that, let's simply try this with a valid input,

66
00:05:07.210 --> 00:05:12.580
AAPL for example will fetch the Apple stock price and this indeed doesn't look too bad.
