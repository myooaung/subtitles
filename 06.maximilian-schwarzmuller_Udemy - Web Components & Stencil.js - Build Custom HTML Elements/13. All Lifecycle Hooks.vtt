WEBVTT
1
00:00:02.320 --> 00:00:09.820
There are more lifecycle hooks, you will pretty much never need all of them but it is nice to be aware

2
00:00:09.820 --> 00:00:11.140
of all of them

3
00:00:11.140 --> 00:00:18.070
so that you always know which lifecycle hooks exist in case you need a certain functionality and I will

4
00:00:18.070 --> 00:00:20.540
add them in the order they execute here.

5
00:00:20.890 --> 00:00:26.290
So componentDidLoad is one lifecycle hook and always be aware that all these lifecycle hooks are of course

6
00:00:26.290 --> 00:00:34.150
transformed by stencil such that you still get a native web component but with code added, that these

7
00:00:34.150 --> 00:00:37.840
different methods will be executed at appropriate points of times,

8
00:00:37.840 --> 00:00:42.270
for example in componentDidLoad, whenever your component is added to the DOM.

9
00:00:42.280 --> 00:00:47.170
Now there is actually one lifecycle hook running before componentDidLoad and that is componentWillLoad

10
00:00:47.170 --> 00:00:52.170
and stencil will add code that executes this method or the code in this method

11
00:00:52.180 --> 00:00:55.850
right before your component is about to load.

12
00:00:55.870 --> 00:01:03.490
Now here I will add a console log statement, componentWillLoad and I will also output this stock

13
00:01:03.550 --> 00:01:08.710
symbol because it is worth noting that this actually is output at a point of time where stencil

14
00:01:08.710 --> 00:01:11.660
can already read your attributes,

15
00:01:11.710 --> 00:01:18.250
so it actually already has access to the DOM or to the environment into which your component is rendered 

16
00:01:18.250 --> 00:01:25.910
but is right before stencil executed your render function and created the DOM for this component.

17
00:01:26.050 --> 00:01:31.450
So the custom element has already been mounted to the DOM essentially but it has not yet populated the

18
00:01:31.450 --> 00:01:34.630
DOM with the shadow DOM content you could say,

19
00:01:34.930 --> 00:01:37.520
so then componentWillLoad will execute.

20
00:01:37.660 --> 00:01:46.030
It is worth noting that in componentWillLoad, you can still change a property that is a state property like

21
00:01:46.060 --> 00:01:52.840
fetchedPrice and that change will be taken into account in the upcoming render function call because

22
00:01:52.840 --> 00:01:57.690
remember, componentWillLoad runs before this render function was executed for the first time.

23
00:01:57.700 --> 00:02:02.040
So if you change some initial value here, it will not be inefficient or anything like that,

24
00:02:02.140 --> 00:02:09.660
it will simply be a new value that is conserved in the render function call. If you change a value,

25
00:02:09.880 --> 00:02:15.650
a stateful value in componentDidLoad, then render will run again and this can be inefficient.

26
00:02:15.790 --> 00:02:16.840
It is of course not

27
00:02:16.840 --> 00:02:22.660
in this case where fetchStockPrice will also change some stateful property because here we actually

28
00:02:22.660 --> 00:02:27.340
have an asynchronous action that loads new data that should result in a re-rendering.

29
00:02:27.460 --> 00:02:33.680
But if I will just call this fetch price and set this equal to zero, 

30
00:02:34.030 --> 00:02:40.000
well then this would be very inefficient because this would now rebind a stateful property, fetchedPrice

31
00:02:40.360 --> 00:02:45.730
and would therefore result in a rerun of the render function which already ran a second ago basically

32
00:02:45.730 --> 00:02:49.040
or less than a second when componentDidLoad executes.

33
00:02:49.180 --> 00:02:50.810
So we ran it twice

34
00:02:50.980 --> 00:02:56.530
and if I just wanted to make such a synchronous update to a stateful property, it would be better to do

35
00:02:56.530 --> 00:02:58.200
that in componentWillLoad,

36
00:02:58.360 --> 00:03:03.810
that's just a little side note. Now after componentDidLoad,

37
00:03:03.810 --> 00:03:06.540
we also have other lifecycle hooks,

38
00:03:06.660 --> 00:03:12.550
we can have updates in our component. And for that, we have componentWillUpdate,

39
00:03:12.620 --> 00:03:15.520
so you will probably recognize the pattern by now and I'll

40
00:03:15.820 --> 00:03:21.290
console log componentWillUpdate here, by the way

41
00:03:21.290 --> 00:03:28.240
I will also add console log to componentDidLoad so that we can see that here too, componentDidLoad.

42
00:03:28.250 --> 00:03:35.210
componentWillUpdate will fire right before it will re-render because some prop or state property changed,

43
00:03:35.330 --> 00:03:41.150
so whenever it is about to call re-render and then we have componentDidUpdate whenever this was done,

44
00:03:41.180 --> 00:03:43.500
so whenever it did call render.

45
00:03:43.700 --> 00:03:48.110
So here we'll have console log

46
00:03:48.230 --> 00:03:50.730
componentDidUpdate.

47
00:03:50.910 --> 00:03:55.890
Now we also have a hook that is related to the component being removed and that is componentDidUnload

48
00:03:57.020 --> 00:04:01.340
there, I will output componentDidUnload.

49
00:04:01.360 --> 00:04:03.370
This is when the component was removed from the DOM

50
00:04:03.460 --> 00:04:07.250
and this is a great place for any clean-up work you need to do.

51
00:04:07.250 --> 00:04:12.630
Now if I save that, let's see that all in action, if I reload here, we have

52
00:04:12.630 --> 00:04:18.530
WillLoad and DidLoad and then actually the update hooks too, they run right at the start because we do an

53
00:04:18.530 --> 00:04:27.580
update right at the start in this component. We do call fetchStockPrices in componentDidLoad after

54
00:04:27.580 --> 00:04:28.050
all

55
00:04:28.150 --> 00:04:33.490
and this is an async call and after like half a second when the response from this API is there, we do

56
00:04:33.490 --> 00:04:35.050
actually update the fetch price,

57
00:04:35.050 --> 00:04:38.980
that is why we see the calls to these lifecycle hooks as well

58
00:04:38.980 --> 00:04:46.880
and if I now remove that here in the elements tab and we go to console, we also see componentDidUnload,

59
00:04:46.990 --> 00:04:53.550
so we see this lifecycle hook in action too. That is the lifecycle of any stencil component,

60
00:04:53.620 --> 00:04:58.330
always important to remember, this will just result in a bunch of code being added to the native web

61
00:04:58.330 --> 00:05:00.180
component that gets spit out

62
00:05:00.310 --> 00:05:05.590
but this is always an order that is guaranteed by that generated code so that you have different places

63
00:05:05.590 --> 00:05:11.680
where you can run your own logic whenever your component is about to change or just changed or is about

64
00:05:11.680 --> 00:05:13.790
to be loaded or about to be removed.
