1
00:00:02,510 --> 00:00:08,480
It's all nice that we have some functionality on our web component but it would now be nice to work

2
00:00:08,480 --> 00:00:09,590
on the styling,

3
00:00:09,740 --> 00:00:17,210
for example that this tooltip does not kind of split our line here but it should be like an overlay being

4
00:00:17,210 --> 00:00:20,820
positioned next door near to our question mark here.

5
00:00:20,900 --> 00:00:23,910
So how can we achieve this?

6
00:00:24,010 --> 00:00:31,820
Well since we are creating our tooltipContainer here, we can of course also style that and there are

7
00:00:31,820 --> 00:00:38,710
a couple of ways of styling that, since it's a div, we could set up some general styling for divs of course.

8
00:00:39,110 --> 00:00:44,680
Alternatively, we access the style attribute and we add styles step by step,

9
00:00:44,720 --> 00:00:51,220
for example on the tooltipContainer here, we can access the style property which every DOM Node has

10
00:00:51,230 --> 00:00:59,660
in Javascript and we could give this a background color of black and then we duplicate this to set a text

11
00:00:59,660 --> 00:01:06,500
color of white maybe. Now with that if we save that and we reload,

12
00:01:06,710 --> 00:01:12,200
we have this style, a bit better but of course the positioning is still off.

13
00:01:12,260 --> 00:01:18,920
Now we might want to make sure that this has an absolute position, so that our tooltipContainer style,

14
00:01:19,320 --> 00:01:27,530
the position is absolute. That means that when it should be positioned relative to our entire custom

15
00:01:27,590 --> 00:01:32,520
element, we should give our custom element a style of relative.

16
00:01:32,870 --> 00:01:39,230
So in the connected callback where our custom element has been rendered to the DOM, there we can

17
00:01:39,230 --> 00:01:40,970
access our style,

18
00:01:40,970 --> 00:01:49,180
so the style of the custom element itself, the style of the uc-tooltip and there, we set the position

19
00:01:49,300 --> 00:01:52,460
equal to relative.

20
00:01:52,620 --> 00:01:56,210
If we now save that and we reload,

21
00:01:56,250 --> 00:02:01,640
now this looks a bit better, doesn't split our line anymore.

22
00:02:01,710 --> 00:02:10,320
Now maybe we also should set a set index here so that it is above all other elements, set index and set

23
00:02:10,320 --> 00:02:13,160
this to a value of 10 maybe.

24
00:02:13,170 --> 00:02:15,840
Now if you reload this, this looks better,

25
00:02:15,900 --> 00:02:19,530
it now really is an overlay near to our question mark,

26
00:02:19,620 --> 00:02:28,960
I'm liking this. So this already is a nice way but we also have a problem here.

27
00:02:29,120 --> 00:02:37,850
If I for some reason have a general style in my page with style tags or a CSS file

28
00:02:37,850 --> 00:02:47,950
which I import where I let's say style all my divs to have the border of 2px solid and orange. Now obviously

29
00:02:47,960 --> 00:02:54,950
this is a bit of a made up example but you could certainly have some global styles affecting all divs

30
00:02:55,130 --> 00:03:01,150
or all h1 tags and maybe in your custom web component, you are using a h1 tag

31
00:03:01,280 --> 00:03:04,730
or as we are doing it, you are using a div

32
00:03:05,060 --> 00:03:11,930
and now what you will see is that if I save that and I reload this page, I have that orange border

33
00:03:12,050 --> 00:03:14,350
on that div in my web component too.

34
00:03:14,660 --> 00:03:16,730
And you typically don't want that,

35
00:03:16,730 --> 00:03:22,310
you typically don't want to have global styles affecting your web components and you also don't want

36
00:03:22,310 --> 00:03:28,070
to have styles you define inside of your web components affect outside elements.

37
00:03:28,100 --> 00:03:35,570
In addition, it would be nice if we don't have to create everything programmatically like this, with one

38
00:03:35,570 --> 00:03:37,600
line of code after the other

39
00:03:37,870 --> 00:03:46,290
and if we could define some HTML template, instead of well adding or creating HTML elements with

40
00:03:46,310 --> 00:03:52,350
create element all the time and for that, we have a solution,

41
00:03:52,560 --> 00:04:02,070
the shadow DOM and templates. Both these techniques will help us with ensuring that we write a nice, reusable

42
00:04:02,280 --> 00:04:05,850
and encapsulated custom web component.
