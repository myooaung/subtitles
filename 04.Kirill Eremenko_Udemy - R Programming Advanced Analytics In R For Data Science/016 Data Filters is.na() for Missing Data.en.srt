1
00:00:05,320 --> 00:00:08,370
Hello to welcome back to the advanced course in our programming.

2
00:00:08,370 --> 00:00:14,180
In the previous tutorial we talked about the which operator and we learned how to filter our doorframe

3
00:00:14,190 --> 00:00:19,410
four rows with non-missing daughter and I hope that you had a chance to play around with what we learned

4
00:00:19,440 --> 00:00:20,110
previously.

5
00:00:20,220 --> 00:00:23,460
Because ultimately this is what the Course is about.

6
00:00:23,490 --> 00:00:28,590
It's about getting as much hands on experience as we possibly can in order to practice the things that

7
00:00:28,590 --> 00:00:31,200
we're learning and to remember them better.

8
00:00:31,260 --> 00:00:36,990
And as a quick creep cap on what we did learn last time is we talk about the which operator.

9
00:00:37,010 --> 00:00:42,900
And we found that if we're filtering our doorframe for a certain column for instance here we're looking

10
00:00:42,900 --> 00:00:51,300
for all companies in our data set with 45 employees and if that column has any values then in our subset

11
00:00:51,300 --> 00:00:57,370
that we're creating will get these mysterious rows with names across the whole row.

12
00:00:57,600 --> 00:00:59,340
So there's one and there's another one.

13
00:00:59,460 --> 00:01:06,450
Now in order to avoid that what we learn to do is that if we apply the which function to our filter

14
00:01:06,450 --> 00:01:08,440
as we can see there it is being applied there.

15
00:01:08,640 --> 00:01:15,570
Then we will completely avoid these and a rose and we will get a very pretty subset of our data that

16
00:01:15,570 --> 00:01:16,300
we are after.

17
00:01:16,470 --> 00:01:24,540
So today we are continuing this two part series and we are talking about using is not a name for filtering

18
00:01:24,600 --> 00:01:27,000
missing data so we're basically talking about the opposite.

19
00:01:27,000 --> 00:01:30,450
How do we pick out rows from our data set.

20
00:01:30,480 --> 00:01:33,560
How do we subset rows that do have an ace.

21
00:01:33,690 --> 00:01:36,040
So let's have a look at what we're talking about.

22
00:01:36,060 --> 00:01:42,590
Let's look at head fin and let's say we look at the top 24 rows and what do we have here.

23
00:01:42,840 --> 00:01:49,500
Well here we've got an A's here we've got a NA's and a some missing values missing values.

24
00:01:49,590 --> 00:01:55,290
So let's say that I would like to pick out from my whole data set from a whole doorframe.

25
00:01:55,290 --> 00:02:00,880
I'd like to pick out all of the rows that have a missing value in the expenses column.

26
00:02:01,170 --> 00:02:02,330
How would I do that.

27
00:02:02,370 --> 00:02:02,880
Right.

28
00:02:03,090 --> 00:02:09,750
Well we actually already know that we can't just compare something to in any way but let's say hypothetically

29
00:02:09,750 --> 00:02:16,770
we forgot that because we skipped one of the previous tutorials or this is just our first inclination

30
00:02:16,770 --> 00:02:17,670
what would we do.

31
00:02:17,940 --> 00:02:22,370
Well the first inclination is to go finial assign expenses.

32
00:02:22,410 --> 00:02:24,630
This is us creating a filter equals and a.

33
00:02:24,960 --> 00:02:32,130
And then we would take this filter and would put it inside our doorframe common nothing.

34
00:02:32,190 --> 00:02:40,140
So just like you would over here fin Dolin please equals 45 comma nothing here which is safe in Dola

35
00:02:40,140 --> 00:02:41,860
expenses equals and a.

36
00:02:41,890 --> 00:02:44,980
So let's have a look at this what will happen over here.

37
00:02:45,240 --> 00:02:46,760
Well let's first look at the filter.

38
00:02:46,830 --> 00:02:48,050
What does it feel to look like.

39
00:02:48,120 --> 00:02:48,660
Aha.

40
00:02:48,720 --> 00:02:54,210
So it's not just true false it's actually all all all N.A. and that is exactly what we talked about

41
00:02:54,210 --> 00:03:01,910
previously that you cannot compare anything to and and a because the result will always be an A.

42
00:03:02,250 --> 00:03:09,750
And essentially Naturally if you run this filter run this subset now you get a very beautiful picture

43
00:03:09,810 --> 00:03:18,630
of 500 and A's or 500 rows of A's and yes so that is not what we're after.

44
00:03:18,630 --> 00:03:21,720
Definitely not helping here at all.

45
00:03:21,720 --> 00:03:25,470
And as we recall that is something we have already been prepared for.

46
00:03:25,470 --> 00:03:29,930
Once again we cannot just compare anything to and anay has to be a different way.

47
00:03:30,210 --> 00:03:37,190
What is that other way that we can finally find these rows that we're after these rows with and A's

48
00:03:37,260 --> 00:03:38,410
in expenses.

49
00:03:38,670 --> 00:03:42,890
Well that other way is through a function spatial function that has been created.

50
00:03:43,160 --> 00:03:45,020
This code is dot and a.

51
00:03:45,270 --> 00:03:49,700
And this function checks if something is and a as simple as that.

52
00:03:49,890 --> 00:03:54,940
Similar to functions like is that character is not integer is not numeric and so on.

53
00:03:55,170 --> 00:03:58,510
So let's have a look at how it works on a simple example.

54
00:03:58,560 --> 00:04:07,260
Let's say we have a vector a vector a of the following values that say one twenty four five hundred

55
00:04:07,370 --> 00:04:13,640
forty three then and they and then seventy six forty and and then again.

56
00:04:13,890 --> 00:04:14,160
Right.

57
00:04:14,160 --> 00:04:15,400
So there is a vector.

58
00:04:15,600 --> 00:04:22,630
And now if we apply is anay to victory or do we get we get false false false true false false true.

59
00:04:22,660 --> 00:04:28,180
So exactly what we were after it's telling us where these energies are sitting.

60
00:04:28,440 --> 00:04:30,660
And now we can use this function to our advantage.

61
00:04:30,660 --> 00:04:36,600
We can go ahead and apply it to our dataset so basically we are going to do the same thing as we did

62
00:04:36,600 --> 00:04:40,760
here but we're going to use a function instead of that equals sign so we're going to get rid of this

63
00:04:40,770 --> 00:04:45,640
double equals we'll say is Dawnay brackets X fin expenses.

64
00:04:45,960 --> 00:04:52,910
Run that here you can see we get false hopes also false true false false also holds true and so on.

65
00:04:52,920 --> 00:04:58,140
So we're singling out these days and that's exactly what we need for the filter so now we can simply

66
00:04:58,140 --> 00:05:04,660
take this replaces equals sign filter with this new filter new and improved filter.

67
00:05:04,740 --> 00:05:11,730
And if we run this we get the exact rows that we are after all these three rows have and NA's in the

68
00:05:11,730 --> 00:05:13,210
expenses column.

69
00:05:13,410 --> 00:05:14,020
So there we go.

70
00:05:14,020 --> 00:05:15,600
It's as simple as that.

71
00:05:15,690 --> 00:05:17,180
Picking out Rosbif.

72
00:05:17,450 --> 00:05:23,640
I highly encourage you to practice this so just maybe pick a different column that we know that has

73
00:05:23,640 --> 00:05:29,370
a name or maybe we don't even know it has a name and maybe try finding those names and see if you can

74
00:05:29,370 --> 00:05:34,000
pick out columns that or rows that have names.

75
00:05:34,140 --> 00:05:36,690
For instance let's try the state column.

76
00:05:36,960 --> 00:05:42,090
Can you pick out the rows that have a missing values in the state column.

77
00:05:42,090 --> 00:05:45,170
Using this method and I'll see you on the next tutorial.

78
00:05:45,270 --> 00:05:46,920
And until then happy coding
