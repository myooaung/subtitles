1
00:00:05,760 --> 00:00:12,630
Hello welcome back to that bonce course in our program today we have a very advanced tutorial ahead

2
00:00:12,630 --> 00:00:13,090
of us.

3
00:00:13,260 --> 00:00:20,610
Now this isn't a compulsory tutorial so feel free to skip it or if you don't get the hang of it right

4
00:00:20,610 --> 00:00:21,950
away doesn't really matter.

5
00:00:21,950 --> 00:00:27,740
You can always come back to it later and recap on it at the same time I did want to share this information

6
00:00:27,780 --> 00:00:32,880
because we've learned a lot about the plie functions and if you have been keeping up with these tutorials

7
00:00:32,970 --> 00:00:40,020
and you've been soaking up all this information then you are probably thirsty for a real hard challenge

8
00:00:40,020 --> 00:00:42,720
and this is exactly what we're going to have today.

9
00:00:42,720 --> 00:00:48,570
We're going to combine a few new concepts and we're going to learn with quite a few Also concepts that

10
00:00:48,630 --> 00:00:55,680
we have already possed or have already talked about in this section of the course and we're going to

11
00:00:55,710 --> 00:00:58,760
create something very very powerful.

12
00:00:58,980 --> 00:00:59,550
All right.

13
00:00:59,550 --> 00:01:02,020
So what are we off to today.

14
00:01:02,040 --> 00:01:10,680
Today we are after a result that will tell us something that we haven't yet found so let's look at this

15
00:01:10,800 --> 00:01:11,610
matrix over here.

16
00:01:11,610 --> 00:01:18,210
So we've got the cities at the top and then we've got the metrics on the left so this is a matrix of

17
00:01:18,210 --> 00:01:23,470
the maximums or deliverable 3 where we have for instance Chicago right.

18
00:01:23,490 --> 00:01:30,480
And then out of all of the average high fahrenheits in the weather list here for Chicago.

19
00:01:30,480 --> 00:01:36,900
So here we know that the highest was 84 so as you can see this matrix Let's make some more space.

20
00:01:36,930 --> 00:01:42,560
You can see that this matrix has 84 here and then average Loceff 68 was the highest.

21
00:01:42,580 --> 00:01:49,570
There we go some maxim average precipitation in inches 413 was the maximum out of this whole row.

22
00:01:49,770 --> 00:01:50,690
So there it is.

23
00:01:50,730 --> 00:01:57,570
It's in our result and and 11 was the maximum in this row and hours of sunshine was the maximum in this

24
00:01:57,570 --> 00:01:57,810
role.

25
00:01:57,810 --> 00:01:59,760
So there it is in our result as well.

26
00:01:59,760 --> 00:02:08,070
So the question now is how can we create a matrix that is similar to this but instead of the numbers

27
00:02:08,090 --> 00:02:14,910
let's say we don't care about the numbers we want them months we want to know when was the highest temperature

28
00:02:15,000 --> 00:02:21,270
it was in July when was the highest out of the lowest temperatures also in July when was the highest

29
00:02:21,270 --> 00:02:22,620
average station in inches.

30
00:02:22,620 --> 00:02:23,930
It was in May.

31
00:02:24,060 --> 00:02:26,780
You know when was a days highs days of precipitation.

32
00:02:26,790 --> 00:02:33,750
First one was in March and our house of sunshine when was that 318 that was also in July.

33
00:02:33,750 --> 00:02:40,410
So how can instead of the numbers we can actually get a matrix with the names of the months when that

34
00:02:40,410 --> 00:02:46,620
event happened maybe we're not interested in the numbers we're interested to understand the seasonality

35
00:02:46,620 --> 00:02:47,880
of these effects.

36
00:02:47,880 --> 00:02:49,280
How do we do that.

37
00:02:49,290 --> 00:02:56,490
All right so that is where we introduce the new concept which is which Max which actually allows us

38
00:02:56,490 --> 00:02:58,910
to perform something of that nature.

39
00:02:58,920 --> 00:03:04,250
So let's look at up first of all we always do this which don't.

40
00:03:04,260 --> 00:03:08,170
We always check the question mark because that can give us some ideas.

41
00:03:08,550 --> 00:03:09,730
So let's zoom in here.

42
00:03:09,750 --> 00:03:13,200
Where is the minimum or maximum or first.

43
00:03:13,200 --> 00:03:14,610
True or false.

44
00:03:14,610 --> 00:03:21,040
So here determines the location index of the first minimum or maximum or of a numeric or logical vector

45
00:03:21,040 --> 00:03:21,090
.

46
00:03:21,090 --> 00:03:24,150
So very simple to which we've already worked with.

47
00:03:24,150 --> 00:03:32,370
So usage which men which Max and so x can be in America logical or logical integer or double.

48
00:03:32,520 --> 00:03:38,170
So let's close this now and let's proceed to which Max basically returns the index.

49
00:03:38,280 --> 00:03:45,480
So let's say we have Chicago right so there's a Chicago matrix from Chicago matrix we're going to take

50
00:03:45,570 --> 00:03:48,890
the first row just take the full first roll.

51
00:03:49,140 --> 00:03:50,260
There's our first row.

52
00:03:50,490 --> 00:03:55,870
Now if we apply which Max here which doesn't Max what are we going to get.

53
00:03:56,310 --> 00:04:04,830
We're gonna get the index of where that maximal occurred so as you can see it's 1 2 3 4 5 6 7.

54
00:04:04,860 --> 00:04:10,950
It's telling us it's on the seventh position and actually giving us the name over here on the top because

55
00:04:10,950 --> 00:04:14,510
it was named vector which is very convenient in our case.

56
00:04:14,850 --> 00:04:15,240
All right.

57
00:04:15,270 --> 00:04:19,710
So how can we move from the 7 to the actual name.

58
00:04:19,710 --> 00:04:20,340
Very simple.

59
00:04:20,340 --> 00:04:26,010
We're just going to literally use this name because this is a named vector even though it looks like

60
00:04:26,010 --> 00:04:27,270
just one number.

61
00:04:27,270 --> 00:04:33,210
It is still a named vector as we remember everything and our is a vector is just a vector of length

62
00:04:33,300 --> 00:04:36,190
1 and so we can say names.

63
00:04:36,870 --> 00:04:40,660
And then we're going to take this and we're going to put it inside names.

64
00:04:41,330 --> 00:04:43,050
That gives us July OK.

65
00:04:43,110 --> 00:04:44,200
So that's a good start.

66
00:04:44,330 --> 00:04:52,090
But as you can imagine holy done that for one city and we've only done that for one role.

67
00:04:52,110 --> 00:04:53,810
So we're only doing that for one row.

68
00:04:53,840 --> 00:04:54,960
What does that tell us.

69
00:04:54,950 --> 00:04:58,900
Well that tells us that we need to add two iterations.

70
00:04:58,910 --> 00:05:03,400
We only done that for one row whereas we need to do it for all of the rows.

71
00:05:03,410 --> 00:05:06,110
Sounds like an apply type of iteration right.

72
00:05:06,120 --> 00:05:08,580
So this is how you think about this problem.

73
00:05:08,940 --> 00:05:14,510
We've done this for one row or five so we need to do this this for all the rows.

74
00:05:14,750 --> 00:05:19,950
And when you need to do something for all the rows that sounds like an applied type of iteration and

75
00:05:19,940 --> 00:05:26,160
then I've only done it for one matrix or one city out of four cities that we have a list.

76
00:05:26,330 --> 00:05:29,530
And when we need to iterate over a list what does that sound like.

77
00:05:29,550 --> 00:05:33,150
That sounds like an L apply or an air supply type of attrition.

78
00:05:33,140 --> 00:05:46,820
So by the sounds of it we will have apply right to iterate over rows of Matrix and we will have L apply

79
00:05:47,030 --> 00:05:54,130
or apply to iterate over component size of the list.

80
00:05:54,650 --> 00:05:56,550
So there is an apply probably.

81
00:05:56,570 --> 00:05:57,860
And one of these two.

82
00:05:58,110 --> 00:06:01,190
So let's see how we can bring all this to life.

83
00:06:01,190 --> 00:06:04,620
All right so the first part is going to be the Apply function.

84
00:06:04,860 --> 00:06:09,190
Let's type it up and what are we going to apply.

85
00:06:09,200 --> 00:06:16,880
So we start by working with Chicago which will be our guinea pig matrix and once again and then we're

86
00:06:16,880 --> 00:06:22,910
going to apply to the rows because we want to work the rows and then we want to apply a construct like

87
00:06:23,000 --> 00:06:23,750
this.

88
00:06:23,810 --> 00:06:24,500
How do we do that.

89
00:06:24,530 --> 00:06:31,020
Well we're going to call our own function we're going to say function X right so that is going to be

90
00:06:31,130 --> 00:06:31,740
the role.

91
00:06:31,740 --> 00:06:38,480
So this construct or here is going to be iterating over the rows of Chicago and it's going to be passing

92
00:06:38,490 --> 00:06:40,710
them on to this function as X.

93
00:06:40,740 --> 00:06:47,030
And so all we have to do is copy this part paste it in here and replace Chicago one because that's the

94
00:06:47,030 --> 00:06:50,580
role that we were testing this bit of code on.

95
00:06:50,570 --> 00:06:52,580
Now we just need to replace it with X.

96
00:06:52,640 --> 00:06:57,020
So once again apply we'll be iterating over Chicago over the rows.

97
00:06:57,020 --> 00:07:01,710
This concept will pick out the first row and the second the third the fourth or fifth and every time

98
00:07:01,700 --> 00:07:06,780
it'll pass on the row here for the first row the second or third the fourth the fifth in exactly this

99
00:07:06,770 --> 00:07:12,000
form it will be Chicago 1 km and I think Chicago to come Arthur's show with three coming I think every

100
00:07:12,000 --> 00:07:19,760
time it will be passed on as X into this construct names which Max and then the results of this will

101
00:07:19,760 --> 00:07:21,700
be the result of apply.

102
00:07:21,720 --> 00:07:23,210
So let's have a look at that.

103
00:07:23,380 --> 00:07:30,170
I run this line you will see that apply has created this named vector for us and that is that first

104
00:07:30,170 --> 00:07:35,110
row the result of the first shot was the July average low F.

105
00:07:35,120 --> 00:07:36,420
So that's the second row.

106
00:07:36,600 --> 00:07:42,440
The result was July 3rd row may then march and then June July as well.

107
00:07:42,500 --> 00:07:47,100
So hopefully this makes sense that's exactly what we wanted exactly what we're talking about.

108
00:07:47,250 --> 00:07:53,270
And now what we're going to do is we're going to take this a step further so we've done this part we've

109
00:07:53,310 --> 00:07:56,660
used apply for iterating over those of the matrix.

110
00:07:56,660 --> 00:08:02,900
Now we're going to add the next level where we want to iterate this whole construct and that is why

111
00:08:03,240 --> 00:08:09,450
this is an advance tutorial because we are iterating we've got a function and apply function and now

112
00:08:09,440 --> 00:08:16,620
we're going to take this apply function and we want to iterate that over our whole list.

113
00:08:16,700 --> 00:08:18,510
That's where we're going to add the L apply.

114
00:08:18,890 --> 00:08:21,000
All right so let's apply.

115
00:08:21,290 --> 00:08:27,560
All right what do we want to iterate over the list cold weather and what we want to iterate is we want

116
00:08:27,560 --> 00:08:30,150
to iterate this whole construct.

117
00:08:30,140 --> 00:08:36,500
So basically what we want to do is want to replace Chicago now with that every time the new matrix so

118
00:08:36,840 --> 00:08:42,690
it sort of just having Sragow they'll be l apply will be iterating over the matrices of weather and

119
00:08:42,670 --> 00:08:44,210
it will be putting them in here.

120
00:08:44,220 --> 00:08:44,940
So how do we do that.

121
00:08:44,970 --> 00:08:52,020
Well it is a function and we want why and then here we're going to take this construct everything here

122
00:08:52,860 --> 00:08:55,880
and we're going to place it right in there.

123
00:08:55,880 --> 00:09:00,590
All right so now we need to replace Chicago with why.

124
00:09:00,750 --> 00:09:01,310
Why is that.

125
00:09:01,350 --> 00:09:08,220
Well because l apply whether we'll iterate over the components of weather which are Chicago New York

126
00:09:08,420 --> 00:09:16,990
Houston San Francisco and every time it put that component in here and then this magical happened where

127
00:09:17,000 --> 00:09:23,850
apply will go through the rows of that component put the rows in here and then which Max will do its

128
00:09:23,850 --> 00:09:24,270
thing.

129
00:09:24,300 --> 00:09:25,960
And that names will do its thing.

130
00:09:26,120 --> 00:09:31,200
And so it does look complicated but that's what happens when you nest one thing and sends out another

131
00:09:31,320 --> 00:09:31,770
and another.

132
00:09:31,760 --> 00:09:33,400
So we've got three nice things here.

133
00:09:33,410 --> 00:09:39,580
We've got that's nested inside plie or probably Tuna's things that's inside that are in essence how

134
00:09:39,600 --> 00:09:42,260
to apply apply as nested inside of L apply.

135
00:09:42,530 --> 00:09:49,760
So for on this you can see that for Chicago we've got that same vector that we already had before.

136
00:09:49,880 --> 00:09:55,100
And then we've got there another one for New York another one for Houston and another one for San Francisco

137
00:09:55,120 --> 00:09:55,180
.

138
00:09:55,190 --> 00:09:58,930
You can see the values are changing so that's a good thing.

139
00:09:58,930 --> 00:10:02,150
That means we're not just replicating the same vector again and again.

140
00:10:02,510 --> 00:10:05,060
And in order to make all this look pretty.

141
00:10:05,210 --> 00:10:06,310
What can we do.

142
00:10:06,620 --> 00:10:07,620
That's right.

143
00:10:07,670 --> 00:10:12,800
Just to supply voila How beautiful is that.

144
00:10:12,870 --> 00:10:15,590
And literally takes one line of code.

145
00:10:15,600 --> 00:10:18,480
So there's everything here is just preparation.

146
00:10:18,530 --> 00:10:24,140
This is just that one line of code that we are after and we've got all matrix where we've got the cities

147
00:10:24,140 --> 00:10:27,920
at the top and we've got the metrics on the left.

148
00:10:28,160 --> 00:10:32,930
So that is quite an advanced technique to use an our.

149
00:10:33,090 --> 00:10:38,120
And congratulations if you got to the end of the story and you understood everything get your head around

150
00:10:38,180 --> 00:10:39,050
everything.

151
00:10:39,060 --> 00:10:45,050
If there was anything that was unclear don't worry just either do some finish the rest of the trolls

152
00:10:45,060 --> 00:10:49,920
in this section and practice a little bit more then come back to the store or just re watch this Tauriel

153
00:10:49,910 --> 00:10:55,970
and just take it step by step and practice all of these things with maybe some of your own examples

154
00:10:55,970 --> 00:11:03,500
or slight changes just to really understand these things because ultimately this is indeed one of the

155
00:11:03,500 --> 00:11:07,730
more advanced techniques in our or specifically apply type of functions.

156
00:11:07,830 --> 00:11:12,660
But at the same time it gets even harder or even more complex than this.

157
00:11:12,680 --> 00:11:19,190
So eventually it's a good idea to be quite comfortable with even techniques like the one that you saw

158
00:11:19,190 --> 00:11:23,570
in this tutorial and I hope you enjoyed creating these constructs today.

159
00:11:23,780 --> 00:11:25,870
And I look forward to seeing you next time.

160
00:11:25,940 --> 00:11:29,770
Until then happy coding.
