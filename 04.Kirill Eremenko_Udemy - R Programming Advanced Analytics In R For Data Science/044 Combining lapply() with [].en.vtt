WEBVTT
1
00:00:05.660 --> 00:00:10.950
Hello and welcome back to the advanced course on our program and the press tutorial we had quite an

2
00:00:10.950 --> 00:00:19.130
involved discussion about the Apply function and how it works how it breaks things down how it iterate

3
00:00:19.130 --> 00:00:20.780
over components of your list.

4
00:00:20.820 --> 00:00:27.350
We had three examples we got even closer to the final deliverable one which we're after.

5
00:00:27.510 --> 00:00:33.840
And what we're going to do today is introduce a very handy little trick that you can use with the Apply

6
00:00:33.840 --> 00:00:36.650
function to work with lists.

7
00:00:36.660 --> 00:00:41.090
So we're talking about combining El apply with the square brackets.

8
00:00:41.130 --> 00:00:44.010
Operator All right there's going to be interesting.

9
00:00:44.430 --> 00:00:49.830
And it's going to be different because the square brackets operator isn't actually like a function like

10
00:00:49.830 --> 00:00:53.690
Romains or other function that would be using transpose and so on.

11
00:00:53.880 --> 00:00:58.710
It looks like just you know square brackets but in reality you can combine it with helpline that's what

12
00:00:58.710 --> 00:01:00.410
we're going to see just now.

13
00:01:00.420 --> 00:01:00.870
All right.

14
00:01:00.930 --> 00:01:02.860
So here's our weather list.

15
00:01:02.860 --> 00:01:03.390
All right.

16
00:01:03.510 --> 00:01:04.790
Let's have a look.

17
00:01:04.800 --> 00:01:14.250
So there's a where the Lispeth got our four cities and let's say hypothetically that we wanted to extract

18
00:01:14.400 --> 00:01:21.170
this element this element of this matrix how would we do that we would go whether it's weather then

19
00:01:21.290 --> 00:01:27.390
it would say Dulles side of Chicago and then it would say because that would give us this matrix by

20
00:01:27.390 --> 00:01:28.100
itself.

21
00:01:28.260 --> 00:01:34.260
And then here I would say first row and the first column if I run that that gives me that element as

22
00:01:34.260 --> 00:01:39.550
we know this is identical to saying I'm even going to put it above because that's how we learned it

23
00:01:39.560 --> 00:01:39.890
.

24
00:01:39.960 --> 00:01:46.770
This is identical to saying let's get rid of that double square brackets to 1 because that is the first

25
00:01:46.770 --> 00:01:50.580
component of the list that will give us the same matrix.

26
00:01:50.580 --> 00:01:54.390
And then we say 1 1 so far on that.

27
00:01:54.480 --> 00:01:56.220
Exactly the same result.

28
00:01:56.470 --> 00:01:58.650
Right there you go 1 1 1.

29
00:01:58.800 --> 00:01:59.530
That's it.

30
00:01:59.610 --> 00:02:01.190
And Chicago 1 1.

31
00:02:01.200 --> 00:02:01.890
Awesome.

32
00:02:01.890 --> 00:02:03.550
So what do we want to do now.

33
00:02:03.570 --> 00:02:11.250
Well let's say hypothetically we wanted to extract the average high temperature in Fahrenheit for January

34
00:02:11.610 --> 00:02:15.960
for not just Chicago but for all of the four cities what would we do.

35
00:02:15.960 --> 00:02:20.110
We would of course would have to iterate over all of them right.

36
00:02:20.130 --> 00:02:27.000
We would have to do something like Chicago that would do same thing for New York and then we do same

37
00:02:27.000 --> 00:02:28.330
thing for the rest of them.

38
00:02:28.440 --> 00:02:28.750
Right.

39
00:02:28.770 --> 00:02:31.590
Which is identical to this song.

40
00:02:32.010 --> 00:02:38.130
But why would we try it every time you think of iterations think of and apply type of function.

41
00:02:38.130 --> 00:02:44.580
So that means here because we work in Fallis we could use the Apply function and you could say apply

42
00:02:45.150 --> 00:02:52.800
weather and then instead of passing a function like Romains or something we could just pass on the square

43
00:02:52.800 --> 00:02:53.280
brackets.

44
00:02:53.280 --> 00:02:55.350
OPERATOR And how do we do that.

45
00:02:55.350 --> 00:02:58.870
Well we just say quotation marks square brackets.

46
00:02:59.010 --> 00:03:02.130
And then we do 1 1.

47
00:03:02.190 --> 00:03:05.170
So this is the question here.

48
00:03:05.490 --> 00:03:09.410
This is the interesting part which square brackets are referring to here.

49
00:03:09.450 --> 00:03:11.950
In fact let's just forget about this example for now.

50
00:03:12.590 --> 00:03:13.680
Let's just work with this.

51
00:03:13.680 --> 00:03:19.660
So is this square brackets referring to this or is this square brackets referring to this.

52
00:03:19.770 --> 00:03:22.980
This is another part that we need to get our head around.

53
00:03:22.980 --> 00:03:25.230
So what does apply do l apply.

54
00:03:25.230 --> 00:03:30.330
By default by some when we say I'll apply whether what we're doing by default is we're saying all right

55
00:03:30.330 --> 00:03:33.100
we're going to iterate over the components of weather.

56
00:03:33.120 --> 00:03:41.160
So this part is iteration this part weather and one one brother one in double quotation will double

57
00:03:41.160 --> 00:03:43.950
square brackets whether to double square brackets.

58
00:03:44.010 --> 00:03:47.310
This part is implied over here already.

59
00:03:47.400 --> 00:03:49.490
That's just what applied does.

60
00:03:49.500 --> 00:03:51.390
So you can do anything about that.

61
00:03:51.390 --> 00:03:56.400
These square brackets are going to be there because that's the iteration process.

62
00:03:56.400 --> 00:03:59.460
This square bracket is this one over here.

63
00:03:59.550 --> 00:04:01.910
So we only need space for one because our smart.

64
00:04:01.930 --> 00:04:05.400
Understand that when you specify one square brackets actually mean two.

65
00:04:05.520 --> 00:04:06.710
That's how it works.

66
00:04:06.750 --> 00:04:08.100
And then what.

67
00:04:08.100 --> 00:04:09.450
These two ones do.

68
00:04:09.540 --> 00:04:14.840
They are the optional parameters that go inside this function which is a square bracket.

69
00:04:15.150 --> 00:04:17.820
So that is how you break this down.

70
00:04:17.840 --> 00:04:23.940
How conception is that was going on apply whether iterates over the separate components.

71
00:04:24.300 --> 00:04:30.540
And then here what you're doing is you're passing on the square brackets which are as just adding just

72
00:04:30.540 --> 00:04:31.150
as it were.

73
00:04:31.310 --> 00:04:36.960
Means a call means it would just apply Romains a call means to the whole matrix here to just applying

74
00:04:36.960 --> 00:04:40.700
the square brackets that you're passing on with the optional primers.

75
00:04:40.740 --> 00:04:43.350
So if I run this now we haven't run it yet.

76
00:04:43.480 --> 00:04:44.880
We're on this now.

77
00:04:45.000 --> 00:04:51.630
We will get a list containing the average high temperature in Fahrenheit for January for everyone of

78
00:04:51.630 --> 00:04:53.050
these cities.

79
00:04:53.130 --> 00:04:53.990
Beautiful.

80
00:04:54.150 --> 00:04:59.320
And just a quick couple more what else we can do is we can say so there's a weather list.

81
00:04:59.340 --> 00:05:00.160
What we want.

82
00:05:00.330 --> 00:05:06.320
Let's say we want the first row for every single city so we want to find out.

83
00:05:06.330 --> 00:05:07.590
We don't want all this information.

84
00:05:07.590 --> 00:05:11.610
All we need is average high temperatures in Fahrenheit for all of the months.

85
00:05:11.610 --> 00:05:12.600
How would we do that.

86
00:05:12.690 --> 00:05:19.840
But say apply whether that would say square bracket again and then it would say 1 and then comma nothing

87
00:05:19.840 --> 00:05:20.190
.

88
00:05:20.250 --> 00:05:24.160
So you'll even see that we're probably going to get a warning for this.

89
00:05:24.210 --> 00:05:24.550
No.

90
00:05:24.570 --> 00:05:25.440
No we didn't.

91
00:05:25.470 --> 00:05:29.430
Sometimes like exclamation mark pops up over there but seems ok time.

92
00:05:29.490 --> 00:05:30.480
So there we go.

93
00:05:30.480 --> 00:05:33.150
You can see a missing argument to function call.

94
00:05:33.180 --> 00:05:38.100
Even sometimes our studio thinks that you forgot something here but we didn't because we know that in

95
00:05:38.100 --> 00:05:40.240
square brackets we want that one coming out thing.

96
00:05:40.470 --> 00:05:44.350
So that what you have here is now we've got those extracts have been created.

97
00:05:44.370 --> 00:05:50.990
This is just the first row of every one of our matrices and they have been put into their own list.

98
00:05:51.060 --> 00:05:56.850
And finally how would you like maybe pause this video and let's say you want to create a list which

99
00:05:56.850 --> 00:06:00.420
contains these metrics but only for March.

100
00:06:00.420 --> 00:06:03.370
For every one of the cities suggest for March How would you do that.

101
00:06:03.390 --> 00:06:05.270
March is here.

102
00:06:05.310 --> 00:06:07.260
How would you create a list like that.

103
00:06:07.300 --> 00:06:09.940
Right so post this video give it a go.

104
00:06:10.200 --> 00:06:12.400
And I'm going to show you how I would do it.

105
00:06:12.690 --> 00:06:19.770
I would say apply whether Then I'll say square bracket and then I'll say nothing because I want all

106
00:06:19.770 --> 00:06:25.740
of the rose Colma three because March is the third month around that as you can see has been presented

107
00:06:25.740 --> 00:06:28.890
to us as column as Rose or as vectors.

108
00:06:29.040 --> 00:06:34.110
But this is indeed 46 city 2.0 and two you can see here that it is 46.

109
00:06:34.110 --> 00:06:39.780
Thirty two point seventy two so we got this column that we wanted and we got it for every single one

110
00:06:39.780 --> 00:06:40.810
of us cities.

111
00:06:40.890 --> 00:06:46.460
So that is how you combine the square brackets operator with the Apply function.

112
00:06:46.680 --> 00:06:52.600
Definitely give this a bit of practice just so that you can be very very comfortable with this.

113
00:06:52.620 --> 00:07:00.300
This is an incredibly powerful tool which you might find to come in handy in your work one day and I

114
00:07:00.300 --> 00:07:01.560
hope you enjoyed this story.

115
00:07:01.660 --> 00:07:03.930
I look forward to see the next one.

116
00:07:03.930 --> 00:07:05.450
And until then happy coding
