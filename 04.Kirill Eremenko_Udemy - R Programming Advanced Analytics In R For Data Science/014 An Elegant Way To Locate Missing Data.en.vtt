WEBVTT
1
00:00:05.730 --> 00:00:10.170
Hello and welcome back to the advanced course in our programming in one of the previous tutorials we

2
00:00:10.170 --> 00:00:14.850
discussed missing a daughter and the options that you have to deal with it.

3
00:00:14.850 --> 00:00:20.690
And here we've got a spreadsheet the actual data that we are working with is mapped out on what we're

4
00:00:20.700 --> 00:00:26.010
going to do with these different missing elements of our data so sometimes our proxied with the media

5
00:00:26.010 --> 00:00:30.560
and sometimes we're going to remove the whole row and we're just going to keep it as empty.

6
00:00:30.600 --> 00:00:33.440
Sometimes we can predict 100 percent certainty.

7
00:00:33.630 --> 00:00:36.880
And here again we're going to be proxying it with medians.

8
00:00:36.900 --> 00:00:43.260
So now we're going to proceed to our and find out how to allocate all of this same data in our studio

9
00:00:43.260 --> 00:00:44.070
.

10
00:00:44.100 --> 00:00:46.920
Let's go ahead and start doing that.

11
00:00:46.920 --> 00:00:47.180
All right.

12
00:00:47.190 --> 00:00:50.130
So there is a very elegant way of doing it.

13
00:00:50.190 --> 00:00:55.200
But before we move onto that let's have a look at our daughter's head first so let's look at the financial

14
00:00:55.200 --> 00:00:55.970
data set.

15
00:00:56.220 --> 00:00:58.420
As you can see there's lots and lots of columns here.

16
00:00:58.440 --> 00:01:04.950
Let's for instance here we were looking at the top 29 rows we only need probably the top 24 to see all

17
00:01:04.950 --> 00:01:06.290
the same things.

18
00:01:06.300 --> 00:01:13.310
So let's go and look at the top 24 so we need a head of fin and we need 24.

19
00:01:13.650 --> 00:01:19.020
So now if I make some space here this is exactly the same as we saw there.

20
00:01:19.160 --> 00:01:20.760
What do we see.

21
00:01:20.760 --> 00:01:28.110
Well we see some places they are and phase where we saw the red cell so those of us for a neuro there's

22
00:01:28.110 --> 00:01:29.960
that one over there.

23
00:01:30.030 --> 00:01:36.050
What else do we see there we've got this empty value here so it's not an A it's just empty.

24
00:01:36.060 --> 00:01:38.340
So we'll just keep that in mind for now.

25
00:01:38.430 --> 00:01:45.150
Then we've got some MTS over here as well were from the missing industry then we've got an AND A in

26
00:01:45.150 --> 00:01:49.680
brackets so that's going to be interesting was it in brackets.

27
00:01:49.680 --> 00:01:50.600
We'll talk about that.

28
00:01:50.610 --> 00:01:55.590
And also employees here we've got another and they are so very interesting.

29
00:01:55.590 --> 00:02:00.900
How do we now what we want to do is we want to single out all of these Razo we want to pull them out

30
00:02:00.900 --> 00:02:03.630
of this data frame just the rows of missing data.

31
00:02:03.630 --> 00:02:04.500
How do we do that.

32
00:02:04.500 --> 00:02:11.550
How can we pull these rules out in a very quick and elegant way so that we see them all together separately

33
00:02:11.550 --> 00:02:18.900
from the good Rose Well in our There's a great way to do it and we'll need a function called Complete

34
00:02:19.080 --> 00:02:20.530
tort cases.

35
00:02:21.000 --> 00:02:26.940
And here we're going to pass a function is your daughter a friend which is fine in our case and if we

36
00:02:26.940 --> 00:02:32.870
run this what it'll return is a vector containing just true and false value.

37
00:02:32.880 --> 00:02:38.670
So it's just telling you basically this is the first response the first true of the doorframe is a first

38
00:02:38.670 --> 00:02:39.720
show complete.

39
00:02:39.720 --> 00:02:40.610
Yes.

40
00:02:40.660 --> 00:02:41.610
Is the second all complete.

41
00:02:41.610 --> 00:02:42.050
Yes.

42
00:02:42.060 --> 00:02:43.750
Is a thorough complete false.

43
00:02:43.800 --> 00:02:44.190
Go check.

44
00:02:44.200 --> 00:02:46.220
That was a thorough not complete.

45
00:02:46.220 --> 00:02:47.790
So there's our third row.

46
00:02:48.150 --> 00:02:51.350
Something is missing see employees are missing here.

47
00:02:51.380 --> 00:02:57.290
So is basically checking if there's an M.A. in any one of the columns in these associated rows.

48
00:02:57.330 --> 00:03:01.000
As you can see here that's six seven eight in row eight.

49
00:03:01.020 --> 00:03:03.570
Again we've got an issue.

50
00:03:03.570 --> 00:03:06.060
So why do you do six seven eight.

51
00:03:06.300 --> 00:03:11.180
And here we've got these names so you can see how it's working it's picking up all of the rows that

52
00:03:11.190 --> 00:03:13.270
have at least one N.A. in them.

53
00:03:13.410 --> 00:03:14.070
So that's good.

54
00:03:14.070 --> 00:03:15.440
So we have to enforce vector.

55
00:03:15.450 --> 00:03:18.530
How can we actually now see the subset of the doorframe.

56
00:03:18.600 --> 00:03:23.280
Well we already know about subsetting how do we bring up the subset here.

57
00:03:23.280 --> 00:03:24.750
Very simple we go thin.

58
00:03:24.790 --> 00:03:27.060
Right and then nothing.

59
00:03:27.090 --> 00:03:29.820
So complete cases of common nothing.

60
00:03:29.820 --> 00:03:35.440
So this is a true false vector which will tell us which rose to pick out than common nothing.

61
00:03:35.480 --> 00:03:40.610
This will pick out only the good rows so we're followed and as what we want is we want the opposite

62
00:03:40.620 --> 00:03:42.620
so we want the negative of this.

63
00:03:42.630 --> 00:03:47.690
So basically we want all the Trews to turn into full so all the forces turn into true.

64
00:03:47.880 --> 00:03:55.010
So basically this exclamation mark complete that cases fin is all of the rows that do have an end and

65
00:03:55.000 --> 00:03:56.470
they in them.

66
00:03:56.490 --> 00:04:03.390
So if I just run this bit by itself you'll see that now it's turned into the opposite so this is true

67
00:04:03.390 --> 00:04:03.420
.

68
00:04:03.420 --> 00:04:06.280
This is true meaning that there is any in there.

69
00:04:06.360 --> 00:04:12.670
And so if we subset our data set like that we will get all of the rows with and and they add them.

70
00:04:12.720 --> 00:04:15.070
So what's the first thing that jumps to mind here.

71
00:04:15.330 --> 00:04:18.800
Well the first thing that jumps to mind is that we only have six rows.

72
00:04:18.810 --> 00:04:21.260
We have one two three four five six.

73
00:04:21.390 --> 00:04:26.730
And if we go back to the spreadsheet here you can see that even in this view in the top 24 we already

74
00:04:26.730 --> 00:04:30.410
have 7 we have 1 2 3 4 5 6 7.

75
00:04:30.450 --> 00:04:37.200
And plus there is more along the way so there is more way more rows than 6 with missing data right.

76
00:04:37.200 --> 00:04:39.020
How come we're only picking up 6.

77
00:04:39.300 --> 00:04:47.010
Well the reason for that is exactly what we discussed that if we look at our values here you will see

78
00:04:47.010 --> 00:04:53.790
that some of them are just not missing so they're not indicated as and and they they are just indicated

79
00:04:53.790 --> 00:04:58.220
with empty characters and that is not the same as an AK.

80
00:04:58.230 --> 00:05:04.800
And that's why our For instance thinks that this is a complete row that this value is supposed to be

81
00:05:04.830 --> 00:05:09.900
just empty quotation marks and this is supposed to be all 70 quotation marks so it's not picking them

82
00:05:09.900 --> 00:05:11.760
up as incomplete rows.

83
00:05:12.030 --> 00:05:13.370
So how can we fix that.

84
00:05:13.380 --> 00:05:17.160
Of course we can go through a data set and look for all these and correct them but then we'd have to

85
00:05:17.460 --> 00:05:18.840
do quite a lot of work.

86
00:05:18.900 --> 00:05:26.190
The best way to do this is to actually fix the problem at its core and to do that when we import the

87
00:05:26.190 --> 00:05:32.600
data we would need to replace all of these empty strings or empty character values with an AA.

88
00:05:32.650 --> 00:05:37.830
So that's what we're going to go to the very top where we imported the data and we'll say this was our

89
00:05:37.830 --> 00:05:39.760
basic import.

90
00:05:39.830 --> 00:05:41.280
So we'll just come in and out.

91
00:05:41.400 --> 00:05:47.460
And now we're going to create a new import and we're going to say fin read Dadds GSV future.

92
00:05:47.490 --> 00:05:51.130
Five hundred sixty three and then comma.

93
00:05:51.330 --> 00:05:55.030
And here we need to specify and a dot strings.

94
00:05:55.350 --> 00:06:02.700
So you're telling this function which is v what strings to replace or what characters replace with an

95
00:06:02.700 --> 00:06:07.950
ace and say we're here we're going to pass a vector of values and in that picture we're only going to

96
00:06:07.950 --> 00:06:11.480
just specify one value which is our empty quotation marks.

97
00:06:11.490 --> 00:06:14.170
Basically here you could specify anything you could say.

98
00:06:14.380 --> 00:06:21.010
New York for instance or any other values that you want are to treat as an ace or replace within.

99
00:06:21.080 --> 00:06:27.990
Now I guess we just want all of the empty character strings to be authentic characters to be replaced

100
00:06:28.080 --> 00:06:29.340
with an A.

101
00:06:29.340 --> 00:06:33.300
So that's why we're going to go from here we're going to rerun all of this code.

102
00:06:33.300 --> 00:06:34.380
Oh well let's rerun this.

103
00:06:34.380 --> 00:06:36.230
But first right.

104
00:06:36.300 --> 00:06:40.420
So if we look at the top of our data head all that just look at the top here.

105
00:06:40.690 --> 00:06:45.570
That's let's me give it a bit more so let's say had 20.

106
00:06:45.900 --> 00:06:52.980
So here now you'll see that in industry where we had we used to have just missing or just empty characters

107
00:06:52.980 --> 00:06:53.010
.

108
00:06:53.010 --> 00:06:55.940
Now we have an ace and same thing here right.

109
00:06:55.980 --> 00:07:02.880
So now we just need to Iran everything from here let's just highlight all of this code all the way down

110
00:07:02.880 --> 00:07:04.090
to where we are now.

111
00:07:04.410 --> 00:07:13.290
And so if we were on that get a few seconds and now if we run our extract or subset Now you can see

112
00:07:13.290 --> 00:07:20.100
that we're picking up way more rows and indeed here we're picking the one up with an ace for industry

113
00:07:20.100 --> 00:07:20.410
.

114
00:07:20.460 --> 00:07:24.420
And here we are picking up and a you can see that they were actually quite a lot of them with and ace

115
00:07:24.540 --> 00:07:30.440
in the state column and all in all this is a much quicker approach than actually going through a daughter

116
00:07:30.570 --> 00:07:30.720
.

117
00:07:30.800 --> 00:07:34.260
Roberto because you can see that we even had an N.A. in the roll.

118
00:07:34.250 --> 00:07:37.000
Three hundred seventy nine which is way down the track.

119
00:07:37.020 --> 00:07:40.590
And as you can imagine it would have taken us a long time to pick it up.

120
00:07:40.590 --> 00:07:46.110
So the last question we have for today is why are some of these rows.

121
00:07:46.110 --> 00:07:48.600
Why do some of these names have brackets around them.

122
00:07:48.600 --> 00:07:50.570
Why do some of them not have brackets.

123
00:07:50.570 --> 00:07:51.540
Those is very simple.

124
00:07:51.540 --> 00:07:57.270
It's basically just because of what's how are is treating these variables so if you look at the structure

125
00:07:57.270 --> 00:08:04.980
of fin you'll see that the ones that are being picked up with the brackets are inception industry and

126
00:08:04.980 --> 00:08:07.620
state and all of these are factors.

127
00:08:07.620 --> 00:08:14.940
Industry inception and state factors and on the other hand a revenue expenses profit growth and employees

128
00:08:15.450 --> 00:08:16.820
they don't have the brackets.

129
00:08:16.860 --> 00:08:19.930
That is because they are not factors.

130
00:08:19.950 --> 00:08:22.730
So as you can see these are not factors this is not a factor.

131
00:08:22.950 --> 00:08:29.280
So essentially are is just telling us that here at the brackets are here just to help us visually see

132
00:08:29.280 --> 00:08:35.370
that this is indeed an an a because imagine if you had a state like New York what if they're in Dallas

133
00:08:35.370 --> 00:08:38.760
had we had a state with the abbreviation of an A right.

134
00:08:38.760 --> 00:08:44.440
How would we distinguish earn a true and a real missing value from that type of state.

135
00:08:44.440 --> 00:08:44.670
Right.

136
00:08:44.670 --> 00:08:50.160
So that is why it is helping us out and saying OK you dealing with categories so just in case you have

137
00:08:50.160 --> 00:08:54.540
a category in there that has abreviation and am I'm going to put these brackets here so that you can

138
00:08:54.540 --> 00:08:58.370
see that this is indeed a missing value.

139
00:08:58.410 --> 00:08:58.980
So there we go.

140
00:08:59.010 --> 00:09:03.990
That's why the brackets are there and also most importantly That's our elegant way to pick out missing

141
00:09:04.050 --> 00:09:05.250
rows with missing values.

142
00:09:05.250 --> 00:09:13.000
So just use complete cases then negative of complete cases to flip this logic and then use that to subset

143
00:09:13.000 --> 00:09:13.920
your data set.

144
00:09:14.250 --> 00:09:19.740
And also don't forget something is actually going to take this line from here and I'm going to put it

145
00:09:19.740 --> 00:09:28.680
here just so we remember that we updated import to this because that way we can also see which other

146
00:09:28.680 --> 00:09:31.000
values have to be treated as an ace.

147
00:09:31.020 --> 00:09:36.690
And it's actually up to you as the dart analyst of data scientists to understand which values should

148
00:09:36.690 --> 00:09:39.690
indeed be treated as an ace in your data set.

149
00:09:39.750 --> 00:09:44.400
And then you just put it in import and that way it is much easier to pick out these dollars as you could

150
00:09:44.400 --> 00:09:44.910
see.

151
00:09:45.000 --> 00:09:49.670
It's simply one line of code and we can pick out these rows very quickly.

152
00:09:49.980 --> 00:09:54.030
Hope you enjoy this a Tauriel and I look forward to seeing you on the next one.

153
00:09:54.120 --> 00:09:55.440
Until then happy coding

154
00:09:57.560 --> 00:09:59.770
.
