1
00:00:05,600 --> 00:00:06,050
Hello.

2
00:00:06,150 --> 00:00:08,720
Welcome back to the course in our programming.

3
00:00:08,820 --> 00:00:13,940
So far we've learnt so much already about the Apply family functions.

4
00:00:14,100 --> 00:00:20,550
We've learnt the L apply as apply and apply functions we've learned how to use the air supply.

5
00:00:20,550 --> 00:00:26,790
Just recently we learned how to add our own functions or NEST our functions and apply functions we've

6
00:00:26,790 --> 00:00:31,410
learned how to combine the L plus function with square brackets operator.

7
00:00:31,440 --> 00:00:38,430
We learned how to use apply apply we learned how to recreate the Apply function with loops and so on

8
00:00:38,450 --> 00:00:38,490
.

9
00:00:38,520 --> 00:00:41,220
So we've learned very interesting techniques.

10
00:00:41,220 --> 00:00:45,990
And today we're going to learn yet another one of them.

11
00:00:45,990 --> 00:00:51,030
Today we're going to learn how to nest apply functions within apply functions.

12
00:00:51,030 --> 00:00:56,820
So this is going to be similar to nesting our own functions within functions but at the same time it

13
00:00:56,820 --> 00:01:03,960
might come off as a bit more complex because this is getting into one of Inception stuff where we're

14
00:01:03,960 --> 00:01:10,430
using an apply function to get a result and then another apply function on top of that result.

15
00:01:10,470 --> 00:01:11,780
So very interesting topic.

16
00:01:11,940 --> 00:01:14,060
Let's get started.

17
00:01:14,070 --> 00:01:20,100
What are we going to look at is we're going to start by looking at that one example that we worked with

18
00:01:20,100 --> 00:01:20,120
.

19
00:01:20,130 --> 00:01:25,360
So we worked with this example here l apply whether road means.

20
00:01:25,400 --> 00:01:32,850
And so let's first look at whether that's a weather list which has these four cities and now we're looking

21
00:01:32,850 --> 00:01:40,290
at El apply it where the road means which will give us the road means for each one of these matrices

22
00:01:40,460 --> 00:01:44,220
and it will place those means into a list.

23
00:01:44,220 --> 00:01:51,690
Now what you'll notice is if we look at questionmark road means which we have already done it will zoom

24
00:01:51,690 --> 00:01:58,500
in here quickly so we've got call soms rose some skol means road means right but there's nothing like

25
00:01:58,500 --> 00:02:01,620
that for for instance maximum or minimum.

26
00:02:01,620 --> 00:02:09,060
How come there isn't a predefined function and are to look at the road maximums and how can we work

27
00:02:09,060 --> 00:02:09,510
around it.

28
00:02:09,510 --> 00:02:10,820
How can we create our own.

29
00:02:11,070 --> 00:02:15,400
Well that's what we're going to start by doing this tutorial.

30
00:02:15,420 --> 00:02:21,090
So l apply where the romance is great to get the means how do we get the maximums.

31
00:02:21,300 --> 00:02:23,510
Well the first thing like we did before.

32
00:02:23,610 --> 00:02:27,240
Let's see how we do it just for the one matrix.

33
00:02:27,240 --> 00:02:28,550
Let's look at Chicago.

34
00:02:28,890 --> 00:02:29,670
There it is.

35
00:02:29,670 --> 00:02:32,520
How do we get that road maximums here right.

36
00:02:32,550 --> 00:02:38,670
So we don't have a function that would allow us to just quickly get the maxims from every single row

37
00:02:38,680 --> 00:02:38,890
.

38
00:02:39,090 --> 00:02:41,740
We don't have it handy so how are we going to do that.

39
00:02:41,760 --> 00:02:46,070
Well we're going to remember about that apply function which we haven't used in a while.

40
00:02:46,110 --> 00:02:51,780
The plie function applies something across all of your either of columns.

41
00:02:51,800 --> 00:02:55,060
So this see how we do that if that plot function would apply.

42
00:02:55,290 --> 00:03:00,860
Chicago they don't want to do it across the rows that's the one we want to do the max.

43
00:03:01,050 --> 00:03:08,090
So far on that that gives me the max for every one of these rows as the output which is great.

44
00:03:08,340 --> 00:03:14,400
Well now I don't want to just apply it to this one major Chicago I to apply to every single matrix in

45
00:03:14,400 --> 00:03:16,370
my weather list over here.

46
00:03:16,560 --> 00:03:17,680
So how would I do that.

47
00:03:17,850 --> 00:03:25,950
Well let's treat this as if it were one of our own functions and then we'll use an apply function to

48
00:03:25,950 --> 00:03:30,170
apply it across that whole list of matrices.

49
00:03:30,180 --> 00:03:34,720
I know this might sound super confusing but in reality it's very simple.

50
00:03:34,740 --> 00:03:36,390
So let's jump into it.

51
00:03:36,420 --> 00:03:44,640
We've got apply right so I might just put a quick comment here to apply across whole lists just to separate

52
00:03:44,760 --> 00:03:46,440
this bit of code from this bit of code.

53
00:03:46,590 --> 00:03:48,600
So here's apply right.

54
00:03:48,600 --> 00:03:49,290
How does it work.

55
00:03:49,290 --> 00:03:51,250
It goes Give me a list.

56
00:03:51,270 --> 00:03:55,950
Here's the list whether And I'm going to iterate through the components of the list which are matrices

57
00:03:56,340 --> 00:03:58,970
and I'm going to apply whatever you tell me to apply.

58
00:03:59,070 --> 00:04:00,990
What do you want me to apply.

59
00:04:00,990 --> 00:04:03,270
So here I can put a function.

60
00:04:03,270 --> 00:04:08,790
For instance I could put row means right like we had over here and put Romains but I don't want to apply

61
00:04:08,790 --> 00:04:09,300
Romains.

62
00:04:09,300 --> 00:04:11,840
I want to find the maximum of each row.

63
00:04:11,850 --> 00:04:18,150
So in sort of Romains what I would do is take apply this same line here put it here.

64
00:04:18,360 --> 00:04:22,890
The only complication here is that it's not just always going to be Chicago right.

65
00:04:22,900 --> 00:04:29,930
L apply will iterate through the weather list and it will decide every single time.

66
00:04:30,030 --> 00:04:34,210
Which component of the list will be used with this function.

67
00:04:34,350 --> 00:04:38,090
So this will be selected by L applied.

68
00:04:38,130 --> 00:04:45,960
So therefore this has to be deleted and that is where we need to use these to take them out and put

69
00:04:45,960 --> 00:04:49,610
them as optional parameters so I'm going to just delete all of that.

70
00:04:49,620 --> 00:04:54,760
So that's how closing bracket for apply and then apply and then comma.

71
00:04:54,810 --> 00:04:57,480
These are our optional parameters.

72
00:04:57,480 --> 00:04:58,680
So they go.

73
00:04:58,800 --> 00:05:00,140
That's how it works.

74
00:05:00,380 --> 00:05:02,680
Apply will iterate through the where the list.

75
00:05:02,840 --> 00:05:11,940
It'll pass on those matrices one by one to apply apply will take the Matrix and add on these optional

76
00:05:12,240 --> 00:05:13,100
arguments.

77
00:05:13,260 --> 00:05:21,840
So if I run this you will see that I have got the maximum for every single row of the Chicago matrix

78
00:05:22,240 --> 00:05:28,790
and I've got the maximum for every single row of the New York matrix and so on.

79
00:05:28,800 --> 00:05:34,160
So here I've got the maximum of every single row for the Houston matrix and so on.

80
00:05:34,410 --> 00:05:34,960
All right.

81
00:05:35,040 --> 00:05:42,780
So that is how we nest and apply function inside and then apply function the other way you could have

82
00:05:42,780 --> 00:05:48,830
done this just for kind of like to understand what's going on is you could have said apply apply whether

83
00:05:48,880 --> 00:05:49,310
.

84
00:05:49,650 --> 00:05:55,080
And then there's nothing stopping you from using this method saying that we are actually building a

85
00:05:55,080 --> 00:05:58,650
function function X right.

86
00:05:58,650 --> 00:06:03,620
And then you just take this what you had and then sort of skurry just put the X.

87
00:06:03,630 --> 00:06:04,950
So that's pretty much the same thing.

88
00:06:04,950 --> 00:06:09,510
So basically you're defining your own function here and you're saying it's going to be a function which

89
00:06:09,510 --> 00:06:16,980
is actually going to apply X one max then whatever else applies iterating through so those components

90
00:06:17,020 --> 00:06:20,100
they're going to become X and then you get to pick them up and put them in here.

91
00:06:20,220 --> 00:06:22,740
This is identical to this same thing.

92
00:06:22,740 --> 00:06:26,070
So if I run this you'll see that we get exactly the same results.

93
00:06:26,090 --> 00:06:33,730
Eighty four six eight 413 84 68 413 exactly the same result just two different philosophical approaches

94
00:06:33,730 --> 00:06:33,790
.

95
00:06:33,790 --> 00:06:38,010
This one's a bit shorter because you're not actually creating your own function you're putting your

96
00:06:38,010 --> 00:06:43,080
own function wrapper around and apply a function so that it's more convenient or easier to understand

97
00:06:43,080 --> 00:06:48,300
what's happening but if you get your head around this approach where you just apply and in the first

98
00:06:48,300 --> 00:06:53,430
argument is going to be passed on and then these are going to be picked up then this approach I would

99
00:06:54,150 --> 00:06:59,490
recommend using this one this one is better is just better because you don't have to reinvent the bicycle

100
00:06:59,850 --> 00:07:04,650
and create a function wrap her around the function just makes it more cumbersome.

101
00:07:04,680 --> 00:07:06,130
So this is preferred.

102
00:07:06,130 --> 00:07:10,640
Let's just put the stakes here and say preferred approach.

103
00:07:10,650 --> 00:07:17,250
All right so what else can we do then we can make this nice and tidy so you can see that once again

104
00:07:17,250 --> 00:07:18,420
it's a list.

105
00:07:18,420 --> 00:07:22,580
How do we make these things nice and tidy tidy up.

106
00:07:22,800 --> 00:07:27,630
Well we were you know we just take this and we say as apply.

107
00:07:27,660 --> 00:07:28,790
Right.

108
00:07:29,010 --> 00:07:33,300
So there are maximums for all of the rows and supply.

109
00:07:33,420 --> 00:07:38,260
Same thing minimum there are minimums for all the most beautiful.

110
00:07:38,260 --> 00:07:44,970
So this is going to be our deliverable three and this is going to be our deliverable for that is beautiful

111
00:07:44,970 --> 00:07:44,990
.

112
00:07:45,000 --> 00:07:48,650
And as you can see they are very very compact matrices.

113
00:07:48,690 --> 00:07:55,060
Everything is presented very nicely and it is easy to understand and easy to read.

114
00:07:55,440 --> 00:08:00,780
All right so that is how you nest and apply function within another apply function.

115
00:08:00,810 --> 00:08:02,190
Nothing too complicated.

116
00:08:02,190 --> 00:08:09,130
It might seem a bit confusing but at the same time it is actually very simple and straightforward.

117
00:08:09,420 --> 00:08:12,380
Hope you enjoy this material and I look forward See you next time.

118
00:08:12,390 --> 00:08:15,400
Until then happy.
