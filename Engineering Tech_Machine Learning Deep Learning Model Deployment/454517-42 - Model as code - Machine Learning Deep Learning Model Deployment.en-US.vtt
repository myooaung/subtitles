WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:03.450
In many scenarios in the real-world,

00:00:03.450 --> 00:00:05.550
you'll be running mandalas code.

00:00:05.550 --> 00:00:09.284
You'll be taking the model and integrating with another application.

00:00:09.284 --> 00:00:14.340
And your main application in moral code will be running within the same brand name.

00:00:14.340 --> 00:00:17.020
Let's see how that works.

00:00:17.300 --> 00:00:21.285
I'll layer we created a model for house price prediction.

00:00:21.285 --> 00:00:26.025
Let's first write a Python program to predict house price based on that model.

00:00:26.025 --> 00:00:29.775
Then we'll integrate that model code with another application.

00:00:29.775 --> 00:00:32.760
This is the formula that we came up with for

00:00:32.760 --> 00:00:35.895
host praise given the distance to the city center.

00:00:35.895 --> 00:00:39.150
Let's now write a Python program which will take distance

00:00:39.150 --> 00:00:42.635
to the city center is a parameter and predict the house price.

00:00:42.635 --> 00:00:47.410
In Python, you can create a class using class keyword and give it a name,

00:00:47.410 --> 00:00:48.700
and then put a colon.

00:00:48.700 --> 00:00:50.470
Then within the indented block,

00:00:50.470 --> 00:00:53.680
you can break your variables or functions.

00:00:53.680 --> 00:00:55.645
First we'll create a new method,

00:00:55.645 --> 00:01:00.235
which is like a constructor that gets invoked when the class gets instantiated.

00:01:00.235 --> 00:01:03.500
This is optional, you do not get to specify it.

00:01:03.930 --> 00:01:08.305
After that, we'll create a function which will predict the house place.

00:01:08.305 --> 00:01:11.680
And this function will take distances a parameter,

00:01:11.680 --> 00:01:13.765
and return the price.

00:01:13.765 --> 00:01:15.820
This is our mortal court.

00:01:15.820 --> 00:01:20.390
What house price prediction we can date a main function to test it.

00:01:20.790 --> 00:01:24.790
Within the main function will instantiate the class and

00:01:24.790 --> 00:01:28.400
then call grace passing distances a parameter.

00:01:28.400 --> 00:01:31.430
Either we can pass a float value or we can convert

00:01:31.430 --> 00:01:35.880
whatever parameter we get to a float value. Let's do that.

00:01:39.550 --> 00:01:42.750
Now we'll run this.

00:01:42.790 --> 00:01:46.700
We'll have a print statement to print the output.

00:01:46.700 --> 00:01:51.320
We can see that house prices 24, 7, 5, 3, 0.

00:01:51.320 --> 00:01:54.965
And let's pass a different value.

00:01:54.965 --> 00:01:58.830
And a different house prices getting printed.

00:02:01.600 --> 00:02:10.030
Now let's use this model in another Python application and create a new Python file.

00:02:10.030 --> 00:02:14.510
Let's call it another Python up.

00:02:14.700 --> 00:02:17.920
Here we'll import house prays predictor.

00:02:17.920 --> 00:02:21.850
In Python, you can import another Python file by just specific the filename.

00:02:21.850 --> 00:02:23.710
And if it is within a subdirectory,

00:02:23.710 --> 00:02:28.610
you to save from that subdirectory import the Python file.

00:02:28.890 --> 00:02:35.545
Then we'll create an instance of the model by invoking the class from the file limb.

00:02:35.545 --> 00:02:39.260
After that, we can predict by invoking the predict method.

00:02:39.690 --> 00:02:42.145
Let's run this.

00:02:42.145 --> 00:02:44.630
We've got Gauss place.

00:02:44.670 --> 00:02:49.344
This is how we can integrate your mortal cord within another application.

00:02:49.344 --> 00:02:51.080
You are modelled code and

00:02:51.080 --> 00:02:55.115
the main application they're running in the same runtime environment.

00:02:55.115 --> 00:02:58.010
You can also run your model code from

00:02:58.010 --> 00:03:01.640
another application by invoking is shell command that we had.

00:03:01.640 --> 00:03:03.830
This application need not be written in Python.

00:03:03.830 --> 00:03:09.000
It can be any application which can call it a shell command and execute the model code.

00:03:09.460 --> 00:03:13.350
Let's see how that will work in Python.

00:03:13.630 --> 00:03:17.700
We'll create a copy of this Python file.

00:03:17.920 --> 00:03:22.290
Let's call it house prays predicted to.

00:03:25.900 --> 00:03:29.090
Since we'll be running it as a separate process,

00:03:29.090 --> 00:03:32.645
we need to pass the distance has its command-line argument.

00:03:32.645 --> 00:03:38.345
Python is an arc parse package using which you can read command line arguments.

00:03:38.345 --> 00:03:40.460
First import that.

00:03:40.460 --> 00:03:45.875
Then you create an instance of argument parser and define what argument you want to read.

00:03:45.875 --> 00:03:47.974
We'll add an argument called distance,

00:03:47.974 --> 00:03:50.790
which is for distance to city center.

00:03:51.070 --> 00:03:53.990
You can add as many arguments here.

00:03:53.990 --> 00:03:58.280
And then we'll do a parser.org to get all the arguments.

00:03:58.280 --> 00:04:01.340
Now we did the constructor will extract

00:04:01.340 --> 00:04:07.860
the distance argument and store it in a variable distance to city center.

00:04:08.110 --> 00:04:12.200
And we'll make it a class level variable by saying self.age,

00:04:12.200 --> 00:04:13.955
distance to city center.

00:04:13.955 --> 00:04:16.700
And we'll convert float.

00:04:16.700 --> 00:04:21.990
Now here we do not need to pass distances a parameter.

00:04:26.740 --> 00:04:32.730
And whatever argument we receive will use that to predict the house place.

00:04:35.050 --> 00:04:38.510
In Anaconda spider, you can configure command

00:04:38.510 --> 00:04:42.870
line arguments by clicking on Run and configure per file.

00:04:43.810 --> 00:04:46.790
Then click on command line option,

00:04:46.790 --> 00:04:49.190
and here you specify the arguments.

00:04:49.190 --> 00:04:52.410
We have distances in our document.

00:04:55.360 --> 00:04:58.220
Let's run it now.

00:04:58.220 --> 00:05:02.105
We can see the prediction 3, 2, 0, 1, 66.

00:05:02.105 --> 00:05:05.840
We can change it to a different value and see the output.

00:05:05.840 --> 00:05:07.890
Let's send it to three.

00:05:08.680 --> 00:05:12.065
We can see a different house price here.

00:05:12.065 --> 00:05:16.760
So this program takes a command line argument and gives the prediction.

00:05:16.760 --> 00:05:20.810
Let's now invoke this program using a shell command.

00:05:20.810 --> 00:05:24.170
You can use the waste labeling, waste labor,

00:05:24.170 --> 00:05:28.010
religious system method using which you can execute any command.

00:05:28.010 --> 00:05:29.825
To run the Python file,

00:05:29.825 --> 00:05:35.850
we need to say Python and the filename and whatever command line argument we are to pass.

00:05:36.370 --> 00:05:40.520
Let's go back to house prays predictive Python file, Right?

00:05:40.520 --> 00:05:45.515
The model prediction to disk will create a file called model output.

00:05:45.515 --> 00:05:48.630
And that will go to whatever prediction will get.

00:05:49.180 --> 00:05:53.220
We need to call the predictor 2. Here.

00:05:53.350 --> 00:05:57.690
We lived. You could just this block of code.

00:05:58.180 --> 00:06:00.695
Okay, got executed.

00:06:00.695 --> 00:06:02.405
Let's go to Files tab.

00:06:02.405 --> 00:06:05.375
We can see the prediction getting written to a file.

00:06:05.375 --> 00:06:07.190
Let's pass a different value.

00:06:07.190 --> 00:06:08.520
Now.

00:06:08.980 --> 00:06:15.500
We rotate again and open the model output.

00:06:15.500 --> 00:06:17.795
We can see a different value.

00:06:17.795 --> 00:06:22.505
This is that we can invoke a model as a separate process using the Python shell command.

00:06:22.505 --> 00:06:26.165
So these are the two ways you can execute. Model is a code.

00:06:26.165 --> 00:06:31.595
Either have the model code within the main application or run it as a separate process.

00:06:31.595 --> 00:06:34.430
When you are running it as a separate process,

00:06:34.430 --> 00:06:37.310
you need to decide how you are being sensed data with the model.

00:06:37.310 --> 00:06:41.300
If her passing limited parameters that can be done using command-line arguments.

00:06:41.300 --> 00:06:44.885
However, if you had to pass a large file and then get the prediction,

00:06:44.885 --> 00:06:48.965
then you can store that file to somewhere where the model code can access it.

00:06:48.965 --> 00:06:52.370
And then within the model code you can read the file, do the prediction,

00:06:52.370 --> 00:06:54.335
and then store the prediction to another file

00:06:54.335 --> 00:06:57.780
from where the main application can read the prediction.
