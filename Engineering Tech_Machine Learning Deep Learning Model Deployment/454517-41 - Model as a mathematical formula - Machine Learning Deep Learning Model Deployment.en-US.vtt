WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.750
Or some models, we can extract

00:00:03.750 --> 00:00:07.169
the formula from the model and use it in another application.

00:00:07.169 --> 00:00:10.905
We do not need to store the binaries.

00:00:10.905 --> 00:00:14.055
Linear regression is one such models

00:00:14.055 --> 00:00:18.644
where the formula can be extracted and used in other applications.

00:00:18.644 --> 00:00:22.575
So let's understand linear regression through a simple example.

00:00:22.575 --> 00:00:27.340
Unlike classification where we predict the class of the output.

00:00:27.340 --> 00:00:29.720
Here we predict continuous values.

00:00:29.720 --> 00:00:35.915
For example, if this chart shows what is the car price for a certain number of cylinders,

00:00:35.915 --> 00:00:37.700
then given a number of cylinders,

00:00:37.700 --> 00:00:39.815
can we predict the car price?

00:00:39.815 --> 00:00:43.860
This type of prediction is called Regulation.

00:00:43.870 --> 00:00:47.000
Now, given this data points,

00:00:47.000 --> 00:00:51.560
how do we determine the price of a new car for a certain number of cylinders?

00:00:51.560 --> 00:00:54.905
Using linear regression, we can easily solve this problem.

00:00:54.905 --> 00:01:01.520
Linear regression is nothing but trying to find the line that best fits these points.

00:01:01.520 --> 00:01:04.730
And how do we determine this line is

00:01:04.730 --> 00:01:09.395
calculated based on a formula called Y equals a plus bx,

00:01:09.395 --> 00:01:13.770
where a is the intercept and b is the coefficient of the line.

00:01:14.260 --> 00:01:16.520
Now for any new point,

00:01:16.520 --> 00:01:17.975
if we know the x value,

00:01:17.975 --> 00:01:22.160
then we can easily determine the y value by using this formula.

00:01:22.160 --> 00:01:25.010
Scikit-learn and other machine learning libraries,

00:01:25.010 --> 00:01:28.400
they provide you a class using which you can feed

00:01:28.400 --> 00:01:32.570
different data points and get this aggression or the predictor.

00:01:32.570 --> 00:01:35.765
How does the model determines the best-fitting line?

00:01:35.765 --> 00:01:39.440
And how do we know the accuracy of the prediction?

00:01:39.440 --> 00:01:44.075
So that is done by a simple concept called r-squared,

00:01:44.075 --> 00:01:47.105
which is also known as coefficient of determination.

00:01:47.105 --> 00:01:50.630
What this means is how good is the line compared to

00:01:50.630 --> 00:01:55.865
the line which is represented by the mean value of all the points.

00:01:55.865 --> 00:01:59.150
For example, if this is the mean value of all the data points,

00:01:59.150 --> 00:02:02.375
we can also predict using this mean value.

00:02:02.375 --> 00:02:05.840
But if we are coming up with a new line with linear regression,

00:02:05.840 --> 00:02:10.640
we need to see how good is that ln compared to this line.

00:02:10.640 --> 00:02:14.600
Now to calculate the R-square value concept is simple.

00:02:14.600 --> 00:02:18.680
You calculate what is the error for each of the points.

00:02:18.680 --> 00:02:25.130
That means how far is the line off from the actual value for any point?

00:02:25.130 --> 00:02:26.795
If this is the actual value,

00:02:26.795 --> 00:02:34.310
the point at which the vertical red line intercepts the predictor is the predicted value.

00:02:34.310 --> 00:02:39.515
The distance in red represents the loss or the error in prediction.

00:02:39.515 --> 00:02:42.275
You calculate loss for each point.

00:02:42.275 --> 00:02:44.690
Do a square of that and add it up,

00:02:44.690 --> 00:02:51.560
you get the sum of square of residuals that is shown in the numerator here.

00:02:51.560 --> 00:02:55.310
Similarly, you calculate how far is the mean line from

00:02:55.310 --> 00:02:58.790
the actual value that is represented in green here.

00:02:58.790 --> 00:03:01.640
So that is sum of squares up totals lower

00:03:01.640 --> 00:03:05.465
the error lower is the value up sum of square of residuals.

00:03:05.465 --> 00:03:08.225
So the numerator will tend to 0.

00:03:08.225 --> 00:03:10.460
When the model becomes more accurate.

00:03:10.460 --> 00:03:14.120
That means R square value would be closer to one. For a.

00:03:14.120 --> 00:03:17.390
The accuracy modelling. So higher the window part square,

00:03:17.390 --> 00:03:19.740
better is the accuracy.

00:03:21.310 --> 00:03:24.905
And R-squared can never Maxwell loved one.

00:03:24.905 --> 00:03:29.465
R-square is also known as coefficient of determination.

00:03:29.465 --> 00:03:34.415
You may or may not remember the exact formula of R-squared.

00:03:34.415 --> 00:03:36.245
But for any model,

00:03:36.245 --> 00:03:38.795
you will find a method to get that square value.

00:03:38.795 --> 00:03:41.615
All you have to check is whether it is close to one or not.

00:03:41.615 --> 00:03:43.265
If the value is close to one,

00:03:43.265 --> 00:03:45.845
then you know that your model is where the credit.

00:03:45.845 --> 00:03:49.625
Let's apply this concept and solve a use case.

00:03:49.625 --> 00:03:52.385
Then we'll see how to extract formulas and then

00:03:52.385 --> 00:03:55.995
use the formula to predict output for new set of values.

00:03:55.995 --> 00:04:00.590
We have a new dataset called house prays dot csv.

00:04:01.350 --> 00:04:05.200
So it is two fields, distance in price.

00:04:05.200 --> 00:04:10.165
So distance represents what is the distance of the house from the city center.

00:04:10.165 --> 00:04:13.540
And price represents what is the house price.

00:04:13.540 --> 00:04:14.920
So as you can see,

00:04:14.920 --> 00:04:18.310
are higher the distance lowers the price.

00:04:18.310 --> 00:04:22.945
Now, how do we calculate how sprays of a new house,

00:04:22.945 --> 00:04:26.575
which is at a particular distance from the city center.

00:04:26.575 --> 00:04:31.135
We need to build a machine learning model using the linear regression technique,

00:04:31.135 --> 00:04:33.580
which you learn from this data and create

00:04:33.580 --> 00:04:38.520
a model using which we can predict how sprays for new set of data.

00:04:38.520 --> 00:04:40.790
Let's import the standard libraries.

00:04:40.790 --> 00:04:43.310
This time we'll also import matplotlib so that we can

00:04:43.310 --> 00:04:46.640
plot the house price and our distance.

00:04:46.640 --> 00:04:50.165
Next, let's load the dataset to a Pandas DataFrame.

00:04:50.165 --> 00:04:53.720
So as you can see, the advertisement loaded to the pandas DataFrame.

00:04:53.720 --> 00:04:57.690
Let's describe it to get some statistical info.

00:04:58.540 --> 00:05:02.510
We can see there are 40 records and the mean,

00:05:02.510 --> 00:05:04.625
standard deviation and other values.

00:05:04.625 --> 00:05:09.274
Let's separate out the independent and dependent variables.

00:05:09.274 --> 00:05:14.550
X will have the distance to the city center and why you left the house price.

00:05:21.960 --> 00:05:29.360
We can also plot the house price and distance to see how it looks on a chart.

00:05:30.960 --> 00:05:35.079
We can see that there is a linear relationship.

00:05:35.079 --> 00:05:40.180
Is the distance increases the house prices going down.

00:05:40.180 --> 00:05:43.465
And that is in a linear fashion.

00:05:43.465 --> 00:05:50.425
Now using linear regression will have to find a line that best represents these points.

00:05:50.425 --> 00:05:54.655
And using that will predict output for new data points.

00:05:54.655 --> 00:05:58.100
We'll comment it out for now.

00:05:58.650 --> 00:06:04.810
Let's run it again. Now using scikit-learn train test split.

00:06:04.810 --> 00:06:08.210
We'll create the training data and test data.

00:06:16.920 --> 00:06:23.245
So we are using 32 records for training and eight records for testing.

00:06:23.245 --> 00:06:27.100
Scikit-learn provides a linear regression class using

00:06:27.100 --> 00:06:32.330
which we can create a regression object that could be our model.

00:06:33.120 --> 00:06:36.280
So this the aggression is the line or

00:06:36.280 --> 00:06:39.745
the model which has been trained on the training data.

00:06:39.745 --> 00:06:43.600
From regression, we can easily calculate the r square value.

00:06:43.600 --> 00:06:46.885
There is a score method which gives us the R-square.

00:06:46.885 --> 00:06:54.220
Print. The R square value is 0.807,

00:06:54.220 --> 00:06:55.720
so it's not very close to one.

00:06:55.720 --> 00:06:58.045
That means the model is not very accurate.

00:06:58.045 --> 00:07:00.760
We are anyway, trying it out with a very small set of

00:07:00.760 --> 00:07:04.810
data to understand how machine-learning deployment works.

00:07:04.810 --> 00:07:07.510
For now, we are fine with this R-squared value and we'll

00:07:07.510 --> 00:07:10.030
move forward from the regression.

00:07:10.030 --> 00:07:19.570
We can easily determine the intercept and coefficient for our intercept is 610710.

00:07:19.570 --> 00:07:22.390
Let's now get the coefficient.

00:07:22.390 --> 00:07:29.895
Coefficient is minus 72635 because our house prices going down as the distance increases.

00:07:29.895 --> 00:07:32.855
So that's where we are seeing a negative coefficient.

00:07:32.855 --> 00:07:36.380
Now, anybody who wants to use our model can take

00:07:36.380 --> 00:07:39.575
this intercept coefficient and get the house price.

00:07:39.575 --> 00:07:44.150
We do not need to send them the regressor class in binary format or export that model.

00:07:44.150 --> 00:07:47.315
All we need to share is the formula.

00:07:47.315 --> 00:07:53.435
So our formula becomes Y equal intercept plus coefficient multiplied by x.

00:07:53.435 --> 00:08:01.280
So it is price sequence 610710 minus 72635 multiplied

00:08:01.280 --> 00:08:04.190
by the distance will first predict using

00:08:04.190 --> 00:08:06.440
the predictor method will feed

00:08:06.440 --> 00:08:10.020
the training data to the regression and get the prediction.

00:08:13.240 --> 00:08:16.160
So this is the predicted house price.

00:08:16.160 --> 00:08:19.190
Let's compare it with the jailhouse place.

00:08:19.190 --> 00:08:22.940
We can see that for some cases it is very close.

00:08:22.940 --> 00:08:26.240
In some cases it is little bit off from the actual price.

00:08:26.240 --> 00:08:27.950
These are the actual prices,

00:08:27.950 --> 00:08:30.180
these are the predicted values.

00:08:31.210 --> 00:08:36.660
We can also plot the predicted value and the actual value.

00:08:38.860 --> 00:08:41.450
Created a scattered plot for

00:08:41.450 --> 00:08:45.720
the actual values for a predicted value of peer deadline block.

00:08:46.000 --> 00:08:50.195
So this line represents our degree or our predictor.

00:08:50.195 --> 00:08:51.530
Now for any new point,

00:08:51.530 --> 00:08:56.195
we can easily determine the house price given the distance citizens.

00:08:56.195 --> 00:08:59.780
Let's now predict the house price for a house which is

00:08:59.780 --> 00:09:03.485
at 2.5 mile distance from the city center,

00:09:03.485 --> 00:09:07.940
the value is coming around four to 91 to 0.

00:09:07.940 --> 00:09:11.750
We can also get the same output using the formula

00:09:11.750 --> 00:09:16.505
y equal intercept plus coefficient multiplied by the X value.

00:09:16.505 --> 00:09:19.820
So we got four to 91 to 0.

00:09:19.820 --> 00:09:22.460
Now to shared this model with anyone,

00:09:22.460 --> 00:09:23.555
we can share the formula.

00:09:23.555 --> 00:09:27.035
We can also create pickle files and create raced EPA's,

00:09:27.035 --> 00:09:30.140
but this is one of the option that is available to export.

00:09:30.140 --> 00:09:32.640
Linear regression models.
