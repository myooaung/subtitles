WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.250 --> 00:00:04.260
In this lab we'll see how to clear

00:00:04.260 --> 00:00:08.460
a local Postgres database and use that as a model stood.

00:00:08.460 --> 00:00:12.760
First will download and install Postgres equal.

00:00:13.880 --> 00:00:19.300
Go to post-classic collapse site and go to the download link.

00:00:21.260 --> 00:00:24.600
I'll be downloading for Windows.

00:00:24.600 --> 00:00:28.060
Click on download the installer.

00:00:30.200 --> 00:00:33.990
Let's pick 10 dot 14.

00:00:33.990 --> 00:00:37.750
I'll download for Windows 64-bit.

00:00:39.010 --> 00:00:43.110
Once downloaded, click on the installer.

00:00:43.990 --> 00:00:46.830
Click Next.

00:00:47.080 --> 00:00:50.195
You can leave the default directly.

00:00:50.195 --> 00:00:58.130
No need for stock builder will give our main admin.

00:00:58.130 --> 00:00:59.840
You can choose any password.

00:00:59.840 --> 00:01:03.120
5, 4, 3, 2 is the default port.

00:01:06.400 --> 00:01:08.915
Let's install.

00:01:08.915 --> 00:01:14.900
Suppose this sequence has been installed to Lord post-classic.

00:01:14.900 --> 00:01:24.240
Well, simply pay BCR been and click on it.

00:01:25.480 --> 00:01:29.360
Pcr administer interface to a database.

00:01:29.360 --> 00:01:34.145
It open sit at localhost port phi 1 4 0, 1.

00:01:34.145 --> 00:01:37.670
If p's yard when text pane to Lord search where PC,

00:01:37.670 --> 00:01:40.940
which should also be present on your machine.

00:01:40.940 --> 00:01:45.305
That is the command-line tool to enter Postgres.

00:01:45.305 --> 00:01:50.060
Then prompted for local laws just hit Enter on

00:01:50.060 --> 00:01:55.970
Database default database postgres hit Enter Porter's Five 432, that's 34,

00:01:55.970 --> 00:02:04.850
port data into and use an image Postgres password for the user positivists,

00:02:04.850 --> 00:02:07.805
that is the password that you would have given during installation.

00:02:07.805 --> 00:02:10.325
I gave out with. So I'll enter that.

00:02:10.325 --> 00:02:14.250
And now I am in the Postgres database.

00:02:15.160 --> 00:02:19.460
Now that we are connected to the Postgres database locally,

00:02:19.460 --> 00:02:22.400
let's create a schema and under that will create

00:02:22.400 --> 00:02:25.685
a table which will be the marginal catalog locally.

00:02:25.685 --> 00:02:28.460
We'll create a schema called modern store.

00:02:28.460 --> 00:02:32.370
Then within that will create a Eugenics model catalog table.

00:02:34.000 --> 00:02:38.495
This is the same create script that retried in cola one layer.

00:02:38.495 --> 00:02:41.420
Let's try to fetch from this table.

00:02:41.420 --> 00:02:43.970
Nothing is getting phased because we have

00:02:43.970 --> 00:02:47.550
not stored any models in this module catalog table.

00:02:48.850 --> 00:02:52.790
Let's now go to spider and create a model

00:02:52.790 --> 00:02:56.330
and store the model into Postgres table in the local database.

00:02:56.330 --> 00:03:00.725
Before we can interact with Postgres from a Python file locally,

00:03:00.725 --> 00:03:03.620
we need to ensure psycopg2 is installed into Python.

00:03:03.620 --> 00:03:05.990
And moment. Since you are using

00:03:05.990 --> 00:03:10.850
Anaconda spider equilibrium shift psycopg2 is available in the conda environment.

00:03:10.850 --> 00:03:22.200
Go to Anaconda Prompt and do a pip install psycopg2.

00:03:24.910 --> 00:03:27.110
I've already installed it,

00:03:27.110 --> 00:03:29.270
so it says that requirement already satisfied.

00:03:29.270 --> 00:03:32.420
But if it is not been started to install it after that,

00:03:32.420 --> 00:03:36.000
you can verify it by simply importing psycopg2.

00:03:36.010 --> 00:03:39.870
And it is getting imported correctly.

00:03:40.600 --> 00:03:43.520
Now we have a new Python file.

00:03:43.520 --> 00:03:47.540
Within this Python file will create a model and store it in the table.

00:03:47.540 --> 00:03:51.480
The code would be exactly the same as what we tried in Colab.

00:03:53.050 --> 00:03:58.490
When you go into your store purchase date read.csv is available in the same directory.

00:03:58.490 --> 00:04:02.615
And then we'll create the model using the KNN technique.

00:04:02.615 --> 00:04:07.230
Let's run up to this point where we check the accuracy,

00:04:11.170 --> 00:04:15.360
0.875, so it is working correctly.

00:04:15.910 --> 00:04:20.940
Next, we'll store the classifier and scalar in binary format.

00:04:21.280 --> 00:04:25.745
After that, we'll insert the models to Postgres table.

00:04:25.745 --> 00:04:30.170
We need to ensure schema name and the table name boater specified.

00:04:30.170 --> 00:04:33.740
And also locally we have a different password admin,

00:04:33.740 --> 00:04:35.690
so that has to be captured here.

00:04:35.690 --> 00:04:39.020
Rest of the court is same as what we call up.

00:04:39.020 --> 00:04:42.390
Let's run this block now.

00:04:45.430 --> 00:04:48.959
We've got executed successfully.

00:04:50.170 --> 00:04:55.200
We can go to PC equivalent query the table.

00:04:58.060 --> 00:05:01.610
We can see that both the records that are getting fetched,

00:05:01.610 --> 00:05:05.160
the model is getting shorter window binary format.

00:05:08.530 --> 00:05:13.880
Now we've created a model and stored it locally in a Postgres table.

00:05:13.880 --> 00:05:17.585
Any application which is access to that Postgres database

00:05:17.585 --> 00:05:21.695
can extract the models and use the models for prediction.

00:05:21.695 --> 00:05:25.415
Let's try it out in another Python file.

00:05:25.415 --> 00:05:28.775
We'll call it use modals from dB.

00:05:28.775 --> 00:05:32.255
And then we let the same chord is what we had in colab.

00:05:32.255 --> 00:05:35.765
Import psycopg2, establish a connection,

00:05:35.765 --> 00:05:39.215
and then select from the model catalog table.

00:05:39.215 --> 00:05:42.230
Make sure you have the schema them captured here.

00:05:42.230 --> 00:05:45.360
And then after that, do the prediction.

00:05:47.320 --> 00:05:50.760
We are getting expected result.

00:05:51.070 --> 00:05:57.630
These or we can have a local Postgres database and use that to store and retrieve models.
