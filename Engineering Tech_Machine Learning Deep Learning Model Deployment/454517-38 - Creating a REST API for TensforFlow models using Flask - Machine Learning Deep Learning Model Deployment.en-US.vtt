WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:04.320
You have seen how to create risks EPA for

00:00:04.320 --> 00:00:07.485
TensorFlow Martin's using TensorFlow model server.

00:00:07.485 --> 00:00:12.375
We can also create rest APA for TensorFlow models using flask.

00:00:12.375 --> 00:00:15.630
So let's see how that can be done in the collab environment.

00:00:15.630 --> 00:00:20.385
And you can try the same thing on a virtual server or any other environment.

00:00:20.385 --> 00:00:29.175
Will download the text classifier model fails the protocol files that we created earlier.

00:00:29.175 --> 00:00:32.925
And we will also download the Dart DFID, pleasure.

00:00:32.925 --> 00:00:37.905
And then we'll upload to a new collab notebook,

00:00:37.905 --> 00:00:42.470
TF-IDF, modeler and text classifier.

00:00:42.550 --> 00:00:46.670
After that, we need to unzip the file.

00:00:46.670 --> 00:00:49.829
And then let's import TensorFlow.

00:00:50.020 --> 00:00:53.970
And we'll import Lord Martin.

00:00:54.310 --> 00:01:00.200
And then let's load the model fails to a model variable.

00:01:00.200 --> 00:01:05.790
And we'll import pickle and Lord their TF-IDF model.

00:01:07.390 --> 00:01:12.410
After that, we'll install Flask in Iraq.

00:01:12.410 --> 00:01:17.015
Now the steps should be similar to what we did for scikit-learn are

00:01:17.015 --> 00:01:23.075
biters models will import all the flask liabilities.

00:01:23.075 --> 00:01:29.060
Create an app. We'll see it on with Iraq. End here.

00:01:29.060 --> 00:01:34.910
Will create an endpoint and read the incoming request.

00:01:34.910 --> 00:01:39.560
And then Don leachate that you could do premiere by

00:01:39.560 --> 00:01:44.690
tortured scikit-learn modeling on how to predict using the model.

00:01:44.690 --> 00:01:50.225
So we'll use the TensorFlow model and numeric text to predict output.

00:01:50.225 --> 00:01:53.840
And then output probabilities greater than

00:01:53.840 --> 00:01:57.950
0.05. but is a positives and deaths are there is a negative sentence.

00:01:57.950 --> 00:02:01.520
And finally, we'll run that.

00:02:01.520 --> 00:02:07.350
And we'll get a public URL using which you can predict sentiment.

00:02:07.390 --> 00:02:12.335
Copy it, record to the postmen,

00:02:12.335 --> 00:02:17.100
and send a post request for this sentence.

00:02:18.340 --> 00:02:21.350
The sentiment is negative.

00:02:21.350 --> 00:02:24.810
If we change it to something else,

00:02:29.740 --> 00:02:32.300
the sentiment is positive.

00:02:32.300 --> 00:02:37.055
So this is how we complete the rest API using Flask for your tens of rewarding.

00:02:37.055 --> 00:02:43.320
You can also use TensorFlow model server and create a rest API.
