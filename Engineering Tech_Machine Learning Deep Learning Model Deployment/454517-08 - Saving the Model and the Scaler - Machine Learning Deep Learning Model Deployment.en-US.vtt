WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.510
We have built a kNN classification model,

00:00:03.510 --> 00:00:07.545
which can take is in salary as input parameters and predict

00:00:07.545 --> 00:00:12.285
whether a particular customer with that agents salary would by R naught.

00:00:12.285 --> 00:00:16.560
Let us now understand how to save the model we have created.

00:00:16.560 --> 00:00:19.725
To recap the model tending process,

00:00:19.725 --> 00:00:24.630
we read 40 records from the dataset and identified 32,

00:00:24.630 --> 00:00:27.000
that is 80%. For training.

00:00:27.000 --> 00:00:28.920
Those are represented here.

00:00:28.920 --> 00:00:32.850
And then we use standard scaler to scale the values so that

00:00:32.850 --> 00:00:37.705
the mean becomes 0 and standard deviation becomes one for both agents salary.

00:00:37.705 --> 00:00:40.460
For many models, killing is required.

00:00:40.460 --> 00:00:42.980
Otherwise the model might get influenced by

00:00:42.980 --> 00:00:46.880
values which are in the higher range salary in our case.

00:00:46.880 --> 00:00:51.095
And you can use standard scaler or any other scaling mechanism.

00:00:51.095 --> 00:00:52.775
Once the data is scaled,

00:00:52.775 --> 00:00:58.235
we feed that to the model in a two-dimensional NumPy array format.

00:00:58.235 --> 00:01:03.660
And we get an output which is also a numpy array with one column.

00:01:04.150 --> 00:01:08.375
Internally, the model applies kNN technique.

00:01:08.375 --> 00:01:11.975
It looks at the output for each record and

00:01:11.975 --> 00:01:16.490
tries to optimize the formula so that the overall liquidus you would go up.

00:01:16.490 --> 00:01:19.910
There are various ways we can save the model.

00:01:19.910 --> 00:01:22.355
For some we can extract the formula.

00:01:22.355 --> 00:01:26.735
And in some cases we'll have to save the modelling binary format so that we can

00:01:26.735 --> 00:01:31.670
restore it and then use that model to predict output for new set of data.

00:01:31.670 --> 00:01:34.235
We'll see that in action shortly.

00:01:34.235 --> 00:01:38.960
If anybody wants to predict with The Model, two things.

00:01:38.960 --> 00:01:41.180
Don't need the classifier model.

00:01:41.180 --> 00:01:43.070
And they would also need the standard

00:01:43.070 --> 00:01:47.150
scalar if they use some other technique to feature skill the data,

00:01:47.150 --> 00:01:49.370
that the model might not give

00:01:49.370 --> 00:01:52.925
a correct result because we have used a particular standards killer.

00:01:52.925 --> 00:01:56.790
We would also export it along with the model.

00:01:57.580 --> 00:02:01.880
With the classifier model and the standard scaler,

00:02:01.880 --> 00:02:05.735
do the prediction in any Python environment.

00:02:05.735 --> 00:02:12.659
Let's see how we can save and export these objects to other environments.

00:02:14.020 --> 00:02:17.330
Python is a technique called pickling,

00:02:17.330 --> 00:02:24.810
using which you can store Python objects in serialized or byte stream format.

00:02:25.690 --> 00:02:28.295
In another Python environment,

00:02:28.295 --> 00:02:33.245
you can be serialized these objects and use them in your code.

00:02:33.245 --> 00:02:37.190
So let's understand how we can pickle the model and

00:02:37.190 --> 00:02:41.180
standard scaler were built in the previous lab unit,

00:02:41.180 --> 00:02:44.975
we import the picking liabilities file,

00:02:44.975 --> 00:02:51.965
kNN model.predict are willing limited classifier dot pickle.

00:02:51.965 --> 00:02:57.020
If we do not want to tell which technique we use to create this model,

00:02:57.020 --> 00:02:59.780
we can simply name it as classified or quicker.

00:02:59.780 --> 00:03:02.870
And using pickled dot-dot-dot method,

00:03:02.870 --> 00:03:06.080
we can store the classifier object which we created

00:03:06.080 --> 00:03:10.860
earlier in print to this classified or pickle file.

00:03:13.540 --> 00:03:18.830
Similarly, we can clear the pickle file for this killer.

00:03:18.830 --> 00:03:23.510
Will store the standard scaler In a CDART pickle file.

00:03:23.510 --> 00:03:30.350
Here, wB means the file is opened for writing and in binary mode.

00:03:30.350 --> 00:03:33.660
Let's execute this code.

00:03:34.090 --> 00:03:37.295
And we can go to File Explorer.

00:03:37.295 --> 00:03:42.770
And does see that classified or pickle and ACWP kilobit created.

00:03:42.770 --> 00:03:46.025
You can also verify the same in the Explorer.

00:03:46.025 --> 00:03:48.530
So these two are binary or

00:03:48.530 --> 00:03:54.095
serialized files for our classifier and standard scalar objects.

00:03:54.095 --> 00:03:58.130
In this lab, we have seen how to save the borderland

00:03:58.130 --> 00:04:02.360
standard scalar in binary format using Python pick celebrity.

00:04:02.360 --> 00:04:07.590
Next we'll see how to use the pickled files in another Python environment.
