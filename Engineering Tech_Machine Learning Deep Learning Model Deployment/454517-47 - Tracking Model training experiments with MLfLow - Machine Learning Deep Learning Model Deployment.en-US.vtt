WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.545
Let's see how to get started with the milk flow with a very simple example,

00:00:04.545 --> 00:00:06.885
we'll open the anaconda prompt,

00:00:06.885 --> 00:00:09.465
search for anaconda prompt and open it.

00:00:09.465 --> 00:00:12.730
That's the default Python on this machine.

00:00:13.310 --> 00:00:19.935
Whatever Python and Mama DR. using unit to install MN flow within that.

00:00:19.935 --> 00:00:21.510
Since I'm using anaconda,

00:00:21.510 --> 00:00:23.580
it'll be installing MN flow within the condyle and

00:00:23.580 --> 00:00:29.160
moment simply do pip install. It will flow.

00:00:29.170 --> 00:00:32.060
And he turned out, I've already installed it.

00:00:32.060 --> 00:00:33.995
It might say that it's only available,

00:00:33.995 --> 00:00:36.810
but this is how you install lemon flow.

00:00:37.840 --> 00:00:41.105
It says requirement LEDs are displayed.

00:00:41.105 --> 00:00:45.245
That is fine. We have ML flow within the codeine moment.

00:00:45.245 --> 00:00:48.860
Our next we'll create a program and then we'll see

00:00:48.860 --> 00:00:53.310
how to drag odd mortar liquidus using ML flow.

00:00:53.950 --> 00:00:59.730
Let's open the milk biplane Python file that we created earlier.

00:01:01.390 --> 00:01:05.345
We'll copy this to a new file.

00:01:05.345 --> 00:01:11.670
We'll call it a mill by Blend underscore ML flow.

00:01:13.450 --> 00:01:20.040
To use ML flow, we need to make future India's first thing is important in milk flow.

00:01:20.290 --> 00:01:25.820
And import emitted floor dark a scalar.

00:01:25.820 --> 00:01:30.080
Because we have a scikit-learn model in this example where we're trying to

00:01:30.080 --> 00:01:36.155
predict whether a customer or bio based on age and salary is a classification model.

00:01:36.155 --> 00:01:40.595
And we are using scikit-learn Kamen liabilities for the same.

00:01:40.595 --> 00:01:42.935
Next, we'll create a main method.

00:01:42.935 --> 00:01:45.720
And in the court,

00:01:53.220 --> 00:01:57.640
we'll get rid of all the code to create pickled files.

00:01:57.640 --> 00:02:00.055
A male flow will gender.

00:02:00.055 --> 00:02:01.300
For us.

00:02:01.300 --> 00:02:06.610
We would need the core dark to the point where we're checking the mortar liquidity.

00:02:06.610 --> 00:02:10.910
We'll store that in a separate variable.

00:02:16.830 --> 00:02:21.499
Let's put a few print statements.

00:02:31.620 --> 00:02:34.095
Completed.

00:02:34.095 --> 00:02:41.990
Feature scaling. This is just to see how the program is progressing in the console.

00:02:41.990 --> 00:02:47.015
Modern trend. So this should be good enough.

00:02:47.015 --> 00:02:53.135
So far ML flow, we have audit to import statements and created a main method.

00:02:53.135 --> 00:02:56.375
So whatever experiment we are going to try,

00:02:56.375 --> 00:02:58.010
we're going to give it a name.

00:02:58.010 --> 00:03:02.210
We'll say milk flow set experiment and give her experiment a name.

00:03:02.210 --> 00:03:08.810
You can give any name. So that's all we need to set it up.

00:03:08.810 --> 00:03:11.750
Next, we need to specify what we want to track.

00:03:11.750 --> 00:03:13.955
Will track two things.

00:03:13.955 --> 00:03:16.920
We'll first one is model accuracy.

00:03:17.320 --> 00:03:20.090
So every time we run the model,

00:03:20.090 --> 00:03:22.625
we can see what is the accuracy.

00:03:22.625 --> 00:03:27.545
We also want to track model for each state shot model is Classifier.

00:03:27.545 --> 00:03:29.810
We want to drag these two.

00:03:29.810 --> 00:03:33.305
Once you see the UI, you'll get a better sense for now,

00:03:33.305 --> 00:03:35.960
just make these changes import liabilities.

00:03:35.960 --> 00:03:42.260
We were experiment a name and simply say track accuracy metrics and track the modal.

00:03:42.260 --> 00:03:47.315
Will open a command prompt from the directory where the Python violet.

00:03:47.315 --> 00:03:53.790
And we'll run it saying Python ML Pipeline underscore ML flooded by.

00:03:54.130 --> 00:03:58.290
While it is starting. Let's open another command prompt.

00:04:01.690 --> 00:04:04.400
So our program finished.

00:04:04.400 --> 00:04:07.010
It said ML floor demo does not exist.

00:04:07.010 --> 00:04:08.270
So creating a new experiment,

00:04:08.270 --> 00:04:10.205
we will see that experiment shortly in the UI.

00:04:10.205 --> 00:04:13.910
Then it printed and we got 0.805 bakeries.

00:04:13.910 --> 00:04:19.250
And to load the ML flow UA simply say a melt flow.

00:04:19.250 --> 00:04:20.910
Ui.

00:04:21.070 --> 00:04:25.040
It says it started it port 5 thousand.

00:04:25.040 --> 00:04:30.960
Open a browser, go to 1270015 thousand.

00:04:31.570 --> 00:04:34.850
That is the local laws, colon 5 thousand.

00:04:34.850 --> 00:04:36.290
If this part is not available,

00:04:36.290 --> 00:04:38.550
you represent a different port.

00:04:40.270 --> 00:04:45.065
Now the UA loaded and we see a new experiment.

00:04:45.065 --> 00:04:46.610
There is a default experiment,

00:04:46.610 --> 00:04:50.540
but we explicitly created ML pro Demo Experiment.

00:04:50.540 --> 00:04:55.175
And we can see that there is a model run that is getting shown here.

00:04:55.175 --> 00:05:02.870
Let's click and see what is their accuracy is a matrix we said we would track.

00:05:02.870 --> 00:05:04.235
So that is getting shown here.

00:05:04.235 --> 00:05:05.600
And you also see Martin.

00:05:05.600 --> 00:05:09.960
And under that YAML and the pickled files,

00:05:10.540 --> 00:05:16.265
a mail flow creates a typical file for your margin and that is ready to be exported.

00:05:16.265 --> 00:05:21.690
You can find the directory here and then go and search it under your project folder.

00:05:24.520 --> 00:05:29.090
This particular file has been automatically created by ML flow.

00:05:29.090 --> 00:05:31.220
And we see that courtesy.

00:05:31.220 --> 00:05:34.260
Now let's make some changes to the code.

00:05:34.450 --> 00:05:38.825
So instead of using 80% data for training,

00:05:38.825 --> 00:05:41.975
we would use 70% for training and test for testing.

00:05:41.975 --> 00:05:44.120
Let's make this simple change and run it again.

00:05:44.120 --> 00:05:45.860
And let's see what happens.

00:05:45.860 --> 00:05:49.920
We'll go to the terminal and run the Python file again.

00:05:51.280 --> 00:05:53.795
We got the same accuracy.

00:05:53.795 --> 00:05:56.930
I did not save the file. Let me run it again.

00:05:56.930 --> 00:06:00.095
This time we've got a different accuracy because

00:06:00.095 --> 00:06:04.800
our train test ratio was different. Let's see the UI now.

00:06:05.110 --> 00:06:07.820
We'll go back to the homepage.

00:06:07.820 --> 00:06:10.790
Click on ML for demo now you can see three experiments.

00:06:10.790 --> 00:06:13.280
Second time it tried with the same 20 splits.

00:06:13.280 --> 00:06:19.205
So it's showing that you can click on that and check that accuracy is,

00:06:19.205 --> 00:06:20.300
is shown as a matrix.

00:06:20.300 --> 00:06:23.130
And you can also see the corresponding model.

00:06:23.830 --> 00:06:27.125
And in the third runway at different accuracy.

00:06:27.125 --> 00:06:30.920
And you can also see the corresponding modal artifacts,

00:06:30.920 --> 00:06:33.785
the pickled files in a different directory.

00:06:33.785 --> 00:06:38.435
You can also look different parameters that you use for your cleaning.

00:06:38.435 --> 00:06:41.580
Let's try to log few of them.

00:06:45.310 --> 00:06:49.530
Dataset ship.

00:06:50.950 --> 00:07:02.280
And we can also log the trend test ratio, training percentage.

00:07:04.780 --> 00:07:09.305
So whatever parameters you are using for the 4D printing,

00:07:09.305 --> 00:07:12.305
you can also log dose for your tracking.

00:07:12.305 --> 00:07:17.270
Lets run it. So the mortal finished.

00:07:17.270 --> 00:07:21.650
Now, let us see how I will floor tracks this parameters.

00:07:21.650 --> 00:07:24.690
Will select the latest From.

00:07:26.620 --> 00:07:32.240
This time we run Chrome spider, the part.

00:07:32.240 --> 00:07:36.935
You can see all these parameters that we use to put out training.

00:07:36.935 --> 00:07:39.320
So this will also be very useful later on when

00:07:39.320 --> 00:07:42.540
you are trying to compare two different runs.

00:07:43.120 --> 00:07:46.580
So this is how we can get started with the milk flow.

00:07:46.580 --> 00:07:49.520
Could track your model equity,

00:07:49.520 --> 00:07:53.465
see you can change different parameters and then finally decide which model to pick.

00:07:53.465 --> 00:07:58.550
You can select different models and do a comparison

00:07:58.550 --> 00:08:04.235
of their accuracy and other parameters that are different. Plots available.

00:08:04.235 --> 00:08:07.235
Seven, a lot of other features.

00:08:07.235 --> 00:08:12.875
As I said earlier, ML flow is an open source platform for the machine learning lifecycle.

00:08:12.875 --> 00:08:16.429
You can go to that officer website and get plenty of information.

00:08:16.429 --> 00:08:19.910
And they have built-in integration for so many liabilities.

00:08:19.910 --> 00:08:21.800
We showed a simple demo for scikit-learn,

00:08:21.800 --> 00:08:26.790
but they support TensorFlow by dodge garage and many other libraries.

00:08:28.720 --> 00:08:30.770
So as a data scientist,

00:08:30.770 --> 00:08:34.340
if you want to track your experiment and then pick the right model,

00:08:34.340 --> 00:08:38.180
then this is how we can leverage ML flow by plane.

00:08:38.180 --> 00:08:42.740
It's very easy to get started and you can deploy a milk flow with a pip

00:08:42.740 --> 00:08:48.330
install command and then start tracking your experiments using the tool.
