WEBVTT
0
1
00:00:00.810 --> 00:00:05.130
Hello and welcome to this lesson where we're going to be continuing where we left off in the previous
1

2
00:00:05.130 --> 00:00:10.210
lesson by diving a bit deeper into working with variables in C++.
2

3
00:00:10.350 --> 00:00:17.790
Now variables can be changed at runtime meaning at any point in our code after a variable has been declared
3

4
00:00:18.030 --> 00:00:20.400
we can assign a new value to it.
4

5
00:00:20.430 --> 00:00:24.320
And this actually lives up to the definition of the word variable.
5

6
00:00:24.360 --> 00:00:28.800
If you were to grab a dictionary and look up variable you would likely see a definition that could be
6

7
00:00:28.800 --> 00:00:33.700
summarized to something like a value that is subject to change.
7

8
00:00:33.810 --> 00:00:40.140
So do take note that we can change the value of a variable after it's been declared and initialized
8

9
00:00:40.200 --> 00:00:41.640
in our code.
9

10
00:00:41.640 --> 00:00:49.560
So we declare our a, b, and c variables here and initialize them the sum of my variables comes to 9
10

11
00:00:49.800 --> 00:00:52.790
and the product comes to 24.
11

12
00:00:52.810 --> 00:00:58.230
Now take note of your own sum and product values and let's take a look at how we can assign a new value
12

13
00:00:58.380 --> 00:01:06.150
to one of our variables below where we declare a, b, and c but above where we declare the sum and the
13

14
00:01:06.150 --> 00:01:06.900
product.
14

15
00:01:06.900 --> 00:01:09.450
Let's add in a couple of lines.
15

16
00:01:09.750 --> 00:01:13.530
So to assign a value to a variable that's already been declared.
16

17
00:01:13.650 --> 00:01:15.630
We can type out the variable name.
17

18
00:01:16.290 --> 00:01:18.420
I noticed that my code here is slightly offset.
18

19
00:01:18.420 --> 00:01:19.410
We need to indent it.
19

20
00:01:19.440 --> 00:01:22.280
I'm going to come to the start of a line and hit tab.
20

21
00:01:22.320 --> 00:01:27.850
So we need to start with the variable name so I'm starting with "a" here and then to assign a new value.
21

22
00:01:27.870 --> 00:01:34.740
We can simply add a space and then an equal sign and the equal sign here that equals symbol is an assignment
22

23
00:01:34.860 --> 00:01:36.420
operator.
23

24
00:01:36.420 --> 00:01:42.830
After our assignment operator we can add a space and put in the value that we want "a" to have.
24

25
00:01:43.050 --> 00:01:49.350
So we can change it to 7 let's say, I'm gonna put a semicolon here to finish off the line and now if
25

26
00:01:49.350 --> 00:01:52.320
we compile our code and run the program.
26

27
00:01:52.320 --> 00:01:54.580
Make sure you save your work before compiling.
27

28
00:01:54.690 --> 00:01:59.400
We can see that we have a different result now being out posted to the terminal.
28

29
00:01:59.400 --> 00:02:04.940
This is because we've assigned a new value to "a" after we've declared and initialized it.
29

30
00:02:04.950 --> 00:02:07.020
Now there's a reason I told you to write this line here.
30

31
00:02:07.020 --> 00:02:12.750
Let's just take it out for the time being and let's take a look at what happens if we assign a value
31

32
00:02:12.750 --> 00:02:13.990
to one of our variables.
32

33
00:02:14.220 --> 00:02:20.970
After we declare the sum in the product so I'm gonna put b and assign a value of 8 to it and use the
33

34
00:02:20.970 --> 00:02:23.320
semicolon to finish off the line.
34

35
00:02:23.400 --> 00:02:26.970
So save your work compile your code and run your program.
35

36
00:02:27.750 --> 00:02:31.050
And we could see that we're back to our original values here.
36

37
00:02:31.050 --> 00:02:31.890
So what's going on.
37

38
00:02:31.980 --> 00:02:39.450
Well we are assigning a new value to our b variable after our sum and products have been declared it's
38

39
00:02:39.450 --> 00:02:45.540
already been calculated here is it by the time we get down to our B variable and assign it a new value
39

40
00:02:45.720 --> 00:02:52.230
the sum and the products will not take this value into account because it's below where they get initialized.
40

41
00:02:52.320 --> 00:02:54.630
So let's remove this line again.
41

42
00:02:54.630 --> 00:03:01.440
Now it's important to note that we cannot assign a value to a variable before it's been declared because
42

43
00:03:01.440 --> 00:03:08.160
the compiler will not even be aware that such a variable exists and the compiler will actually prevent
43

44
00:03:08.220 --> 00:03:11.920
our program from being compiled it will throw up an error.
44

45
00:03:11.940 --> 00:03:17.220
Let's take a look at this now above where we declare our a, b, and c variables that we can add in some
45

46
00:03:17.220 --> 00:03:22.050
new lines and let's just try assign a new value to c here.
46

47
00:03:22.050 --> 00:03:28.620
So I'm going to type in C and insert the assignment operator and assign a new value let's say 10 and
47

48
00:03:28.620 --> 00:03:32.600
with a semicolon to finish the line off if we save and compile.
48

49
00:03:32.670 --> 00:03:34.470
We can see we get an error.
49

50
00:03:34.530 --> 00:03:41.070
It says C undeclared identifier the compiler doesn't know what C is.
50

51
00:03:41.070 --> 00:03:44.660
Now let's just remove this line and let's just summarize this.
51

52
00:03:44.820 --> 00:03:49.870
We never want to assign values to variables before the variable has been declared.
52

53
00:03:49.890 --> 00:03:56.970
The compiler will not allow it because the compiler will not be aware that the variable exists.
53

54
00:03:57.000 --> 00:04:01.060
Now what if we never want variables to change our code.
54

55
00:04:01.200 --> 00:04:05.520
I want you to try something for each variable you've declared in your code.
55

56
00:04:05.520 --> 00:04:10.560
I want you to prefix it with the keyword const just like this.
56

57
00:04:10.560 --> 00:04:16.080
Now I don't expect you to fully understand what this does But head over to the community forum and be
57

58
00:04:16.080 --> 00:04:21.520
brave and post what you think const means and how it affects our code.
58

59
00:04:21.660 --> 00:04:25.770
Just share your thoughts in the community and then once you've done all of this we can explore this
59

60
00:04:25.770 --> 00:04:26.220
together.
60

61
00:04:29.490 --> 00:04:34.710
Okay so I've added const to the start of each line of code where we declare a variable.
61

62
00:04:34.710 --> 00:04:36.030
Now what does this mean.
62

63
00:04:36.030 --> 00:04:42.510
Well const is a keyword that instructs the compiler to never allow the values of our variables to change
63

64
00:04:42.510 --> 00:04:44.190
at any point in our code.
64

65
00:04:44.190 --> 00:04:45.300
Let's try this out.
65

66
00:04:45.510 --> 00:04:53.730
If we try to assign a new value to one of our variables and compile our code after saving it we can
66

67
00:04:53.730 --> 00:04:56.050
see that the compiler throws up an error.
67

68
00:04:56.190 --> 00:04:59.120
It says error and it's tells us the variable name here.
68

69
00:04:59.250 --> 00:05:05.630
And it says you cannot assign to a variable that is const so why would you do this.
69

70
00:05:05.640 --> 00:05:11.840
Well really it protects you from yourself and it makes your intentions with your variables very clear.
70

71
00:05:11.940 --> 00:05:17.220
When we use the const keyword at the start of a line where we declare a variable we are signaling
71

72
00:05:17.220 --> 00:05:22.950
to ourselves and to any other programmers who read our code that we never want this variable to change
72

73
00:05:22.950 --> 00:05:29.460
its value after it's been declared and initialized and the compiler is like our best friend here because
73

74
00:05:29.460 --> 00:05:34.740
it will always throw up an error when we try to compile our code if it finds that a variable marked with
74

75
00:05:34.740 --> 00:05:37.830
const is being changed anywhere in our code.
75

76
00:05:37.830 --> 00:05:43.410
So if you never wanted variables value to change after you've declared and initialize it, mark it with
76

77
00:05:43.410 --> 00:05:48.030
const. That's what we're going to do here because we don't actually want any of the variables we've declared
77

78
00:05:48.060 --> 00:05:53.460
so far to have new values assigned to them after they've been initialized.
78

79
00:05:53.460 --> 00:05:59.250
So we can finish this lesson by removing this line of code here and we can feel comfortable knowing
79

80
00:05:59.280 --> 00:06:01.570
that our variables are well protected.
80

81
00:06:01.620 --> 00:06:02.940
So that wraps up this lesson.
81

82
00:06:02.940 --> 00:06:04.950
And when you're ready I'll see you in the next one.
