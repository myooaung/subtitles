WEBVTT
1
00:00:04.240 --> 00:00:09.310
Everyone, and welcome back in this lecture, we'll create our first child, C++ class, deriving from

2
00:00:09.310 --> 00:00:12.110
our own base class that we've created previously.

3
00:00:12.670 --> 00:00:15.640
We'll be starting with our porn tank.

4
00:00:16.300 --> 00:00:20.650
So let's start by going to our porn Spoda inside of the C++ directory.

5
00:00:20.890 --> 00:00:21.100
Right.

6
00:00:21.100 --> 00:00:26.530
Click on the porn base and select create C++ class derived from.

7
00:00:26.950 --> 00:00:32.290
We'll rename this one to porn that tank and doublecheck to ensure that we've placed this correctly in

8
00:00:32.290 --> 00:00:33.340
our porn's folder.

9
00:00:33.820 --> 00:00:36.640
I'm of that done that we can select to create class.

10
00:00:36.910 --> 00:00:41.180
Now when this is done compiling, as I've mentioned previously at the time of recording this, there's

11
00:00:41.200 --> 00:00:47.440
a problem in the engine when creating child classes, if they're placed in a custom folder structure.

12
00:00:47.770 --> 00:00:53.520
So in this case, not having all of the classes in the base tune tanks folder.

13
00:00:53.910 --> 00:00:59.200
So just here, if you're getting this error warning in the recent versions of the engine, then just

14
00:00:59.200 --> 00:00:59.690
click no.

15
00:00:59.710 --> 00:01:05.380
If you're using the slightly older versions, I think four point twenty three and below will probably

16
00:01:05.380 --> 00:01:06.010
be fine.

17
00:01:06.370 --> 00:01:06.980
But just click.

18
00:01:07.000 --> 00:01:11.680
Now, if you are getting this as we won't need more details on this as it's just a misdirect include

19
00:01:11.680 --> 00:01:16.180
issue, then to fix this, we're just going to want to open our porn based class.

20
00:01:16.420 --> 00:01:21.550
If you don't already have your I.D. open, if you do, then just navigate over to your code.

21
00:01:21.550 --> 00:01:28.360
Files were then going to navigate to our new porn tank header and code file and open both of these.

22
00:01:28.690 --> 00:01:31.560
So the problem that we're actually having is in the head of file just here.

23
00:01:31.930 --> 00:01:37.480
And that's the inclusion of the Poons folder in the include path.

24
00:01:37.570 --> 00:01:44.290
So we can easily fix this by either simply assessing it just to pawn base Dr. Page, which would have

25
00:01:44.290 --> 00:01:46.030
been the original way this was included.

26
00:01:46.360 --> 00:01:49.960
Or we can include the entire path, including the project.

27
00:01:50.230 --> 00:01:52.510
Now, I'm just going to opt for the shorter version here.

28
00:01:52.870 --> 00:01:56.710
But once this continues to be an issue, I just wanted to mention both of the options.

29
00:01:57.100 --> 00:02:00.640
As you may see, both of these implemented elsewhere on the Internet.

30
00:02:01.210 --> 00:02:06.580
Then if we go back into the engine and recompile this, we should now get a successful build just to

31
00:02:06.580 --> 00:02:09.970
make sure and kind of confirm that that was the only problem that we're seeing.

32
00:02:10.360 --> 00:02:15.430
Also note that the new class will not appear in your ED until the next restart.

33
00:02:15.670 --> 00:02:21.800
That's not gonna be a problem in this case as we can just focus our attention on the idea implementations.

34
00:02:21.810 --> 00:02:29.320
When I back over in the porn tank had, the first thing we want to do is to declare our private and

35
00:02:29.320 --> 00:02:34.810
public sections so that we can easily drop things into our correct sections here as we go along.

36
00:02:35.200 --> 00:02:37.820
And we'll grab a protected section in just a moment.

37
00:02:37.840 --> 00:02:39.550
So don't worry about that one for now.

38
00:02:39.910 --> 00:02:43.510
And then in the public section, we need to declare our constructor.

39
00:02:43.960 --> 00:02:49.930
We're also going to be using the tech begin play and set up a player input component in this class so

40
00:02:49.930 --> 00:02:54.370
we can take this opportunity to save a little bit of time implementing these and also tidying up the

41
00:02:54.400 --> 00:02:59.110
parent class at the same time as I know that we're not going to be using these in the base class.

42
00:02:59.290 --> 00:03:04.870
So let's go over to the base class and we'll cut those declarations and then paste them back into the

43
00:03:04.930 --> 00:03:05.500
tank header.

44
00:03:06.100 --> 00:03:08.500
Also, be sure to delete them from the base.

45
00:03:08.500 --> 00:03:09.280
Had a file as well.

46
00:03:09.340 --> 00:03:11.740
If you didn't cut these and only copied them.

47
00:03:12.040 --> 00:03:17.860
We'll also want to include the implementation so we can take those from the base class code file.

48
00:03:20.500 --> 00:03:23.140
Again, remembering to completely cut these from the code file.

49
00:03:23.530 --> 00:03:30.000
And then, of course, just make sure to replace any reference to a porn base with a porn tank.

50
00:03:31.400 --> 00:03:37.700
So now we're going to start adding those tank specific or the player class specific components.

51
00:03:38.060 --> 00:03:42.620
The first thing we're going to need is our spring, um, as this is going to be the kind of root of

52
00:03:42.620 --> 00:03:48.290
the new components here as the camera will be sitting on the spring arm to allow us to get that kind

53
00:03:48.290 --> 00:03:49.220
of full control.

54
00:03:49.610 --> 00:03:53.780
So your challenge here will be to do that for both of the components, adding both of these in, as

55
00:03:53.780 --> 00:03:56.060
we've done all of this before in the base class.

56
00:03:56.120 --> 00:03:59.180
You can just reference the implementation there if you do get stuck.

57
00:03:59.360 --> 00:04:03.920
I also have all of the hints that you need on screen, so pulls the video and give this one a go.

58
00:04:04.530 --> 00:04:07.190
Okay, so we already know how to forward declare a class.

59
00:04:07.220 --> 00:04:08.120
We've seen this before.

60
00:04:08.630 --> 00:04:14.930
This is just dumb by saying class, followed by the class that you need a reference to in the header

61
00:04:14.930 --> 00:04:15.260
file.

62
00:04:15.590 --> 00:04:17.420
So in this case, we're going to use class.

63
00:04:17.510 --> 00:04:23.510
You spring on component and also class you camera component for the two new types of components that

64
00:04:23.510 --> 00:04:24.360
we'll be using in here.

65
00:04:24.860 --> 00:04:30.800
Next, I've asked you to declare pointers to the components in the private section with the names spring

66
00:04:30.800 --> 00:04:36.130
arm and the camera, and we can do that like so linking the names sensibly with the component types.

67
00:04:37.610 --> 00:04:42.500
The final step could be the one that might have seemed the most difficult if you've not seen the specifiers

68
00:04:42.500 --> 00:04:45.080
often or forgotten the exact kind of syntax.

69
00:04:45.290 --> 00:04:49.670
But just remember, as I said, you can reference everything in the pawn base implementation.

70
00:04:50.090 --> 00:04:53.570
That's because we're actually going to be using the exact same implementation here.

71
00:04:53.900 --> 00:04:55.370
So I'll copy and paste these over.

72
00:04:55.760 --> 00:04:59.300
Then if we compare the challenge sheets, we have our visible anywhere.

73
00:04:59.690 --> 00:05:02.210
We've defined them to be Blueprint Read-Only.

74
00:05:02.630 --> 00:05:08.660
And we're using these same components category with our private matter specify just to ensure that this

75
00:05:08.660 --> 00:05:10.400
is available in the private section.

76
00:05:10.820 --> 00:05:14.360
Then our final step will be to create these in our code file.

77
00:05:14.690 --> 00:05:20.560
So to start, we want to provide the includes which are the game framework forward slash springform

78
00:05:20.590 --> 00:05:21.720
component dot h.

79
00:05:21.950 --> 00:05:25.520
And our camera forward slash camera component deitsch.

80
00:05:27.150 --> 00:05:31.890
One thing I just wanted to quickly mention here, I know that finding the include path has been covered

81
00:05:31.920 --> 00:05:36.990
in the previous sections, but there have been some improvements to the documentation that I just wanted

82
00:05:36.990 --> 00:05:37.860
to mention.

83
00:05:38.220 --> 00:05:44.760
So one of the easiest way to find the include path now is to just Google the specific component or class

84
00:05:44.760 --> 00:05:46.020
you're looking for in full.

85
00:05:46.050 --> 00:05:52.110
So, for example, here you spring on components in Google due to the unique naming convention, the

86
00:05:52.110 --> 00:05:58.200
official documentation front row is usually going to be the first search results returned, then inside

87
00:05:58.200 --> 00:05:59.110
of the documentation.

88
00:05:59.160 --> 00:06:04.980
EPIC have now moved the exact include path to the top of the documentation where this used to be provided

89
00:06:04.980 --> 00:06:08.230
in long form at the bottom of the documentation.

90
00:06:08.370 --> 00:06:13.170
So we would have not normally had to have remember to remove everything after a certain part of the

91
00:06:13.170 --> 00:06:13.770
path.

92
00:06:14.160 --> 00:06:18.660
After the updates though, when I provided just the exact include path that we need, which is going

93
00:06:18.660 --> 00:06:23.220
to be super useful if you ever forget the include path, because they're gonna be a lot of them to remember

94
00:06:23.670 --> 00:06:24.480
off the top of your head.

95
00:06:24.900 --> 00:06:28.830
So I just wanted to mention that as it's a nice little update that's been made and things may be looking

96
00:06:28.830 --> 00:06:33.160
a little bit different in the documentation's compared to the last time you may have had this covered.

97
00:06:33.620 --> 00:06:38.130
Okay, so now that we have our includes, we can begin creating our components.

98
00:06:38.520 --> 00:06:41.940
Also, remember that we've declared our constructor, but we haven't yet implemented it.

99
00:06:42.000 --> 00:06:45.350
So for that, we just need our APEN tank accessor.

100
00:06:45.780 --> 00:06:51.180
And then April and tank brackets and of course, closing that off with the double parentheses if we

101
00:06:51.180 --> 00:06:52.980
start by creating our spring.

102
00:06:52.980 --> 00:06:57.990
Um, first of all, of course, that's just going to be our spring arm equals to create default sub

103
00:06:57.990 --> 00:07:00.900
object passing in the type you spring up component.

104
00:07:01.080 --> 00:07:03.780
And then we'll just set the text to call this one spring on.

105
00:07:06.210 --> 00:07:08.820
We can unset the attachment to the root components.

106
00:07:08.850 --> 00:07:14.130
We do not want this to follow any of the base mesh or turret movement.

107
00:07:14.160 --> 00:07:15.190
If we added anything nice.

108
00:07:15.210 --> 00:07:19.560
So we're gonna set this to the root component, which remember is the capsule collider, which we've

109
00:07:19.560 --> 00:07:21.510
defined in our parent class.

110
00:07:21.880 --> 00:07:27.410
And then the camera will say camera equals to create default sub object passing in the correct type,

111
00:07:27.420 --> 00:07:28.440
which here will be the U.

112
00:07:28.560 --> 00:07:29.550
Camera component.

113
00:07:29.700 --> 00:07:31.710
And again, we'll set the text to camera.

114
00:07:32.250 --> 00:07:36.480
We don't want to set the attachment of the camera to be attached to the spring on.

115
00:07:36.810 --> 00:07:41.130
And this will give us control over the things like the distance of the camera from the player.

116
00:07:41.310 --> 00:07:45.420
And also allowing collision checks and camera like and much more that we'll be looking at in more of

117
00:07:45.420 --> 00:07:48.750
the edit a portion of the section with those changes made.

118
00:07:48.900 --> 00:07:53.730
When I'm ready to go back over to the editor to recompile this and check for errors again, we need

119
00:07:53.730 --> 00:07:55.440
to restart the project anyway.

120
00:07:55.680 --> 00:08:01.080
So it's the perfect time to do this hit, compile and confirm that everything has been successful.

121
00:08:01.470 --> 00:08:02.670
And then with that done, we're good to go.

122
00:08:02.700 --> 00:08:03.870
I'm ready for the next topic.
