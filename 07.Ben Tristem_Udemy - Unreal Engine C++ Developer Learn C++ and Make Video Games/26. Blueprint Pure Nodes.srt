1
00:00:04,720 --> 00:00:09,940
Hello and welcome in this lecture, we're going to be hooking up our health system to the animation

2
00:00:09,940 --> 00:00:13,720
blueprint so that I can shoot this character until he dies.

3
00:00:13,750 --> 00:00:15,490
Let's dive in and see how that works.

4
00:00:16,690 --> 00:00:22,570
So you want this boolean in the animation blueprints to be set automatically from our gameplay.

5
00:00:23,290 --> 00:00:29,320
And if we go through to our event graph and have a look how this is currently working, other properties

6
00:00:29,320 --> 00:00:34,420
like this, such as get velocity, get active, transform, we're going to the pawn and we're doing

7
00:00:34,480 --> 00:00:38,310
a get function on it every time we want to update animation.

8
00:00:38,920 --> 00:00:43,960
So we want to kind of follow along in this model where we're going to go and get whether or not our

9
00:00:43,960 --> 00:00:45,070
player is dead.

10
00:00:45,400 --> 00:00:52,210
So to do that, we need to expose some functionality, some callable function from our C++.

11
00:00:52,750 --> 00:00:55,630
So let's go over to the C++ and have a look.

12
00:00:55,720 --> 00:00:57,070
What is there?

13
00:00:57,310 --> 00:01:03,880
So we've could create a public function, but that doesn't necessarily make it accessible to do the

14
00:01:03,880 --> 00:01:04,690
accessibility.

15
00:01:04,690 --> 00:01:10,900
We need to have a new function which makes it visible to blueprint's and unrolls head Ital system.

16
00:01:11,170 --> 00:01:15,070
But we've got to go one step further than just having it as a new function.

17
00:01:15,130 --> 00:01:20,140
So we start with the you function macro, but we want to make it blueprint callable.

18
00:01:20,170 --> 00:01:21,940
So that is the option that we can use.

19
00:01:21,940 --> 00:01:23,020
Blueprint callable.

20
00:01:24,220 --> 00:01:27,580
However, there is another option that overrides Blueprint.

21
00:01:27,580 --> 00:01:32,440
Callable, rather implies that it's blueprint callable and that is Blueprint Pure.

22
00:01:32,500 --> 00:01:36,700
Now we'll see the difference between Blueprint Pure and Blueprint callable in just a second.

23
00:01:36,970 --> 00:01:43,420
But just know that if you use Blueprint Pure, it is doing the same as Blueprint Callable and then some.

24
00:01:43,450 --> 00:01:45,460
So it's doing a little bit more than Blueprint callable.

25
00:01:46,200 --> 00:01:50,590
And then what we want is a function that returns boolean that says whether or not this character is

26
00:01:50,680 --> 00:01:51,190
dead.

27
00:01:52,310 --> 00:01:54,290
That is going to be useful for us to know.

28
00:01:54,650 --> 00:01:58,540
And then finally, we want this to be a concert member function.

29
00:01:58,940 --> 00:02:00,800
Now, why does it want to be concert?

30
00:02:00,820 --> 00:02:08,000
Because when we call this function, we don't expect it to change any of the states of Ashu to character.

31
00:02:08,030 --> 00:02:11,840
So we can safely say that this should be a concert function.

32
00:02:12,220 --> 00:02:19,820
And in actual fact, concert and blueprint pure often go together because Blueprint Pure means that

33
00:02:19,820 --> 00:02:24,200
if we go over in it to any blueprint, we can have a look at some pure notes.

34
00:02:24,500 --> 00:02:26,030
This one here get transformed.

35
00:02:26,150 --> 00:02:27,020
That's a pure note.

36
00:02:27,050 --> 00:02:28,610
Get velocity is a pure note.

37
00:02:28,670 --> 00:02:30,710
Set speed is not a pure note.

38
00:02:30,740 --> 00:02:33,290
Can you see what might be linking these together?

39
00:02:33,290 --> 00:02:34,610
What about these?

40
00:02:35,030 --> 00:02:36,230
Makes this not pure.

41
00:02:36,320 --> 00:02:37,220
And this one pure?

42
00:02:37,670 --> 00:02:40,730
Well, generally speaking, it's the fact that there's an execution pen.

43
00:02:40,820 --> 00:02:44,780
A pure node is one that doesn't have an execution pen.

44
00:02:45,230 --> 00:02:51,350
And it's usually safe to say that something doesn't have an execution pen when it doesn't have any impact

45
00:02:51,350 --> 00:02:53,990
on the thing that it's calling only on its result.

46
00:02:54,380 --> 00:03:00,320
Essentially, this means that no matter how many times we call this function, it's going to always

47
00:03:00,350 --> 00:03:01,630
output the same result.

48
00:03:01,640 --> 00:03:05,000
It's always going to have the same effect on the program.

49
00:03:05,390 --> 00:03:06,740
It is a pure function.

50
00:03:06,740 --> 00:03:09,050
It doesn't change anything when it is called.

51
00:03:09,440 --> 00:03:14,690
So it's kind of the same as concert, although it's a little bit stronger, because what it's saying

52
00:03:14,690 --> 00:03:20,240
is not just that it doesn't change anything here on the shoot character, but it doesn't change anything

53
00:03:20,240 --> 00:03:21,980
global, any state anywhere.

54
00:03:22,000 --> 00:03:22,700
Full stop.

55
00:03:23,030 --> 00:03:24,030
The only input.

56
00:03:24,350 --> 00:03:28,790
The only effect it has is in the outputs that it produces.

57
00:03:29,810 --> 00:03:32,330
So that's why we're choosing to make this blueprint pure.

58
00:03:32,360 --> 00:03:36,910
It removes the need for an execution pin, which makes it much nicer in blueprint.

59
00:03:37,400 --> 00:03:43,160
And it also just expresses the fact that we aren't making any changes to the state of our game when

60
00:03:43,160 --> 00:03:44,180
we call this function.

61
00:03:44,750 --> 00:03:50,480
So let's go ahead and try to create an implementation for this, in fact, to leave the implementation

62
00:03:50,480 --> 00:03:52,130
up to you as a challenge.

63
00:03:53,030 --> 00:03:59,240
And we're gonna go over and hook this up in an IM graph sorry, in that event graph of the animation

64
00:03:59,240 --> 00:03:59,870
blueprint.

65
00:04:00,380 --> 00:04:03,830
So we're gonna do this by having a new set here.

66
00:04:03,830 --> 00:04:12,710
We want to set the is dead boolean variable at the end and we want to get the pawn owner and we want

67
00:04:12,710 --> 00:04:18,680
to cast that because it needs to be a shooter character in order to have this is dead property.

68
00:04:18,690 --> 00:04:20,140
So we want to cast it, too.

69
00:04:20,600 --> 00:04:24,080
And in this case, I want to cast it to the C++ shooter character because I don't need to go all the

70
00:04:24,080 --> 00:04:29,600
way down to saying it's definitely a blueprint version of this, because this new function actually

71
00:04:29,600 --> 00:04:31,460
exists on the C++ level.

72
00:04:31,880 --> 00:04:33,530
So we're gonna go ahead and cast.

73
00:04:33,530 --> 00:04:36,740
If we succeed in cast, we're going to be setting the is dead property.

74
00:04:37,390 --> 00:04:43,070
Let me just put in some redirect nodes here to make our blueprint just a little bit nicer looking like.

75
00:04:43,100 --> 00:04:47,600
So and then what we want to do is using this shooter a character reference.

76
00:04:47,600 --> 00:04:52,790
Now that we've cast it to a chute's character, we know that it should have this is dead property,

77
00:04:53,210 --> 00:04:54,890
so we should be able to do that.

78
00:04:55,100 --> 00:04:59,990
Once you've compiled and got it working, you can get this is dead property and set it here.

79
00:05:01,130 --> 00:05:04,880
So it's time for your challenge to calculate if we are dead or not.

80
00:05:04,940 --> 00:05:08,240
So return the correct boolean out of our is dead function.

81
00:05:08,240 --> 00:05:09,020
That's the first step.

82
00:05:09,350 --> 00:05:13,220
You might want to use some inequalities with our health variable for that.

83
00:05:13,760 --> 00:05:15,740
And then hook up our variable.

84
00:05:15,740 --> 00:05:20,870
The dead is dead variable in the animation blueprint we've got just short of doing that were just needed.

85
00:05:20,990 --> 00:05:23,300
We just basically a compiler way from getting that done.

86
00:05:23,660 --> 00:05:26,060
Pause the video and get that sorted.

87
00:05:27,560 --> 00:05:28,310
OK, welcome back.

88
00:05:28,400 --> 00:05:31,700
So let's go over to the code, first of all.

89
00:05:32,030 --> 00:05:36,590
So this fairly straightforwardly, I'm going to return an expression that returns a boolean.

90
00:05:36,890 --> 00:05:43,250
So we want to say, is the health less than or equal to zero, in which case we are indeed dead?

91
00:05:43,590 --> 00:05:47,510
That's about as simple as a an expression function can get.

92
00:05:47,900 --> 00:05:49,790
So let's go ahead and build that.

93
00:05:50,840 --> 00:05:55,590
And once that has compiled, we can go over into one real and hook it up.

94
00:05:55,610 --> 00:06:02,030
So dragging off the as shoe to character, we arg node, we're going to have a shooter character reference

95
00:06:02,030 --> 00:06:02,330
here.

96
00:06:02,630 --> 00:06:05,960
So we want to do is dead gives us this is dead function.

97
00:06:05,960 --> 00:06:09,410
You can see it has no execution pin because it is pure.

98
00:06:09,800 --> 00:06:14,830
Then we take this boolean off of that and hook it up to it is dead favorable.

99
00:06:15,380 --> 00:06:19,520
And now if we go ahead and play, we should actually be able to kill off.

100
00:06:19,850 --> 00:06:24,050
That character in the world will shoot at him until his health goes down to zero.

101
00:06:24,440 --> 00:06:25,280
And there you go.

102
00:06:25,310 --> 00:06:28,550
The animation has successfully killed him off.
