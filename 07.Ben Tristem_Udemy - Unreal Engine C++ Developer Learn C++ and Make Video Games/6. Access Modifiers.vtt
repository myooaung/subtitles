WEBVTT
1
00:00:04.270 --> 00:00:06.980
In this lecture, we'll be looking at the access modifiers.

2
00:00:07.240 --> 00:00:09.190
What they are and how we can use them.

3
00:00:09.250 --> 00:00:12.490
By the end of this lecture, we'll have our porn's visually represented.

4
00:00:12.800 --> 00:00:15.070
So that's gonna be important before we get started.

5
00:00:15.100 --> 00:00:20.050
That whilst we're using these in the context of components at the moment, a lot of the specifiers would

6
00:00:20.050 --> 00:00:25.270
allow us to define how properties such as variables in the structures functions.

7
00:00:25.390 --> 00:00:28.540
And of course, the components all behave in blueprint.

8
00:00:29.140 --> 00:00:34.720
So for simplicity going forward, I'm just going to refer to all of the effect keys as properties throughout

9
00:00:34.720 --> 00:00:35.200
the lecture.

10
00:00:35.620 --> 00:00:42.010
So in the graph, we can see a selection of the main modifiers that you'll see when using Unroll C++.

11
00:00:42.310 --> 00:00:43.630
There are gonna be many more of these.

12
00:00:43.690 --> 00:00:46.240
But understanding these will put you in a really good position to begin.

13
00:00:46.480 --> 00:00:51.280
And all of these can be found on the documentation page, which is actually fairly thorough in their

14
00:00:51.280 --> 00:00:52.060
descriptions here.

15
00:00:52.360 --> 00:00:57.190
So if we start with the most simple of the specifiers and they're going to be the blueprint Read-Only

16
00:00:57.340 --> 00:00:58.540
and the blueprint read.

17
00:00:58.540 --> 00:00:58.970
Right.

18
00:00:59.340 --> 00:01:05.740
But these simply define whether the property can be only viewed with the read only or also altered with

19
00:01:05.740 --> 00:01:12.340
the read write when referring to the derived classes in the blueprint counterparts.

20
00:01:12.640 --> 00:01:17.890
As an example of how this works, you're probably familiar with the get set option for variables in

21
00:01:17.890 --> 00:01:18.490
blueprints.

22
00:01:18.640 --> 00:01:25.180
So a property with Read-Only assigned would only allow you to use the get option inside of the blueprint,

23
00:01:25.360 --> 00:01:32.110
whilst one with the read write specify will allow you to get unset the variable inside of the blueprints.

24
00:01:32.500 --> 00:01:34.870
Next, we can see all of these specifiers in the middle.

25
00:01:34.960 --> 00:01:38.250
Kind of share similar aspects which are the anywhere.

26
00:01:39.470 --> 00:01:40.340
Instance only.

27
00:01:42.360 --> 00:01:47.940
And default only of these three types there, then two variations, which are the visible specifiers

28
00:01:48.240 --> 00:01:55.800
and the edit specifiers, so per property specify, you can only use one visible or edit modifier and

29
00:01:55.800 --> 00:02:01.860
you cannot mix and match visibility and edit modifiers in the same you property section.

30
00:02:01.950 --> 00:02:06.690
So as lovely as this graph is, this is one of those things is going to make a lot more sense with some

31
00:02:06.690 --> 00:02:09.880
examples in the editor in the pawn base had a fall.

32
00:02:10.030 --> 00:02:12.990
I've added a few demo properties, all of type int.

33
00:02:13.140 --> 00:02:16.440
And the important thing here is that each one is named to represent their U.

34
00:02:16.450 --> 00:02:17.380
Properties specified.

35
00:02:17.850 --> 00:02:20.720
I'll be removing these a little bit later so you don't need to follow along in code.

36
00:02:20.730 --> 00:02:25.560
These aren't unless of course, you wanted to pause the video and do so before I continue.

37
00:02:25.840 --> 00:02:29.450
But all of these will be described in this in the editing as I go through anyway.

38
00:02:29.820 --> 00:02:33.750
So inside of the edits, I'm just going to go into the pawn tank blueprints.

39
00:02:33.780 --> 00:02:34.890
Either of these would have worked.

40
00:02:35.190 --> 00:02:40.950
And then at the top in the details panel, we can see the new demo category, which are all of the integer

41
00:02:40.950 --> 00:02:42.150
values that I've created.

42
00:02:42.660 --> 00:02:48.960
The first two things that are evident here is that the difference is between our visible and edit specifiers.

43
00:02:49.050 --> 00:02:53.610
So the visible variables are great out, meaning that we can only see them, which is gonna be great

44
00:02:53.610 --> 00:02:58.350
for debugging, and also ensuring that people don't accidentally override any of these variables in

45
00:02:58.350 --> 00:03:04.080
the editor, whereas the edit variables are all available to edit, making them great for debugging

46
00:03:04.080 --> 00:03:10.260
as well, but also easy access to prototype and quickly iterate through different variables and tests.

47
00:03:10.740 --> 00:03:14.790
The Nexen and we then notice is that I had six different variables.

48
00:03:15.060 --> 00:03:18.360
However, only two of them are appearing here and they're both kind of the same.

49
00:03:18.380 --> 00:03:25.590
So we noticed that we have the edit and visibility specifiers both showing that anywhere and default

50
00:03:25.680 --> 00:03:26.800
only variables.

51
00:03:26.880 --> 00:03:31.140
So anyway, of course, is going to be shown anywhere in the editor when you're inside of the engine,

52
00:03:31.500 --> 00:03:37.530
whilst the default only is only going to show in the class or child of that derived class.

53
00:03:37.680 --> 00:03:39.390
So that's what class as being defo here.

54
00:03:39.810 --> 00:03:43.200
So that leaves us missing one specify, which is the instance only.

55
00:03:43.440 --> 00:03:49.200
So I'm just going to return to the map and then drag in an instance of the porn tank into level.

56
00:03:49.370 --> 00:03:53.700
And with that selected, we can see that we still have four values and we have the same two types,

57
00:03:53.700 --> 00:03:56.340
the visible and edit in the demo section.

58
00:03:56.520 --> 00:03:58.800
But this time we see that we still have our anywhere.

59
00:03:59.010 --> 00:04:01.940
But then the second value is the instance specify.

60
00:04:02.340 --> 00:04:06.030
So again, that's just what the engine will class as an instance as anything.

61
00:04:06.060 --> 00:04:09.600
You're placing or spawning in the level or in the map itself.

62
00:04:09.660 --> 00:04:10.500
Where's default?

63
00:04:10.560 --> 00:04:13.890
Is the default blueprint class derived from the parent?

64
00:04:14.190 --> 00:04:19.080
So the main difference is whether you're going to want the variable to be seen or edited and then whether

65
00:04:19.080 --> 00:04:24.210
you want that to be available in the blueprint class, in the editor or anywhere, which would obviously

66
00:04:24.210 --> 00:04:25.080
be both of them.

67
00:04:25.430 --> 00:04:29.730
Now, the other thing that we've touched on as well is that of the blueprint rights.

68
00:04:29.820 --> 00:04:34.470
So I'm going to return to the head of file and add a couple of these just as an example to show how

69
00:04:34.470 --> 00:04:36.420
we can use them so we can have these anywhere.

70
00:04:36.480 --> 00:04:39.930
But as the visible anywhere and edits anywhere are going to be the most similar.

71
00:04:40.260 --> 00:04:45.780
I'll just add one of each to these variables here so these can be combined with the visibility and the

72
00:04:45.780 --> 00:04:52.500
edit modifiers as one is intended to be altered and affect the editor functionality, whilst the blueprint

73
00:04:52.500 --> 00:04:58.770
modifiers are intended to edit and modify the blueprint functionality inside of the blueprint graph.

74
00:04:58.830 --> 00:05:04.290
If I search for the visible anywhere variable that I've created, we can see that I'm only provided

75
00:05:04.320 --> 00:05:09.390
with the option to get the variable as this is the one I've set to be Blueprint Read-Only, meaning

76
00:05:09.390 --> 00:05:12.090
that I can only check the variable inside of the blueprint.

77
00:05:12.570 --> 00:05:17.250
In comparison, if I then search for the edit anywhere in it, which is the one I've set to be blueprint

78
00:05:17.570 --> 00:05:22.830
read write available, I'm going to be provided with the get and the set options.

79
00:05:22.920 --> 00:05:27.500
So this is going to allow me to check and also set the variable inside of blueprint's.

80
00:05:27.870 --> 00:05:31.710
So hopefully that makes a little bit more sense with how these can all be used.

81
00:05:31.950 --> 00:05:32.730
It's one of those things.

82
00:05:32.730 --> 00:05:37.200
There's not really a complete right answer for a lot of the different scenarios.

83
00:05:37.200 --> 00:05:43.320
You'll be using them and you'll just get more used to which one is going to be more convenient or proved

84
00:05:43.320 --> 00:05:49.260
to be the best option for your project and your workflow as you go through the more times that you have

85
00:05:49.260 --> 00:05:53.550
to kind of create and define the properties for variables and components.

86
00:05:53.880 --> 00:05:59.370
So let's go back on over to our pawn base header and see how we can start using some of these to expose

87
00:05:59.370 --> 00:06:01.680
our components to our blueprint classes.

88
00:06:01.920 --> 00:06:04.590
So first, so I'm just going to remove the demo variables.

89
00:06:04.590 --> 00:06:06.120
Like I said, we won't be keeping these.

90
00:06:06.510 --> 00:06:08.760
And this will just tidy the class back up a little bit.

91
00:06:09.180 --> 00:06:14.490
So inside of the you capture component you property declaration, we just want to control festival,

92
00:06:14.550 --> 00:06:18.690
whether this is visible or editable and where this will apply.

93
00:06:18.900 --> 00:06:20.340
So four components.

94
00:06:20.490 --> 00:06:22.130
We actually use the visible anywhere.

95
00:06:22.290 --> 00:06:23.280
And this is very standard.

96
00:06:23.520 --> 00:06:29.550
If you were to look at a lot of the standard unreal classes, such as the character, which will already

97
00:06:29.550 --> 00:06:34.380
be using things like the capsule components and other sort of movement components and things, these

98
00:06:34.380 --> 00:06:35.690
are all set to be visible anywhere.

99
00:06:35.870 --> 00:06:40.140
So this is just one of those workflows that has tended to be adopted by other people.

100
00:06:40.380 --> 00:06:41.840
And this is going to allow us.

101
00:06:42.100 --> 00:06:47.110
To change the default properties anywhere in the editor, then next, we know that all of these are

102
00:06:47.110 --> 00:06:52.150
very visual components and we won't want to be changing any references or things like that to them in

103
00:06:52.150 --> 00:06:53.770
blueprint's at runtime.

104
00:06:53.980 --> 00:06:56.580
So we'll be setting it to a blueprint read-only.

105
00:06:57.100 --> 00:07:00.850
Then we're also going to add a category and call it components.

106
00:07:01.210 --> 00:07:05.680
This just makes it a little bit easier for us to find when we expose things in the details panel.

107
00:07:05.770 --> 00:07:10.390
You may have noticed earlier that I mentioned a few times that I dropped all of my integer variables

108
00:07:10.390 --> 00:07:11.950
into a Demos category.

109
00:07:12.060 --> 00:07:13.650
That's what this is going to do for us here.

110
00:07:13.990 --> 00:07:18.230
And then finally, because we're keeping these components private, we're going to get some compilers

111
00:07:18.280 --> 00:07:24.340
due to trying to expose a private property to a blueprint with the visibility specified.

112
00:07:24.820 --> 00:07:29.380
So to get around this, we're just going to want to add a matter specify which will be equal to the

113
00:07:29.390 --> 00:07:30.160
allied private.

114
00:07:30.190 --> 00:07:31.810
Access equals to tree.

115
00:07:32.030 --> 00:07:37.300
Be sure to copy the text exactly as it's written here, including the quotation marks and encapsulated

116
00:07:37.300 --> 00:07:37.900
braces.

117
00:07:38.140 --> 00:07:43.750
And we'll be keeping most of our properties private just for kind of standard class security in C++

118
00:07:44.050 --> 00:07:49.390
to avoid having other classes, being able to access variables and functions that we don't want them

119
00:07:49.390 --> 00:07:51.580
to potentially accidentally override.

120
00:07:51.850 --> 00:07:54.610
We're gonna keep them private for those purposes, however.

121
00:07:55.170 --> 00:08:00.340
Unreal kind of adds an extra complexity to this because we still want them to be available in the editor.

122
00:08:00.670 --> 00:08:05.710
This is why we need to apply this private access to these variables rather than just making everything

123
00:08:05.710 --> 00:08:06.190
public.

124
00:08:06.430 --> 00:08:10.660
Because if you were to do this, then that means that the future classes that we create could very easily

125
00:08:10.660 --> 00:08:11.470
kind of drop in.

126
00:08:11.640 --> 00:08:14.560
Change a variable from outside of another class.

127
00:08:14.860 --> 00:08:19.300
And it can become a little bit confusing to kind of keep track of where all of these changes are happening

128
00:08:19.840 --> 00:08:20.910
with that final change made.

129
00:08:21.310 --> 00:08:24.160
All of our components will be exposed in the same way.

130
00:08:24.190 --> 00:08:29.590
So I'm just going to copy the first you property and paste this over the other component you property

131
00:08:29.590 --> 00:08:30.370
specifies.

132
00:08:30.610 --> 00:08:36.550
Again, these changes are going to be best made with the editor closed or ensuring you close and reopen

133
00:08:36.550 --> 00:08:40.510
the editor after saving and before heading over to recompile.

134
00:08:40.750 --> 00:08:45.310
So going forward, I'm just going to assume that those steps are being taken to avoid hot reload issues,

135
00:08:45.430 --> 00:08:47.620
which is the term for compiling from the editor.

136
00:08:48.720 --> 00:08:50.340
Okay, so if the compile complete.

137
00:08:50.560 --> 00:08:56.080
If we navigate to either of the blueprint classes, I'll use the tank class for this example.

138
00:08:56.480 --> 00:08:59.870
And if it doesn't, by default, just be sure to open the full blueprint, Ed.

139
00:09:00.310 --> 00:09:04.900
So if we start by selecting the components, we can see that we now have all of the details exposed,

140
00:09:04.990 --> 00:09:06.850
as we'd expected in the details panel.

141
00:09:07.120 --> 00:09:09.370
Whilst we're here, we can also start by setting up our classes.

142
00:09:09.400 --> 00:09:15.970
So in the tank class, let's set the base match to s.m, underscore a tank base and the turret mesh

143
00:09:16.000 --> 00:09:18.280
to s.m underscore tank turret.

144
00:09:18.580 --> 00:09:23.890
We can also grab the capsule component now and set the scale so that it fits roughly around the base

145
00:09:23.980 --> 00:09:25.020
and the turret.

146
00:09:25.360 --> 00:09:28.750
And then you might also want to drag the base mesh down just a little bit here.

147
00:09:29.110 --> 00:09:31.600
So I think that's going to look fine in the level.

148
00:09:31.750 --> 00:09:34.480
And as though the wheels are kind of resting on the floor correctly.

149
00:09:36.070 --> 00:09:41.560
We also then want to set our projecto spoon point to rest somewhere just in front of the tart Bairo.

150
00:09:43.330 --> 00:09:47.480
And then we're just going to very quickly repeat these steps for the turret class as well.

151
00:09:49.410 --> 00:09:56.040
So if we start by setting the bass mesh to the s.m underscore turret base and the turret mash to s.m

152
00:09:56.190 --> 00:09:59.590
underscore tower turret, a little bit of a tongue twister.

153
00:10:00.610 --> 00:10:04.210
This gives us a good idea of how much we need to scale the cultural component.

154
00:10:05.880 --> 00:10:11.070
And then finally, with that in place, we can also move the projectile spawn points in place here to.

155
00:10:12.630 --> 00:10:15.630
So this may look a little bit far away, and it was the same for the tank as well.

156
00:10:15.780 --> 00:10:21.870
But because of the way that we've got quite a large static mesh representing the projectile as well

157
00:10:21.870 --> 00:10:26.080
as the particle effects were going to put on in the Polish section of the course.

158
00:10:26.430 --> 00:10:28.960
We actually want to give this a fair amount of distance.

159
00:10:28.980 --> 00:10:33.300
Otherwise, it's going to look a little bit strange with the projectile kind of spawning inside of the

160
00:10:33.570 --> 00:10:36.270
turrets with the particles and stuff being there as well.

161
00:10:36.510 --> 00:10:40.800
So I would just keep this quite far away from the end of the turret.

162
00:10:41.160 --> 00:10:41.790
And there we go.

163
00:10:41.880 --> 00:10:49.380
So from the same base, C++ class, we've now created the start of two unique classes and we now know

164
00:10:49.380 --> 00:10:52.860
how to expose the components using the access modifiers.
