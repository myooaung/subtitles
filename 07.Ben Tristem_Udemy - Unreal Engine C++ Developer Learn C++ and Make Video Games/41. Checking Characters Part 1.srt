1
00:00:04,370 --> 00:00:06,680
Hello everybody and welcome back in this lecture.

2
00:00:06,680 --> 00:00:10,970
We are going to assess one letter of a word against another.

3
00:00:10,970 --> 00:00:14,700
And if they equal one another that we know it's not an eyesore gram.

4
00:00:14,720 --> 00:00:18,470
So let's start off with the word that we are currently looking at.

5
00:00:18,470 --> 00:00:22,870
So we're looking at C A K E S.

6
00:00:22,880 --> 00:00:23,720
Excellent.

7
00:00:23,720 --> 00:00:29,760
Now this is Element Zero One Two Three Four.

8
00:00:29,780 --> 00:00:30,260
Okay.

9
00:00:30,410 --> 00:00:33,860
So how would we go ahead and assess this.

10
00:00:33,860 --> 00:00:41,970
Well first of all we would go and assess Element Zero against the next one so against element 1.

11
00:00:42,250 --> 00:00:51,530
So we'd check 0 against 1 then we'd go zero against two zero against three and zero against four.

12
00:00:51,550 --> 00:00:58,690
Now this is a bit of a multidimensional problem after we've assessed everything against the first letter.

13
00:00:58,690 --> 00:01:04,090
We then have to go on to assess the other letters against each other as well and we'll get to that in

14
00:01:04,090 --> 00:01:05,020
the next lecture.

15
00:01:05,500 --> 00:01:12,460
So let's dive over into V.S. code and work out how we just do the first one here.

16
00:01:12,520 --> 00:01:12,800
Okay.

17
00:01:12,820 --> 00:01:17,080
So now that we're over Invesco the first thing I want to do is a tiny bit of tidying we've got this

18
00:01:17,080 --> 00:01:17,610
call for.

19
00:01:17,610 --> 00:01:19,750
Is Isaac gram to print out.

20
00:01:19,750 --> 00:01:22,290
We don't need that anymore in our game so I'm gonna remove that.

21
00:01:22,290 --> 00:01:26,140
That was a great test to make sure we knew how to iterate through.

22
00:01:26,140 --> 00:01:28,240
And then we have here.

23
00:01:28,240 --> 00:01:31,050
So this is Isaac Ram this is where we're going to be working.

24
00:01:31,090 --> 00:01:31,330
Okay.

25
00:01:31,360 --> 00:01:37,180
So looking at the is Isaac Ram function let's go and comment outside existing for loop and then we can

26
00:01:37,180 --> 00:01:39,240
work higher up.

27
00:01:39,340 --> 00:01:45,370
Now there are a couple of ways that we can go ahead and format what we're about to do now thinking about

28
00:01:45,370 --> 00:01:45,770
it.

29
00:01:45,850 --> 00:01:51,760
We need to integers now I'm going to declare them and initialize them here and then we'll see how that

30
00:01:51,760 --> 00:01:57,430
impacts are for loop and we can also initialize them within the for loop itself so I'll show you both

31
00:01:57,430 --> 00:01:59,030
ways of doing it.

32
00:01:59,050 --> 00:02:02,140
So to start with we've gotten in 32 index.

33
00:02:02,140 --> 00:02:07,180
Now this is going to stay the same but we're going to initialize it with a value of zero and then keep

34
00:02:07,180 --> 00:02:11,920
referring back to it as we assess each other character against that index.

35
00:02:11,920 --> 00:02:15,090
And then we've also got something else so we need this something else.

36
00:02:15,100 --> 00:02:16,840
So we can compare to it.

37
00:02:16,870 --> 00:02:25,110
So I'm going to call it comparison and we're going to initialize that to index plus 1.

38
00:02:25,210 --> 00:02:31,540
So we're going to start comparing the index against index plus 1 and then of course we can increment

39
00:02:31,570 --> 00:02:37,050
the comparison each time as we go through always checking it back against the index.

40
00:02:37,060 --> 00:02:42,280
Now when it comes to later on in the next lecture we'll do it ever so slightly differently because we

41
00:02:42,280 --> 00:02:45,760
need to increment the index as well eventually.

42
00:02:45,790 --> 00:02:52,450
So now that we've got that sets we can start our 4 loop now because we've already set an initialized

43
00:02:52,750 --> 00:02:58,600
our two variables that we're going to compare we don't actually need something here at the first point

44
00:02:58,600 --> 00:03:04,540
where we're initializing and it's quite common to see for loops written in a similar manner to this.

45
00:03:04,570 --> 00:03:10,090
Now in this particular case we're going to be incrementing the comparison so we can simply say here

46
00:03:10,090 --> 00:03:13,930
whilst the comparison is less than the word length.

47
00:03:13,930 --> 00:03:19,360
Now you may think at this particular point that you need to do less than or equal to the word length.

48
00:03:19,360 --> 00:03:25,870
But the problem is that if you go beyond the end of the word length you're going to end up out of bounds

49
00:03:25,900 --> 00:03:30,040
and that will crash on real hard which we don't want to do.

50
00:03:30,160 --> 00:03:35,380
And then we're going to increment comparison so let's go ahead and increment it's excellent.

51
00:03:35,660 --> 00:03:36,000
Okay.

52
00:03:36,010 --> 00:03:38,080
So that's the for loop setup.

53
00:03:38,170 --> 00:03:45,640
Now there'll be something in here and if statements that will return False if these two are equal to

54
00:03:45,640 --> 00:03:51,610
one another but then we also need to remember to return true which we've already got down here I almost

55
00:03:51,610 --> 00:03:52,960
wrote that again.

56
00:03:53,110 --> 00:03:55,330
Let's go ahead return true.

57
00:03:55,390 --> 00:04:01,590
Now the other way that you can write this is to put these two initialization right at the very beginning.

58
00:04:01,600 --> 00:04:07,390
So what we can do here instead of initialize them up here and this is down to code style at the end

59
00:04:07,390 --> 00:04:08,100
of the day.

60
00:04:08,170 --> 00:04:13,860
We can also go in 32 index equals zero.

61
00:04:13,870 --> 00:04:14,740
Just like we did before.

62
00:04:14,980 --> 00:04:16,980
And then we need our comparison as well.

63
00:04:16,990 --> 00:04:19,160
And we need to give it a value.

64
00:04:19,210 --> 00:04:25,390
Now we don't start declaring another type at this point you may be thinking oh why didn't I go in 32

65
00:04:25,390 --> 00:04:25,660
again.

66
00:04:25,660 --> 00:04:31,090
We don't do that and we can say this is equal to index plus 1.

67
00:04:31,120 --> 00:04:31,960
Perfect.

68
00:04:31,960 --> 00:04:39,160
So this will work in exactly the same manner as declaring them and initializing them up here.

69
00:04:39,160 --> 00:04:45,430
The primary difference between the two is in fact the scope of these variables that we've just declared

70
00:04:45,850 --> 00:04:54,220
If we declare them outside of the for loop they exist in at a wider scope then within the for loop themselves.

71
00:04:54,460 --> 00:04:56,510
So that's something to bear in mind there.

72
00:04:56,550 --> 00:05:00,540
It does change the scope of those variables.

73
00:05:00,760 --> 00:05:06,550
So we have our first for loop Ritson but it doesn't do anything yet because there's no code in here

74
00:05:06,970 --> 00:05:10,180
and that is going to be your challenge okay.

75
00:05:10,210 --> 00:05:13,750
So your challenge is to check whether two characters of the same.

76
00:05:13,890 --> 00:05:15,910
This should be relatively straightforward.

77
00:05:16,280 --> 00:05:23,420
So create the if statement within our for loop that is needed to check the first character against all

78
00:05:23,420 --> 00:05:24,770
of the others.

79
00:05:24,770 --> 00:05:28,230
Now bear in mind when you do this you'll also need to return something.

80
00:05:28,280 --> 00:05:32,990
If that happens to be the case pause the video now and give us a go

81
00:05:35,720 --> 00:05:37,450
Okay everybody Welcome back.

82
00:05:37,460 --> 00:05:44,320
Let's go ahead now hop back on over interveners code and completes our if statement okay.

83
00:05:44,340 --> 00:05:45,330
Everybody welcome back.

84
00:05:45,330 --> 00:05:47,760
Let's go ahead and type in the code that we need.

85
00:05:47,760 --> 00:05:50,040
So this is going to be an if statement.

86
00:05:50,370 --> 00:05:51,280
Let's go in then.

87
00:05:51,300 --> 00:06:00,030
Now what's the condition here we're basically saying if the word index is equal to the word comparison

88
00:06:00,240 --> 00:06:04,520
if those two are equivalent then we're going to return false.

89
00:06:04,530 --> 00:06:12,870
So if the word open your square brackets which is called the subscript operator and we could indeed

90
00:06:12,900 --> 00:06:15,490
put a magic number in here we could go zero.

91
00:06:15,510 --> 00:06:20,160
And that would work for this particular example because we never change index at all.

92
00:06:20,490 --> 00:06:27,120
However we want this to be able to be changed later on so we'll type in if the word index which is fine

93
00:06:28,290 --> 00:06:34,230
is the same or is equal to the word comparison.

94
00:06:34,440 --> 00:06:40,840
Then we're going to do something and that do something is going to be to return false.

95
00:06:40,860 --> 00:06:46,710
And now what that will mean is that when it returns false it will come back up here and it will return.

96
00:06:46,710 --> 00:06:53,590
So if this is not true if it's false we're going to say no repeating letters and to guess again let's

97
00:06:53,610 --> 00:06:55,560
put a bit of punctuation in there.

98
00:06:55,590 --> 00:07:00,650
There's also a few the hidden word is I've missed some punctuation here.

99
00:07:00,720 --> 00:07:02,970
I bet some of you have been telling me about that as well.

100
00:07:02,970 --> 00:07:06,660
Anyway let's go load up bull cows and see if it works.

101
00:07:07,230 --> 00:07:07,630
OK.

102
00:07:07,650 --> 00:07:08,730
So now this is loaded up.

103
00:07:08,730 --> 00:07:10,180
We can click compile.

104
00:07:10,300 --> 00:07:10,520
Okay.

105
00:07:10,530 --> 00:07:16,590
So whilst that's compiling let's think about what we will get out of this code if the first letter of

106
00:07:16,590 --> 00:07:24,870
our word is the same as any of the others it should say oh no repeating characters are how we've complete.

107
00:07:24,870 --> 00:07:30,300
However if any of the other letters are the same it will just continue and it will take a life because

108
00:07:30,300 --> 00:07:33,620
we're not assessing the other letters yet against each other.

109
00:07:33,660 --> 00:07:34,320
So let's try that.

110
00:07:34,320 --> 00:07:40,010
So if we were to go ahead and type in a b c d e we should get a loss of life.

111
00:07:40,020 --> 00:07:40,650
That's fine.

112
00:07:40,770 --> 00:07:49,560
If we go A B C D no repeating letters guess again and we'll find if we repeats this throughout the other

113
00:07:49,560 --> 00:07:53,820
positions that repeated letters can exist and we'll get no repeated letters.

114
00:07:53,820 --> 00:07:55,740
Now is the A that's repeated there.

115
00:07:55,740 --> 00:08:00,540
That's just do a D DDD and we're fine we'll lose a life.

116
00:08:00,720 --> 00:08:06,730
So we're not assessing those other letters yet but the A is working let's put a at the end as well.

117
00:08:06,780 --> 00:08:07,250
There we go.

118
00:08:07,490 --> 00:08:10,760
So our code is working exactly how we expected to.

119
00:08:10,920 --> 00:08:12,260
This is really exciting.

120
00:08:12,330 --> 00:08:18,210
This little bits of code that we've been working on here is going through checking each one of the letters

121
00:08:18,300 --> 00:08:21,020
against the first letter of a word.

122
00:08:21,060 --> 00:08:25,870
Just gonna do it tidy up around here and delete our extra whitespace.

123
00:08:25,920 --> 00:08:28,370
Now we've not quite completed this yet.

124
00:08:28,380 --> 00:08:32,100
However we have moved on from this.

125
00:08:32,100 --> 00:08:35,500
So let's go ahead and remove that from our code.

126
00:08:35,540 --> 00:08:36,480
So it's nice and clean.

127
00:08:36,480 --> 00:08:38,770
I'm just going to quickly go up an eyeball.

128
00:08:38,790 --> 00:08:44,340
I would recommend doing this from time to time it helps get your eye in code and it's formatting and

129
00:08:44,340 --> 00:08:49,640
I'm guilty of missing things as well or leaving extra whitespace where it's not necessary.

130
00:08:49,680 --> 00:08:52,380
Nice clean code makes it easier to read.

131
00:08:52,380 --> 00:08:53,780
There we go.

132
00:08:53,790 --> 00:08:54,750
I'm happy with that.

133
00:08:54,750 --> 00:08:56,180
How are you guys getting on.

134
00:08:56,250 --> 00:09:00,420
Please share your work over and the discussions and I'll see you all in the next lecture.
