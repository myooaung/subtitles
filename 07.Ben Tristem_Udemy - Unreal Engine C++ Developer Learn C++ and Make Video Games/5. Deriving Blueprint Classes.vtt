WEBVTT
1
00:00:04.200 --> 00:00:09.480
In this lecture, we'll be seeing how we can derive our different porn classes from the porn based class

2
00:00:09.540 --> 00:00:10.380
that we've created.

3
00:00:10.710 --> 00:00:16.230
So creating blueprint classes derived from our C++ classes is just going to make things much easier

4
00:00:16.230 --> 00:00:18.700
to test and prototype things in the editor.

5
00:00:19.380 --> 00:00:24.830
This will also give us some great insights into what we'll be wanting to separate out into the future

6
00:00:24.880 --> 00:00:26.520
C++ porn classes.

7
00:00:26.880 --> 00:00:31.310
I will also see the problem caused by not implementing the new property specifiers.

8
00:00:31.740 --> 00:00:35.010
So we're gonna start by setting up the project ready for our new classes.

9
00:00:35.040 --> 00:00:39.990
We'll start by creating a new folder inside of the content structure named Blueprints.

10
00:00:40.170 --> 00:00:42.900
Then another folder inside of this named Porns.

11
00:00:43.110 --> 00:00:47.460
So this is just mirroring the C++ classes and the folder structure.

12
00:00:47.490 --> 00:00:52.950
Just keep things nice and easy to find and manage both the C++ and the blueprint classes.

13
00:00:53.370 --> 00:00:59.400
Now we can navigate to our C++ points folder, then to derive a blueprint class from a C++ class.

14
00:00:59.430 --> 00:01:05.640
The easiest way is just going to be to right click on this and select create a blueprint based on the

15
00:01:05.700 --> 00:01:06.360
class name.

16
00:01:06.660 --> 00:01:08.130
So here we've got pawn base.

17
00:01:08.610 --> 00:01:15.450
Then if we name the first class, our BP underscore porn tank, we can see inside of our new blueprint

18
00:01:15.480 --> 00:01:19.800
that the parent class is our porn base, which is exactly what we wanted to see.

19
00:01:20.100 --> 00:01:26.220
Another way to set our C++ class as the parent is to select the Create Blueprint class in the folder

20
00:01:26.610 --> 00:01:28.750
that you want to create the new blueprint.

21
00:01:29.130 --> 00:01:31.230
And again, this is going to be our porn's folder.

22
00:01:31.650 --> 00:01:36.780
Then you can search for the custom class that we've created, which is going to be the porn base, just

23
00:01:36.780 --> 00:01:39.330
as you would any other kind of default unroll class.

24
00:01:39.420 --> 00:01:40.200
And it will appear here.

25
00:01:40.570 --> 00:01:41.310
So it's like that.

26
00:01:41.370 --> 00:01:44.370
And then we'll name this one to BP, underscore porn turret.

27
00:01:44.880 --> 00:01:49.440
So now if we open this, we can see that once again, the parent class is the porn base.

28
00:01:49.900 --> 00:01:55.230
Now that we have the basic visual representation of our classes, we can see which components we want

29
00:01:55.230 --> 00:01:59.550
to split up into their own child C++ classes.

30
00:01:59.790 --> 00:02:02.760
So in the turret class, we can actually see that we have everything that we need.

31
00:02:03.120 --> 00:02:05.040
The enemy functions are gonna be very simple.

32
00:02:05.160 --> 00:02:07.110
They're just going to stay in the level statically.

33
00:02:07.740 --> 00:02:12.630
And we have all of the visual representation and collisions set up, as well as the projectile spawn

34
00:02:12.630 --> 00:02:13.020
point.

35
00:02:13.500 --> 00:02:18.330
If we don't move over to the porn, that tank class, this is, of course, going to look exactly the

36
00:02:18.330 --> 00:02:19.110
same at the moment.

37
00:02:19.380 --> 00:02:23.820
But we could do with a couple of extra things specifically to do with player control.

38
00:02:24.180 --> 00:02:30.510
And that's gonna be the camera component, which is how the player will view the game through the camera

39
00:02:30.510 --> 00:02:31.110
viewpoint.

40
00:02:31.320 --> 00:02:34.140
And we're also going to add something which is just kind of an optional extra.

41
00:02:34.260 --> 00:02:38.730
And that's the spring, um, which will make the camera movement feel a little bit nicer and provide

42
00:02:38.730 --> 00:02:40.410
us with some extra control.

43
00:02:40.830 --> 00:02:45.690
And these components, of course, are the ones which would make no sense having in the A.I. controlled

44
00:02:45.730 --> 00:02:51.270
tart's class, which is why splitting the light into their own C++ classes is gonna be one of the best

45
00:02:51.270 --> 00:02:51.910
approaches here.

46
00:02:52.860 --> 00:02:54.890
The final thing to recap is the U.

47
00:02:54.900 --> 00:03:01.020
Property specifiers and the results of using the create default sub object and the setup attachments.

48
00:03:01.140 --> 00:03:07.170
So we can see here that everything is nested exactly as we had specified in our C++ class.

49
00:03:07.380 --> 00:03:13.290
The capture component is the root or the one at the very top of the hierarchy with the base match sitting

50
00:03:13.290 --> 00:03:15.240
directly on the root component.

51
00:03:15.420 --> 00:03:18.810
Then the turret mesh being the child of the base mesh component.

52
00:03:19.020 --> 00:03:23.160
And then finally the projectile spawn point being nested on to the turret mesh.

53
00:03:23.550 --> 00:03:24.740
The problem arises here, though.

54
00:03:24.780 --> 00:03:29.850
If we select any of these components, we can see we have an issue in our details panel.

55
00:03:30.430 --> 00:03:33.300
And that problem is that we don't actually have any details.

56
00:03:33.540 --> 00:03:38.580
So where we'd be expecting to see options for things like the capsule scaling, static mesh slots,

57
00:03:38.580 --> 00:03:39.690
transforms, et cetera.

58
00:03:40.230 --> 00:03:44.640
We just have a completely empty panel, and that's just because we haven't added any properties.

59
00:03:44.640 --> 00:03:49.410
So unreal, doesn't know how to handle or display this in the blueprint subplots.

60
00:03:49.680 --> 00:03:51.510
And we'll be solving this in the next lecture.

61
00:03:51.900 --> 00:03:55.290
When we start getting a better understanding of access modifiers.
