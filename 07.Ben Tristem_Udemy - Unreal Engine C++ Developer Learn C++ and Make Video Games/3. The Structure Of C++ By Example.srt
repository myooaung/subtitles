0
1
00:00:00,410 --> 00:00:00,830
All right.
1

2
00:00:00,840 --> 00:00:06,270
Let's look at the general structure of C++ and we're going to use the code that we're going to write
2

3
00:00:06,270 --> 00:00:08,270
together in this section as an example.
3

4
00:00:08,270 --> 00:00:14,280
Now look I only want to focus on this at a 50,000 foot view level if you like at the moment.
4

5
00:00:14,340 --> 00:00:16,970
Let's just zoom in to that bit in the corner there.
5

6
00:00:17,040 --> 00:00:20,070
That is the overview that we're not even going to get a read.
6

7
00:00:20,070 --> 00:00:25,350
So the point is to have an idea of the structure of the code at this sort of literally fuzzy level for
7

8
00:00:25,350 --> 00:00:25,860
this point.
8

9
00:00:26,280 --> 00:00:30,390
What we can tell at this level is various attributes of the code.
9

10
00:00:30,390 --> 00:00:36,390
We can see without actually being to read the detail that there's a bunch of purple include statements
10

11
00:00:36,480 --> 00:00:41,970
at the top that is including other people's code that we're going to need to write to the terminal before
11

12
00:00:41,970 --> 00:00:43,350
we even get into our code.
12

13
00:00:43,350 --> 00:00:49,200
So that's what you're seeing at the top. Then the next thing that we see inside our code is the idea
13

14
00:00:49,260 --> 00:00:57,330
that the play game with difficulty method that we've written ourself is at the top before the main function.
14

15
00:00:57,360 --> 00:01:00,530
So we're having to write it before we can use it.
15

16
00:01:00,530 --> 00:01:00,780
All right.
16

17
00:01:00,780 --> 00:01:05,850
So there's a big lump there everything inside a given function is indented.
17

18
00:01:05,850 --> 00:01:09,150
So there's two loads of things that are indented in here.
18

19
00:01:09,150 --> 00:01:14,700
One of the things that is indented is everything inside the main function.
19

20
00:01:14,700 --> 00:01:19,350
And the other thing that is indented a few spaces in is everything inside the function that we're going
20

21
00:01:19,350 --> 00:01:22,220
to write together play that game at difficulty.
21

22
00:01:22,420 --> 00:01:22,650
Right.
22

23
00:01:22,650 --> 00:01:25,750
So that's the other thing we can see on a very big picture view.
23

24
00:01:25,770 --> 00:01:31,710
The other thing that we can see is that we are using indentation when we have things like while and
24

25
00:01:31,770 --> 00:01:32,400
if statements.
25

26
00:01:32,400 --> 00:01:34,100
Now we're going to find out exactly what they are.
26

27
00:01:34,230 --> 00:01:41,100
As we go through the section these are things that control the flow of execution it's saying while something
27

28
00:01:41,100 --> 00:01:47,730
is happening do this and the indentation helps your eye see what code gets executed when the same with
28

29
00:01:47,730 --> 00:01:54,270
these things called if statements if some particular condition is true then do this otherwise do something
29

30
00:01:54,270 --> 00:01:54,570
else.
30

31
00:01:54,570 --> 00:01:54,840
Right.
31

32
00:01:54,840 --> 00:02:00,720
So to recap at a 50,000 foot view we can see that we have other people's code included at the top that
32

33
00:02:00,780 --> 00:02:06,150
this piece of code has two functions you can see that by the indentation and the fact they're only basically
33

34
00:02:06,480 --> 00:02:09,810
two things apart from the includes that are not indented.
34

35
00:02:09,810 --> 00:02:11,990
That shows you there are two functions overall.
35

36
00:02:12,180 --> 00:02:17,140
In our case the main function is at the bottom and then the function that we write is above functions
36

37
00:02:17,160 --> 00:02:21,480
just a grouping of lines of code will find out all about all of that in just in just a moment in the
37

38
00:02:21,480 --> 00:02:28,050
next upcoming videos everything inside of functions indented everything inside a control structure like
38

39
00:02:28,050 --> 00:02:33,090
a while or if his indented the other thing that I'd like you to pay attention to is the fact that the
39

40
00:02:33,390 --> 00:02:39,780
system is color coding things for us very differently where we have comments this is code that is not
40

41
00:02:39,780 --> 00:02:44,400
designed to be read by the computer purely for us humans and we use them very sparingly for reasons
41

42
00:02:44,400 --> 00:02:50,820
we'll talk about later they're in green strings text that we've put in if you like call the magic words
42

43
00:02:50,820 --> 00:02:56,010
it's just text that we've decided to display to the user for example that's tending to come out in Orange
43

44
00:02:56,010 --> 00:03:02,430
in this system and then keywords that the system is recognizing is coming out in blue or yellow depending
44

45
00:03:02,430 --> 00:03:08,550
on the particular type of keyword and then other other things that we have declared ourselves and are
45

46
00:03:08,550 --> 00:03:13,320
using may come I am white so I won't be precise about what all these different colors mean at this stage
46

47
00:03:13,350 --> 00:03:17,880
because the amount of terminology that it would bombard you with would be not good but I just want you
47

48
00:03:17,880 --> 00:03:22,380
to know that the color codes actually mean something and strictly means something that's telling you
48

49
00:03:22,380 --> 00:03:26,610
something about how the code is structured and you'll start to absorb and realize what this means as
49

50
00:03:26,610 --> 00:03:28,980
we go through the section.
50

51
00:03:28,980 --> 00:03:35,130
So really that's all I want to do in this short video is just give you a 50,000 foot overview
51

52
00:03:35,400 --> 00:03:41,460
of the code now what I want you to do is a bit of a challenges to to go into the community and try and
52

53
00:03:41,460 --> 00:03:45,070
explain what you think just the main function does.
53

54
00:03:45,170 --> 00:03:49,640
Now this is a weird challenge for this stage it's like "well I haven't taught you any C++ yet, why?"
54

55
00:03:49,730 --> 00:03:54,990
Well it doesn't matter how much or how little you know about C++ here.
55

56
00:03:55,010 --> 00:03:56,430
The purpose really is twofold.
56

57
00:03:56,440 --> 00:04:01,630
Firstly I'd really want you to be brave enough to go and say well I don't know or I haven't got a clue
57

58
00:04:01,660 --> 00:04:08,200
or I think this does this maybe it sets a difficulty and then I don't really understand this "while" thing.
58

59
00:04:08,230 --> 00:04:13,450
However you you put it out there the really valuable thing is the second point which is that you're
59

60
00:04:13,450 --> 00:04:18,760
going to record in history how much you knew about C++ at the start of this section and then at the
60

61
00:04:18,760 --> 00:04:22,390
end of the section I'm going to ask you to do a similar exercise and you could look back to your previous
61

62
00:04:22,390 --> 00:04:23,820
comment and see just how far you've come.
62

63
00:04:23,830 --> 00:04:29,440
So this is an optional exercise if you don't feel comfortable doing this just don't do it but if you
63

64
00:04:29,440 --> 00:04:34,120
do feel comfortable go ahead and do it and then after the pause I am going to come back and just explain
64

65
00:04:34,180 --> 00:04:36,500
in my words what this does.
65

66
00:04:36,530 --> 00:04:36,720
OK
66

67
00:04:40,220 --> 00:04:40,450
all right.
67

68
00:04:40,460 --> 00:04:40,900
Welcome back.
68

69
00:04:40,910 --> 00:04:43,010
So not going into the rest of the code.
69

70
00:04:43,010 --> 00:04:46,780
I'm just going to talk about the main function what does it do at a at a high level.
70

71
00:04:46,790 --> 00:04:51,290
So yes we set ourselves a difficulty level we saying we start the game at a difficulty level of two
71

72
00:04:52,170 --> 00:04:56,430
and that we're going to stop playing the game when the difficulty gets as high as five.
72

73
00:04:56,600 --> 00:04:58,030
That's what ten rob a 10.
73

74
00:04:58,100 --> 00:04:59,510
As I've highlighted.
74

75
00:04:59,510 --> 00:05:06,710
Now this control structure here this while says while the difficulty or the current difficulty is less
75

76
00:05:06,710 --> 00:05:10,850
than or equal to the maximum difficulty so the difficulty was two or three or four or five or six or
76

77
00:05:10,850 --> 00:05:11,950
even 10.
77

78
00:05:11,990 --> 00:05:16,270
Then we keep doing this thing in here that is indented as we talked about.
78

79
00:05:16,890 --> 00:05:17,140
OK.
79

80
00:05:17,180 --> 00:05:21,390
So what do we do all the time that the difficulty is between two and 10 inclusive.
80

81
00:05:21,440 --> 00:05:24,680
Well we play the game at that difficulty.
81

82
00:05:24,710 --> 00:05:27,890
This is hiding all the details of how you play the game all the stuff up here.
82

83
00:05:27,890 --> 00:05:30,880
We can actually collapse down in Visual Studio code.
83

84
00:05:30,980 --> 00:05:34,610
Obviously you won't have any this code on your screen yet the whole purpose of the section is to write
84

85
00:05:34,610 --> 00:05:41,570
this code in fact it's the meat of this as you can see there's 43 lines of code or 40.
85

86
00:05:41,600 --> 00:05:45,350
How many roughly 43 lines of code in play game at difficulty.
86

87
00:05:45,350 --> 00:05:49,760
That's the meat of it but from a top level view what we're doing is we're playing the game at that difficulty
87

88
00:05:49,760 --> 00:05:50,420
level.
88

89
00:05:50,540 --> 00:05:57,290
We are clearing the screen and ignoring the user input and then we are incrementing, this is a code for
89

90
00:05:57,290 --> 00:06:00,650
how you increase the difficulty by one and then we're going round again.
90

91
00:06:00,650 --> 00:06:06,470
So we just keep going round and round this little loop of four lines from line 56 to line 59
91

92
00:06:06,770 --> 00:06:13,010
in circles until it's no longer the case that the difficulty is less than or equal to the maximum difficulty.
92

93
00:06:13,070 --> 00:06:17,450
And when the difficulty gets to 11 we spit out the bottom and he goes "Wow you're a master hacker" you've
93

94
00:06:17,450 --> 00:06:18,710
basically beaten the game.
94

95
00:06:18,770 --> 00:06:24,960
And then that return zero which we've seen before which is of exiting the program and off we go.
95

96
00:06:25,040 --> 00:06:25,310
All right.
96

97
00:06:25,310 --> 00:06:32,180
So this is just provided you with a 50,000 foot overview of how code looks how this outline view might
97

98
00:06:32,270 --> 00:06:34,130
get you some idea as to how it looks.
98

99
00:06:34,250 --> 00:06:38,340
And I fully expect this code to be completely fuzzy to you at the moment.
99

100
00:06:38,360 --> 00:06:43,820
You remember how image is used to load on the internet when modems were very slow they would go very
100

101
00:06:43,820 --> 00:06:48,660
fuzzy to start with and then they get sharper and sharper and sharper as the information came through.
101

102
00:06:48,830 --> 00:06:54,800
That's very different to learning it kind of like this line by line by line learning from fuzzy to Sharp
102

103
00:06:54,830 --> 00:06:57,560
is really powerful because you get to see the bigger picture first.
103

104
00:06:57,560 --> 00:06:58,660
That's what I'm trying to do with you here.
104

105
00:06:58,670 --> 00:07:00,810
I'm just trying to say this has some structure.
105

106
00:07:00,920 --> 00:07:05,990
It has some color just recognize that from the beginning and now moving forward we're going to start
106

107
00:07:05,990 --> 00:07:08,950
going into the very details and writing the actual lines of code.
107

108
00:07:08,990 --> 00:07:12,330
At least you've got some context to hang this information on.
108

109
00:07:12,380 --> 00:07:14,680
Another way of looking at it is we're doing a jigsaw puzzle.
109

110
00:07:14,690 --> 00:07:16,760
This is the outside of the jigsaw first.
110

111
00:07:16,790 --> 00:07:18,780
Then we go and try and find all the pieces.
111

112
00:07:18,800 --> 00:07:19,210
All right.
112

113
00:07:19,280 --> 00:07:20,180
Enough from me on this.
113

114
00:07:20,180 --> 00:07:23,300
Let's dive in and start actually writing code in the next video.
