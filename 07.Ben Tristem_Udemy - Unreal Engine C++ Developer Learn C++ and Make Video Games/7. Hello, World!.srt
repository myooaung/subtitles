0
1
00:00:00,690 --> 00:00:05,490
Hello and welcome back to this lesson where we're going to learn how to output some texts to the terminal.
1

2
00:00:05,490 --> 00:00:10,170
Now this is something we're going to be doing a lot in our TripleX game but in order to do this we
2

3
00:00:10,170 --> 00:00:15,870
first need to include a library with our program that's going to allow us to actually write and output
3

4
00:00:15,870 --> 00:00:17,670
the text to the terminal.
4

5
00:00:17,670 --> 00:00:24,050
Now a library is basically a collection of code that is written by other programmers that we can use.
5

6
00:00:24,060 --> 00:00:25,920
So how do we get started here.
6

7
00:00:25,920 --> 00:00:30,660
Well we're going to start by writing a preprocessor directive in our file.
7

8
00:00:30,660 --> 00:00:33,360
Now this may seem like a very scary term here.
8

9
00:00:33,360 --> 00:00:38,400
If you're hearing it for the first time but don't be afraid because this is very easy to understand
9

10
00:00:38,820 --> 00:00:43,620
a print processor directive is simply an instruction to the compiler.
10

11
00:00:43,700 --> 00:00:50,130
We're going to be instructing the compiler to include a library of code before it goes ahead and compiles
11

12
00:00:50,130 --> 00:00:51,420
the rest of our code.
12

13
00:00:51,450 --> 00:00:53,410
So it's pretty straightforward.
13

14
00:00:53,460 --> 00:00:59,040
Now we're going to be inserting our pre processor directive at the start of our file so it's processed
14

15
00:00:59,190 --> 00:01:06,800
before any of the other code in our file is compiled the hash # symbol is used to represent a preprocessor
15

16
00:01:06,810 --> 00:01:08,720
directive in our code.
16

17
00:01:08,730 --> 00:01:09,840
So what's the line of code.
17

18
00:01:09,840 --> 00:01:11,860
We're going to be writing at the start of our file.
18

19
00:01:12,150 --> 00:01:13,570
Well let's just take a look.
19

20
00:01:13,590 --> 00:01:15,990
It's #include<iostream
20

21
00:01:16,350 --> 00:01:18,720
So it's just one short line of code.
21

22
00:01:18,720 --> 00:01:25,410
Now let's break this down #include is the pre-processing directive here so we can see that the directive
22

23
00:01:25,500 --> 00:01:30,030
is to include something that's within these angled brackets.
23

24
00:01:30,030 --> 00:01:34,530
We're instructing the compiler to include a library called iostream.
24

25
00:01:34,530 --> 00:01:37,190
This is also known as a Header file.
25

26
00:01:37,320 --> 00:01:43,560
So a Header file is a file that contains code and we'll be using Header files a lot when we switch over
26

27
00:01:43,560 --> 00:01:45,870
to Unreal engine in this course.
27

28
00:01:45,870 --> 00:01:51,750
Now notice we don't have a semicolon ; on the end of this line of code pre-process directives do not need
28

29
00:01:51,750 --> 00:01:54,000
to end with a semicolon ;
29

30
00:01:54,060 --> 00:02:00,600
So to summarize here we are instructing the compiler to copy the contents of the iostream Header file
30

31
00:02:00,930 --> 00:02:06,230
into our code before it goes ahead and compiles the rest of our code.
31

32
00:02:06,240 --> 00:02:13,560
And right now I want you to pause here and add hash #include<iostream to the first line of your file
32

33
00:02:13,950 --> 00:02:17,430
as this is going to help us with our next line of code.
33

34
00:02:17,460 --> 00:02:22,530
So pause here to do this before we move on.
34

35
00:02:22,560 --> 00:02:24,630
So here's my file with hash #.
35

36
00:02:24,630 --> 00:02:27,960
#Include<iostream added onto the first line.
36

37
00:02:27,960 --> 00:02:34,410
Now notice I've inserted a blank line before my main function and this is just to improve the readability
37

38
00:02:34,410 --> 00:02:35,280
of my code.
38

39
00:02:35,280 --> 00:02:40,590
I'm not just making this up either you traditionally see other code written out the same way as this
39

40
00:02:40,770 --> 00:02:42,150
as it's very readable.
40

41
00:02:42,150 --> 00:02:44,940
I'm just following a coding standard.
41

42
00:02:44,940 --> 00:02:50,280
Now we've included the iostream Header file and this is going to allow us to write what's known as an
42

43
00:02:50,340 --> 00:02:55,350
output stream to the console which is our terminal here in VS code.
43

44
00:02:55,410 --> 00:03:01,890
So I will go now is just simply print out hello world to this terminal when our program executes.
44

45
00:03:01,890 --> 00:03:06,410
We'll break down what's going on in the moment but for now I want you to follow along with me here.
45

46
00:03:06,420 --> 00:03:10,590
Let's add a new line into the main function body on this line.
46

47
00:03:10,620 --> 00:03:17,690
We're going to write std: :cout <<
47

48
00:03:17,790 --> 00:03:19,130
and another space
48

49
00:03:19,170 --> 00:03:24,810
then we're going to add some quotation std: :cout << " " marks here and our message that will be printed out to the terminal
49

50
00:03:24,990 --> 00:03:27,240
is going to be within these quotation marks.
50

51
00:03:27,240 --> 00:03:31,720
We're going to print "Hello, World!"
51

52
00:03:31,730 --> 00:03:36,910
We're going to finish this line off with a semicolon ; before we break this down.
52

53
00:03:36,920 --> 00:03:46,150
Let's save our file and let's compile our code and let's run the program Hello everybody.
53

54
00:03:46,160 --> 00:03:47,420
It's Mike from the future.
54

55
00:03:47,420 --> 00:03:52,220
I know some of you especially new to coding are having a few issues here because it goes through quite
55

56
00:03:52,220 --> 00:03:54,400
quickly but don't worry you're not alone.
56

57
00:03:54,410 --> 00:03:57,860
And hopefully this will help you on your journey.
57

58
00:03:57,860 --> 00:04:02,360
And I will be appearing majorly from the next section onwards.
58

59
00:04:02,360 --> 00:04:07,040
So the compiling stage here is when we go cl triplex.cpp
59

60
00:04:07,040 --> 00:04:10,610
Then afterwards we need to run what we've just compiled.
60

61
00:04:10,610 --> 00:04:15,830
Now it's easy to miss this here in front of us where we've got triplex and we go ahead and run the
61

62
00:04:15,830 --> 00:04:22,580
file by typing in triplex.exe it comes up really quickly here we go.
62

63
00:04:22,580 --> 00:04:23,030
Awesome.
63

64
00:04:23,030 --> 00:04:25,340
We've now printed hello world to the terminal.
64

65
00:04:25,700 --> 00:04:31,100
So in order for our program to print Hello World to the terminal we've had to include the iostream
65

66
00:04:31,100 --> 00:04:35,230
header file and also type out the strange looking code here.
66

67
00:04:35,240 --> 00:04:36,850
So let's break this down.
67

68
00:04:37,220 --> 00:04:41,930
So we start this line off by typing std which is short for standard.
68

69
00:04:41,930 --> 00:04:48,980
Now this is a namespace a namespace is simply used to prevent name conflicts in our code just like we
69

70
00:04:48,980 --> 00:04:56,030
can tell the difference between two people by their surnames and namespace allows us to avoid the conflict
70

71
00:04:56,300 --> 00:04:59,000
of code being named the same way.
71

72
00:04:59,120 --> 00:05:05,540
It allows us to tell the difference and we access the namespace by using these two colons :: here.
72

73
00:05:05,540 --> 00:05:09,770
These are known as a scope operator when we insert the scope.
73

74
00:05:09,770 --> 00:05:16,250
Operator next to the std namespace we are telling the compiler to check for code inside the namespace
74

75
00:05:16,280 --> 00:05:19,340
and we're calling Cout from the namespace.
75

76
00:05:19,340 --> 00:05:22,130
This allows us to write a basic output stream to the console.
76

77
00:05:22,130 --> 00:05:25,450
This is what allows us to write to the terminal in VS code.
77

78
00:05:25,580 --> 00:05:31,160
So following from this we insert these two angled brackets << that allows us to output whatever is to the
78

79
00:05:31,160 --> 00:05:36,280
right of them to the terminal where outputting Some text here within these quotation marks.
79

80
00:05:36,290 --> 00:05:41,040
This is known as a string a string is a sequence of characters.
80

81
00:05:41,120 --> 00:05:47,150
So "Hello, World!" is our string here and we finish off this line with a semicolon ;
81

82
00:05:47,150 --> 00:05:51,180
This whole line is known as an expression statement.
82

83
00:05:51,360 --> 00:05:52,870
ok so for our line of code.
83

84
00:05:52,880 --> 00:05:56,450
There's quite a lot of concepts to grasp here but don't dwell on this too much.
84

85
00:05:56,450 --> 00:06:02,330
Just know that we can use this line of code to output some text to the terminal and we can use all of
85

86
00:06:02,330 --> 00:06:05,830
this to create some welcome messages to TripleX
86

87
00:06:05,930 --> 00:06:08,190
So let's think in the terms of our game now.
87

88
00:06:08,390 --> 00:06:14,420
In my main function I'm going to print out you're a secret a agent breaking into a secure server room
88

89
00:06:14,630 --> 00:06:20,840
on one line but then on a new line beneath this I'm going to print out something like you need to enter
89

90
00:06:20,930 --> 00:06:23,840
the correct codes to continue.
90

91
00:06:23,870 --> 00:06:28,880
Now I want you to do something similar here but apply your own story from the theme of your own game.
91

92
00:06:28,970 --> 00:06:31,760
If you're more comfortable you can always follow along with me.
92

93
00:06:31,760 --> 00:06:38,880
But then after you do this save your file compile your code and run your program to see what happens.
93

94
00:06:38,900 --> 00:06:42,320
So pause here to try this now and then we could take a look at this together
94

95
00:06:45,540 --> 00:06:45,840
okay.
95

96
00:06:45,840 --> 00:06:51,630
So I have my two statements in my main function to output the messages for the start of my game I've
96

97
00:06:51,630 --> 00:06:58,940
saved my work I've compiled my code and now I'm going to run triplex now when we do this.
97

98
00:06:58,950 --> 00:07:03,700
Notice that our messages are all printed out onto one single line.
98

99
00:07:04,530 --> 00:07:10,920
So this is because the compiler is feeding out our strings as one whole line into the terminal.
99

100
00:07:10,920 --> 00:07:16,980
We need to instruct the compiler to insert a new line somehow between our strings.
100

101
00:07:17,040 --> 00:07:21,000
Now there's different ways that we can do this that we will see for out the section but I'm going to
101

102
00:07:21,000 --> 00:07:23,280
show you a way that relates back to our namespace.
102

103
00:07:23,280 --> 00:07:26,280
I'm going to add in a new line underneath my first message.
103

104
00:07:26,280 --> 00:07:34,050
We're going to call cout again but the std namespace also contains a function we can call that instructs
104

105
00:07:34,050 --> 00:07:38,550
the compiler to end the line so we can start feeding in a new one.
105

106
00:07:38,550 --> 00:07:43,590
So let's call the std namespace again and access it with the scope operator.
106

107
00:07:43,590 --> 00:07:50,100
And now we can enter endl short for end line we can finish the line off of a semicolon ;
107

108
00:07:50,100 --> 00:07:57,720
And now if we save our work and compile our code again and run the program we can see now that our strings
108

109
00:07:57,780 --> 00:08:00,750
are printed onto separate lines into the terminal.
109

110
00:08:01,200 --> 00:08:02,370
Okay awesome.
110

111
00:08:02,370 --> 00:08:04,780
Now we took a look at whitespace in the previous lesson.
111

112
00:08:04,830 --> 00:08:09,620
I mentioned that there's an exception where the compiler does not ignore whitespace.
112

113
00:08:09,780 --> 00:08:13,620
So before moving onto the next lesson I just want to make you aware of this.
113

114
00:08:13,680 --> 00:08:19,280
We can see that our strings that are being printed out on the terminal have our spaces included in them.
114

115
00:08:19,800 --> 00:08:26,940
So looking at our string that we print out we can see that the compiler is not ignoring the white space
115

116
00:08:26,940 --> 00:08:27,410
between it
116

117
00:08:27,420 --> 00:08:32,130
Okay I just wanted to make you aware of that case that wraps up this lesson.
117

118
00:08:32,130 --> 00:08:37,010
We now know how we can print out strings to the terminal and how we can also feed new lines.
118

119
00:08:37,020 --> 00:08:39,200
Now when you're ready I'll see you in the next lesson.
