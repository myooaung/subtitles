WEBVTT
1
00:00:04.430 --> 00:00:05.720
Hello and welcome this lecture.

2
00:00:05.750 --> 00:00:12.170
We are going to be displaying a loose screen and we're gonna be doing it entirely from within C++ to

3
00:00:12.260 --> 00:00:13.700
spawn that widget.

4
00:00:14.000 --> 00:00:15.310
Let's dive in and see how it's done.

5
00:00:16.160 --> 00:00:21.680
So we'd like to display some UI when our player dies to tell them what's going on that they've lost

6
00:00:21.680 --> 00:00:23.280
and that the level is about to reset.

7
00:00:23.300 --> 00:00:25.250
So it doesn't come as a surprise to them.

8
00:00:25.340 --> 00:00:27.770
So we need to create some UI.

9
00:00:27.800 --> 00:00:29.870
Are you a widget, a UMG?

10
00:00:29.990 --> 00:00:31.820
Unreal motion graphics widget.

11
00:00:32.540 --> 00:00:33.290
So let's do that.

12
00:00:33.290 --> 00:00:35.840
First of all, by creating a folder to store our UI.

13
00:00:35.840 --> 00:00:37.970
And I already know we're gonna have two items of UI.

14
00:00:38.000 --> 00:00:42.560
So I think I'll have a UI folder here and then let's go in here and.

15
00:00:42.560 --> 00:00:42.830
Right.

16
00:00:42.830 --> 00:00:44.210
Click and then go.

17
00:00:44.390 --> 00:00:46.160
Should have done this before.

18
00:00:46.240 --> 00:00:47.590
Bartletts are walking through.

19
00:00:48.100 --> 00:00:52.570
We're gonna go to the user interface section, then select the widgets blueprints and the prefect's

20
00:00:52.570 --> 00:00:56.930
going to uses WPP underscore and then it's gonna be loose screen.

21
00:00:57.620 --> 00:01:02.930
Now you can do some base classes for this sort of stuff in C++, but we're not gonna cover this in this

22
00:01:02.930 --> 00:01:03.380
section.

23
00:01:03.620 --> 00:01:05.600
It's generally not necessary to do that.

24
00:01:05.630 --> 00:01:07.490
And it's much easier to do this stuff in blueprint.

25
00:01:07.520 --> 00:01:13.130
There's not much advantage to doing it in C++ unless you knew I was going to get super complicated and

26
00:01:13.130 --> 00:01:15.650
you wanted to put some of that UI logic into C++.

27
00:01:16.070 --> 00:01:17.900
In our case, this isn't the case.

28
00:01:18.170 --> 00:01:20.570
So we can just go ahead and use the blueprints.

29
00:01:20.600 --> 00:01:22.520
After all, UI is a visual thing.

30
00:01:22.530 --> 00:01:28.790
It makes sense to use a visual tool to put it together now because you already know about how to create

31
00:01:28.880 --> 00:01:29.540
widgets.

32
00:01:29.570 --> 00:01:32.870
Then I'm gonna give this as a challenge to you to set up a loose screen.

33
00:01:32.870 --> 00:01:37.010
We want to add some text explaining that the play has lost and that we're back to restart.

34
00:01:37.360 --> 00:01:42.030
Want to position that text probably centrally, make it visible, make sure it's visible in the game.

35
00:01:42.110 --> 00:01:45.440
And yet, like I said, explain that there will be a restart coming up.

36
00:01:45.980 --> 00:01:50.530
And then after you've attempted this challenge, we're gonna look at how we can spawn this from C++.

37
00:01:50.540 --> 00:01:52.850
You've seen maybe how to do this in blueprint before.

38
00:01:53.180 --> 00:01:55.720
We're gonna see how we can do it from within C++.

39
00:01:55.750 --> 00:01:56.350
I pause video.

40
00:01:56.400 --> 00:01:56.810
Have a go.

41
00:01:57.290 --> 00:01:57.590
Okay.

42
00:01:57.610 --> 00:01:58.250
Welcome back.

43
00:01:58.820 --> 00:02:01.310
So I'm gonna go and great.

44
00:02:01.310 --> 00:02:03.110
First of all, a bit of text.

45
00:02:03.470 --> 00:02:09.200
So I want to look for in the Pallot to the left, gonna look for the text item and bring that in.

46
00:02:10.170 --> 00:02:16.680
I'm going to change it to you, lose pretty straightforward and unimaginative dialogue writing here,

47
00:02:17.070 --> 00:02:22.290
never gonna change the color and opacity and the appearance to read to make it super clear that they've

48
00:02:22.290 --> 00:02:22.710
lost.

49
00:02:23.130 --> 00:02:27.960
And just rub it in a little bit more than I'm gonna expand out font and change the size to be bigger.

50
00:02:28.260 --> 00:02:35.370
And then I'm going to expand the box around our text and I'm gonna center our text.

51
00:02:35.400 --> 00:02:41.450
So going down justification I a central line text and if I expand out, see if there's somewhere else

52
00:02:41.450 --> 00:02:44.040
where I can do central lined within.

53
00:02:44.170 --> 00:02:44.880
No there isn't.

54
00:02:44.910 --> 00:02:53.490
So I'm just gonna go and make the box size roughly appropriate and then I'm gonna go up to my alignment's

55
00:02:53.490 --> 00:02:59.700
and my ankles and stuff like that, and I'm going to select the dropdown for anchors and select the

56
00:02:59.730 --> 00:03:03.150
preset for anchoring to the middle, because that's what I want to do.

57
00:03:03.990 --> 00:03:10.980
I want to set my alignment to be point five and point five, which basically means that we are aligning

58
00:03:11.370 --> 00:03:14.330
to the center of the object rather than the top left corner.

59
00:03:14.810 --> 00:03:16.710
Was going to do the anchor again.

60
00:03:16.740 --> 00:03:16.920
Okay.

61
00:03:16.950 --> 00:03:18.870
That doesn't that wasn't very helpful.

62
00:03:19.470 --> 00:03:21.240
And then the position X y.

63
00:03:21.270 --> 00:03:25.470
I think if I just set position next white to zero and zero because I've set my anchors up like that,

64
00:03:25.830 --> 00:03:31.200
then my loose position is gonna be somewhere in the middle and I'm just gonna move it up ever so slightly.

65
00:03:31.350 --> 00:03:38.120
Keep my position X zero position Y at minus 50 because I want to add in some secondary text saying and

66
00:03:38.120 --> 00:03:43.110
in fact it might be easier just to duplicate the other text here because it's got all the setup that

67
00:03:43.110 --> 00:03:43.890
I already need.

68
00:03:43.980 --> 00:03:47.820
I just want to make it a little bit smaller, position zero again.

69
00:03:48.450 --> 00:03:55.260
And I'm gonna say level will restart in five seconds and I'm going to make that font size much smaller.

70
00:03:55.260 --> 00:03:56.810
So that's less in your face.

71
00:03:57.090 --> 00:03:57.900
Something like this.

72
00:03:58.050 --> 00:04:04.110
And then just move it down a little bit, a little notch and keep resetting that position X to zero

73
00:04:04.380 --> 00:04:04.860
hundred percent.

74
00:04:04.950 --> 00:04:05.970
Happy with the positioning.

75
00:04:05.980 --> 00:04:08.550
I'm just gonna move it up a little notch more.

76
00:04:08.550 --> 00:04:12.300
If I hold shift down, then I can lock it to the axis I'm moving with.

77
00:04:12.630 --> 00:04:15.630
So it is more or less central like so k so I'm happy with that.

78
00:04:15.660 --> 00:04:19.860
Now we need to go ahead and try and spawn the thing how we're gonna do that.

79
00:04:19.860 --> 00:04:25.590
Well, first of all, we're going to need to know what widget class we're supposed to be spawning and

80
00:04:25.590 --> 00:04:27.440
we need to know where we're going to be doing it from now.

81
00:04:27.660 --> 00:04:31.650
As I've already said, I think a good place to do this is from the player controller itself.

82
00:04:32.460 --> 00:04:37.680
And we're going to need to know in the player controller what class, what widget class are we trying

83
00:04:37.680 --> 00:04:38.070
to spawn.

84
00:04:38.130 --> 00:04:42.540
I know it's a blueprint class, but we need it still to be a class that we're trying to spawn.

85
00:04:43.170 --> 00:04:46.860
So the way we're gonna do this is to create a new property up here.

86
00:04:47.080 --> 00:04:48.870
There's gonna be edits anywhere.

87
00:04:48.990 --> 00:04:56.010
And we are gonna want this to be a T subclass of because this is always a good way of making sure we

88
00:04:56.010 --> 00:04:57.170
get a EUC UCLASS.

89
00:04:57.270 --> 00:05:04.380
Basically, you could use the type UCLASS if you wanted to, but that doesn't restrict what kind of

90
00:05:04.380 --> 00:05:05.350
class we can use.

91
00:05:05.370 --> 00:05:09.690
And here we want to restrict it to only being you use a widgets.

92
00:05:09.900 --> 00:05:17.650
If you go over to your blueprint, you can see if we go to somewhere in here, you can find a parent

93
00:05:17.670 --> 00:05:22.770
class is use a widget, which we know when you put the prefix on, it becomes a you use a widget.

94
00:05:23.250 --> 00:05:26.490
So this is a T subclass of.

95
00:05:27.710 --> 00:05:32.480
And then we use our angle brackets is gonna be a. you use a widget.

96
00:05:33.260 --> 00:05:37.190
And I'm actually going to forward declare that one here rather than do any includes.

97
00:05:37.250 --> 00:05:38.720
So class you use a widget.

98
00:05:39.530 --> 00:05:43.660
And then we're gonna call this the Leus screen class.

99
00:05:44.240 --> 00:05:46.400
Just keep it really obvious what's going on there.

100
00:05:47.240 --> 00:05:54.410
Now, I'm gonna go ahead and compile at this stage while we do the next stuff, because compiling when

101
00:05:54.410 --> 00:05:56.540
changing header file takes just that little bit longer.

102
00:05:57.560 --> 00:06:01.620
Now, over in the C++, what we're going to want to do is actually spawn that widget up.

103
00:06:02.060 --> 00:06:04.610
So we gonna want to do it maybe even before the time.

104
00:06:04.610 --> 00:06:07.590
It doesn't really matter because the timer doesn't wait.

105
00:06:07.640 --> 00:06:10.340
It just sets the time and then go straight onto the next line of code.

106
00:06:10.370 --> 00:06:13.670
So we wouldn't be waiting five seconds if we did this at straight.

107
00:06:13.740 --> 00:06:17.000
If we've spawned the UI straight afterwards, didn't really matter what order we do this in.

108
00:06:17.690 --> 00:06:23.600
So we're going to want to do is use a function called create widget, which isn't currently available.

109
00:06:24.050 --> 00:06:26.150
So we need to hash include something first.

110
00:06:26.450 --> 00:06:31.090
And we're going to include is a blueprint for would slash user widget.

111
00:06:31.930 --> 00:06:37.340
And that is the class that we need to access this create widget function.

112
00:06:38.270 --> 00:06:40.860
And we're gonna basically say create widgets.

113
00:06:40.970 --> 00:06:45.560
It needs to be well, actually, let's see what we need to provide it.

114
00:06:45.620 --> 00:06:48.230
I'm going to f twelve to its implementation.

115
00:06:48.260 --> 00:06:50.800
You can see what's a bit complicated to see.

116
00:06:51.200 --> 00:06:54.540
But we do have a template parameter up here, which is the.

117
00:06:54.680 --> 00:06:56.590
Basically, by default, the you use a widget.

118
00:06:56.600 --> 00:06:58.190
So we probably don't have to provide that.

119
00:06:59.090 --> 00:07:04.520
And then there is the owning object and the class that we need to create.

120
00:07:05.150 --> 00:07:08.300
And then a widget name, which we don't necessarily need to provide.

121
00:07:08.330 --> 00:07:10.940
And then it returns as the point to the widget.

122
00:07:11.540 --> 00:07:16.480
So what I'm actually going to do is in here, we're going to give it an owner object.

123
00:07:16.610 --> 00:07:18.800
Now, only certain things can own the widget.

124
00:07:18.890 --> 00:07:21.490
One of those things is actually the player controller.

125
00:07:21.530 --> 00:07:23.510
So we can just pass in this.

126
00:07:23.720 --> 00:07:28.040
And the next thing is we want to pass in the T subclass of you use a widget.

127
00:07:28.070 --> 00:07:33.830
Well, fortunately, we have already configured that up in the header file so we can just go ahead and

128
00:07:33.830 --> 00:07:34.670
pass that in.

129
00:07:35.170 --> 00:07:37.970
No, stop my indentation from trying to fix itself up.

130
00:07:38.360 --> 00:07:40.220
While I haven't put a semicolon on the end of the line.

131
00:07:41.030 --> 00:07:42.740
And then let's go and have a look at what else.

132
00:07:42.770 --> 00:07:43.340
Well, that's it.

133
00:07:43.370 --> 00:07:45.830
It just returns the widget at this point.

134
00:07:45.860 --> 00:07:51.230
So what we can do is have a pointer to u use a widget star.

135
00:07:51.710 --> 00:07:54.220
And this is going to be our luse screen.

136
00:07:54.260 --> 00:07:58.070
So we had the loose screen class after we've created the widget.

137
00:07:58.130 --> 00:08:00.140
It becomes an actual loose screen.

138
00:08:00.410 --> 00:08:03.170
Next thing we need to do is make this UI visible.

139
00:08:03.590 --> 00:08:07.310
We do that by adding it to the viewport in unreal parlance.

140
00:08:07.340 --> 00:08:12.830
But first, because we add to the viewport by calling a function on the loose screen, we need to make

141
00:08:12.830 --> 00:08:14.390
sure that it is not null pointer.

142
00:08:14.390 --> 00:08:19.660
So if lose screen is not equal to no pointer, why could it be no points?

143
00:08:19.700 --> 00:08:21.200
By the way, little challenge to you.

144
00:08:21.530 --> 00:08:24.320
See if you can figure out why we might end up with a null pointer here.

145
00:08:25.100 --> 00:08:28.490
Well, one reason is maybe we forgot to set the loose screen class.

146
00:08:28.520 --> 00:08:33.120
And if that is the case and we don't have it loose, valid, loose screen class set, then create widget

147
00:08:33.200 --> 00:08:35.180
is just going to return null points for us.

148
00:08:35.210 --> 00:08:36.680
And we don't want that to happen.

149
00:08:37.270 --> 00:08:41.600
And we don't want to certainly be calling a functional null pointer.

150
00:08:41.750 --> 00:08:48.350
So when they're loose Green Arrow and then what we want here is a function called add to viewport,

151
00:08:49.550 --> 00:08:51.200
which is simply gonna do just that.

152
00:08:51.380 --> 00:08:54.860
Go and add it to the screen so we can see that live screen.

153
00:08:55.610 --> 00:09:02.090
Now, I'm gonna go ahead and compile that too, and go over into one real and open up our blueprint

154
00:09:02.150 --> 00:09:04.570
for the player controller.

155
00:09:04.730 --> 00:09:09.670
So shoot a play controller here and we should be able to see somewhere in here.

156
00:09:10.850 --> 00:09:12.590
A variable that hasn't yet popped up.

157
00:09:13.130 --> 00:09:14.420
Maybe I had some build errors.

158
00:09:14.450 --> 00:09:15.920
Let's go and have a look at the message log.

159
00:09:16.460 --> 00:09:23.480
Yes, we can see a few build errors in here, namely these weird ones about external symbols missing.

160
00:09:23.480 --> 00:09:27.470
If we have a little look is thanks to the that you use a widget not being available.

161
00:09:27.890 --> 00:09:34.910
Now, if you cast your mind back to a few lectures previously, we know that these kinds of errors tend

162
00:09:34.910 --> 00:09:38.120
to be when we are missing a module dependency.

163
00:09:38.150 --> 00:09:42.350
So if we go and open up our simple shooter to build dot C.

164
00:09:42.350 --> 00:09:47.870
S, and I'm just going to close down the terminal for a bit more added space, then you can see what

165
00:09:47.870 --> 00:09:51.470
we need to do is add a new public dependency here.

166
00:09:52.100 --> 00:09:57.490
So to the end of this, we're going to add a public dependency for UMG.

167
00:09:57.680 --> 00:10:02.000
So a new comma and then in quotes going to put UMG.

168
00:10:02.630 --> 00:10:10.670
And that basically allows us to make use of the includes that we had here, the blueprint forward slash

169
00:10:10.790 --> 00:10:11.510
use a widget.

170
00:10:12.140 --> 00:10:15.980
All of that stuff is in a separate module to the standard stuff that's included.

171
00:10:16.040 --> 00:10:19.840
So we do need to go and tell unveiled that we want to use that module in our C++.

172
00:10:20.030 --> 00:10:22.190
Let's go ahead and build and see if it works now.

173
00:10:22.310 --> 00:10:22.530
Okay.

174
00:10:22.600 --> 00:10:25.900
That looks successful if we go over in to the editor.

175
00:10:26.590 --> 00:10:31.120
And go back to shoot to play controller, some reason, I don't think it had properly reloaded, so

176
00:10:31.120 --> 00:10:33.320
I've had to hit compile here in the editor.

177
00:10:33.880 --> 00:10:35.700
We go back now to the shoot to play a controller.

178
00:10:35.700 --> 00:10:37.770
At last you can see that loose screen class.

179
00:10:38.320 --> 00:10:44.520
We can click the drop down there and go and select add WPP, underscore loose screen there, compile,

180
00:10:44.530 --> 00:10:47.290
save and let's go and get ourselves killed.

181
00:10:47.500 --> 00:10:49.000
Get shot at a couple of times.

182
00:10:49.360 --> 00:10:50.510
Bang, bang.

183
00:10:50.920 --> 00:10:51.430
And they go.

184
00:10:51.610 --> 00:10:53.860
Our low screen has popped up telling us what's happening.

185
00:10:54.280 --> 00:10:56.380
Levels bazza restart in five seconds.

186
00:10:56.860 --> 00:10:58.360
And indeed it does.

187
00:10:58.750 --> 00:11:07.270
So now you know not only how you can create UMG graphics, but also how you can spawn these from C++

188
00:11:07.360 --> 00:11:09.250
rather than from Blueprint.

189
00:11:09.490 --> 00:11:14.260
Next lecture, we're going to have a less pessimistic outlook on things and try and see if we can also

190
00:11:14.260 --> 00:11:17.740
create some win conditions for this game.

191
00:11:18.100 --> 00:11:18.620
I'll see you then.
