1
00:00:04,240 --> 00:00:09,990
Okay, so in this lecture, we're going to tackle the process of bringing our tank class to life by

2
00:00:09,990 --> 00:00:13,890
implementing the movement, I'm rotation input bindings into the code.

3
00:00:14,100 --> 00:00:18,510
By the end of the lecture, we should have some of the very basic kind of movements implemented, allowing

4
00:00:18,510 --> 00:00:21,030
us to move around and rotate like this.

5
00:00:21,390 --> 00:00:26,490
Just as a quick reminder that the project comes with the input bindings prefilled and we'll be focusing

6
00:00:26,490 --> 00:00:28,890
on the move forward and turn bindings.

7
00:00:28,920 --> 00:00:35,010
So keep these names and input mappings in mind as these will be referred to encode a few times before

8
00:00:35,010 --> 00:00:35,880
getting into the code.

9
00:00:35,910 --> 00:00:41,880
I just wanted to take a moment as well to consider the desired outcomes and the steps needed to get

10
00:00:41,880 --> 00:00:42,120
there.

11
00:00:42,360 --> 00:00:47,970
So a couple of things that I know is because we're doing the movement in our PWN class rather than the

12
00:00:48,000 --> 00:00:51,180
character class, which is something you'll be looking at in future sections.

13
00:00:51,380 --> 00:00:56,340
The character class has functionalities which will allow you to kind of automatically receive input

14
00:00:56,370 --> 00:01:01,330
and the engine will do a lot of that logic and calculation for you in the POUM class.

15
00:01:01,380 --> 00:01:02,160
It's a little bit different.

16
00:01:02,160 --> 00:01:03,930
We need to do all of this ourselves.

17
00:01:04,140 --> 00:01:08,750
And we're just trying to get a better understanding of adding location offsets and things like that

18
00:01:08,760 --> 00:01:11,880
by using this POUM class because it's a simplified class.

19
00:01:12,180 --> 00:01:17,760
So for that reason, we're gonna be using the add actor local offset for the movement and add actor

20
00:01:18,060 --> 00:01:21,390
local rotation for the rotation of the tank.

21
00:01:21,630 --> 00:01:22,770
So no documentation here.

22
00:01:22,800 --> 00:01:27,780
We can see that there are going to be a number of variables that we can pass in to the allocated local

23
00:01:27,780 --> 00:01:28,530
offset function.

24
00:01:28,900 --> 00:01:34,020
And I think we should only be needing to focus on the F vector, the Delta location.

25
00:01:34,020 --> 00:01:39,840
So the direction essentially that we want to be moving and the sweep boolean, which I'll discuss a

26
00:01:39,840 --> 00:01:41,850
little bit more when we're going through the implementation.

27
00:01:42,030 --> 00:01:45,510
Then for the add actor local rotation, this is actually very similar.

28
00:01:45,870 --> 00:01:51,480
And this is going to allow us to provide rotation and again, a sweeping boolean check that is actually

29
00:01:51,480 --> 00:01:55,770
a second override option that we can use for this and we'll be using this in our code.

30
00:01:55,920 --> 00:02:01,710
And the only difference here is that this will be using a quaternion rather than the F rotated rotation.

31
00:02:01,860 --> 00:02:04,770
We're gonna be using an F quat, also known as a quaternion.

32
00:02:04,890 --> 00:02:07,710
Now, we're not gonna be using the full functionality of quaternions.

33
00:02:07,770 --> 00:02:10,160
You can see her if you wanted to go to this documentation.

34
00:02:10,170 --> 00:02:15,240
It has a lot of kind of pre-built maths functionality provided for the engine.

35
00:02:15,360 --> 00:02:21,600
But in short, to quaternions are just a way to represent 3D orientation whilst avoiding bugs and strange

36
00:02:21,600 --> 00:02:25,140
results that are sometimes encountered when using oilor rotations.

37
00:02:25,290 --> 00:02:28,650
So one of the most common issues is something called a gimbel lock.

38
00:02:28,710 --> 00:02:34,190
And this occurs when two of the three standard rotation axes are parallel in alignment.

39
00:02:34,380 --> 00:02:37,980
And this will do things like locking the irritation of a desired direction.

40
00:02:38,190 --> 00:02:39,720
So quaternions are fairly standard.

41
00:02:39,720 --> 00:02:40,950
No system in maths.

42
00:02:41,250 --> 00:02:44,840
They're regularly used in most, if not all of the modern game engines now.

43
00:02:45,020 --> 00:02:48,810
So they're definitely something that you'll be getting familiar with over time at working with different

44
00:02:48,810 --> 00:02:49,260
engines.

45
00:02:49,350 --> 00:02:53,940
And like I said, they do provide a lot of additional functionality, but we're just going to be looking

46
00:02:53,940 --> 00:02:58,620
at the kind of very surface level stuff at this time, just as a small side challenge.

47
00:02:58,860 --> 00:03:03,320
What I'd recommend doing is just take a moment to research a little in two things like Jinbo Locking.

48
00:03:03,530 --> 00:03:07,980
There's gonna be some pretty funny examples, which I probably can't show her due to copyright.

49
00:03:08,010 --> 00:03:12,060
But especially if you look for Jimbo locking games, you'll see some really interesting things taking

50
00:03:12,060 --> 00:03:17,430
effects such as sports games, where players next will suddenly start turning around in on themselves

51
00:03:17,550 --> 00:03:19,880
like some kind of demonic animation going on.

52
00:03:20,780 --> 00:03:25,490
Back on topic, though, quaternions are definitely a little bit overkill for our tank rotation, because,

53
00:03:25,490 --> 00:03:31,340
like I said, they usually used to stop Gimbel locking, which is something that takes effect when multiple

54
00:03:31,640 --> 00:03:33,380
directions are being rotated around.

55
00:03:33,740 --> 00:03:39,530
And our tank is actually only using rotation around one axis, which is going to be the Z or up in the

56
00:03:39,530 --> 00:03:41,240
world, for our example.

57
00:03:41,330 --> 00:03:45,710
But I did want to show its use because this will commonly pop up in online examples.

58
00:03:46,070 --> 00:03:52,160
If you look at how to add rotation to something, we will also be seeing the use of the standard rotator

59
00:03:52,670 --> 00:03:57,980
a little bit later on in the section when we're adding rotation to the turrets that very much interchangeable.

60
00:03:58,040 --> 00:04:01,970
Again, especially if you doing something as simplistic as this where we're only going to be utilizing

61
00:04:02,090 --> 00:04:03,680
one of the axes to rotate around.

62
00:04:03,770 --> 00:04:08,330
But this is just so you can see how to implement both of them into your code files.

63
00:04:08,510 --> 00:04:12,160
So that was just a quick aside, the back into the tank Hadifa.

64
00:04:12,320 --> 00:04:16,550
We're going to need two method variables to start with that will be using between a couple of different

65
00:04:16,550 --> 00:04:19,490
functions, which is why we'll be declaring these in our head a file.

66
00:04:19,850 --> 00:04:24,710
The first of these will be representing the effecta or the direction of movement.

67
00:04:24,890 --> 00:04:27,620
So in the documentation, this was for our Delta location.

68
00:04:27,980 --> 00:04:30,250
For this, though, I think we'll create the new factor.

69
00:04:30,390 --> 00:04:34,400
And when name hours move direction, as that name just makes a little bit more sense, when we're looking

70
00:04:34,400 --> 00:04:39,320
back over this next, then we know that we're also going to be doing our rotation and this takes in

71
00:04:39,380 --> 00:04:41,750
the F Quaternion or the Aquitania.

72
00:04:42,110 --> 00:04:46,490
And again, this was previously named in the documentation down rotation, but we'll just set this to

73
00:04:46,490 --> 00:04:48,080
be called rotation direction.

74
00:04:48,290 --> 00:04:50,360
Again, a little bit more readable when we come back.

75
00:04:50,780 --> 00:04:56,660
Then for our functions, we're going to be separating the illogic out in two four different functions.

76
00:04:56,720 --> 00:04:58,640
Two for the rotation, two for the movement.

77
00:04:58,940 --> 00:05:04,610
And this is partly for kind of code readability so that we can really specify what each function is

78
00:05:04,610 --> 00:05:04,970
doing.

79
00:05:05,120 --> 00:05:10,280
But it's also going to allow us a little bit of extra freedom, how we update the movement, arm rotation

80
00:05:10,280 --> 00:05:13,640
logic in our code, specifically the order in which that code.

81
00:05:13,940 --> 00:05:16,340
And again, we'll see that in action in just a moment.

82
00:05:16,640 --> 00:05:21,680
First, we'll create a void function named calculate to move input, and that would take in a single

83
00:05:21,680 --> 00:05:23,540
flight variable named value.

84
00:05:23,900 --> 00:05:27,470
And this will be the function that will be bound to our movement input function.

85
00:05:27,860 --> 00:05:34,340
So the actual axes of the button being pressed by the player and the flight value is needed to handle

86
00:05:34,340 --> 00:05:36,140
the axis value that's being returned.

87
00:05:36,200 --> 00:05:38,400
So this will be based on the direction being pressed.

88
00:05:38,420 --> 00:05:41,690
So W would be forward and that would be a value of one.

89
00:05:41,990 --> 00:05:43,430
S will be minus one.

90
00:05:43,460 --> 00:05:44,420
And that'll be backwards.

91
00:05:44,770 --> 00:05:50,240
If using analog input then that could be a value between zero and one or zero and minus one, depending

92
00:05:50,240 --> 00:05:55,250
on how far the analog stick is being tilted then going to do something very similar for the rotation.

93
00:05:55,430 --> 00:05:59,420
So we'll create a new void function named to calculate rotate input.

94
00:05:59,630 --> 00:06:02,060
And this is also going to take a flight named Value.

95
00:06:02,090 --> 00:06:03,710
Again, just for the axis binding.

96
00:06:04,130 --> 00:06:09,260
Then we'll create two simple Voit functions, one named move and one named to rotate.

97
00:06:09,530 --> 00:06:14,390
So these will be the functions that will actually run on the event, tick and move in a direction and

98
00:06:14,390 --> 00:06:18,590
rotate in a direction based on the calculations made in the calculate functions.

99
00:06:18,770 --> 00:06:23,730
To implement these, I'm just going to use a shortcut from an extension named C++ Helper.

100
00:06:23,990 --> 00:06:28,730
And this will automatically create the functions in our code while to use the shortcuts.

101
00:06:28,850 --> 00:06:35,210
You can just select the end of the function you'd like implemented and press control shift and P together

102
00:06:35,540 --> 00:06:38,660
then from the dropdown or the options list if you haven't used this before.

103
00:06:38,960 --> 00:06:42,890
Find and select the create implementation from the options.

104
00:06:43,310 --> 00:06:46,910
So doing it this way has just created the single function back in the head.

105
00:06:46,910 --> 00:06:47,140
A file.

106
00:06:47,200 --> 00:06:49,160
The one that I had selected at the end of the line.

107
00:06:49,450 --> 00:06:54,110
And I just wanted to show you that we can also use the O to select because we've declared a few different

108
00:06:54,110 --> 00:06:58,100
functions at once with all of the lines selected using the select method.

109
00:06:58,190 --> 00:07:03,350
You can then press again control shift in P, and if you choose the implement option this time you will

110
00:07:03,350 --> 00:07:05,120
create multiple functions at once.

111
00:07:05,540 --> 00:07:11,060
So the next thing is that we want our calculate functions to be run constantly based on the input from

112
00:07:11,060 --> 00:07:11,570
the player.

113
00:07:11,840 --> 00:07:17,660
So we do this by using our input bindings inside of the set player input component function.

114
00:07:18,080 --> 00:07:20,210
To do this, we use the player input component.

115
00:07:21,410 --> 00:07:26,240
We call the BINDE access function and we bind this to move forward.

116
00:07:26,480 --> 00:07:31,950
This is the part I mentioned where Move Forward is the name of the binding that we've set in the project

117
00:07:31,950 --> 00:07:32,480
settings.

118
00:07:32,570 --> 00:07:38,060
So make sure that this is spelt exactly the same way with impasse in a world context reference of this

119
00:07:38,180 --> 00:07:39,980
and the function that we want to be called.

120
00:07:40,100 --> 00:07:44,330
Whenever this is pressed or processed because this is an access, this is another thing to remember

121
00:07:44,330 --> 00:07:45,870
that this is always being updated.

122
00:07:45,890 --> 00:07:47,450
Kind of like a tick of its own.

123
00:07:47,600 --> 00:07:50,030
So if nothing's being pressed, this is still being called.

124
00:07:50,150 --> 00:07:55,820
But a value of zero is being returned or passed in to the function whereby to to assign it to.

125
00:07:56,300 --> 00:08:00,920
So to actually bind it to that function, we'll get the address of our APEN tank.

126
00:08:01,160 --> 00:08:06,410
That's where the function we want to call is located and that function will pass in the calculate move

127
00:08:06,440 --> 00:08:06,890
input.

128
00:08:07,220 --> 00:08:11,630
So we're going to do pretty much exactly the same thing for our rotation, this time with the player

129
00:08:11,660 --> 00:08:12,630
input component.

130
00:08:12,980 --> 00:08:14,380
We can use the blind access.

131
00:08:14,630 --> 00:08:20,390
This one needs to be blind to the turn inputs again from the project's settings passing in a world context

132
00:08:20,420 --> 00:08:21,350
of this.

133
00:08:21,500 --> 00:08:24,170
And again, the address of the APEN tank.

134
00:08:24,200 --> 00:08:28,820
But this time it will be bound to the function, calculate, rotate input.

135
00:08:29,050 --> 00:08:32,030
And that line means that this will constantly be updating those functions.

136
00:08:32,420 --> 00:08:35,480
They are now fully bound to our movement inputs.

137
00:08:35,600 --> 00:08:40,130
So if we address the movement function, first of all, as this will be a nice kind of simple warm up

138
00:08:40,130 --> 00:08:40,550
task.

139
00:08:40,790 --> 00:08:45,500
So in the calculate move input function, we now have the flight value being provided, which will be

140
00:08:45,500 --> 00:08:46,520
our input direction.

141
00:08:46,910 --> 00:08:50,840
We can then use this to fill out our move direction, vector value.

142
00:08:51,080 --> 00:08:56,660
So for this we say that the move direction will be equal to a new F vector, creating a new blank vector

143
00:08:56,660 --> 00:08:57,150
force.

144
00:08:57,320 --> 00:09:02,960
And the first thing we want is our value, which in this case also means the forward or backwards direction

145
00:09:02,960 --> 00:09:04,250
being pressed by the player.

146
00:09:04,410 --> 00:09:09,730
We are going to use this and multiply this by something to control the movement speed in the pawn.

147
00:09:10,010 --> 00:09:14,540
So rather than creating a magic number here for testing, let's just go straight back into the head

148
00:09:14,540 --> 00:09:17,090
of file and we'll expose this variable for use later.

149
00:09:17,780 --> 00:09:22,880
So just above the functions, I'm going to create a new float named Move Speed and Prefill.

150
00:09:22,880 --> 00:09:24,380
This was something that feels reasonable.

151
00:09:24,890 --> 00:09:30,080
I'm also going to do the same for our turn speeds as we'll need a similar calculation for that.

152
00:09:30,170 --> 00:09:32,930
So I'll name another float rotate speed.

153
00:09:33,170 --> 00:09:36,470
I don't give this a for value of one hundred back in the code file.

154
00:09:36,530 --> 00:09:39,590
We can now multiply our value by our move speed.

155
00:09:39,930 --> 00:09:42,890
And finally, we want to ensure the movement is frame rate independent.

156
00:09:43,400 --> 00:09:45,670
So it gets our world context using get world.

157
00:09:45,950 --> 00:09:49,840
And then we'll multiply this by the delta time seconds.

158
00:09:50,210 --> 00:09:53,970
So as it is at the moment, we've just assigned a float as a new vector.

159
00:09:53,990 --> 00:09:55,280
So this isn't going to work.

160
00:09:55,490 --> 00:10:00,850
And as we're only intending to move the tank in the forward direction based on the way that the play

161
00:10:00,850 --> 00:10:01,670
is rotating.

162
00:10:01,910 --> 00:10:05,420
And we know that in Unroll X is the forward axis.

163
00:10:05,840 --> 00:10:07,070
We can finish off our move.

164
00:10:07,130 --> 00:10:07,950
Direction vector.

165
00:10:08,240 --> 00:10:13,700
By filling that into the X value festival and then finishing this off with comma zero comma.

166
00:10:13,760 --> 00:10:18,020
So on the Y and Z axis, we will be applying no movement whatsoever.

167
00:10:18,280 --> 00:10:22,400
So this is of C, meaning that we're not going to be strafing or moving vertically up and down.

168
00:10:22,760 --> 00:10:24,980
Next for our calculate rotate input.

169
00:10:25,040 --> 00:10:30,080
I'm going to break this one down to keep it a little bit easier to read as we'll need a couple of conversions

170
00:10:30,080 --> 00:10:30,650
going on here.

171
00:10:30,860 --> 00:10:31,630
So it's a start.

172
00:10:31,700 --> 00:10:37,790
We'll create a temporary flight variable named rotate amount, which will be equal to our value.

173
00:10:38,060 --> 00:10:42,710
So, again, this is the direction or the rotational direction that the player is pressing.

174
00:10:43,040 --> 00:10:45,530
Multiplied by the rotate speed.

175
00:10:45,590 --> 00:10:50,960
And then also multiplied again by the Delta times in seconds, which we can get from the world context

176
00:10:51,050 --> 00:10:52,370
using the get world function.

177
00:10:52,680 --> 00:10:58,280
We can now use this value to fill a temporary effort later that we're going to create named rotation.

178
00:10:58,520 --> 00:11:00,410
This will be equal to a new effort later.

179
00:11:00,740 --> 00:11:03,910
From experience, I know that we're going to want to rotate around the U.

180
00:11:04,310 --> 00:11:07,700
Which in the editor would be these at Axis on the rotation field.

181
00:11:07,820 --> 00:11:10,480
So we'll just locate that in the override list here.

182
00:11:10,790 --> 00:11:16,040
So this shows us that we want to fill in the pitch and the row with zero so as not to add any rotation

183
00:11:16,040 --> 00:11:16,310
here.

184
00:11:16,700 --> 00:11:19,310
And then you will be our rotation value.

185
00:11:22,570 --> 00:11:26,980
And we've done all of this so that we now have a value to fill in our rotation directions.

186
00:11:27,050 --> 00:11:30,320
So I would just say that rotation direction equals a new F quat.

187
00:11:30,800 --> 00:11:35,360
And that will process these values in our rotation value that we've just created.

188
00:11:35,860 --> 00:11:39,020
Then with all of this done, this is kind of the heavy lifting out of the way.

189
00:11:39,200 --> 00:11:41,900
And like I've said, kind of placed in their own functions.

190
00:11:42,230 --> 00:11:44,930
We can only move over to the move and rotate functions.

191
00:11:44,960 --> 00:11:47,990
And these are going to be much easier due to how we've separated this code.

192
00:11:48,350 --> 00:11:54,200
So for the move function, we want to use the add actor local offset that we saw earlier and just passed

193
00:11:54,200 --> 00:11:56,710
in the movie direction that we've calculated above.

194
00:11:56,900 --> 00:11:59,780
And then also passing the argument to do a sweep check.

195
00:12:00,050 --> 00:12:05,390
So if you're not familiar with what the sweep option does, this is just asking whether collisions should

196
00:12:05,390 --> 00:12:09,650
be checked when the actor or the pawn in this case is moving.

197
00:12:09,980 --> 00:12:14,510
So if we said this to folks, we could then potentially do things like phasing through walls or floors.

198
00:12:14,960 --> 00:12:17,480
We'll be doing the same thing for our rotate function.

199
00:12:17,600 --> 00:12:23,690
But this time using an ad actor, local rotation function, passing in our rotation direction.

200
00:12:23,930 --> 00:12:28,460
And again, also confirming that we want the sweep check to be true just to avoid having things like

201
00:12:28,460 --> 00:12:32,090
rotation, allowing us to do some weird phasing in glitching situations.

202
00:12:32,330 --> 00:12:36,530
Finally, we just want to implement these, as I kind of touched on earlier.

203
00:12:36,590 --> 00:12:38,540
This will be done in our tick function.

204
00:12:38,870 --> 00:12:44,210
So in here, we're going to cool our move and rotate functions so that this is being constantly updated.

205
00:12:44,540 --> 00:12:47,660
Now, I'm going to choose to call the rotate function first.

206
00:12:47,660 --> 00:12:51,920
And this is one of the reasons I've set up this way is that I find it just feels a little bit better

207
00:12:52,130 --> 00:12:58,040
to have the kind of instant knowledge of the movement direction or the direction you should be moving

208
00:12:58,040 --> 00:13:00,920
in before allowing the movement to take place.

209
00:13:01,400 --> 00:13:08,000
It's worth noting that you could simply just move the ADAC to offset and rotation in to that calculated

210
00:13:08,330 --> 00:13:12,110
kind of function counterpart just like so and reduce the number of functions.

211
00:13:12,350 --> 00:13:17,510
However, because the axis bindings are constantly being cooled and returning zero, if nothing is pressed,

212
00:13:17,510 --> 00:13:18,380
that means that would be fine.

213
00:13:18,380 --> 00:13:21,380
It wouldn't make us move or rotate woman or pressing anything.

214
00:13:21,650 --> 00:13:27,710
But it does mean that we don't have any kind of control in which order they're being processed or updated.

215
00:13:28,100 --> 00:13:34,220
This is why I'd just like to extract these in to their own functions and explicitly call the rotation

216
00:13:34,220 --> 00:13:37,070
value to be processed before any movement is applied.

217
00:13:37,430 --> 00:13:41,390
So I'm just going to control that back a few steps here to put things back in place.

218
00:13:41,720 --> 00:13:45,260
And a little bit later in the section when we have things compiled and working properly, as well as

219
00:13:45,260 --> 00:13:48,830
setting up the full kind of movement and rotation speed as you'd like.

220
00:13:49,160 --> 00:13:53,250
I'd recommend coming back here and swapping the move and rotate functions.

221
00:13:53,270 --> 00:13:56,870
Right, just to see which feels better as this can be a very kind of subjective thing.

222
00:13:57,010 --> 00:13:59,960
And based on people's expectations of how the tanks move.

223
00:14:00,950 --> 00:14:06,740
I've just noticed that when creating the new rotation value, I set it to use the rotation as the value

224
00:14:06,920 --> 00:14:12,440
when they should be using the rotate of mine, which is the variable that we've calculated just above.

225
00:14:12,860 --> 00:14:17,480
So if that changed and everything implemented there, I'm just going to load the editor back up and

226
00:14:17,480 --> 00:14:18,620
compile these changes.

227
00:14:19,770 --> 00:14:25,270
They're going to want to go into our tank class and at the moment we've inherited this class from the

228
00:14:25,690 --> 00:14:30,100
pawn base, which doesn't have the camera and input setup.

229
00:14:30,490 --> 00:14:36,070
So to update this, we can go to the class settings and overhear where you can see the parent class.

230
00:14:36,520 --> 00:14:39,550
Change this from pwn base to pawn that tank.

231
00:14:39,910 --> 00:14:44,530
You may have just noticed to the left hand side, the spring arm and the camera component have now appeared

232
00:14:44,980 --> 00:14:49,240
in the component section because everything else was a universal component.

233
00:14:49,270 --> 00:14:52,420
We've not had to change any of the hierarchy or anything.

234
00:14:52,810 --> 00:14:57,740
We haven't lost any of the mesh or collider settings that we had made earlier back in the map.

235
00:14:57,790 --> 00:15:01,640
If you haven't got one ready dragon, a BP underscore a porn tank into the world.

236
00:15:01,780 --> 00:15:09,070
Then select your new tank and navigate to the auto possess player and change that from disabled to zero.

237
00:15:09,430 --> 00:15:14,680
So in a single player game, this will always default to the first and only play controller and then

238
00:15:14,680 --> 00:15:16,950
that will grab possession of the pawn.

239
00:15:17,380 --> 00:15:22,030
When you press play with that done, if we press play, we can then test our tank movement.

240
00:15:22,300 --> 00:15:24,130
So this is definitely working.

241
00:15:24,430 --> 00:15:30,730
However, our player movement and rotation is a little bit slow and the camera is not really in the

242
00:15:30,730 --> 00:15:31,660
ideal location.

243
00:15:31,720 --> 00:15:35,500
So these are going to be some things for us to address and fix in the future lectures.

244
00:15:35,640 --> 00:15:40,420
At the moment, we don't have any kind of ideal way to change the movement or rotation speeds without

245
00:15:40,420 --> 00:15:45,190
going back and recompiling everything after doing multiple tests in our code file.

246
00:15:45,400 --> 00:15:47,830
So we're gonna be looking at how we can improve that workflow as well.

247
00:15:48,070 --> 00:15:51,570
But for now, we have the base implementation, which was our mango here.
