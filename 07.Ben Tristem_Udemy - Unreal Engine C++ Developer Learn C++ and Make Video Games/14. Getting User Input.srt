0
1
00:00:00,330 --> 00:00:05,830
Hey and welcome to this lesson where we're going to learn how we can process user input in the terminal.
1

2
00:00:06,330 --> 00:00:09,640
So we've been using cout throughout this section so far.
2

3
00:00:09,660 --> 00:00:13,940
cout stands for "character output" when we call cout
3

4
00:00:13,950 --> 00:00:21,180
we use these two left angled brackets to output whatever is to the right to the terminal as characters.
4

5
00:00:21,180 --> 00:00:25,290
These left facing angled brackets are known as the insertion operator.
5

6
00:00:25,800 --> 00:00:32,580
When we use cout and the insertion operator we are basically inserting characters to the output stream
6

7
00:00:32,730 --> 00:00:35,160
which is then displayed on the terminal.
7

8
00:00:35,700 --> 00:00:40,710
But now we're going to be taking a look at cin which stands for "character input".
8

9
00:00:40,710 --> 00:00:45,600
It looks similar to how we've been using cout but the angled brackets go a different way.
9

10
00:00:45,600 --> 00:00:48,240
Here we can see that the angled brackets go right.
10

11
00:00:48,240 --> 00:00:50,170
They are facing inwards.
11

12
00:00:50,250 --> 00:00:53,160
These are known as the extraction operator.
12

13
00:00:53,190 --> 00:00:58,610
We use the extraction operator we've seen to extract characters from the input stream.
13

14
00:00:58,680 --> 00:01:04,530
So when this line of code is executed the program will pause and wait until the player enters something
14

15
00:01:04,560 --> 00:01:10,650
into the terminal when the player hits enter the input will be extracted from the input stream and
15

16
00:01:10,650 --> 00:01:15,000
assigned to whatever is to the right of the extraction operator.
16

17
00:01:15,000 --> 00:01:20,000
So this is how we can get the player to enter something into the terminal and store what they enter.
17

18
00:01:20,070 --> 00:01:24,150
Then we can use this to see if they've made the correct guess or not.
18

19
00:01:24,150 --> 00:01:28,170
And now I want you to make use of cin. At the end of the last lesson
19

20
00:01:28,170 --> 00:01:33,690
we declared a variable called PlayerGuess. Insert a new line under where we declared the PlayerGuess
20

21
00:01:33,690 --> 00:01:41,250
variable and call cin to extract the player's guess from the terminal to store it in our PlayerGuess variable
21

22
00:01:41,670 --> 00:01:46,710
then print a message to the terminal that displays the guess the player just entered.
22

23
00:01:46,710 --> 00:01:50,820
So pause here to have a good go at this and then we can explore this together.
23

24
00:01:54,030 --> 00:01:54,320
Okay,
24

25
00:01:54,330 --> 00:01:55,980
So I've added two lines of code.
25

26
00:01:55,980 --> 00:02:02,210
I've added a line calling cin and I'm using the extraction operator to store the player's guess.
26

27
00:02:02,220 --> 00:02:08,430
I then print a message to the player that says "you entered: " and then it will print the value of the variable
27

28
00:02:08,560 --> 00:02:09,810
PlayerGuess.
28

29
00:02:09,990 --> 00:02:11,090
So I've saved my work.
29

30
00:02:11,160 --> 00:02:18,060
I've compiled my code and now let's take a look at running Triple X. So Triple X is running now and it's
30

31
00:02:18,060 --> 00:02:22,200
now paused waiting until I enter my guests into the terminal.
31

32
00:02:22,290 --> 00:02:26,470
So we already know the answer is 2 3 4, and when we enter this
32

33
00:02:26,520 --> 00:02:30,780
it prints what we just entered and then our program finishes running.
33

34
00:02:30,780 --> 00:02:36,570
So this seems okay but remember as a player we are trying to guess the three number code and the code
34

35
00:02:36,570 --> 00:02:41,810
is split up into our variables CodeA, CodeB, and CodeC.
35

36
00:02:41,850 --> 00:02:44,000
Now if we enter 234.
36

37
00:02:44,340 --> 00:02:49,490
Well this would be the answer here is going to be treated as two hundred and thirty four.
37

38
00:02:49,530 --> 00:02:52,760
Our guess isn't going to be treated as separate numbers.
38

39
00:02:52,860 --> 00:02:58,210
So let's try entering 2 3 4 separated by spaces.
39

40
00:02:58,230 --> 00:03:05,170
Now when we do this 2 is assigned to our PlayerGuess variable and anything after our spaces is ignored.
40

41
00:03:05,430 --> 00:03:07,200
But we're giving in the right direction here.
41

42
00:03:07,200 --> 00:03:12,180
We just need some more variables to help us store these other values.
42

43
00:03:12,180 --> 00:03:19,650
So just like we have our variables CodeA, CodeB and CodeC we can declare variables for each guess
43

44
00:03:19,920 --> 00:03:23,180
and then we can use cin on each of these.
44

45
00:03:23,190 --> 00:03:31,110
So instead of declaring PlayerGuess we can remove this and we can declare GuessA, GuessB, and GuessC
45

46
00:03:31,110 --> 00:03:32,310
but check this out.
46

47
00:03:32,310 --> 00:03:35,720
We can actually declare all these variables on the same line.
47

48
00:03:35,760 --> 00:03:42,990
We can type GuessA and then enter a comma and a space to declare GuessB and we can do the same for
48

49
00:03:42,990 --> 00:03:49,890
GuessC, we can enter a comma and a space to declare GuessC then instead of calling cin on PlayerGuess
49

50
00:03:49,890 --> 00:03:57,720
we can call it on GuessA and then on a new line beneath this we can call a cin on GuessB and then
50

51
00:03:57,720 --> 00:04:05,430
on a new line beneath this we can call cin on GuessC then instead of printing PlayerGuess we can
51

52
00:04:05,430 --> 00:04:13,220
print GuessA, GuessB, and GuessC to the terminal.
52

53
00:04:13,230 --> 00:04:18,820
Now let's save our work and compile our code and run Triple X.
53

54
00:04:19,020 --> 00:04:23,510
So it's now paused waiting for my input to assign a value to GuessA.
54

55
00:04:23,520 --> 00:04:28,980
So if I type 2 and hit enter it then moves onto the next line and calls cin on GuessB.
55

56
00:04:29,020 --> 00:04:36,290
So now if I enter 3 it then moves onto the next line and calls cin on GuessC so we can answer 4
56

57
00:04:36,720 --> 00:04:42,150
and then it prints all the values of our variables at the end of this, but we don't have to enter these
57

58
00:04:42,150 --> 00:04:45,050
numbers into the terminal on separate lines.
58

59
00:04:45,060 --> 00:04:52,920
Let's run our program again and let's enter our numbers but separated by spaces so this still works and
59

60
00:04:52,920 --> 00:04:58,170
runs through all the rest of our cin lines without even needing any more input.
60

61
00:04:58,170 --> 00:05:01,870
Now it might seem like a bit of wizardry but there's a reason for this.
61

62
00:05:01,890 --> 00:05:06,540
We enter 2 3 4 separated by some spaces.
62

63
00:05:06,540 --> 00:05:14,610
When we call cin on guess a it will only extract the numbers up until it finds a space so it only extracts
63

64
00:05:14,660 --> 00:05:15,490
two.
64

65
00:05:15,720 --> 00:05:21,990
Then it moves onto the next line of code where we call cin on GuessB but instead of asking us for
65

66
00:05:21,990 --> 00:05:27,720
more input it knows that there's something still left over from our previous input stream so it will
66

67
00:05:27,720 --> 00:05:29,310
use what's left.
67

68
00:05:29,310 --> 00:05:34,970
So 3 is extracted and assigned to GuessB but we still have something else remaining.
68

69
00:05:34,980 --> 00:05:41,910
So when cin is called on GuessC instead of asking us for more input it will process what's left over
69

70
00:05:41,910 --> 00:05:43,050
from before.
70

71
00:05:43,050 --> 00:05:46,340
So basically your program will only ask for more input.
71

72
00:05:46,350 --> 00:05:50,640
When cin is called if the input stream is empty.
72

73
00:05:50,640 --> 00:05:56,220
Okay so we're almost there but there's something I want to make you aware of any character other than
73

74
00:05:56,220 --> 00:06:01,000
a number assigned to an integer will be converted to a zero.
74

75
00:06:01,020 --> 00:06:11,100
So for example if we entered 2 3 and X separated by spaces our number will be 2 3 0 because our
75

76
00:06:11,220 --> 00:06:19,170
X gets converted to a zero but there's some more wizardry that happens here that we don't see once we
76

77
00:06:19,260 --> 00:06:21,250
enter a character like x.
77

78
00:06:21,390 --> 00:06:22,820
That isn't a number.
78

79
00:06:22,860 --> 00:06:29,610
Yes it will convert the value to a zero that any lines of code that relates to cin after this won't
79

80
00:06:29,610 --> 00:06:33,520
work again until we reset cin with a few lines of code.
80

81
00:06:33,570 --> 00:06:38,400
So there's a lot of iffy stuff going on but we're really not going to dwell on this right now because
81

82
00:06:38,400 --> 00:06:45,930
we won't be using cin and cout in Unreal and also our program ends after these lines of code runs so
82

83
00:06:45,930 --> 00:06:51,660
it's not an immediate issue but we will be coming back to this later when we add some replayability
83

84
00:06:51,660 --> 00:06:58,030
to our game. Now what I want you to take away from this is we want the players to enter numbers into
84

85
00:06:58,030 --> 00:06:59,290
the terminal.
85

86
00:06:59,290 --> 00:07:05,530
They can enter each number separately on different lines or they can enter the numbers on a single line.
86

87
00:07:05,620 --> 00:07:09,030
But with each number separated with a space.
87

88
00:07:09,100 --> 00:07:12,340
We don't want them to enter anything other than a number.
88

89
00:07:12,850 --> 00:07:16,940
And we need to add a fix later for replayability.
89

90
00:07:16,960 --> 00:07:18,850
Now I have a final challenge for you.
90

91
00:07:18,850 --> 00:07:26,020
Before we wrap up this lesson I want you to declare a variable called GuessSum and initialize it with
91

92
00:07:26,020 --> 00:07:31,580
the expression of GuessA,B, and C being added together.
92

93
00:07:31,600 --> 00:07:37,300
Then I want you to declare a variable called GuessProduct and initialize it with the expression of
93

94
00:07:37,300 --> 00:07:41,140
GuessA,B, and C being multiplied together.
94

95
00:07:41,140 --> 00:07:41,970
So pause here.
95

96
00:07:42,010 --> 00:07:46,480
Declare the sum and the product of the player guesses and then we can wrap up this lesson
96

97
00:07:50,220 --> 00:07:50,660
okay.
97

98
00:07:50,670 --> 00:07:54,000
So I hope you had a go at the challenge at the end of your main function.
98

99
00:07:54,090 --> 00:07:59,850
You should be declaring two variables called GuessSum and GuessProduct and you should be initializing
99

100
00:08:00,090 --> 00:08:07,470
GuessSum with an expression that adds GuessA, B and C together and you should be initializing GuessProduct
100

101
00:08:07,470 --> 00:08:12,150
GuessProduct with an expression that multiplies these variables together.
101

102
00:08:12,180 --> 00:08:12,470
Okay.
102

103
00:08:12,510 --> 00:08:13,200
Awesome.
103

104
00:08:13,200 --> 00:08:18,620
So at this point we don't even care about the individual GuessA,B, and C values.
104

105
00:08:18,630 --> 00:08:21,780
We could just work with the product and the sum.
105

106
00:08:21,780 --> 00:08:24,830
We don't need to let the player know the numbers they've entered over.
106

107
00:08:24,870 --> 00:08:27,960
So let's remove the line where we print to the terminal.
107

108
00:08:28,050 --> 00:08:32,910
The guesses that they've just made and then in the next lesson we're going to look at a way where we
108

109
00:08:32,910 --> 00:08:36,590
can check if the players guesses are correct.
109

110
00:08:36,600 --> 00:08:39,210
So once you're ready I'll see you in the next lesson.
