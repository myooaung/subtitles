1
00:00:04,050 --> 00:00:05,910
Hello everybody and welcome back.

2
00:00:05,910 --> 00:00:10,140
In this lecture we're going to have an introduction re look at references.

3
00:00:10,140 --> 00:00:15,760
Now it's just going to be the very basics and will reinforce our knowledge in the next section.

4
00:00:15,780 --> 00:00:22,220
So basically the premise that we're going to go for for here is why copy when you don't need to.

5
00:00:22,410 --> 00:00:28,500
At the moment we're passing around all of our variables by value which does mean that he's taking a

6
00:00:28,500 --> 00:00:32,300
copy of that and then using it's within the function itself.

7
00:00:32,310 --> 00:00:38,800
We'll look at our implementation in a moment but we don't need to copy it every time we make a copy.

8
00:00:38,880 --> 00:00:40,740
We're actually passing it by value.

9
00:00:40,740 --> 00:00:42,010
That's what it's called.

10
00:00:42,150 --> 00:00:44,640
And there are reasons why you will want to do that.

11
00:00:44,850 --> 00:00:52,110
But it's such a waste when you don't need a copy especially when it comes to strings and things like

12
00:00:52,110 --> 00:00:54,030
a raise they take up a lot of space.

13
00:00:54,060 --> 00:00:58,390
So taking an unnecessary copy is a real waste of our resources.

14
00:00:58,410 --> 00:00:58,850
Okay.

15
00:00:58,860 --> 00:01:03,390
So instead we can look at the originating data directly.

16
00:01:03,390 --> 00:01:09,180
This is called passing by reference and we will see that it affects multiple areas of our code already

17
00:01:09,180 --> 00:01:13,560
so we can have a big performance boost with our simple code.

18
00:01:13,560 --> 00:01:16,850
Now students will often get in a muddle with pointers and references.

19
00:01:16,860 --> 00:01:18,560
But as I said don't worry about that.

20
00:01:18,630 --> 00:01:24,480
We're going to be diving into pointers and references in more detail in the next section.

21
00:01:24,570 --> 00:01:29,760
So we have a couple of key points to cover before we dive into the implementation the symbol that we

22
00:01:29,760 --> 00:01:32,050
are using is the ampersand.

23
00:01:32,100 --> 00:01:35,450
Now what a reference is is it simply an address in memory.

24
00:01:35,460 --> 00:01:41,970
It's like a postal code or a ZIP code taking you to a specific location within the memory.

25
00:01:42,030 --> 00:01:46,290
And one thing to bear in mind is the ampersand can have other meanings so you have to use it in quite

26
00:01:46,290 --> 00:01:47,250
a specific way.

27
00:01:47,700 --> 00:01:50,640
One of the things with the reference is it must be initialized.

28
00:01:50,700 --> 00:01:55,950
You have to refer to something you cannot have an unfinished realized reference.

29
00:01:55,950 --> 00:01:59,390
And we'll also look at the fact that you cannot reassign a reference.

30
00:01:59,550 --> 00:02:04,110
Once you've assigned it to something it will stay assigned to that point in memory.

31
00:02:04,260 --> 00:02:06,690
Welcome over to our implementation.

32
00:02:06,690 --> 00:02:12,090
Let's first of all just have a quick look at a reference that's been sat here all this time.

33
00:02:12,180 --> 00:02:15,920
And finally we've gotten around to talking about it.

34
00:02:16,030 --> 00:02:22,840
This here is basically saying our input is a reference and it's a constant reference.

35
00:02:22,860 --> 00:02:27,830
This is important so we're not copying what the person has typed in constantly.

36
00:02:28,200 --> 00:02:34,980
And then we have a const meaning that that is a promise that that input will not change which is very

37
00:02:34,980 --> 00:02:41,310
important because if the players input changes even if it's accidental with encoding it would ruin the

38
00:02:41,310 --> 00:02:43,780
game we wouldn't be able to track it at this point.

39
00:02:43,780 --> 00:02:49,800
And I was also thinking that this would probably be better being called player inputs makes a lot more

40
00:02:49,800 --> 00:02:50,220
sense.

41
00:02:51,210 --> 00:02:51,560
Okay.

42
00:02:51,600 --> 00:02:55,920
So this is a constant reference to player inputs.

43
00:02:56,030 --> 00:02:57,670
But how do References work.

44
00:02:57,680 --> 00:02:59,950
Well let's go ahead here and play with them.

45
00:03:00,020 --> 00:03:01,400
Begin play.

46
00:03:01,400 --> 00:03:06,500
Now I'm not going to be using Pascal case here since we're gonna be deleting this in a few moments anyway

47
00:03:06,740 --> 00:03:08,520
just as a bit of test code.

48
00:03:08,560 --> 00:03:12,020
So first of all it starts off with a couple of integers that we can play with.

49
00:03:12,020 --> 00:03:23,160
Let's have ints 32 a equaling zero and let's also have an int 32 let's have it be and have equal 5.

50
00:03:23,170 --> 00:03:27,810
So that's pretty standard stuff we've initialized A and B with two values.

51
00:03:27,910 --> 00:03:32,360
In general it's a good idea to initialize things unless you got a good reason why not.

52
00:03:32,360 --> 00:03:41,290
So then we can have an int 32 because it does have to have a type then our Ampersand followed by what

53
00:03:41,290 --> 00:03:42,430
we're going to call it.

54
00:03:42,430 --> 00:03:47,550
I'm going to call a reference to a SO ref a I want to set it equal to a.

55
00:03:48,340 --> 00:03:51,170
Now let's just have a quick talk about syntax here.

56
00:03:51,250 --> 00:03:52,400
We've got our.

57
00:03:52,420 --> 00:03:56,290
If we hover over here we can see that the ampersand is on the other side.

58
00:03:56,320 --> 00:04:01,690
In fact none of this whitespace here matters you can have it in any formatting you want.

59
00:04:01,900 --> 00:04:08,020
However this is the real standard formatting so we will keep it aligned to that.

60
00:04:08,020 --> 00:04:13,900
Finally before we actually start playing with these and working out what happens if you try and reassign

61
00:04:13,900 --> 00:04:17,910
things let's go ahead and print line

62
00:04:21,330 --> 00:04:23,970
text and then what should we have in here.

63
00:04:23,970 --> 00:04:26,380
Let's have a B and C being printed out.

64
00:04:26,550 --> 00:04:31,120
So a equals format specify I.

65
00:04:31,140 --> 00:04:32,560
Because it's an integer.

66
00:04:32,760 --> 00:04:36,700
B equals format specified again.

67
00:04:36,810 --> 00:04:42,940
And then finally ref a equals and another formats specify.

68
00:04:43,140 --> 00:04:43,500
I.

69
00:04:43,500 --> 00:04:43,990
There we go.

70
00:04:45,480 --> 00:04:54,000
And then here we're going to need a b and ref a Okay so that's a nice little block of code let's see

71
00:04:54,000 --> 00:04:56,490
what happens over an unreal.

72
00:04:56,580 --> 00:04:58,300
Let's compile our code.

73
00:04:58,320 --> 00:04:58,650
Excellent.

74
00:04:58,650 --> 00:05:04,810
So here we can clearly see that referencing a gives the value back from what's at a.

75
00:05:04,830 --> 00:05:06,030
Which is useful.

76
00:05:06,210 --> 00:05:09,450
I equals zero and b equals five.

77
00:05:09,500 --> 00:05:12,440
Okay let's do something that I've said you cannot do.

78
00:05:12,510 --> 00:05:18,180
Which is something you can do which is reassign it but we'll see the impact that that can have.

79
00:05:18,260 --> 00:05:27,230
If high ref a equals b what do you think happens well in this particular case.

80
00:05:27,320 --> 00:05:29,320
I will allow you to copy and paste code.

81
00:05:29,330 --> 00:05:32,190
That is exactly the same as the line above.

82
00:05:32,210 --> 00:05:33,120
So what's going to happen.

83
00:05:33,140 --> 00:05:33,840
I.

84
00:05:33,920 --> 00:05:42,780
Well we changed ref a to b so surely referee now points a b so B and ref a will now be five.

85
00:05:42,890 --> 00:05:43,710
Is that what you're thinking.

86
00:05:44,600 --> 00:05:48,470
Well I can tell you straight away that's not what's going to happen because we cannot reassign it.

87
00:05:48,470 --> 00:05:54,140
So what you've really done by saying RAF a equals b is you've also changed the value of a at the same

88
00:05:54,140 --> 00:05:54,920
time.

89
00:05:55,010 --> 00:05:56,000
Let's go see that in action.

90
00:05:56,990 --> 00:05:57,870
Okay.

91
00:05:58,070 --> 00:06:02,570
So you can see the danger when you start reassigning things you're actually changing something you didn't

92
00:06:02,570 --> 00:06:09,730
realize you might be changing there's a lot of danger in that which is why we use the constant keyword

93
00:06:09,770 --> 00:06:15,920
because the moment we say that this is a constant reference to something even though we don't get a

94
00:06:15,920 --> 00:06:20,960
red squiggle down here when we try and compile our code it will fail.

95
00:06:20,990 --> 00:06:23,390
It will say you can't do that.

96
00:06:23,390 --> 00:06:27,820
You've made a promise that you're not going to change it and you've gone ahead and tried to change it.

97
00:06:28,220 --> 00:06:29,720
So there we go the compilers fail.

98
00:06:29,720 --> 00:06:31,190
That's what we were expecting.

99
00:06:31,310 --> 00:06:33,960
And if we read down here we've got.

100
00:06:34,190 --> 00:06:34,630
There we go.

101
00:06:34,690 --> 00:06:36,490
Rafa's declared a contest.

102
00:06:36,530 --> 00:06:37,460
You can't change it.

103
00:06:37,490 --> 00:06:44,330
Why are you trying to change it but how can we go ahead and use them in our functions like this when

104
00:06:44,330 --> 00:06:46,310
we're passing by reference.

105
00:06:46,310 --> 00:06:48,770
Well let's go have a look at what we've currently got.

106
00:06:48,770 --> 00:06:54,920
So we've got our input coming through and then the process gets the player input itself and that's it's

107
00:06:54,920 --> 00:06:55,820
passed in.

108
00:06:55,940 --> 00:07:00,320
That's absolutely fine because we can see it's a constant f string reference to player inputs at the

109
00:07:00,320 --> 00:07:00,680
moment.

110
00:07:00,680 --> 00:07:01,400
That's absolutely fine.

111
00:07:01,400 --> 00:07:08,030
So let's go down to where we've got processed gas processed gas that's not a constant reference anymore

112
00:07:08,060 --> 00:07:12,530
that's now a copy of the reference which is not what we want.

113
00:07:12,560 --> 00:07:13,680
That's just an F string.

114
00:07:13,700 --> 00:07:20,780
It's pretty lightweight compared to a T array full of f strings but unless it's a simple value like

115
00:07:20,780 --> 00:07:29,210
an integer or a float or a boolean you do want to pass these things by reference specifically by const

116
00:07:29,210 --> 00:07:34,580
reference those smaller items because they can exist on the CPE registers.

117
00:07:34,580 --> 00:07:37,040
They can actually be slower to reference them.

118
00:07:37,040 --> 00:07:38,230
It can be quite complex.

119
00:07:38,240 --> 00:07:42,800
But don't worry about that when you're passing these type of things that contain things like f strings

120
00:07:42,800 --> 00:07:49,670
contain characters arrays can contain different types and later on I'm sure we'll touch t maps all those

121
00:07:49,670 --> 00:07:55,690
sorts of things you should pass around by const reference so how do we go ahead and do this.

122
00:07:55,700 --> 00:07:58,260
Well are we going to change that guess.

123
00:07:58,270 --> 00:08:01,840
The answer is going to be no we don't want to change that guess at all.

124
00:08:01,850 --> 00:08:05,690
It would interrupt the game so we pass it in like this and that's absolutely fine.

125
00:08:05,690 --> 00:08:11,420
But now when we go ahead have I deleted the error up here now I'm going to comment that's out for the

126
00:08:11,420 --> 00:08:16,490
moment I'm going to show you here there's going to be another issue when we go ahead and compile this

127
00:08:16,490 --> 00:08:23,600
time we're going to see that our definition doesn't match any declarations that we've made if we show

128
00:08:23,600 --> 00:08:29,300
this here first parameter memory declaration does not match the definition what does that mean.

129
00:08:29,300 --> 00:08:31,060
Well we've got an F string in the concept string.

130
00:08:31,070 --> 00:08:38,690
If we go ahead and look at our header file process scarce notice here this isn't const and it's not

131
00:08:38,720 --> 00:08:40,270
a reference either.

132
00:08:40,280 --> 00:08:44,390
So essentially you had another process guess function that had been defined that was different from

133
00:08:44,390 --> 00:08:46,050
this one being declared.

134
00:08:46,160 --> 00:08:48,470
So you ended up with that error in place.

135
00:08:48,470 --> 00:08:53,160
You do have to declare exactly what you were defining later on.

136
00:08:53,180 --> 00:08:53,980
So that's that done.

137
00:08:53,990 --> 00:08:54,710
Let's have a look.

138
00:08:54,710 --> 00:09:00,170
Is there anything further down here that we can sort out so during the process guess once again the

139
00:09:00,170 --> 00:09:05,810
is Isaac Graham is used and we pass in the guess which is absolutely fine but just like before if we

140
00:09:05,810 --> 00:09:11,780
go down to this is Isaac Graham we're taking a copy of that word that we're assessing.

141
00:09:11,780 --> 00:09:13,030
That's no good.

142
00:09:13,130 --> 00:09:14,150
We're taking a copy of it.

143
00:09:14,150 --> 00:09:18,170
Why do why are we taking a copy when we can just look at the original word.

144
00:09:18,200 --> 00:09:20,510
So once again and we're not going to change it either.

145
00:09:20,540 --> 00:09:24,030
So it needs to be const and it's a constant reference.

146
00:09:24,050 --> 00:09:24,680
There we go.

147
00:09:25,250 --> 00:09:27,590
And this t array down here.

148
00:09:27,590 --> 00:09:33,260
Well that is going to be super expensive if we had an array of maybe a million words.

149
00:09:33,260 --> 00:09:35,930
We can certainly guarantee that it would slow down.

150
00:09:35,960 --> 00:09:41,680
Unreal having to process its and it doesn't have to be an array of words you could have an array of

151
00:09:41,740 --> 00:09:47,080
actors in your scene copying them all the time you're going to run out a memory very very quickly.

152
00:09:47,080 --> 00:09:48,840
But this is going to be our challenge.

153
00:09:49,030 --> 00:09:51,660
Let's see what you have to do okay.

154
00:09:51,680 --> 00:09:57,740
So your challenge is to rewrite the get valid words function to take in the original word list by reference

155
00:09:58,880 --> 00:10:05,270
now all that any other functions that you can pass values in by reference rather than by value.

156
00:10:05,270 --> 00:10:09,500
And finally is the parameter you are passing in const now.

157
00:10:09,500 --> 00:10:10,860
Little clue here.

158
00:10:10,880 --> 00:10:13,030
The answer's pretty much going to be yes.

159
00:10:13,040 --> 00:10:19,640
Most of the time when you're passing around values you do want to make it const otherwise it can be

160
00:10:19,640 --> 00:10:23,020
mutated which can cause issues.

161
00:10:23,020 --> 00:10:23,680
So go ahead.

162
00:10:23,770 --> 00:10:25,580
With there now and give that a go

163
00:10:28,920 --> 00:10:29,350
okay.

164
00:10:29,380 --> 00:10:30,470
Everybody welcome back.

165
00:10:30,490 --> 00:10:32,140
Let's go ahead now and rewrite.

166
00:10:32,140 --> 00:10:37,010
I'll get valid words function to taking the original word list by reference.

167
00:10:37,080 --> 00:10:41,460
OK so the first thing I'm going to do here is actually go over to my head of file because we changed

168
00:10:41,470 --> 00:10:46,930
that is Isaac Graham and did not make that a const f string reference.

169
00:10:46,950 --> 00:10:47,670
There we go.

170
00:10:47,670 --> 00:10:49,290
So that will now work.

171
00:10:49,320 --> 00:10:54,210
The other thing here to bear in mind of course is the word concept can be placed in different places

172
00:10:54,210 --> 00:10:55,790
depending on what it is.

173
00:10:55,800 --> 00:11:01,050
Remember if it's after the function declaration it's simply a promise that we're not going to change

174
00:11:01,200 --> 00:11:05,230
any of these member variables in our code okay.

175
00:11:05,260 --> 00:11:07,450
So let's work on the T or write a string here.

176
00:11:07,450 --> 00:11:12,150
So we've got to get valid words it's going to be a concert I'm sure you're fine with that.

177
00:11:12,340 --> 00:11:18,160
And then it's going to be a reference so we can just place that there straight away.

178
00:11:18,160 --> 00:11:24,820
Now we don't need to have these two words here at all either we can remove those and they're pretty

179
00:11:24,820 --> 00:11:25,720
much ignored.

180
00:11:25,720 --> 00:11:30,070
However in saying that it makes it more readable.

181
00:11:30,340 --> 00:11:35,760
I know when I look at this it's almost like self documentation what's being passed in at this point.

182
00:11:36,220 --> 00:11:41,710
I don't know what's being passed in there and this is going to be a word list I think has come over

183
00:11:41,950 --> 00:11:47,090
and have a look here word list so here we can see get valid words what's being passed in there.

184
00:11:47,130 --> 00:11:50,630
Oh it is a world list could be a world list.

185
00:11:50,630 --> 00:11:51,480
Is that sort of thing.

186
00:11:51,480 --> 00:11:54,680
So it's a word list so let's go ahead here.

187
00:11:54,760 --> 00:12:04,900
Over in the implementation and we need here a concept f string reference and the reference does go there.

188
00:12:04,990 --> 00:12:05,960
We hover over here.

189
00:12:05,960 --> 00:12:11,740
We can just confirm that this word list is now being passed in as a concept reference and then we're

190
00:12:11,740 --> 00:12:15,090
returning valid words which this is exactly what we want.

191
00:12:15,160 --> 00:12:20,020
Now let's go through the rest of our code and just make sure there's nothing else that we can be passing

192
00:12:20,020 --> 00:12:21,080
in by reference.

193
00:12:21,130 --> 00:12:22,560
In fact let's look at the header.

194
00:12:22,720 --> 00:12:27,370
So we only really have two other functions in our game at the moment sets up an end game and neither

195
00:12:27,370 --> 00:12:29,740
of those taking any parameters at all.

196
00:12:30,070 --> 00:12:34,270
Therefore we don't need to worry about whether or not anything is being passed in by a reference or

197
00:12:34,270 --> 00:12:34,950
not.

198
00:12:34,960 --> 00:12:41,560
So that's absolutely fine of course let's save our work go over into unreal compile the code cross our

199
00:12:41,560 --> 00:12:47,080
fingers that we've not Mr. semicolon somewhere when we press play of course I'm going to clear up the

200
00:12:47,110 --> 00:12:52,030
mess at the top there with our demonstration but welcome to ball Coulson word it's cakes.

201
00:12:52,030 --> 00:12:57,060
So what we should find here is we can type in something and we lose.

202
00:12:57,580 --> 00:13:01,240
We need to type in the right length and we go for lives left.

203
00:13:01,240 --> 00:13:05,770
And so if I type in cakes so the game should basically play as it does normally.

204
00:13:05,800 --> 00:13:06,560
Excellent.

205
00:13:06,570 --> 00:13:08,740
Do you see anything at in play there.

206
00:13:08,890 --> 00:13:12,010
Doesn't get calculated every single time we play the game.

207
00:13:12,010 --> 00:13:12,880
Brilliant.

208
00:13:12,880 --> 00:13:14,760
Now let me go clear up that code.

209
00:13:14,770 --> 00:13:16,150
How did you guys get on.

210
00:13:16,180 --> 00:13:18,430
Did you manage to put in your concert reference.

211
00:13:18,790 --> 00:13:22,120
It's incredibly important to keep this up.

212
00:13:22,120 --> 00:13:27,520
It means that your code is going to be much easier to interpret later on and we'll see in an upcoming

213
00:13:27,520 --> 00:13:32,750
lecture not the next one but I think the one after why this is important when we start talking about

214
00:13:32,780 --> 00:13:39,360
out parameters well that's something for a couple of lectures time being passing things in as a reference.

215
00:13:39,370 --> 00:13:43,660
Make sure it's a constant reference unless there's a very good reason which you'll find out in a couple

216
00:13:43,660 --> 00:13:45,900
of lectures time for it not to be.

217
00:13:46,090 --> 00:13:51,280
So I'm going to remove these lines they have no value in our game at the moment other than demonstration

218
00:13:51,970 --> 00:13:52,890
perfect.

219
00:13:52,900 --> 00:13:54,280
How did you guys get on.

220
00:13:54,370 --> 00:13:58,180
Show you work over in the discussions and I'll see you all in the next lecture.
