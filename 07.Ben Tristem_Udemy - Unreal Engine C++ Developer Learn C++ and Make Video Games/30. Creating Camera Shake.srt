1
00:00:04,080 --> 00:00:10,480
We're now getting to one of my favorite topics and things to implement when making the game feel pass

2
00:00:10,620 --> 00:00:11,410
of a project.

3
00:00:11,860 --> 00:00:15,100
So in this lecture, we'll be looking at the basics of camera shake.

4
00:00:15,340 --> 00:00:18,190
Classes, what they are and how to use them.

5
00:00:18,550 --> 00:00:23,440
This will be a primer to get ready to implement them into the game in the next lecture.

6
00:00:23,710 --> 00:00:28,670
And to get started, I'll just create a new folder inside of the blueprint structure, a nameless one

7
00:00:28,760 --> 00:00:29,210
general.

8
00:00:29,710 --> 00:00:32,230
Then we're going to need our new camera shake class.

9
00:00:32,290 --> 00:00:37,690
So we'll create all of this in blueprint as it's just a lot more convenient for this type of work.

10
00:00:37,750 --> 00:00:42,040
As you'll see when we've created and implemented some of our classes.

11
00:00:42,220 --> 00:00:46,990
So because EPIC had an understanding of just how important a feature camera shake can be.

12
00:00:47,080 --> 00:00:53,080
They've been kind enough to create a default class type to handle the basics of any good camera shake

13
00:00:53,080 --> 00:00:53,890
implementation.

14
00:00:54,040 --> 00:00:58,870
So we're going to make use of this as we don't need to implement all of this from the ground up, adding

15
00:00:58,870 --> 00:01:04,570
offsets and things to the camera like you would normally be expected to do in many other game engines.

16
00:01:04,840 --> 00:01:10,180
And to find this, we're just going to type in camera shake into the search section just here and select

17
00:01:10,210 --> 00:01:11,260
the camera shake option.

18
00:01:12,750 --> 00:01:16,000
I named this new class, BP underscore camera shake hit.

19
00:01:17,430 --> 00:01:24,870
And then use control and W to duplicate the class and rename it to BP, underscore camera shake explode.

20
00:01:25,270 --> 00:01:28,270
So we don't have the two main camera shake classes that we'll be using.

21
00:01:28,750 --> 00:01:33,370
And this is one of those scenarios which, like I've mentioned, would just be much more visual and

22
00:01:33,370 --> 00:01:37,390
is suited more towards blueprint's than it is C++.

23
00:01:37,540 --> 00:01:43,180
You could, of course, assign all of your values in a C++ class, but due to all of the values available

24
00:01:43,480 --> 00:01:49,510
and the refinement that it usually takes to get a camera shake feeling right, we're going to want very

25
00:01:49,510 --> 00:01:52,060
quick kind of instant results when testing.

26
00:01:52,420 --> 00:01:57,250
And this is going to allow us to very easily tailor high-Strung the Shakey's for different scenarios.

27
00:01:57,490 --> 00:02:03,250
And all joking aside, whilst camera shake can be a really effective way to display the kind of RGU

28
00:02:03,250 --> 00:02:07,750
impact of a force being applied or the result of an event happening.

29
00:02:08,080 --> 00:02:13,990
If it's overdone or applied with too much force, then it can take away from the player experience and

30
00:02:13,990 --> 00:02:17,260
even make some people feel a little bit motion sickness.

31
00:02:17,620 --> 00:02:22,660
And that's another reason that we want this very quick kind of iteration when working with this class

32
00:02:22,750 --> 00:02:24,760
as refinement has going to be very important.

33
00:02:25,000 --> 00:02:30,760
So let's begin by going into our camera shake hit and take a look at the properties available to us.

34
00:02:31,000 --> 00:02:33,100
So this class is actually one of those.

35
00:02:33,190 --> 00:02:39,100
We don't want the full kind of blueprint, Ed experience to make this a little bit easier to navigate.

36
00:02:39,280 --> 00:02:40,830
We won't be doing anything in the event graphs.

37
00:02:40,870 --> 00:02:43,900
This is all going to be purely changing the variables we have.

38
00:02:44,050 --> 00:02:49,450
So if we close the window and then reopen this class to get the data only blueprint view, we can see

39
00:02:49,450 --> 00:02:53,620
a lot of the properties available to edit a quick tip here as well.

40
00:02:53,710 --> 00:03:00,550
I'm holding the shift and the left clicking the dropdown option to either collapse or hide all of the

41
00:03:00,550 --> 00:03:06,070
properties in a category in one go rather than opening each dropdown section at a time.

42
00:03:06,610 --> 00:03:12,340
So let's start looking at some of these settings and get an idea of how they will affect the basics

43
00:03:12,400 --> 00:03:13,410
of camera shakes.

44
00:03:13,720 --> 00:03:19,450
So the first three that we usually focus on are the oscillation and mights, which are how much movement

45
00:03:19,510 --> 00:03:21,040
the camera will receive.

46
00:03:21,430 --> 00:03:23,800
The duration is then how long this will last.

47
00:03:23,950 --> 00:03:31,510
With zero being no movement and the blend in and act time are the percentage of time that it will take

48
00:03:31,750 --> 00:03:36,010
to reach the maximum oscillation and begin to ease back to no movement.

49
00:03:36,250 --> 00:03:38,680
Note that the blend in a light on normalized.

50
00:03:38,710 --> 00:03:41,650
So this is between a range of zero and one.

51
00:03:42,010 --> 00:03:47,290
So I already have some values tested that I feel work quite well for the smaller and quicker camera

52
00:03:47,290 --> 00:03:47,740
shake here.

53
00:03:48,070 --> 00:03:49,580
So I'd recommend using these just for.

54
00:03:50,230 --> 00:03:52,300
And then after showing you how to implement these.

55
00:03:52,540 --> 00:03:56,500
Come back and try some different values to see how the results may change.

56
00:03:56,890 --> 00:04:01,960
Next, we have the options to change the rotation, location and field of view of the camera.

57
00:04:02,470 --> 00:04:09,400
So generally it's gonna be the rotation and the field of view options that can cause people prone to

58
00:04:09,400 --> 00:04:13,150
motion sickness to feel uncomfortable when this is implemented.

59
00:04:13,540 --> 00:04:17,590
So we're just going to focus on moving the location of the camera during the shake.

60
00:04:18,100 --> 00:04:22,420
Of course, this isn't to say that you shouldn't try using the rotation or field a few options.

61
00:04:22,480 --> 00:04:28,360
But if you do, then I definitely recommend providing an option in your settings to enable or disable

62
00:04:28,360 --> 00:04:34,720
the camera shakes or even consider making different options for perhaps an intense or a subtle camera

63
00:04:34,720 --> 00:04:35,110
shake.

64
00:04:35,380 --> 00:04:40,090
For those who still want to have some of that impact, but on a less intense scale way, you may even

65
00:04:40,090 --> 00:04:43,270
remove some of the field of view or rotation options.

66
00:04:43,510 --> 00:04:48,370
So for the location, though, I'm just going to set these to a kind of spherical shape using an amplitude

67
00:04:49,000 --> 00:04:56,080
which controls the strength and frequency that controls how many times the shake will occur during the

68
00:04:56,320 --> 00:04:58,060
camera shake duration that we have set.

69
00:04:58,390 --> 00:05:02,080
Both of these will be set to a value of 10 on the X, Y and Z.

70
00:05:02,620 --> 00:05:04,450
So this is a very simple implementation.

71
00:05:04,480 --> 00:05:10,480
But the intention is that you'll be building on this and testing your own results as an example of what

72
00:05:10,480 --> 00:05:15,370
you could do to emphasize something like a really large shot from a slow but powerful cannon.

73
00:05:15,850 --> 00:05:23,020
You could really amp up the amplitude on the X or the forward axis with less frequency to have the camera

74
00:05:23,020 --> 00:05:29,140
take one kind of big knockback towards the where the players looking from then have some smaller, more

75
00:05:29,140 --> 00:05:35,140
frequent values on the Y and the said to make it feel like the camera's trying to correct itself.

76
00:05:35,380 --> 00:05:36,340
So we've that class done.

77
00:05:36,400 --> 00:05:41,110
Let's head on over to the explode hit shake and get that implemented before finishing off here.

78
00:05:41,580 --> 00:05:45,130
So I'm can set the duration and the plan times to something higher for this one.

79
00:05:45,490 --> 00:05:46,510
For the location effects.

80
00:05:46,510 --> 00:05:54,130
I'm going to set the value of fifty on the X in the Y amplitude and twenty for the frequencies.

81
00:05:54,610 --> 00:05:57,160
I'll leave these at axis set to zero for both.

82
00:05:57,460 --> 00:06:01,990
Just because these changes then make the difference between the two effects much more obvious when we're

83
00:06:01,990 --> 00:06:03,970
going back through and testing these.

84
00:06:04,560 --> 00:06:09,550
So those changes made when I'm ready to start cooling these effects in our C++ code.

85
00:06:09,940 --> 00:06:15,850
And hopefully it's really clear why we're setting all of these values in the blueprints just because

86
00:06:15,850 --> 00:06:16,750
of the amount of.

87
00:06:17,010 --> 00:06:21,390
Tweaking, they're going to be doing a number of properties available to us to begin with.

88
00:06:21,960 --> 00:06:23,550
Going back, changing something here.

89
00:06:23,580 --> 00:06:29,850
And then recompiling in C++ is just not going to be the best way forward for this type of implementation.
