WEBVTT
1
00:00:04.390 --> 00:00:09.340
In this lecture, we'll be taking a look at some more of the access modifiers to see how we can expose

2
00:00:09.370 --> 00:00:15.310
some of our tank movement variables for easier access to quickly test and edit them in the inspector.

3
00:00:15.610 --> 00:00:19.650
We'll also take the opportunity here to improve the camera and the spring home component.

4
00:00:19.690 --> 00:00:25.030
So this will be kind of a side task to spend a little bit more time in the editor to get the game feeling

5
00:00:25.030 --> 00:00:25.540
a bit better.

6
00:00:25.870 --> 00:00:31.420
So if we start by heading into our tank class, we want to make ours move speed and rotate speed.

7
00:00:31.510 --> 00:00:35.800
Editable in the inspector and maybe the blueprint classes just in case.

8
00:00:35.800 --> 00:00:39.670
We do need to use them later on for testing and iteration.

9
00:00:39.790 --> 00:00:44.710
So we've already covered all of the potential access modifiers that we might want or be able to use

10
00:00:44.710 --> 00:00:44.950
here.

11
00:00:45.280 --> 00:00:52.600
So just take a moment to consider which you think might be best used between visibility and the edit

12
00:00:52.600 --> 00:00:55.360
modifiers and the sub options of those.

13
00:00:55.780 --> 00:01:00.370
So I actually pulled the video and just consider which of these we might implement and why.

14
00:01:00.790 --> 00:01:05.110
Okay, so there's no exact right answer here, but I just wanted to run through my thought process.

15
00:01:05.260 --> 00:01:09.700
So the first thing that we do know is that we definitely need these to be added modifiers because just

16
00:01:09.700 --> 00:01:13.540
viewing these and the editor isn't going to allow us to make any of those quick adjustments.

17
00:01:13.930 --> 00:01:20.560
The next consideration is whether we want this to be edited anywhere in the default class or only in

18
00:01:20.560 --> 00:01:22.630
the blueprint classes or in the inspector.

19
00:01:23.020 --> 00:01:28.750
My preference here is to set this to anywhere as this will allow us to very easily change the variable

20
00:01:28.750 --> 00:01:29.500
in the blueprint.

21
00:01:29.510 --> 00:01:35.080
So that will be our kind of default and global variable for any future tanks that we create in the game.

22
00:01:35.380 --> 00:01:40.870
But then we also get the freedom to update and make quick alterations to this in the level using the

23
00:01:40.870 --> 00:01:43.000
instances of the blueprint class too.

24
00:01:43.010 --> 00:01:48.970
So we can then very easily even be mid game jump height of the game plan just pulls it, make some changes,

25
00:01:48.970 --> 00:01:51.730
mid game, go back in and test those changes immediately.

26
00:01:52.030 --> 00:01:56.950
So that was just, like I said, just more of a thought experiment to see the process of why you may

27
00:01:56.950 --> 00:01:58.150
want to choose one over another.

28
00:01:58.360 --> 00:01:59.650
As I said, there's no right answer.

29
00:01:59.830 --> 00:02:00.910
And it may come too.

30
00:02:01.000 --> 00:02:04.620
After implementing it, we may see that we've given this way too much access.

31
00:02:04.780 --> 00:02:09.060
If you're working in a team, other people not quite so aware of what's going on in the setup, maybe

32
00:02:09.070 --> 00:02:11.080
making mistakes with the implementation.

33
00:02:11.080 --> 00:02:16.150
So you may want to come back and redact that a little bit and make it maybe only editable in the defaults

34
00:02:16.210 --> 00:02:17.560
or in the inspector.

35
00:02:17.770 --> 00:02:20.590
But no, I think anyone is gonna fit this project quite nicely.

36
00:02:20.740 --> 00:02:23.710
Next, we want to provide our readers rights options.

37
00:02:23.830 --> 00:02:26.200
So this is going to be a little bit less important.

38
00:02:26.410 --> 00:02:31.480
So I'm just going to give this the full read write access in case we ever do want to add modifiers in

39
00:02:31.480 --> 00:02:32.350
blueprint testing.

40
00:02:32.500 --> 00:02:37.660
Like I said, for adding things like speed boosts or D buffs, I'm not going to drop these into a new

41
00:02:37.660 --> 00:02:41.020
category named movement so that we can easily find these values.

42
00:02:41.320 --> 00:02:43.510
And it's pretty clear what they're responsible for.

43
00:02:43.910 --> 00:02:49.330
And finally, because we're using the blueprint specify, also going to want to include our to specify

44
00:02:49.480 --> 00:02:52.930
to allow the private access of this variable in the private section.

45
00:02:53.080 --> 00:02:58.750
So this is going to provide us a really flexible system to test and update our variables, to really

46
00:02:58.750 --> 00:03:00.280
refine the feel of the movement.

47
00:03:00.490 --> 00:03:05.620
And then if we consider our kind of base premise for making this small game, jam themed project, this

48
00:03:05.620 --> 00:03:10.360
is going to be incredibly powerful as it will save us a lot of time and allow us to really refine the

49
00:03:10.360 --> 00:03:13.480
feel of our game in such a small sort of deadline period.

50
00:03:13.690 --> 00:03:16.880
So let's go back over to the editor and compile our code.

51
00:03:18.270 --> 00:03:24.320
With that done inside of the BP tank class, we can start making some of these changes to the global

52
00:03:24.320 --> 00:03:26.150
properties before updating these.

53
00:03:26.450 --> 00:03:30.200
I wanted to make the camera a little bit more pleasant to view the game through.

54
00:03:30.230 --> 00:03:31.400
So let's grab these spring.

55
00:03:31.400 --> 00:03:33.320
I'm here and get that one in place.

56
00:03:33.440 --> 00:03:39.230
So if we just add a 50 degree rotation to the pitch, this is going to give us a slightly more top down

57
00:03:39.230 --> 00:03:41.560
view rather than the over the shoulder view.

58
00:03:41.780 --> 00:03:46.250
We can also adjust the target arm length to something like 600, which should not be good.

59
00:03:46.580 --> 00:03:51.620
And again, you can easily update this depending on how far or close to the player you want the camera

60
00:03:51.620 --> 00:03:52.220
to stay.

61
00:03:52.640 --> 00:03:57.530
Then the next thing that I'd usually do in a game like this where we know that the wheel collisions

62
00:03:57.800 --> 00:04:01.810
with the camera shouldn't be an issue, would be to disable the collision test here.

63
00:04:02.180 --> 00:04:07.760
So this can be a really nice thing to have in something like a third person game where the camera will

64
00:04:07.760 --> 00:04:10.520
try to move a little bit to avoid going through walls.

65
00:04:10.760 --> 00:04:15.950
However, in a game like this, this is going to potentially do some strange kind of twitching movements

66
00:04:16.220 --> 00:04:22.490
if something like another actor, such as the turret classes will have all the projectiles passed through

67
00:04:22.490 --> 00:04:25.100
the line of the collision trace.

68
00:04:25.490 --> 00:04:29.750
So I'm actually going to leave this text for now just so we can experience some of those scenarios.

69
00:04:29.930 --> 00:04:34.460
And this will, again, just teach us how to look at these strange occurrences.

70
00:04:34.640 --> 00:04:37.370
And remind us to come back and fix this a little bit later.

71
00:04:37.850 --> 00:04:43.910
Finally, then, if we scroll down to the camera like options and enable both the camera and the rotation

72
00:04:43.910 --> 00:04:46.250
like this just adds a small kind of delay.

73
00:04:46.310 --> 00:04:50.690
Before the camera spring, I will attempt to catch up with the player movement.

74
00:04:51.020 --> 00:04:54.090
This just makes the game look and feel a little bit more dynamic.

75
00:04:54.110 --> 00:04:59.480
Again, a really handy quick tip to really make something like a game jam entry or an early prototype

76
00:04:59.500 --> 00:05:02.480
feel much more polished with just a really simple feature added.

77
00:05:02.960 --> 00:05:07.190
So if we press play now, this is going to be a little bit hard to see, but because we're moving quite

78
00:05:07.190 --> 00:05:07.790
so slowly.

79
00:05:08.090 --> 00:05:12.440
So let's just exit back out of this and go and change the movement and rotation speed.

80
00:05:12.590 --> 00:05:14.360
So for the movement, I've got something much higher.

81
00:05:14.480 --> 00:05:15.790
Somewhere around five hundred.

82
00:05:16.010 --> 00:05:20.950
And I think rotation probably wasn't quite so bad, so maybe we'll just double this to 200.

83
00:05:21.350 --> 00:05:23.090
So it's me that's feeling much better already.

84
00:05:23.180 --> 00:05:25.970
We can spend some time here and play a round of these results.

85
00:05:26.120 --> 00:05:31.040
And of course, find the variables that you feel are the best for the type of game you're making with

86
00:05:31.040 --> 00:05:31.460
these feeling.

87
00:05:31.460 --> 00:05:31.680
Okay.

88
00:05:31.810 --> 00:05:35.150
And if we just go back to the spring home and have a look at how we can implement this.

89
00:05:35.180 --> 00:05:40.190
So to demonstrate the difference, I think this is going to be much more noticeable if we talk of this

90
00:05:40.190 --> 00:05:40.700
on and off.

91
00:05:40.880 --> 00:05:46.220
So you can see that this immediately feels a lot less rigid and snappy with the camera like on.

92
00:05:46.460 --> 00:05:49.310
We can also change the variables here to affect the delay.

93
00:05:49.370 --> 00:05:55.520
So a higher value will make it like, but it was catch up much faster, whilst a lower value will take

94
00:05:55.520 --> 00:05:57.290
longer for the spring to catch up.

95
00:05:57.590 --> 00:06:01.140
In this case, I think I actually quite like the value to be quite slow.

96
00:06:01.190 --> 00:06:03.530
So I'm going to take both these nine to five.

97
00:06:03.680 --> 00:06:09.430
And if we quickly head over to our test map and look at one of the real values of adding the edit anywhere

98
00:06:09.500 --> 00:06:11.810
specify in our C++ code.

99
00:06:11.980 --> 00:06:17.570
So if we press play, we can actually eject from the porn possession by pressing F eight.

100
00:06:17.870 --> 00:06:23.030
And we can then kind of treat the editor as we would outside of playmate's so we can go in and select

101
00:06:23.060 --> 00:06:30.260
the porn class if we search for the movement and make some in-game updates to the variables to quickly

102
00:06:30.260 --> 00:06:34.280
check the different setups so we can take the value head to an extreme.

103
00:06:34.640 --> 00:06:39.080
And if we press F eight again togo back in and possess the porn, we can confirm that this is indeed

104
00:06:39.100 --> 00:06:40.430
going to be way too fast.

105
00:06:40.940 --> 00:06:45.980
Alternatively, we can make something some reasonable kind of smaller increments to the values and see

106
00:06:45.980 --> 00:06:48.680
if we can refine the movements on rotation that way.

107
00:06:48.860 --> 00:06:53.120
And in fact, from doing this, I think I found a pretty good, sweet spot for the rotation, which

108
00:06:53.120 --> 00:06:55.340
for me is somewhere around 250.

109
00:06:55.430 --> 00:07:00.950
So I'm going to go back in to the blueprint class because remember, anything that you do in the ED,

110
00:07:01.160 --> 00:07:04.910
either during play mode or to the instance, isn't going to be saved globally.

111
00:07:05.150 --> 00:07:07.570
So we're going to go back into the blueprint class.

112
00:07:07.820 --> 00:07:10.520
I'm going to change the rotation speed to 250 here.

113
00:07:10.820 --> 00:07:15.980
So this means that now whenever we spawn something in dynamically and level, which is the correct approach,

114
00:07:15.980 --> 00:07:19.400
we'll be looking at later, forgetting the tank being possessed by the player.

115
00:07:19.730 --> 00:07:23.720
We're going to allow Unroll to use the spawning system to manage this.

116
00:07:23.990 --> 00:07:27.980
That means that this value will be carried over into the newly spawned classes.

117
00:07:28.100 --> 00:07:34.670
So these are just some ways that we can make nice use of combining C++ and blueprints or some really

118
00:07:34.670 --> 00:07:40.640
quick and effective iteration, especially when it comes to things like the feel of the game and refining

119
00:07:40.970 --> 00:07:42.860
controls and input for the player.
