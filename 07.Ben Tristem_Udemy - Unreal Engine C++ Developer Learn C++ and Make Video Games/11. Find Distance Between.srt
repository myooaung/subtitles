1
00:00:05,370 --> 00:00:06,210
Everyone to welcome back.

2
00:00:06,270 --> 00:00:10,440
So we're going to pick up straight from where we left off in the previous lecture and start implementing

3
00:00:10,470 --> 00:00:15,030
our turret porn firing logic, depending on the results of a couple of checks that we've mentioned.

4
00:00:15,600 --> 00:00:18,240
So back in the turret, check fire condition function.

5
00:00:18,300 --> 00:00:24,260
The first thing that we want is to check whether the player pwn even exists as some of the steps laser

6
00:00:24,270 --> 00:00:28,200
will need access to this function, such as checking whether it's alive.

7
00:00:28,320 --> 00:00:29,750
So we made one account for this night.

8
00:00:30,220 --> 00:00:34,380
That's gonna be a variable that will be stored and defined in the tank class later.

9
00:00:34,920 --> 00:00:40,260
So of course, doing this without a valid reference will cause us some issues usually ending up in a

10
00:00:40,260 --> 00:00:41,010
hard crash.

11
00:00:41,220 --> 00:00:46,470
So just as an example, we could do something here like this where we will find a reference to the player

12
00:00:46,500 --> 00:00:48,710
using the get player point function.

13
00:00:49,110 --> 00:00:51,350
This is going to use a function in the U.

14
00:00:51,510 --> 00:00:56,520
Gameplay Static's class and then call the get play a function that's gonna take a quick look at what

15
00:00:56,520 --> 00:00:57,090
this is doing.

16
00:00:57,390 --> 00:01:00,440
And the argument requirements for the get to play a pawn.

17
00:01:00,570 --> 00:01:02,700
So this is a function of type, a pawn.

18
00:01:02,940 --> 00:01:06,090
This is just going to return a reference to the player pawn.

19
00:01:06,120 --> 00:01:09,240
If a vantage result is found, it takes in two arguments.

20
00:01:09,540 --> 00:01:11,340
The first is the world context.

21
00:01:11,430 --> 00:01:12,060
You object.

22
00:01:12,270 --> 00:01:13,380
And just a quick Pu's here.

23
00:01:13,650 --> 00:01:18,540
We've used this previously and I mistakenly thought that this is being covered in the previous section

24
00:01:18,540 --> 00:01:19,250
of the course.

25
00:01:19,530 --> 00:01:23,670
So something that you may see quite often, I think we've used this once or twice in the section already

26
00:01:23,880 --> 00:01:26,670
is the reference to the world object.

27
00:01:26,940 --> 00:01:30,160
And this can be used in many cases, which again is why you'll see it quite so often.

28
00:01:30,390 --> 00:01:37,230
But basically, the world is the top level object that can represent a map or a sandbox in which the

29
00:01:37,230 --> 00:01:39,930
actors and the components exist in a game.

30
00:01:40,080 --> 00:01:45,660
Because as we've touched on before, objects are the highest kind of level class, but they don't have

31
00:01:45,720 --> 00:01:51,090
a representation in the world, which is a little bit confusing because the world is an object and will

32
00:01:51,090 --> 00:01:53,550
be kind of interchangeable using that term in a moment.

33
00:01:53,700 --> 00:01:59,640
But then actors are derived from objects and they are the highest level class that actually resides

34
00:01:59,730 --> 00:02:00,270
in the world.

35
00:02:00,780 --> 00:02:07,910
So in this context, the world can be a kind of single persistent level or made up of multiple sublevels.

36
00:02:07,950 --> 00:02:10,680
When we're using things like the level streaming features.

37
00:02:10,710 --> 00:02:15,030
But the important thing here is the concept of the word itself and not so much how they work.

38
00:02:15,180 --> 00:02:20,400
And then because the world, like I've just said, is an object and objects don't exist in the world,

39
00:02:20,700 --> 00:02:24,150
which is the confusing bit here because of the use of the same term.

40
00:02:24,330 --> 00:02:28,980
But it just means that in the game they don't have a kind of physical presence as such.

41
00:02:29,190 --> 00:02:34,530
So this means that with an unable to do things like spawning actors or returning references from them,

42
00:02:34,680 --> 00:02:40,950
unless they're provided a context actor that exists in the game or again, that exists in the world.

43
00:02:41,160 --> 00:02:43,440
And that's what this first argument is actually doing.

44
00:02:43,440 --> 00:02:44,070
And humbling.

45
00:02:44,160 --> 00:02:47,520
It's providing a context actor to the world object.

46
00:02:47,820 --> 00:02:53,850
And that's why you'll often see this being provided as the argument as we can just directly pass a reference

47
00:02:53,850 --> 00:02:58,560
to whichever actor class a world context function is being called from.

48
00:02:58,890 --> 00:03:03,550
So just wanted to go back and kind of highlight that here, as you will see it very, very often.

49
00:03:03,840 --> 00:03:04,660
And that's what it means.

50
00:03:04,680 --> 00:03:10,140
Why would usually just going to see it being passed in the argument of this, as we always going to

51
00:03:10,140 --> 00:03:12,930
be calling this usually from an actor class.

52
00:03:13,140 --> 00:03:16,110
So we're just passing in our own reference as that world context.

53
00:03:16,470 --> 00:03:19,470
So moving on, the second argument is the player index.

54
00:03:19,590 --> 00:03:22,320
And this is used to track the number of players.

55
00:03:22,470 --> 00:03:27,990
And we can then use that to pull information on a specific player pwn using functions like this.

56
00:03:28,440 --> 00:03:31,830
So in a single play, a game like ours is a zero based number system.

57
00:03:31,830 --> 00:03:36,530
So passing in the argument of zero will be what we need in a multiplayer game.

58
00:03:36,750 --> 00:03:42,090
This would allow you to send queries about specific players based on that given index.

59
00:03:42,600 --> 00:03:49,530
So back over in the head of file, we can pass this as the you object world context argument and zero

60
00:03:49,800 --> 00:03:55,710
to check the first player point the you game play static's is accessible because we didn't quite get

61
00:03:55,710 --> 00:04:00,330
to including this section previously as the previous lecture ended up being quite long.

62
00:04:00,450 --> 00:04:04,350
But we had already included our Kismet gameplay static's include.

63
00:04:04,500 --> 00:04:05,920
So that was ready for us to use now.

64
00:04:06,480 --> 00:04:10,740
So now that we have a check, which will be false if this function returns, no.

65
00:04:11,010 --> 00:04:16,230
Whilst this isn't the most expensive check, especially in C++, it's just another performance that

66
00:04:16,230 --> 00:04:19,470
we don't really need every X amount of second.

67
00:04:19,560 --> 00:04:24,510
And besides that, we also know that we have a few benefits of making a fairly strict single play a

68
00:04:24,510 --> 00:04:30,150
game in that the pawn will always exist and be created immediately by the game mode as well as this.

69
00:04:30,180 --> 00:04:34,460
We already know that we're going to be needing to reference some variables in the tank class later.

70
00:04:34,470 --> 00:04:36,380
So we again, kind of future planning here.

71
00:04:36,990 --> 00:04:40,390
So instead, what we can do is store another reference in the head of file.

72
00:04:40,650 --> 00:04:43,020
This will be of type A porn tank.

73
00:04:43,320 --> 00:04:46,040
So we'll need to forward declare this as well as.

74
00:04:46,100 --> 00:04:49,650
This class won't know what the custom class that we've created.

75
00:04:49,650 --> 00:04:55,350
It's and then in the private section, as we won't need this outside of the C++ code, again, we can

76
00:04:55,350 --> 00:04:59,760
just create a pointer to the A porn tank class named player PWN.

77
00:05:01,280 --> 00:05:03,800
Then back in the Cartwell in the begin play.

78
00:05:03,830 --> 00:05:09,890
We're going to set this variable by using something called a cast and this will be a cast to the.

79
00:05:09,920 --> 00:05:11,450
A porn tank class.

80
00:05:11,870 --> 00:05:16,880
The casting is something you'll see quite a lot, especially when it comes to cross class communication.

81
00:05:17,240 --> 00:05:24,050
And this just allows us to convert a provided a type to another using the built reflection system in

82
00:05:24,140 --> 00:05:24,890
the unreal engine.

83
00:05:25,130 --> 00:05:28,130
For example, here we'll be passing in a generic porn class.

84
00:05:28,190 --> 00:05:32,720
So a pool, which is, of course, the bass class of all control of all classes.

85
00:05:33,110 --> 00:05:39,530
And then we'll be converting this to check whether it is not only a porn, but that it's a type of a

86
00:05:39,590 --> 00:05:41,000
porn tank class.

87
00:05:41,270 --> 00:05:47,300
And that's what then allows us to access any exposed tank specific functionality, because we then have

88
00:05:47,660 --> 00:05:51,650
a reference to not just the porn, but the specific tank version that we've built.

89
00:05:52,010 --> 00:05:52,880
So it's got this working.

90
00:05:52,910 --> 00:05:58,660
We want to say that our player porn is going to be equal to a cast to the A porn tank class.

91
00:05:58,940 --> 00:06:01,790
We don't need to provide the player porn to convert.

92
00:06:01,910 --> 00:06:04,580
And remember, we already have that in our check.

93
00:06:04,650 --> 00:06:05,390
Fire condition.

94
00:06:05,630 --> 00:06:10,820
So we can actually just cut everything apart from the F statement here and paste that after our cast.

95
00:06:10,910 --> 00:06:18,260
So this is now finding the A porn class returned from the Player Zero Index and storing this as a tank

96
00:06:18,260 --> 00:06:19,340
class four years later.

97
00:06:19,640 --> 00:06:24,530
So because we've stored this variable as a method variable means we have access to that everywhere in

98
00:06:24,530 --> 00:06:25,130
this class.

99
00:06:25,220 --> 00:06:28,040
We've now found and stored a reference to our player.

100
00:06:28,160 --> 00:06:32,090
So we can I use this as the check in the check via condition.

101
00:06:32,300 --> 00:06:37,280
So we'll just ensure that nothing else in this function triggers if we don't have a valid reference

102
00:06:37,340 --> 00:06:40,530
to the player saying F isn't player porn.

103
00:06:41,000 --> 00:06:41,890
Then return.

104
00:06:42,110 --> 00:06:47,320
Or another way to look at this in kind of more normal speak is if the player isn't valid, then return.

105
00:06:47,780 --> 00:06:51,800
As I mentioned before, we don't yet have anything to check whether or not the player is alive.

106
00:06:51,830 --> 00:06:55,550
So, again, we're just gonna keep that in mind and come back to that a little bit later.

107
00:06:55,970 --> 00:07:00,350
So the next thing that we do want to do, though, is calculate the distance between the target and

108
00:07:00,380 --> 00:07:01,610
the player point in the world.

109
00:07:01,940 --> 00:07:05,450
So we'll go back to our header and declare another function to handle this.

110
00:07:05,720 --> 00:07:09,980
Just gonna tidy this up a little bit as well by keeping all of the variables together, followed by

111
00:07:09,980 --> 00:07:11,330
the functions below that.

112
00:07:11,420 --> 00:07:13,760
So just moving around the code a little bit.

113
00:07:14,090 --> 00:07:16,730
And the next function will be of type float.

114
00:07:16,820 --> 00:07:22,310
And we'll call this one return distance to player and then implement this function as usual, using

115
00:07:22,310 --> 00:07:23,120
the shortcut.

116
00:07:23,450 --> 00:07:29,080
And to start the function, I'm just going to copy that f check from our check via condition, paste

117
00:07:29,080 --> 00:07:36,230
that in here and change the return value to zero just because we need to return a flight value here,

118
00:07:36,260 --> 00:07:38,450
even if we fail to process anything.

119
00:07:38,780 --> 00:07:41,060
We technically shouldn't ever need to use this.

120
00:07:41,090 --> 00:07:45,890
But just to ensure that we don't have any situations that allows the player validity Czech in the Czech

121
00:07:45,890 --> 00:07:47,000
fire condition to pass.

122
00:07:47,030 --> 00:07:50,030
And then, for whatever reason, fell on the next frame in here.

123
00:07:50,570 --> 00:07:53,900
We'll just include this double check to avoid any potential hard crashes.

124
00:07:54,230 --> 00:08:00,140
Then as long as we have a valid player reference, we will create a temporary flight named Distance

125
00:08:00,680 --> 00:08:03,200
and to get the distance between two actors.

126
00:08:03,380 --> 00:08:06,350
We're going to use a fairly standard calculation in the math library.

127
00:08:06,450 --> 00:08:08,930
That's already provided for us when we're using effectors.

128
00:08:09,140 --> 00:08:10,850
And that is the DST function.

129
00:08:11,420 --> 00:08:16,760
This just provides the distance between the two vectors that will be providing at the moment, and it

130
00:08:16,760 --> 00:08:18,770
returns the site as a flight value.

131
00:08:19,190 --> 00:08:25,130
So the two vector points that we want to find will be the distance between our target and our tank.

132
00:08:25,340 --> 00:08:30,290
So for the tank, we already have our reference, which means we can use the play a porn reference that

133
00:08:30,290 --> 00:08:36,470
we've stored and then call the get actor location to return its vector coordinates in WorldSpace.

134
00:08:36,950 --> 00:08:42,990
Then after a comma, this function just takes in, like said, the two vector parameters separated by

135
00:08:42,990 --> 00:08:47,060
the comma and it would all of the math with these two behind the scenes.

136
00:08:47,480 --> 00:08:50,100
So the next thing we want is the location of the turrets.

137
00:08:50,330 --> 00:08:55,190
And we can do that by calling the get active location function directly multiple pass in the location

138
00:08:55,220 --> 00:08:56,630
of the current target.

139
00:08:57,140 --> 00:09:00,020
And then finally, we can just return that distance value.

140
00:09:01,700 --> 00:09:07,640
And in fact, looking at this night, we can simplify this so we can just cut out the creation of the

141
00:09:07,670 --> 00:09:13,430
variable here and just return the result of our distance calculation, pretty much the same thing.

142
00:09:13,460 --> 00:09:14,570
Just one last line of code.

143
00:09:14,810 --> 00:09:18,320
And this is just because if we look at this, this is kind of the end of the function.

144
00:09:18,440 --> 00:09:20,160
We won't be using our distance value again.

145
00:09:20,180 --> 00:09:24,920
This might have made sense to create this if we were doing some further checks with the distance.

146
00:09:25,310 --> 00:09:28,790
But as this is going to be a very simple function, we can just cut some of the extra code.

147
00:09:29,300 --> 00:09:34,970
So now, because we have defined this as a function, returning a flight value, we can use this directly

148
00:09:35,000 --> 00:09:38,870
in our distance check statement, back in the check fire condition.

149
00:09:39,160 --> 00:09:44,090
And we just want to check if this is less than or equal to a given range.

150
00:09:44,510 --> 00:09:47,370
So, as usual, we're not going to create any magic numbers here.

151
00:09:47,390 --> 00:09:52,850
We'll go straight back into the had a file and create a new variable to very precisely show what this

152
00:09:52,850 --> 00:09:53,840
is representing.

153
00:09:54,110 --> 00:09:58,070
So I'm just gonna copy the file rate flight, including the property as well.

154
00:09:58,170 --> 00:10:00,260
We want this to be exposed in the same way.

155
00:10:00,490 --> 00:10:05,210
Two lines to, again, quickly update and check different ranges in the editor to see which one feels

156
00:10:05,210 --> 00:10:05,390
good.

157
00:10:05,640 --> 00:10:12,080
I'll give this the name of fire range and then set the default range to 500 units and back in the check

158
00:10:12,080 --> 00:10:13,580
fire condition one last time.

159
00:10:13,820 --> 00:10:20,450
We can check whether the distance to the player is less than or equal to our firing range or fire range.

160
00:10:20,630 --> 00:10:25,070
If it is, then of course we can fire as we don't have any functionality for that because we already

161
00:10:25,070 --> 00:10:26,600
kind of considered this.

162
00:10:26,660 --> 00:10:30,410
And this is going to be something in the pawn base that will be adding later.

163
00:10:30,860 --> 00:10:37,010
I'll just leave a comment here and add a debug log just to check that our functionality is working as

164
00:10:37,010 --> 00:10:39,330
we've added quite a lot of code over the last two lectures.

165
00:10:39,650 --> 00:10:40,580
So it's check that logic.

166
00:10:40,640 --> 00:10:47,950
I'm just going to move the log into the F statement and I'll change the text to fire condition success.

167
00:10:48,380 --> 00:10:54,110
And one final thing is that I think I've forgotten to include the PWN tank at the top of the code file.

168
00:10:54,140 --> 00:10:55,220
So let's go back up there.

169
00:10:55,460 --> 00:10:57,940
So that's going to be include point tank dot h.

170
00:10:58,160 --> 00:11:01,040
As we are already kind of storing references that we will need that.

171
00:11:01,400 --> 00:11:02,960
And with that done, I think that should be everything.

172
00:11:02,990 --> 00:11:08,810
So if we go back over and open the other to make sure that this compiles and then we can check our implementation.

173
00:11:09,170 --> 00:11:13,520
Also remember that if you've been following along, going from one lecture straight to the next and

174
00:11:13,520 --> 00:11:18,050
you haven't restarted, you're gonna need to do that anyway just to get this new class refreshed in

175
00:11:18,050 --> 00:11:21,770
the project because of that small completion issue we had previously.

176
00:11:21,980 --> 00:11:23,690
So I've already done that between lectures.

177
00:11:23,810 --> 00:11:24,680
So I have that.

178
00:11:24,830 --> 00:11:27,800
You can see that my porn star is now appearing in the ED.

179
00:11:27,950 --> 00:11:29,480
The compilation has been successful.

180
00:11:29,900 --> 00:11:34,280
And before testing anything out, we actually need to go in to our TAAT blueprint and change this to

181
00:11:34,280 --> 00:11:38,120
derive from the target C++ class as currently.

182
00:11:38,360 --> 00:11:40,940
If you remember, this is going to stop using the base class.

183
00:11:41,060 --> 00:11:44,300
And of course, this doesn't have any of our check fire functionality.

184
00:11:44,360 --> 00:11:47,990
So here's a small challenge for you just to make sure that the process is still fresh in mind.

185
00:11:48,090 --> 00:11:53,630
From what when we made our tank class changes inside of the turret blueprint just change the parent

186
00:11:53,630 --> 00:11:58,330
class to use the point art C++ class, pause the video and give that one to go.

187
00:11:59,650 --> 00:12:03,740
This is really just to make sure that you have remembered the button locations.

188
00:12:04,150 --> 00:12:09,440
So we can do this by going to the class settings tab, which is the main part of the challenge here.

189
00:12:09,760 --> 00:12:14,260
Use the pawn class, drop down to the side, and then just search for the pawn turret.

190
00:12:14,740 --> 00:12:16,690
With that done, we can go back to our map.

191
00:12:17,140 --> 00:12:22,470
Be sure to drag in at least one turret blueprint into the level and press play to give that test.

192
00:12:22,720 --> 00:12:23,250
And there we go.

193
00:12:23,260 --> 00:12:27,670
So if we look into the output log, we can now see that every two seconds we're being fired at.

194
00:12:27,790 --> 00:12:31,060
And when we leave the range of fire, that functionality will stop.

195
00:12:31,270 --> 00:12:36,220
We can also grab our turret pawn and we can change and test some of these values and add something like

196
00:12:36,300 --> 00:12:40,590
an update the fire rates and increase the firing ranges to something larger, too.

197
00:12:40,890 --> 00:12:46,090
So as you can see, I have made an absolutely impossible enemy to defeat making the firing at an increased

198
00:12:46,090 --> 00:12:49,570
range and also doing that every point one of a second.

199
00:12:49,720 --> 00:12:54,190
So play around of these values, find something fun or something you think might work really well for

200
00:12:54,190 --> 00:12:58,240
the implementation in the full game when we have the full firing functionality ready.
