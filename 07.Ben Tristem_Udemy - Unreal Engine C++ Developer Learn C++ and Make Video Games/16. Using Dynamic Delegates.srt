1
00:00:04,130 --> 00:00:08,740
Everyone, and welcome back in this lecture, we'll be seeing how we can implement dynamic delegates

2
00:00:08,920 --> 00:00:10,540
to our projectile class.

3
00:00:10,810 --> 00:00:16,210
This is an event that you can set to be called and respond to every time that this event is fired off.

4
00:00:16,360 --> 00:00:21,730
Anything that we'll be listening to the event will then receive it and be able to take an action or

5
00:00:21,730 --> 00:00:24,340
call their own function based on that event.

6
00:00:24,640 --> 00:00:28,420
We can jump straight into this in our code, codifying in the constructor.

7
00:00:28,750 --> 00:00:33,940
Just after we've created our projectile match, as this will be the component that will want to bind

8
00:00:34,000 --> 00:00:35,320
to the existing function.

9
00:00:35,680 --> 00:00:41,080
So to start, we do this by calling the function that we want to bind to on the projectile match, which

10
00:00:41,080 --> 00:00:43,660
in this case will be the on component hit.

11
00:00:46,290 --> 00:00:49,810
For every actor, class has sets of functions on them.

12
00:00:49,990 --> 00:00:54,650
And one of those which is shared is the component hit function, which is registered.

13
00:00:54,730 --> 00:00:58,930
Anytime a collision mesh on that class is registered.

14
00:00:59,020 --> 00:00:59,890
This will be fired.

15
00:01:00,220 --> 00:01:02,650
We don't want to assign at the ad dynamic binding.

16
00:01:05,120 --> 00:01:11,660
With a context of this for the first argument and then our custom function that we want to be run whenever

17
00:01:11,660 --> 00:01:13,910
the on component hit function is called.

18
00:01:14,090 --> 00:01:20,480
So they are that dynamic is a macro that acts as a helper for calling the underscore internal underscore

19
00:01:20,500 --> 00:01:24,380
a dynamic, which is the option will come up with the auto complete.

20
00:01:24,800 --> 00:01:29,300
And also, we haven't created our own hit function yet, but we'll do that in just a moment.

21
00:01:29,330 --> 00:01:33,470
So for now, we just kind of pre filling this in the knowledge we'll get to creating another function

22
00:01:33,590 --> 00:01:38,720
very shortly before that we can dive into the on component hit function to finally function arguments

23
00:01:38,750 --> 00:01:39,590
that it will be taking.

24
00:01:39,800 --> 00:01:40,760
And I'm just going to.

25
00:01:40,760 --> 00:01:41,060
Right.

26
00:01:41,060 --> 00:01:44,000
Click on the function and select go to definition.

27
00:01:44,210 --> 00:01:48,080
So now when we create our custom version of this and bind it to the delegates.

28
00:01:48,140 --> 00:01:53,840
This works in a similar way to overwriting in a parent class function in that we still need to provide

29
00:01:53,900 --> 00:01:55,520
all of the function arguments.

30
00:01:55,610 --> 00:01:58,130
So we'll need all of these that we can see just here.

31
00:01:58,610 --> 00:02:03,890
So if you have access to dive into the code files this way, then do feel free to copy them and use

32
00:02:03,890 --> 00:02:04,580
them in a moment.

33
00:02:04,670 --> 00:02:08,900
But to avoid mistakes as you need to be careful with which comma separate is left in.

34
00:02:09,200 --> 00:02:12,290
I'll just go through one at the time and types of mike with you.

35
00:02:12,350 --> 00:02:17,330
So back in the head of file in the private section, we want to make sure that this is a you function

36
00:02:17,450 --> 00:02:23,960
as dynamic delegates needed to be declared as a you function within going to create our void function

37
00:02:24,020 --> 00:02:25,100
named on a hit.

38
00:02:25,520 --> 00:02:31,040
The first argument was the you primitive component pointer named hit component.

39
00:02:31,100 --> 00:02:37,670
So the component which is being collided with then we have an act, a pointer named other actor.

40
00:02:37,850 --> 00:02:42,340
So we've got the component which is being collided with and the other actor.

41
00:02:42,410 --> 00:02:43,910
Which that component is hitting.

42
00:02:44,360 --> 00:02:46,960
We then have a second that you primitive component pointer.

43
00:02:47,060 --> 00:02:48,500
This time named other comp.

44
00:02:48,650 --> 00:02:52,490
So this could be the specific component within the other actor that you've hit.

45
00:02:52,760 --> 00:02:58,460
So, for instance, a lot of classes may be made up of kind of sub meshes or sub objects, and you can

46
00:02:58,460 --> 00:03:02,870
find out exactly which components within the class you are colliding with.

47
00:03:03,160 --> 00:03:06,230
And we want an effector named Normal Impulse.

48
00:03:07,720 --> 00:03:11,280
And finally, a concert f hit result named Hit.

49
00:03:11,430 --> 00:03:15,600
So these are two things which more to do with the force of which things being hit, the direction that

50
00:03:15,810 --> 00:03:20,610
location can be returned from the hit results as well, as well as many, many other things.

51
00:03:20,620 --> 00:03:23,190
But we're not going to need those levels of complexity.

52
00:03:23,220 --> 00:03:25,110
But that argument still needs to be provided.

53
00:03:25,350 --> 00:03:29,520
So if that were done, then use the C++ help to implement the new function.

54
00:03:29,730 --> 00:03:35,300
And the first thing that we want to do in our own hit function is get a reference to the earning actor.

55
00:03:35,610 --> 00:03:39,930
Which should be the porn that spawns the projectile, as we'll need this a little bit later.

56
00:03:40,140 --> 00:03:45,330
We can do this by creating a temporary pointer to the actor class named my owner, which will be equal

57
00:03:45,330 --> 00:03:48,060
to the return of the get owner function.

58
00:03:48,420 --> 00:03:49,290
Next, we want to check.

59
00:03:49,320 --> 00:03:54,510
This was successful and if not, then we can return straight from this function to avoid any errors.

60
00:03:54,840 --> 00:03:56,540
So F isn't my own.

61
00:03:56,790 --> 00:03:57,750
Then return.

62
00:03:59,830 --> 00:04:03,820
If you've gotten past the stage, then we know that we have a valid reference to the owning porn.

63
00:04:03,940 --> 00:04:08,500
And we can do some checks whether or not to apply damage to what we've just hit.

64
00:04:08,740 --> 00:04:12,190
So first, we need to check that the other actor at this point is still valid.

65
00:04:12,460 --> 00:04:17,530
And also that the other actor isn't equal to this just in case we have other nested components that

66
00:04:17,530 --> 00:04:21,670
could also overlap a collision within the same class as our projectile.

67
00:04:21,760 --> 00:04:26,650
And then finally checking that the other actor isn't equal to my partner just to avoid destroying the

68
00:04:26,650 --> 00:04:28,390
porn that spawned the projectile.

69
00:04:28,810 --> 00:04:32,830
So just a quick note, too, that all of this is available because of the declaration that we've made

70
00:04:32,830 --> 00:04:34,000
in the porn based class.

71
00:04:34,000 --> 00:04:39,450
When Spalding is saying that the site owner equals to this so that we're setting the owner to the actor

72
00:04:39,450 --> 00:04:39,690
class.

73
00:04:39,730 --> 00:04:39,980
That was.

74
00:04:40,350 --> 00:04:44,710
I mean, I using that here, but I was all of those checks made with no narrowed down to confirm that

75
00:04:44,710 --> 00:04:50,980
we've hit a valid actor that isn't ourselves or owning porn so we can now apply damage to whatever thing

76
00:04:50,980 --> 00:04:51,620
we've just hit.

77
00:04:52,030 --> 00:04:55,690
So we want to call the apply damage function, which is located in the U.

78
00:04:55,720 --> 00:04:56,990
Gameplay Static's class.

79
00:04:57,190 --> 00:05:00,160
So we'll just go back up and include that just above.

80
00:05:00,490 --> 00:05:02,740
And of course, that's found in the Kismet Library.

81
00:05:05,260 --> 00:05:09,670
Then back in the unhit function, we just want to use the game, play statics, apply damage.

82
00:05:12,610 --> 00:05:14,590
So this is the first time that we've looked at these functions.

83
00:05:14,660 --> 00:05:19,810
Let's dive into the definition of the function to see the arguments that this expecting.

84
00:05:22,630 --> 00:05:25,840
So this function does exactly what you'd expect, given the name.

85
00:05:26,290 --> 00:05:29,260
It hurts a specified actor or applies damage.

86
00:05:29,500 --> 00:05:31,930
And the first arguments that we need are the damage actors.

87
00:05:31,990 --> 00:05:37,780
So the other actor that we want to attempt to apply damage to, then we need to pass in a float for

88
00:05:37,780 --> 00:05:39,730
the base amount of damage to be applied.

89
00:05:40,090 --> 00:05:44,020
And then the next two arguments are quite interesting and can be somewhat confusing to begin.

90
00:05:44,260 --> 00:05:48,220
So we have the event instigator, which is a type of a controller.

91
00:05:48,670 --> 00:05:52,140
And then the damage causer, which is a type of a actor.

92
00:05:52,540 --> 00:05:57,130
So the instigator is the being responsible for causing the damage.

93
00:05:57,340 --> 00:06:02,980
And as this is a type of controller, this can be extended to the A.I. controlled porn as well as the

94
00:06:03,010 --> 00:06:04,210
player controlled porn.

95
00:06:04,610 --> 00:06:10,270
And this can be useful for checking things like the team or the legitimacy of damage to avoid things

96
00:06:10,270 --> 00:06:15,900
like friendly fire and damage between different A.I. components or A.I. possessed classes.

97
00:06:16,420 --> 00:06:20,860
Then the damage Coosa is the actual thing that caused the damage.

98
00:06:20,890 --> 00:06:24,880
So as the comment shows here, this could be something like a grenade or in our case, that's going

99
00:06:24,880 --> 00:06:26,260
to be the projectile itself.

100
00:06:26,710 --> 00:06:31,510
And again, useful in cases that you might want to apply damage buffs or DB ups against grenades.

101
00:06:31,750 --> 00:06:36,550
If a character has a grenade proof vest or something, then finally we have the damage type class,

102
00:06:36,550 --> 00:06:40,510
which we have ready to describe the type of damage being applied.

103
00:06:41,800 --> 00:06:47,200
Back in the projecto class, we can finish this function call by first providing the damage actor to

104
00:06:47,200 --> 00:06:49,480
be the other actor that we're checking against.

105
00:06:50,050 --> 00:06:54,710
The damage amount will be the value that we've already created named damage, and then to provide the

106
00:06:54,820 --> 00:06:55,900
AI controller reference.

107
00:06:55,930 --> 00:07:00,340
We know that the projectile won't have a controller as it's not a pawn is an actor class.

108
00:07:00,520 --> 00:07:05,890
So instead we're going to reference the my own a variable and call the get instigate a controller function

109
00:07:06,100 --> 00:07:08,670
that returns the controller of the given pawn.

110
00:07:08,980 --> 00:07:11,890
It's the projectile hitting the other actor, causing the damage.

111
00:07:11,920 --> 00:07:16,390
So the damage instigator will be a reference to this.

112
00:07:16,600 --> 00:07:21,640
And then we've already set the damaged pipe in our editor, so we'll use our variable name to damage

113
00:07:21,640 --> 00:07:21,940
type.

114
00:07:22,190 --> 00:07:26,680
So quite a few things to fill in here, but we already had the reference to everything apart from the

115
00:07:26,680 --> 00:07:27,250
controller.

116
00:07:27,280 --> 00:07:28,450
So that wasn't too difficult.

117
00:07:28,960 --> 00:07:33,370
And we'll be returning later to make the process look a little bit better regarding the gameplay.

118
00:07:33,610 --> 00:07:35,950
So we'll just leave a comment in the section.

119
00:07:36,010 --> 00:07:36,970
To that extent.

120
00:07:37,240 --> 00:07:41,620
For now, though, we can finish off the function by cooling the destroy function to remove the projectile

121
00:07:41,620 --> 00:07:42,070
from play.

122
00:07:42,460 --> 00:07:47,740
And just to recap, this will be called every time at these static mesh component on hit function is

123
00:07:47,740 --> 00:07:50,110
called or the on component hit function.

124
00:07:50,110 --> 00:07:54,040
Sorry, but then able to use all of the arguments that function would take so that we have access to

125
00:07:54,040 --> 00:07:57,730
things like the other actor, the hit results and other useful information.

126
00:07:58,030 --> 00:08:03,160
And if we do a quick restart of the others and compile this, we can test some of this in action.

127
00:08:03,430 --> 00:08:08,080
So after pressing play, if we go and fire some projectiles, we can see that they are all being destroyed

128
00:08:08,260 --> 00:08:09,640
when they hit anything.

129
00:08:09,910 --> 00:08:14,630
And this will stop a lot of these strange issues from occurring, like overlapping each other on spawn.

130
00:08:14,830 --> 00:08:17,980
And just a quick visual recap whilst Walter in the editor.

131
00:08:18,610 --> 00:08:23,860
If you're not familiar with the blueprints, the exact function of a binding two is just here in the

132
00:08:23,890 --> 00:08:24,910
projectile blueprints.

133
00:08:24,940 --> 00:08:31,000
So if we select the projectile match as that's the components function we've been binding to in C++,

134
00:08:31,270 --> 00:08:36,180
we can scroll down to the collision section and we can see here the on component hit.

135
00:08:36,490 --> 00:08:42,190
So this is a function that we can expose if we press the plus button and we can then see just how the

136
00:08:42,190 --> 00:08:47,020
overrides that we've been using in our custom on the hit function in the projectile class.

137
00:08:47,290 --> 00:08:51,040
So it was just a quick example of what we've been calling if you've been following along here.

138
00:08:51,070 --> 00:08:54,100
Be sure to delete this note as we won't be running this in the graph.

139
00:08:54,160 --> 00:08:58,750
We don't want this being classed as an override or forgetting to pass anything in here.
