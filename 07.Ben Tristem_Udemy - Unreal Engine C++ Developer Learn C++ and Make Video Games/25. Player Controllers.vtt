WEBVTT
1
00:00:04.180 --> 00:00:08.590
In this lecture, we'll be looking into some of the concepts of comptrollers in the Unreeled engine.

2
00:00:09.040 --> 00:00:15.790
And we're not talking gamepad, so this will be how the interface between the player or A.I. and the

3
00:00:15.820 --> 00:00:17.380
PWN classes are handled.

4
00:00:17.680 --> 00:00:23.380
So we won't be going into a controllers in this section as our A.I. is going to be very simplistic and

5
00:00:23.380 --> 00:00:29.200
doesn't really need a controller to handle communication between things like the blackboard system.

6
00:00:29.440 --> 00:00:34.360
We will, however, be looking into some of the things that we can get the player controller to handle.

7
00:00:34.480 --> 00:00:37.300
So let's get started by creating our new class.

8
00:00:37.570 --> 00:00:38.180
All right, click.

9
00:00:38.230 --> 00:00:39.910
In the browser and select.

10
00:00:39.910 --> 00:00:41.830
Create a new C++ class.

11
00:00:41.920 --> 00:00:45.910
Scroll down and locate the player control to class and select that one.

12
00:00:48.350 --> 00:00:53.470
Well, then give this the name of player control to base, and I'll drop this into a new folder named

13
00:00:53.470 --> 00:00:54.400
Player Comptrollers.

14
00:00:56.350 --> 00:01:01.060
When the new class is finished generating, we can start implementing our new function, so the player

15
00:01:01.060 --> 00:01:06.280
controller is the interface that directly receives input notifications when something is pressed.

16
00:01:06.520 --> 00:01:10.360
And also what is used to enable or disable player input.

17
00:01:10.600 --> 00:01:15.520
So you might have seen examples where the player porn class will cool it, owning a player controller

18
00:01:15.700 --> 00:01:19.690
to enable or disable during cut scenes or things like that, for example.

19
00:01:19.930 --> 00:01:24.760
And what we're going to be doing is pretty much just skipping the step of communication just by managing

20
00:01:24.760 --> 00:01:27.730
that type of thing directly in the controller class.

21
00:01:27.970 --> 00:01:33.910
So we're just going to have a single public section in the class and create one function of type void

22
00:01:34.180 --> 00:01:36.370
named set player and able state.

23
00:01:36.760 --> 00:01:44.380
Taking a single boolean argument named set player enabled other news, the C++ helper to implement this

24
00:01:44.440 --> 00:01:45.610
function as usual.

25
00:01:45.880 --> 00:01:49.600
And we use these set player enabled Boolean to decide what this function will do.

26
00:01:49.840 --> 00:01:55.690
So if the player Saturday board is set to true, then we're going to want to get the controlled pwn

27
00:01:55.810 --> 00:01:59.380
using the get point function and then call an able input.

28
00:01:59.560 --> 00:02:04.120
We can take a quick look at this new function and see what arguments this is expecting to be passed

29
00:02:04.120 --> 00:02:04.270
in.

30
00:02:04.540 --> 00:02:10.510
So this function will allow the pwned to process input responses and is taking in a reference to its

31
00:02:10.630 --> 00:02:12.030
owning player controller.

32
00:02:12.400 --> 00:02:15.690
That's why it makes sense to handle this kind of logic in the player controller class.

33
00:02:15.730 --> 00:02:21.130
Because now we can just pass in a reference to this as the arguments then if this isn't true.

34
00:02:21.180 --> 00:02:25.600
So if the function is being called to disable the input, we'll take similar steps.

35
00:02:25.630 --> 00:02:32.410
But this time will say get porn and call the disable input function again, passing in this as the reference

36
00:02:32.410 --> 00:02:33.310
is pretty much the same.

37
00:02:33.670 --> 00:02:35.890
Just doing the reverse of the previous function.

38
00:02:36.340 --> 00:02:41.290
Now, another thing that we can control from the player controller is whether the mice's visible.

39
00:02:41.530 --> 00:02:48.400
So outside of the statement we can set the B show mice cursor to be equal to the set player enabled

40
00:02:48.400 --> 00:02:49.810
variable being passed in.

41
00:02:49.840 --> 00:02:55.210
So this is a variable which is already housed in the player controlled class to control whether the

42
00:02:55.210 --> 00:02:56.770
mice cursor is available in game.

43
00:02:56.980 --> 00:03:02.560
And this is usually used and useful for toggling when you're switching between gameplay and menus.

44
00:03:03.040 --> 00:03:07.300
And the reason we're going to want to be controlling the cursor here is that when you're waiting for

45
00:03:07.300 --> 00:03:12.160
the start countdown, I don't want the player to be able to see the mouse cursor flicking everywhere.

46
00:03:12.310 --> 00:03:16.990
But as soon as the game begins, this is going to be made visible and the player can use the cursor

47
00:03:16.990 --> 00:03:19.300
point in the world to kind of gauge where to aim.

48
00:03:20.830 --> 00:03:21.850
That function ready to call.

49
00:03:21.920 --> 00:03:26.930
We can go over to our game mode class, and in the header I'll create a new pointer to the A player

50
00:03:26.930 --> 00:03:28.070
controller base class.

51
00:03:29.140 --> 00:03:30.730
Named player controller ref.

52
00:03:32.590 --> 00:03:38.890
We'll also need to go to the top of the file and forward declare this so class a player controller base.

53
00:03:41.520 --> 00:03:48.360
Then in the code, fall in the handle GameStop function just after we filled in our other variable references.

54
00:03:48.990 --> 00:03:53.850
We'll fill our player controller reference by casting to the a player a controller base.

55
00:03:55.640 --> 00:03:57.830
Using the you can play Static's.

56
00:04:01.100 --> 00:04:07.200
And the function get play a controller passing in the argument this and the index zero, and you can

57
00:04:07.200 --> 00:04:11.490
see this is very similar to our get play a porn that we've used just above.

58
00:04:11.820 --> 00:04:16.830
So with that reference now available, we can use this in the game mode to control whether the player

59
00:04:16.860 --> 00:04:19.590
input will be received at certain points of the game.

60
00:04:19.740 --> 00:04:23.910
So we're going to start in the actor died function as this is the easiest part.

61
00:04:24.150 --> 00:04:30.600
So if the dead actor is the tank, then we're going to handle the hiding of the porn in the player class

62
00:04:30.600 --> 00:04:31.350
a little bit later.

63
00:04:31.560 --> 00:04:36.900
So we know that we don't want the invisible tank to be driving around as that's gonna be a little bit

64
00:04:36.900 --> 00:04:41.520
obvious due to the camera moving because we're not removing any of those components, remember?

65
00:04:41.850 --> 00:04:44.790
So what we do in that case is after handling the game over function.

66
00:04:45.030 --> 00:04:48.210
Check that we have a valid reference to the player controller.

67
00:04:49.300 --> 00:04:53.950
And then if we do, we'll call these sets player in eight states on the player controller ref.

68
00:04:56.840 --> 00:04:57.980
And set this to folks.

69
00:05:00.370 --> 00:05:05.200
Next, we want to copy these lines of code and go to the handle start game function, post this below

70
00:05:05.200 --> 00:05:06.050
the game start.

71
00:05:06.520 --> 00:05:11.440
So as soon as we start playing, the porn movement is disabled, making us wait for the rain to count

72
00:05:11.440 --> 00:05:12.450
down, time timer to end.

73
00:05:12.690 --> 00:05:17.140
They're going to want to wait for the duration of the start delay and call the function again.

74
00:05:17.320 --> 00:05:19.490
But set the enable state to true.

75
00:05:19.690 --> 00:05:25.270
So this is slightly more complicated as we'll be using a timer that also takes in an argument to the

76
00:05:25.270 --> 00:05:30.010
function call, which is something our previous time example wouldn't have been able to have accounted

77
00:05:30.010 --> 00:05:30.250
for.

78
00:05:30.640 --> 00:05:36.210
So in the same F check, to ensure that we're doing this only if we have a valid reference to the player

79
00:05:36.220 --> 00:05:40.840
controller, we need a new effort, time to handle just like we've used in the toric class.

80
00:05:40.900 --> 00:05:42.280
And we'll name this one player.

81
00:05:42.310 --> 00:05:43.200
Enable handle.

82
00:05:43.570 --> 00:05:49.480
Then we're also going to create our own effort time at Delegate, which our name, player and able delegates,

83
00:05:49.510 --> 00:05:54.390
which is going to allow us to create a temporary you object with our function override.

84
00:05:54.910 --> 00:05:58.720
So we do this by saying that it's equal to a new F time delegate.

85
00:05:59.910 --> 00:06:06.530
Create your object and the function we'll be calling is in the class of the player controller ref.

86
00:06:06.900 --> 00:06:10.530
We're passing in the address of the A player controller base.

87
00:06:11.820 --> 00:06:14.390
I'm calling these set player enabled states.

88
00:06:14.730 --> 00:06:21.090
Then finally, we can provide the override that we want to use, which would be to set the player movement

89
00:06:21.120 --> 00:06:22.620
back to true in this case.

90
00:06:22.920 --> 00:06:28.080
And again, this rule actually very similar to what we've done before in the porn Taric class where

91
00:06:28.080 --> 00:06:33.960
we needed to confirm the function was being called in the porn class, providing the address of the

92
00:06:34.170 --> 00:06:34.800
porn turret.

93
00:06:35.160 --> 00:06:36.600
And the function that we wanted to call.

94
00:06:36.780 --> 00:06:38.840
And we've already seen the use of delegates before, too.

95
00:06:39.090 --> 00:06:43.260
So this is just another version of binding to function in a type safe way.

96
00:06:43.410 --> 00:06:46.680
And it allows us to also use our function arguments.

97
00:06:47.100 --> 00:06:48.570
So that means it's nearing that time again.

98
00:06:48.720 --> 00:06:53.790
Your challenge now is to complete this by calling these set time a function which will need a time,

99
00:06:53.820 --> 00:06:59.370
handle a time, a delegate, a float delay and a boolean for whether or not we want this to loop.

100
00:06:59.670 --> 00:07:01.410
So you have all of the variables needed.

101
00:07:01.640 --> 00:07:04.890
Pause the video here and try implementing our timer.

102
00:07:06.480 --> 00:07:11.190
Okay, so, of course, if you did get stuck, I've hinted we're doing similar things on the turret

103
00:07:11.190 --> 00:07:16.080
class, so we know from that class we need to use the get world get timer manager.

104
00:07:17.660 --> 00:07:20.330
Don't set timer for the timer handle.

105
00:07:20.390 --> 00:07:22.400
We have our player and able handle.

106
00:07:24.060 --> 00:07:30.450
And the delegate is our player and able delegate, then our float delay may be something that we haven't

107
00:07:30.450 --> 00:07:34.090
used for a while, but we can pass in our start delay float.

108
00:07:34.260 --> 00:07:39.300
This ensures that we'll delay enabling the player input for the same amount of time that we decide.

109
00:07:39.510 --> 00:07:41.730
We also want the start, would it countdown to show.

110
00:07:42.100 --> 00:07:48.240
And finally, we don't want to keep enabling the player input so we can set the looping to false.

111
00:07:48.270 --> 00:07:50.010
This will be a single fire function.

112
00:07:50.340 --> 00:07:54.120
So there is an issue here that will arise due to how the pawns and controllers are handled.

113
00:07:54.270 --> 00:07:59.850
Basically because we've added a call to destroy the player function for demonstration purposes, really.

114
00:08:00.120 --> 00:08:06.480
This will also destroy or set the owning player controller back to a no reference or no pointer.

115
00:08:06.840 --> 00:08:12.930
So if we were to compile this, we'd be destroying the pawn then also trying to call a function on the

116
00:08:12.960 --> 00:08:13.740
player controller.

117
00:08:13.770 --> 00:08:16.140
That may no longer exist in the game.

118
00:08:16.140 --> 00:08:22.800
My reference has only wanted to demonstrate the effects of calling the destroy function on a pawn.

119
00:08:22.890 --> 00:08:28.530
We can just go back over to the tank class and remove that night to avoid any of those issues cropping

120
00:08:28.530 --> 00:08:28.710
up.

121
00:08:32.440 --> 00:08:36.760
One final thing before moving on is that we haven't included our player controller, even though we're

122
00:08:36.760 --> 00:08:39.850
calling some functions from within that on the game mode.

123
00:08:40.110 --> 00:08:44.590
So at the top of the code, while inside of the game mode class, we just want to include tune tanks,

124
00:08:44.650 --> 00:08:50.720
forward slash player controllers, forward slash player controller base that should not account for

125
00:08:50.720 --> 00:08:55.060
all the times we'll need to provide or take away control from the player.

126
00:08:55.270 --> 00:09:01.090
So if we go back over to the editor and compile this, we can check our results with that comp..

127
00:09:01.110 --> 00:09:06.190
Then before we can check our new player controller, we need to create a blueprint version of this,

128
00:09:06.550 --> 00:09:11.560
which I'll create in a new folder in the blueprint structure named Player Controllers.

129
00:09:11.920 --> 00:09:18.550
Then if we find the C++ player controller base class right, click on this select create blueprint class

130
00:09:18.960 --> 00:09:22.360
and name the new blueprint BP Underscore Player Controller.

131
00:09:24.490 --> 00:09:30.260
We don't need to assign our custom blueprint, play a controller version to the project defaults, so

132
00:09:30.290 --> 00:09:33.890
I'll do this by going into our game mode blueprint and setting it just here.

133
00:09:34.280 --> 00:09:35.130
I'll also double check.

134
00:09:35.210 --> 00:09:40.580
This has filtered through to the project's settings to ensure that this updated, which we can see,

135
00:09:40.850 --> 00:09:44.060
has correctly chosen the new blueprint player controller.

136
00:09:44.480 --> 00:09:48.050
So if those changes made, we can I press play and test those results.

137
00:09:48.080 --> 00:09:52.790
And we can see straight away that even if we click into the window, we're completely unable to move

138
00:09:53.060 --> 00:09:54.440
for the first few seconds.

139
00:09:54.620 --> 00:09:55.550
And this is pretty cool.

140
00:09:55.550 --> 00:09:58.590
So we now have that kind of official waiting code.

141
00:09:59.120 --> 00:10:04.990
And then during the next few kind of test runs in the background, we can see when are able to hit the

142
00:10:05.000 --> 00:10:07.100
winner's states and the loose state.

143
00:10:07.370 --> 00:10:12.200
And then as expected during the leaves, states where remaining visible, but control is being taken

144
00:10:12.200 --> 00:10:12.380
away.

145
00:10:12.380 --> 00:10:19.430
So we're one step closer to having that complete kind of illusion of having the player tank destroyed,

146
00:10:19.820 --> 00:10:25.370
because we now know that at the very least, when we hit the state and start hiding all of visual components,

147
00:10:25.370 --> 00:10:27.980
we're not going to be able to keep moving the camera around and stuff.

148
00:10:28.190 --> 00:10:34.580
There is one strange issue that I was expecting to see, and that is if we have a button pressed directional

149
00:10:34.580 --> 00:10:41.180
button specifically and we're moving when we're killed, the input isn't cancelled and the pawn continues

150
00:10:41.180 --> 00:10:41.870
to move around.

151
00:10:42.350 --> 00:10:45.170
For the most part, though, we don't have the core mechanics in.

152
00:10:45.340 --> 00:10:50.210
Am I going to start coming back through our code and improving and refining things such as this unwanted

153
00:10:50.210 --> 00:10:54.860
movement and visualizing the destruction of the tanks and the turrets?
