1
00:00:04,430 --> 00:00:05,930
Hello and welcome and this lecture.

2
00:00:05,990 --> 00:00:14,240
We are going to be looking at having some choice in our behavior trees such that I can have our enemy

3
00:00:14,240 --> 00:00:15,140
run towards me.

4
00:00:15,800 --> 00:00:22,280
And if he loses sight of me, he comes to my last known location doing basically two behaviors, a chase

5
00:00:22,370 --> 00:00:24,190
and then an investigate behavior.

6
00:00:24,290 --> 00:00:27,200
Let's dive in and see how it's achievable using behavior trees.

7
00:00:28,610 --> 00:00:34,580
So while this patrolling behavior is very instructive, it's not really the kind of behavior that we

8
00:00:34,580 --> 00:00:41,150
want to implement, what we'd rather have is something along the following lines when we can see the

9
00:00:41,150 --> 00:00:44,630
player, we go and move as close to them as we possibly can.

10
00:00:45,470 --> 00:00:51,890
And when the player goes out of sight, then we try and move to the last known location of the player

11
00:00:51,890 --> 00:00:52,550
to find them.

12
00:00:52,910 --> 00:00:58,790
And once we have exhausted that option, maybe we go back to a different location or maybe just stay

13
00:00:58,790 --> 00:01:00,200
there for now.

14
00:01:01,040 --> 00:01:02,450
So how can we achieve this?

15
00:01:02,480 --> 00:01:05,930
Well, at the moment, we've got no way of achieving this with a sequence of actions.

16
00:01:05,930 --> 00:01:09,260
We need to make a choice based on the data that we have available.

17
00:01:09,260 --> 00:01:15,260
We need to choose between whether we can see the player or whether we can't, whether we've got a last

18
00:01:15,260 --> 00:01:18,470
known player, location or not, that sort of thing.

19
00:01:18,950 --> 00:01:24,020
So to do this, we need a new type of node in the behavior tree called a selective note.

20
00:01:24,140 --> 00:01:24,560
So if we.

21
00:01:24,560 --> 00:01:24,770
Right.

22
00:01:24,770 --> 00:01:29,040
Click and look at our composites, one of the options there is the selector.

23
00:01:29,660 --> 00:01:33,140
Now, the selector, as opposed to the sequence runs thusly.

24
00:01:33,590 --> 00:01:40,490
If you have a bunch of task underneath a selector, it is going to run until the first one succeeds.

25
00:01:40,970 --> 00:01:45,230
And basically it's expecting all of them to fail until one of them succeeds.

26
00:01:45,890 --> 00:01:48,170
Now, the sequence did the opposite.

27
00:01:48,230 --> 00:01:50,300
It runs all of them until one of them fails.

28
00:01:50,840 --> 00:01:52,820
So why is that useful?

29
00:01:52,850 --> 00:01:56,630
Why is it useful that the selector runs one of them and still one of them succeeds?

30
00:01:56,660 --> 00:02:00,980
Because basically we want it to choose the first option that is viable.

31
00:02:02,030 --> 00:02:07,340
Now, the way we're gonna do this is not by actually running tasks underneath the selector, but running

32
00:02:07,400 --> 00:02:08,960
sequences underneath the selector.

33
00:02:08,990 --> 00:02:12,170
So at the root level, we're going to be doing a select a node.

34
00:02:12,800 --> 00:02:16,970
And then beneath that, let's just move this sequence aside and create other sequences.

35
00:02:17,360 --> 00:02:20,000
We're going to have one sequence over here.

36
00:02:20,810 --> 00:02:26,750
And what we can do is we can actually rename the sequence from being sequence to something like Chase,

37
00:02:27,470 --> 00:02:35,090
and then we can add in another sequence here, which is going to be along of the lines of investigate.

38
00:02:36,180 --> 00:02:41,370
And these are basically add to behaviors that we want to be able to choose between.

39
00:02:42,360 --> 00:02:49,020
And in order to make them fail, we can add things to nodes called decorator's.

40
00:02:49,440 --> 00:02:49,710
So if you.

41
00:02:49,710 --> 00:02:52,680
Right, click on a node and go add decorator.

42
00:02:52,770 --> 00:02:54,930
You can see here there's a bunch of options here.

43
00:02:55,590 --> 00:02:59,400
And they basically change the way this node works.

44
00:02:59,430 --> 00:03:00,940
Then they can do that in a number of ways.

45
00:03:00,960 --> 00:03:05,880
For example, we've got this conditional loop which allows you to loop through all the actions again

46
00:03:05,880 --> 00:03:08,790
in the sequence as many times as this conditional is correct.

47
00:03:09,300 --> 00:03:15,840
We've got other things here, like a cone check, which is about visibility and other such lovely things.

48
00:03:15,930 --> 00:03:19,380
We got just a pure loop, got a time limit.

49
00:03:19,440 --> 00:03:23,310
So this can only we can only stay inside this sequence for a certain amount of time.

50
00:03:23,610 --> 00:03:27,090
Basically, lots of things that modify the behavior of this sequence.

51
00:03:27,360 --> 00:03:33,330
But the one that we are interested in is the blackboard, because this is a blackboard condition.

52
00:03:33,390 --> 00:03:38,370
And as you can see from the writing underneath it, the default is something along the lines of is this

53
00:03:38,430 --> 00:03:39,780
self actor set?

54
00:03:40,350 --> 00:03:46,350
And if this is not set, then automatically this node and everything underneath it will fail.

55
00:03:46,770 --> 00:03:50,880
Which means that our selector will go on to option two, which is investigate.

56
00:03:51,390 --> 00:03:53,820
So in this case, we actually want to change this up.

57
00:03:53,880 --> 00:03:55,200
We want to change how this works.

58
00:03:55,230 --> 00:04:02,190
So our player location, we want this to be such that it is only set when the player is visible.

59
00:04:02,670 --> 00:04:05,490
And then we want to add in a new variable here.

60
00:04:05,520 --> 00:04:11,970
Again, a vector, which is going to be the last known player location.

61
00:04:12,450 --> 00:04:16,050
And the last known play location when the player is visible is going to be the same.

62
00:04:16,590 --> 00:04:20,710
But once the player becomes invisible, the player location gets unset.

63
00:04:21,210 --> 00:04:23,880
And the last known player location is where we're going to want to go.

64
00:04:24,720 --> 00:04:30,270
So we can do this by going to our blackboard base condition and just changing it to being the query

65
00:04:30,330 --> 00:04:31,910
to be yes is set.

66
00:04:32,370 --> 00:04:35,340
But the thing that we want to be is set is the player location.

67
00:04:35,370 --> 00:04:41,950
So if the play location is set, then we're going to give Chase and we're going to give chase by doing

68
00:04:41,970 --> 00:04:43,700
basically just a move, too.

69
00:04:43,980 --> 00:04:47,700
And we're going to move to the player location.

70
00:04:47,760 --> 00:04:51,780
Like, so now we're not doing much else under this sequence.

71
00:04:51,810 --> 00:04:57,350
So in actual fact, you could put this blackboard condition directly on the move to.

72
00:04:57,750 --> 00:05:01,860
But because we might wants to other things such as shooting, I'm going to leave it as a sequence for

73
00:05:01,860 --> 00:05:02,190
now.

74
00:05:02,760 --> 00:05:04,020
Then we've got this investigate.

75
00:05:04,140 --> 00:05:06,390
Investigate is basically also going to move to.

76
00:05:07,380 --> 00:05:11,790
But it's going to move to instead of moving to the player location.

77
00:05:12,210 --> 00:05:16,050
It's going to move to the last known player location.

78
00:05:16,740 --> 00:05:20,700
And you can see we don't have a condition on that because this falls through.

79
00:05:21,120 --> 00:05:27,930
If this condition fails, one important thing to note about these Blackbaud conditions is that by default,

80
00:05:28,170 --> 00:05:33,990
once we have made the decision to start executing this node, we're not going to re-evaluate that.

81
00:05:34,260 --> 00:05:39,840
So if for some reason we lose sight of the player while we're moving to that player's location, we're

82
00:05:39,840 --> 00:05:41,610
going to keep trying to get there.

83
00:05:42,150 --> 00:05:49,620
So if we wanted to be able to abort the execution of this note, then there's an option for that.

84
00:05:49,680 --> 00:05:54,930
If you go to the flow control, there's notify observers and there is underneath that observer aborts

85
00:05:54,990 --> 00:05:56,090
at the moment set to none.

86
00:05:56,670 --> 00:06:00,690
But you can select from a couple of options and you can set it to self.

87
00:06:00,960 --> 00:06:07,860
So this is saying if this condition suddenly becomes false, then stop whatever you're doing and re-evaluate

88
00:06:07,860 --> 00:06:12,120
your selector and see, maybe we now need to do the investigate note.

89
00:06:12,750 --> 00:06:17,060
The other option here is lower priority and you can see that it's changed.

90
00:06:17,070 --> 00:06:18,540
What's highlighted here.

91
00:06:18,540 --> 00:06:24,450
It's saying if suddenly this Blackbaud condition became true, stop whatever else we were doing and

92
00:06:24,450 --> 00:06:26,860
start executing this chase condition.

93
00:06:27,510 --> 00:06:29,700
And then the final option is both.

94
00:06:30,030 --> 00:06:31,110
And this is the one that we want.

95
00:06:31,140 --> 00:06:37,230
Basically, it's saying that this Blackbaud based condition, if it becomes true, we start executing

96
00:06:37,230 --> 00:06:38,510
the sequence immediately.

97
00:06:38,820 --> 00:06:44,160
If it becomes false, we stop executing it immediately or stop executing whatever else was going on.

98
00:06:44,190 --> 00:06:51,390
We just basically want to always go and do whatever path is dictated by this Blackbaud condition.

99
00:06:51,420 --> 00:06:57,300
So hope that makes sense that the observer aborts stop things in action, otherwise it will wait until

100
00:06:57,300 --> 00:06:59,760
the action is finished before re-evaluating.

101
00:07:00,570 --> 00:07:07,140
So really now we want to go ahead and implement our last known place location and play a location,

102
00:07:07,140 --> 00:07:13,110
because at the moment, if we go over to our C++ and give ourselves a little bit more room, then you

103
00:07:13,110 --> 00:07:16,230
can see that we're only setting this play location in begin play.

104
00:07:16,500 --> 00:07:22,110
Ideally, we'd be doing this every time we have line of sight to our play porn so we can actually uncommented

105
00:07:22,140 --> 00:07:23,580
our line of sight code here.

106
00:07:24,240 --> 00:07:27,360
And we probably wants a uncommented the ELT's code as well.

107
00:07:27,600 --> 00:07:32,370
But we're not, in this case, going to be clearing focus and stopping movement directly.

108
00:07:32,370 --> 00:07:35,250
I can go ahead and remove these entirely.

109
00:07:35,610 --> 00:07:37,650
That's not the way we're doing things at the moment.

110
00:07:38,220 --> 00:07:47,200
Instead, what we want to be doing if I remove the code is we want to be in here setting the playout

111
00:07:47,220 --> 00:07:48,030
location.

112
00:07:48,420 --> 00:07:53,550
We also want to be setting the last known location there.

113
00:07:54,150 --> 00:07:59,570
And in ELT's, we want to clear the player location.

114
00:08:00,390 --> 00:08:07,830
Now, to do that, we have got a function available to us, which is instead of the set value as vector.

115
00:08:07,860 --> 00:08:12,120
If we go ahead and open our Blackbaud component dot h.

116
00:08:12,810 --> 00:08:15,270
There is a clear value.

117
00:08:15,780 --> 00:08:17,460
And this just takes the F name.

118
00:08:17,460 --> 00:08:23,430
Doesn't need to take a type or anything or because we're just completely erasing whatever was in that

119
00:08:23,430 --> 00:08:23,910
variable.

120
00:08:24,660 --> 00:08:29,040
So here I got a challenge for you to fill out our tick set the two variables.

121
00:08:29,280 --> 00:08:37,500
When Linus sites basically fill out this first bit of the if statement and then clear the player location

122
00:08:38,100 --> 00:08:39,230
when we have the ELT.

123
00:08:39,270 --> 00:08:42,030
So when we lose line of sight, we don't have a player location anymore.

124
00:08:42,450 --> 00:08:48,330
Reduce the speed of the enemy that's in the world so that you can get away from him more easily.

125
00:08:48,750 --> 00:08:50,130
And then check the functionality.

126
00:08:50,130 --> 00:08:56,400
Check that you're able to hide behind a corner and that he goes to the last known location to try and

127
00:08:56,400 --> 00:08:59,280
find you post a video and have a go at this.

128
00:09:00,570 --> 00:09:01,410
Okay, welcome back.

129
00:09:01,470 --> 00:09:02,550
So let's give this a shot.

130
00:09:02,610 --> 00:09:04,290
First of all, we're setting the play location.

131
00:09:04,290 --> 00:09:07,020
I'm going to move that out of begin play and move it here instead.

132
00:09:07,560 --> 00:09:12,720
So going to set the player location to we need to be getting the play a pawn here and take again.

133
00:09:13,080 --> 00:09:18,540
So I'll uncommented that line and then we're doing exactly the same thing, exactly the same line of

134
00:09:18,540 --> 00:09:21,980
code for our last known player location here.

135
00:09:21,990 --> 00:09:26,940
So let's go to our blackboard and just make sure we copy it so we get exactly the same name.

136
00:09:27,870 --> 00:09:29,190
And then we just want to clear.

137
00:09:29,220 --> 00:09:33,150
That's the final thing, is to clear our play location here.

138
00:09:33,150 --> 00:09:37,260
So it's gonna be clear value and it's going to take this at Tex.

139
00:09:37,510 --> 00:09:41,810
Player location as the value that we're trying to clear at the end.

140
00:09:42,540 --> 00:09:46,680
And we can go ahead and compile and see if this works.

141
00:09:48,810 --> 00:09:53,460
While compile was successful, the other thing I said to do to make our debugging easier was to select

142
00:09:53,460 --> 00:10:01,650
the enemy and we can go and change their speed by going down to their movement components and finding

143
00:10:01,740 --> 00:10:04,350
the walking and finding their speed.

144
00:10:04,380 --> 00:10:07,100
So, Max, walk speed is 600 here.

145
00:10:07,500 --> 00:10:11,490
Let's set it down to two 400 so we can easily get away from them.

146
00:10:11,490 --> 00:10:15,180
They're going to walk a bit slow and go ahead and play.

147
00:10:15,210 --> 00:10:16,740
They are walking towards us slowly.

148
00:10:16,740 --> 00:10:17,770
We can run away.

149
00:10:18,240 --> 00:10:20,250
We hide behind a corner and here they go.

150
00:10:20,280 --> 00:10:22,630
Come looking for us each time.

151
00:10:23,040 --> 00:10:27,900
But hopefully if we hide behind two corners, they won't be able to find us.

152
00:10:28,350 --> 00:10:30,960
So I hide their hide here, hide here.

153
00:10:31,470 --> 00:10:34,290
And he's gonna go and investigate at the last known location.

154
00:10:34,290 --> 00:10:38,610
You see, he's just poked his head round the corner, but then he's stuck there because he doesn't know

155
00:10:38,670 --> 00:10:39,540
what to do.

156
00:10:40,050 --> 00:10:46,920
And if we were to go and have a look at our behavior tree and just put this over to one side and the

157
00:10:46,920 --> 00:10:52,170
game to the other and give myself a little bit of room, then if we have a look at the behavior tree,

158
00:10:52,200 --> 00:10:56,640
we can see it's kind of jazzing around here because it can't do either of them.

159
00:10:56,670 --> 00:11:00,270
It's trying to move to the last known location that's succeeding.

160
00:11:00,540 --> 00:11:01,770
So it's getting a bit stuck here.

161
00:11:02,100 --> 00:11:05,790
But if I come into view, you can see he's moving towards me.

162
00:11:06,180 --> 00:11:12,750
If he loses sight of me, then he goes over to the investigate condition, so loses sight.

163
00:11:12,780 --> 00:11:13,920
He's going to investigate.

164
00:11:14,370 --> 00:11:16,290
And then he comes and sees me.

165
00:11:16,290 --> 00:11:17,940
And then he goes back to chasing me.

166
00:11:18,330 --> 00:11:20,820
So this behavior is actually working.

167
00:11:20,820 --> 00:11:29,170
Now we're able to do a choice between trying to chase and trying to investigate based on this Blackbaud

168
00:11:29,170 --> 00:11:29,630
behavior.

169
00:11:29,730 --> 00:11:32,940
Let's just change the name of this blackboard to behavior here.

170
00:11:33,300 --> 00:11:36,950
Two can see player questionmark.

171
00:11:37,340 --> 00:11:38,910
So that's going to be much easier to read.

172
00:11:38,940 --> 00:11:40,860
Now we've got this selector can see the play.

173
00:11:40,920 --> 00:11:41,910
Then we should chase.

174
00:11:42,270 --> 00:11:48,330
Otherwise, we should investigate and we can delete this sequence over here because that is no longer

175
00:11:48,360 --> 00:11:48,900
in use.

176
00:11:49,380 --> 00:11:54,750
So hopefully now you've got a bit of a better understanding of how behavior trees can be linked together

177
00:11:54,750 --> 00:12:01,470
to create choice and sequence and put lots of tasks together to make more complex behaviors really easily

178
00:12:01,920 --> 00:12:02,640
in the next lecture.

179
00:12:02,700 --> 00:12:09,660
We're going to be looking at how we can make our own custom tasks in C++ so that we can get some shooting

180
00:12:09,870 --> 00:12:10,380
action.

181
00:12:10,590 --> 00:12:11,780
I'll see you in the next video.
