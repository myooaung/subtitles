1
00:00:04,270 --> 00:00:09,270
Hello everybody and welcome to part two of checking your characters.

2
00:00:09,310 --> 00:00:16,000
So this is where we are at the moment we're checking each or the first one against everything else but

3
00:00:16,000 --> 00:00:22,960
then we need to move on and check one against two three and four and then two against three and four

4
00:00:22,990 --> 00:00:28,390
and then three against four we never need to do that last one there so we can expand what we've got

5
00:00:28,390 --> 00:00:35,080
here and I'll try and keep my writing as neat as possible we can expand what we've got here to check

6
00:00:35,170 --> 00:00:40,670
the other way as well because essentially what we end up with is a grid.

7
00:00:40,670 --> 00:00:47,500
So we have C A K E S perfect.

8
00:00:47,500 --> 00:00:48,080
Now.

9
00:00:48,400 --> 00:00:54,340
The interesting thing about this grid is we don't need to check things against themselves.

10
00:00:54,340 --> 00:01:01,980
So this check this check this check this check and this check are null and void.

11
00:01:01,990 --> 00:01:03,390
We just don't do them.

12
00:01:03,520 --> 00:01:10,060
Which basically means here that we don't check anything in these particular cells although the cells

13
00:01:10,060 --> 00:01:11,170
are quite hard to read.

14
00:01:11,170 --> 00:01:12,330
Maybe I'll draw some lines.

15
00:01:12,340 --> 00:01:18,700
I think you guys go Well I mean that we don't need to check anything against it now because we don't

16
00:01:18,700 --> 00:01:20,270
check backwards either.

17
00:01:20,310 --> 00:01:28,000
So once we've assessed element or index 0 against everything we don't then check ELEMENT ONE BACK AGAINST

18
00:01:28,690 --> 00:01:31,240
Element Zero just wouldn't make any sense.

19
00:01:31,240 --> 00:01:34,440
So all of these are also null and void.

20
00:01:34,450 --> 00:01:41,410
We don't need to check them in the past backwards and this makes our code quite straightforward because

21
00:01:41,440 --> 00:01:44,990
all we need to do is keep moving forward in this direction.

22
00:01:45,160 --> 00:01:49,710
As you can see here we don't check s against anything which is great.

23
00:01:49,990 --> 00:01:55,630
So the only checks we need to loop around are these ones here which is really useful.

24
00:01:55,630 --> 00:02:00,240
We've already done the first one which is the one you can see at the top here.

25
00:02:00,250 --> 00:02:05,690
We've compared C AGAINST A K E and S..

26
00:02:05,690 --> 00:02:10,530
So this is Element Zero of our index of our word.

27
00:02:10,630 --> 00:02:13,210
And we've checked it against one two three and four.

28
00:02:13,240 --> 00:02:17,430
We then need to increment that after we've done that check.

29
00:02:17,440 --> 00:02:25,240
We need to increment it to the next one element 1 and then we check it once again against K E and s

30
00:02:25,540 --> 00:02:27,880
element two three and four and then we.

31
00:02:28,180 --> 00:02:30,380
And then that's the important thing.

32
00:02:30,460 --> 00:02:31,920
And then we increment it.

33
00:02:31,930 --> 00:02:36,120
We've got to do this check first and then we increment it and then we do the next check.

34
00:02:36,130 --> 00:02:38,680
And then we increment sets and so forth.

35
00:02:38,710 --> 00:02:45,070
And of course when we gets to this one here we should be in this case element 3.

36
00:02:45,130 --> 00:02:50,500
There's no point in incrementing any more so we can actually stop the loop sooner than we would have

37
00:02:50,500 --> 00:02:52,030
done otherwise.

38
00:02:52,030 --> 00:02:55,850
And with that in mind I want to actually jump straight into the challenge.

39
00:02:55,900 --> 00:03:03,070
I think you've got all the information you need in order to create your nested for loop to iterate through

40
00:03:03,070 --> 00:03:07,440
the entire word and check everything against itself.

41
00:03:07,480 --> 00:03:07,780
Okay.

42
00:03:07,810 --> 00:03:13,030
So straight into our challenge here what I'd like you to do is create a nested for loop to go through

43
00:03:13,090 --> 00:03:16,030
each letter and compare it against the others.

44
00:03:16,030 --> 00:03:22,840
Now we've done nested if statements before a nested for loop is exactly the same we'll have a for loop

45
00:03:23,110 --> 00:03:30,340
within a for loop and then our if statement checking within that final for loop if you're really unsure

46
00:03:30,340 --> 00:03:31,330
about that Don't worry.

47
00:03:31,330 --> 00:03:36,370
There are a couple of hints coming up and I'll let you guys pause the video before we get to those if

48
00:03:36,370 --> 00:03:37,690
you think you've got it.

49
00:03:37,690 --> 00:03:42,160
Now remember if any of the characters are the same then it fails the test.

50
00:03:42,160 --> 00:03:43,930
We've already done that in the if statement.

51
00:03:43,960 --> 00:03:49,570
So our current if statement within those nested for loops should be absolutely fine.

52
00:03:49,720 --> 00:03:51,850
And rewrite it for practice.

53
00:03:51,850 --> 00:03:53,620
Now what do I mean by that.

54
00:03:53,620 --> 00:03:58,450
Well if we have a look at our code itself it's almost there it's tempting to change it.

55
00:03:58,660 --> 00:04:01,360
But what I would advise you do is actually rewrite it.

56
00:04:01,390 --> 00:04:06,090
It's better for your coding skills to actually go ahead and retype things out.

57
00:04:06,160 --> 00:04:10,290
Obviously comments out what you've got there and you've got the new code working.

58
00:04:10,660 --> 00:04:16,300
Now if you're happy with that and you're ready to go ahead pulls the video and give that a go if you'd

59
00:04:16,300 --> 00:04:20,740
like one or two hints then hold on a moment.

60
00:04:20,740 --> 00:04:26,500
Your first hint is now so the first loop will be the index.

61
00:04:26,500 --> 00:04:30,730
Then you'll be looping the comparison so that's the order.

62
00:04:30,730 --> 00:04:36,190
If you're happy with that and that's just made you go yes I've got it then pulls a video and give that

63
00:04:36,190 --> 00:04:44,140
a go now don't worry if you need this extra bit of help nested loops and thinking through the logic

64
00:04:44,140 --> 00:04:47,820
of how it runs for a beginner can be challenging.

65
00:04:47,830 --> 00:04:50,650
So this is the layouts that we're going to do now.

66
00:04:50,660 --> 00:04:57,250
I haven't filled in all the blanks I obviously want you to use your brain and try and work out the details

67
00:04:57,250 --> 00:05:00,150
of this but this is roughly how it's going to be laid out.

68
00:05:00,190 --> 00:05:05,700
We're going to have a for loop based upon the index and nested within that.

69
00:05:05,710 --> 00:05:12,620
We're going to have a for loop with the comparison and nested within that we will have our if statement

70
00:05:13,000 --> 00:05:16,630
checking whether two values of the same.

71
00:05:16,720 --> 00:05:22,080
And then we can come out of that we will need to return something should it fail that test.

72
00:05:22,300 --> 00:05:26,930
And then of course we've got our return true at the end.

73
00:05:26,950 --> 00:05:27,430
So there you go.

74
00:05:27,430 --> 00:05:33,390
There are a few hints to get going pulls with you now and give us a go.

75
00:05:33,450 --> 00:05:35,040
Okay everybody Welcome back.

76
00:05:35,070 --> 00:05:41,820
Let's go ahead now and code up our nested for loop that's going to check every character not just against

77
00:05:41,820 --> 00:05:44,900
the first one but against the other ones as well.

78
00:05:45,600 --> 00:05:52,740
OK so back over into V.S. code one thing that I wanted to just point out before we move on is another

79
00:05:52,740 --> 00:05:54,840
alternative way of writing this.

80
00:05:54,840 --> 00:06:04,650
We've got this or this and of course what we could have done here is actually sets the index to zero

81
00:06:05,040 --> 00:06:08,650
and then within this loop done the comparison.

82
00:06:08,910 --> 00:06:09,930
What do I mean by that.

83
00:06:09,960 --> 00:06:18,540
Well let's line 93 let's say and comment that and then we can just remove index equaling zero so we

84
00:06:18,540 --> 00:06:20,370
can set it up like that as well.

85
00:06:20,370 --> 00:06:25,890
And the main difference as I mentioned before is scope comparison is only going to work within the scope

86
00:06:25,890 --> 00:06:32,540
of the for loop index is now available to everything within this function itself.

87
00:06:32,620 --> 00:06:33,320
Okay.

88
00:06:33,510 --> 00:06:37,990
So let's just comment all of that out for the moment.

89
00:06:37,990 --> 00:06:38,410
Thanks for that.

90
00:06:38,430 --> 00:06:40,770
I'm sure just double commented some stuff.

91
00:06:40,800 --> 00:06:43,310
Yes line 94 is double commented.

92
00:06:43,390 --> 00:06:44,050
Here we go.

93
00:06:44,640 --> 00:06:45,060
Right.

94
00:06:45,300 --> 00:06:49,050
Let's make some space at the top here and work out what we're going to do.

95
00:06:49,050 --> 00:06:55,020
So we're going start off with a for loop that's gonna be focused on the index itself.

96
00:06:55,020 --> 00:07:03,690
So we're gonna call this an int 32 index and we'll get a set to equal to zero because that's the first

97
00:07:03,690 --> 00:07:10,670
letter and then whilst the index is less than now it's going to be the word.

98
00:07:10,680 --> 00:07:15,810
Now this is something we're we're familiar with at this point this is pretty much what we've done before.

99
00:07:15,900 --> 00:07:18,270
And then we're going to increment the index.

100
00:07:18,270 --> 00:07:19,370
That's fine.

101
00:07:19,410 --> 00:07:23,890
Now within here this is where we write our second for loop.

102
00:07:23,970 --> 00:07:30,930
So the first for loop is going to iterate around the index but until this reaches the end.

103
00:07:31,050 --> 00:07:36,780
So the comparison when that reaches the end it's going to dropouts again and then increment the index

104
00:07:36,780 --> 00:07:37,140
again.

105
00:07:37,140 --> 00:07:39,260
So starting from the next number up.

106
00:07:39,450 --> 00:07:41,580
That's the important thing here.

107
00:07:41,580 --> 00:07:45,090
So what we've we've got here we've got another in 32.

108
00:07:45,090 --> 00:07:51,600
Now this time I'm in the press tabs so I can just typing comparison rather than oh dear that's about

109
00:07:51,600 --> 00:07:56,410
spelling sorry rather than having to fart around with it.

110
00:07:56,430 --> 00:08:01,880
Now it's not equal to zero is it's it's equal to the index plus one.

111
00:08:02,490 --> 00:08:10,200
And the comparison here whilst it's less than again the word dot Lang and then our parentheses.

112
00:08:10,350 --> 00:08:17,280
Now it is tempting here as I've mentioned before I think to put less than or equal to but by the time

113
00:08:17,280 --> 00:08:24,300
we reach the last letter what that would actually do if we want to do that is it forces out of bounds

114
00:08:24,570 --> 00:08:30,180
and unreal would just crash is like comparing it to a question mark what's what is greater than the

115
00:08:30,180 --> 00:08:31,440
last letter of a word.

116
00:08:31,440 --> 00:08:33,780
Well there isn't an answer there.

117
00:08:33,840 --> 00:08:39,260
Whoops I end up leaving that in however I do realize later on and remove it.

118
00:08:39,450 --> 00:08:41,750
Right now it comes to our if statement.

119
00:08:41,850 --> 00:08:47,850
Now I am tempted to just copy and paste this in but I don't want to do that one thing will do though

120
00:08:47,850 --> 00:08:52,840
is remove this return true other wasn't going to end up repeating myself there.

121
00:08:52,860 --> 00:08:59,310
Okay so this is going to have an if statement in it and we're going to say if the word we're looking

122
00:08:59,310 --> 00:09:10,710
at and then the index is the same as the word comparison then we are going to return false.

123
00:09:10,770 --> 00:09:11,160
Okay.

124
00:09:11,190 --> 00:09:14,330
With that saved let's just run through what this is going to do.

125
00:09:14,340 --> 00:09:19,590
So we're going to start with index at zero then it's going to carry on it's going to go to our next

126
00:09:19,590 --> 00:09:25,860
line of code it's gonna set the comparison to index plus 1 and then it's going to start comparing the

127
00:09:25,860 --> 00:09:32,670
index which is 0 to the comparison which starts off at once it's going to compare 0 to 1 if that is

128
00:09:32,670 --> 00:09:39,330
not true then we will just loop back around again until we reach the end of the words we'll go through

129
00:09:39,420 --> 00:09:45,030
each of the comparison letters the moment we've done that and we drop back out it will increment the

130
00:09:45,030 --> 00:09:52,170
index by 1 and then we're checking the second character against the third fourth fifth etc. and we continue

131
00:09:52,170 --> 00:10:01,140
doing that until we've run out of letters we never assess the very end of the word because we have nothing

132
00:10:01,140 --> 00:10:06,370
more to compare it to as we saw in the sketch at the beginning of this lecture.

133
00:10:06,510 --> 00:10:13,800
So all being well this should be a matter of tidying up a bit of white space I think there's the last

134
00:10:13,800 --> 00:10:19,800
one here and let's save that and before I start deleting all of this lot because it's now redundant

135
00:10:19,800 --> 00:10:21,090
we don't need the comments there.

136
00:10:21,450 --> 00:10:25,170
Let's go ahead and run our game and make sure it's working.

137
00:10:25,170 --> 00:10:28,290
Okay so let's go ahead and compile the code.

138
00:10:28,290 --> 00:10:34,980
Now I won't be able to test every variation but within a few tests we're going to know that it's working

139
00:10:35,010 --> 00:10:36,460
as we would expect it to.

140
00:10:37,280 --> 00:10:39,030
Okay compiling is complete.

141
00:10:39,060 --> 00:10:40,170
Let's play the game.

142
00:10:40,290 --> 00:10:46,440
Now what we're expecting here obviously is if we type something into the right number of we've got a

143
00:10:46,440 --> 00:10:49,540
crash with an out of bounds era did I.

144
00:10:49,540 --> 00:10:52,120
It was like demonstrating something and left it in.

145
00:10:52,140 --> 00:10:53,590
Yes I left it in.

146
00:10:53,610 --> 00:10:54,570
How silly of me.

147
00:10:54,780 --> 00:10:55,350
So there you go.

148
00:10:55,350 --> 00:11:00,840
There's a real example of how when you're demonstrating courage you can leave something in there and

149
00:11:00,840 --> 00:11:02,170
you get the out of bounds error.

150
00:11:02,170 --> 00:11:03,390
That was very confusing.

151
00:11:03,510 --> 00:11:10,600
Okay so let's fire up bull cow again and this time with our code corrected hopefully we won't be crashing.

152
00:11:10,740 --> 00:11:12,690
Unreal this time round.

153
00:11:12,780 --> 00:11:14,630
Let's compile the code.

154
00:11:14,670 --> 00:11:16,620
I feel so silly for doing that.

155
00:11:16,620 --> 00:11:17,970
But never mind.

156
00:11:18,000 --> 00:11:20,840
Okay so let's press play this time.

157
00:11:20,850 --> 00:11:21,360
Excellent.

158
00:11:21,390 --> 00:11:24,000
So when we go bikes we've lost the life.

159
00:11:24,000 --> 00:11:27,760
However if we went b b a k e.

160
00:11:28,320 --> 00:11:33,510
No repeating letters but we know it would have done that anyway because we were checking it against

161
00:11:33,510 --> 00:11:35,610
the first one last time.

162
00:11:35,610 --> 00:11:40,210
So if we type in something like this of course this is not a word at the moment.

163
00:11:40,290 --> 00:11:46,700
No repeating letters no repeating letters guess again you've lost a life.

164
00:11:46,710 --> 00:11:51,730
This seems to be working exactly how I'd wanted to know repeating letters.

165
00:11:51,750 --> 00:11:53,900
In fact that's the same as one that was further up.

166
00:11:53,910 --> 00:11:54,590
Okay.

167
00:11:54,600 --> 00:12:01,500
I'm happy that everything's working as it should do including my mistake earlier.

168
00:12:01,500 --> 00:12:05,100
Isn't that incredible that we've managed to nest two loops together.

169
00:12:05,220 --> 00:12:11,940
And as they go round they're able to assess an entire word just those few lines of code are able to

170
00:12:11,940 --> 00:12:15,110
accomplish that and we're gonna be able to put this to the test.

171
00:12:15,120 --> 00:12:21,240
Now when we go and grab a word list to insert into our game because we need to validate that word list

172
00:12:21,240 --> 00:12:27,650
and make sure that the hidden word that set from it is actually an eyesore gram itself.

173
00:12:27,720 --> 00:12:33,930
Otherwise the player will never be able to guess the correct word and we'll put that together in the

174
00:12:33,930 --> 00:12:34,710
next lecture.
