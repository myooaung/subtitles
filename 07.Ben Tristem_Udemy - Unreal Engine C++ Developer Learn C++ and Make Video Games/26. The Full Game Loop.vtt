WEBVTT
1
00:00:04.210 --> 00:00:05.860
Hello everybody and welcome back.

2
00:00:05.860 --> 00:00:10.510
In this lecture I'd like to take a closer look at the game loop that we've currently got and how we

3
00:00:10.510 --> 00:00:13.960
can expand it to make a more complete game.

4
00:00:13.960 --> 00:00:16.000
Now we have our basic functionality works.

5
00:00:16.000 --> 00:00:19.590
The first thing I want to say to you all is congratulations.

6
00:00:19.690 --> 00:00:21.720
We have a working game now.

7
00:00:21.780 --> 00:00:23.500
It's not a great game at the moment.

8
00:00:23.500 --> 00:00:25.100
That is certainly true.

9
00:00:25.180 --> 00:00:29.350
But we have something that is functionally working which is great.

10
00:00:29.350 --> 00:00:33.470
It means that our code is executing how we intended it to.

11
00:00:33.490 --> 00:00:40.330
Now let's have a think about the rest of the game and map out how it will work and its overall behavior.

12
00:00:40.330 --> 00:00:45.130
So we should start off by thinking closely about where we are at the moment.

13
00:00:45.550 --> 00:00:48.870
So we've currently got I printed a welcome message.

14
00:00:48.910 --> 00:00:51.090
We've hardcoded the hidden word.

15
00:00:51.100 --> 00:00:53.180
We've moved it to the appropriate place now.

16
00:00:53.320 --> 00:00:55.120
And we're asking for a guess.

17
00:00:55.150 --> 00:00:56.140
So that's great.

18
00:00:56.140 --> 00:01:03.410
We then wait for some user inputs and then we got some code simply to check whether or not it's correct.

19
00:01:03.430 --> 00:01:06.030
Now there's much more to do with the assessment of it.

20
00:01:06.240 --> 00:01:11.140
We could check if it's an ISO gram we can check that he's got the right number of characters as so many

21
00:01:11.140 --> 00:01:13.230
other checks that we can put in place here.

22
00:01:13.270 --> 00:01:15.250
But at the moment we're simply assessing.

23
00:01:15.250 --> 00:01:18.580
Did you type in the hidden word or not.

24
00:01:18.580 --> 00:01:24.070
So I'd like to jump straight into a challenge because I want you to all think about how you'd like to

25
00:01:24.070 --> 00:01:26.810
map out the additional game components.

26
00:01:27.030 --> 00:01:27.360
Okay.

27
00:01:27.370 --> 00:01:29.790
So what fundamentally do we need here.

28
00:01:29.830 --> 00:01:31.050
We need some lives.

29
00:01:31.120 --> 00:01:37.060
We need to make sure that the player has enough guesses reasonable amounts to dictate how long or how

30
00:01:37.060 --> 00:01:43.870
many tries they're going to be playing the game for the players inputs also needs checking we can check

31
00:01:43.870 --> 00:01:49.630
whether it's an Isaac Ram we can check to make sure that that is no repeated letters we can check that

32
00:01:49.690 --> 00:01:55.150
it's the right length as well and whether or not you deduct a life if it is one of those things that's

33
00:01:55.150 --> 00:01:56.780
entirely up to you.

34
00:01:57.250 --> 00:02:00.240
Now the wrong answer should deprecate the lives.

35
00:02:00.280 --> 00:02:06.450
So if we've typed in an ice a ground that's the wrong thing we should remove a life after that.

36
00:02:06.460 --> 00:02:09.730
And lives can run out well what happens then.

37
00:02:10.530 --> 00:02:17.550
So what I'd like you to do is take your original flow charts adapt it or make a new one incorporating

38
00:02:17.550 --> 00:02:19.020
these new elements.

39
00:02:19.170 --> 00:02:23.760
And what I show you won't necessarily be the right answer.

40
00:02:23.760 --> 00:02:28.890
There won't be a right answer here when I sat down with Sam when we were prototyping this section.

41
00:02:28.890 --> 00:02:31.400
Both of us came up with slightly different flow charts.

42
00:02:31.500 --> 00:02:32.930
Both of them were right.

43
00:02:32.970 --> 00:02:36.490
Both of them both had logic that would work in them.

44
00:02:36.510 --> 00:02:39.460
We just did some of the things at different points.

45
00:02:39.630 --> 00:02:41.680
Pause a video now and give that a go

46
00:02:45.400 --> 00:02:45.760
okay.

47
00:02:45.770 --> 00:02:47.100
Everybody welcome back.

48
00:02:47.120 --> 00:02:54.200
Let's go ahead now and have a look at the new game loop that I've put together okay.

49
00:02:54.230 --> 00:02:56.510
So I've had to rejig it all fits on the screen.

50
00:02:56.510 --> 00:02:59.870
The first thing we're going to do is print the welcome message.

51
00:02:59.900 --> 00:03:01.390
Welcome to the game.

52
00:03:01.400 --> 00:03:06.410
Let's start at some point we've got to set lives and choose a hidden word.

53
00:03:06.440 --> 00:03:09.120
Now at the moment we're hard coding that hidden word.

54
00:03:09.230 --> 00:03:15.230
But shortly we'll be picking that from a list itself and the lives themselves that will just be a integer

55
00:03:15.230 --> 00:03:16.040
at the moment.

56
00:03:16.100 --> 00:03:22.690
And eventually we may sets that to the length of the hidden word or something along those lines.

57
00:03:22.940 --> 00:03:25.970
And then we're prompting the player for a guess.

58
00:03:26.060 --> 00:03:27.840
Then we need to wait for their input.

59
00:03:27.860 --> 00:03:32.130
So at this point we're just waiting for the player to type something in on that terminal.

60
00:03:32.240 --> 00:03:40.610
And then once they've pressed enter we need to assess whether or not it's valid and correct and if yes

61
00:03:40.730 --> 00:03:42.490
of course you've won the game.

62
00:03:42.500 --> 00:03:45.400
Now this new branch that's about to appear when we go.

63
00:03:45.430 --> 00:03:45.870
No.

64
00:03:46.450 --> 00:03:48.590
Well this is the new parts of the game.

65
00:03:48.590 --> 00:03:57.130
So this is where we can then this is where we can then subtract a life then we need to assess whether

66
00:03:57.130 --> 00:03:59.110
or not the lives are greater than zero.

67
00:03:59.110 --> 00:04:01.430
Has the player run out of lives.

68
00:04:01.450 --> 00:04:07.350
If not then we can just ask for a guess again and just keep looping round.

69
00:04:07.390 --> 00:04:14.380
But if the lives have reached zero I you've run out of lives then you've failed the game so we prints

70
00:04:14.380 --> 00:04:18.820
out a failed message and he prompts the player whether they want to play again.

71
00:04:19.000 --> 00:04:24.300
And then we have to wait for user inputs again once they've given that we can assess it.

72
00:04:24.340 --> 00:04:28.080
And if yes we simply set the lives and choose the hit and word again.

73
00:04:28.090 --> 00:04:32.980
Now initially as I've said that will be the same number of lives and the same hit and words we can test

74
00:04:32.980 --> 00:04:33.640
everything.

75
00:04:33.640 --> 00:04:36.540
But eventually we'll be able to pull from a list of words.

76
00:04:36.640 --> 00:04:39.030
So then we can test our real skills.

77
00:04:39.040 --> 00:04:44.200
And of course if the player selects no then we quit the game and we leave.

78
00:04:44.230 --> 00:04:44.950
So there we go.

79
00:04:44.980 --> 00:04:50.460
That's our new game loop as you can see it's a bit more complicated than it was originally but it's

80
00:04:50.470 --> 00:04:54.330
encapsulated all of the high level logic that we need to think about.

81
00:04:54.340 --> 00:04:59.610
There are some details in here but we'll get to those details in the next lecture.

82
00:04:59.770 --> 00:05:04.660
Please share your flow charts over on the forum I'd like to see how you thought about the progression

83
00:05:04.690 --> 00:05:05.660
of your game.

84
00:05:05.680 --> 00:05:08.940
Have you got some extra steps that you want to include in your game.

85
00:05:08.950 --> 00:05:10.570
I'd love to see what you've come up with.

86
00:05:10.570 --> 00:05:14.950
Please share your work over on the forum and I'll see you all in the next lecture.
