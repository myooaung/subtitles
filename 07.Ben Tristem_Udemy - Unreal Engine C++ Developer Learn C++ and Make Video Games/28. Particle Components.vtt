WEBVTT
1
00:00:04.300 --> 00:00:07.900
We've now looked to how to spawn the particle emitters at runtime.

2
00:00:08.020 --> 00:00:13.600
We can also implement them as particle components, which is what we want to do for the trail effect

3
00:00:13.630 --> 00:00:19.030
to get the result looking like this, which will allow this projectile to keep spawning the particles

4
00:00:19.090 --> 00:00:23.530
over its life based on the updating position of the projectile.

5
00:00:24.130 --> 00:00:29.920
So back in the projecto header, we're just going to create a new pointer to the new particle system

6
00:00:29.920 --> 00:00:32.710
component type named particle trial.

7
00:00:35.390 --> 00:00:40.910
We can, of course, copy the property from any of the existing components as well, want all of these

8
00:00:40.910 --> 00:00:43.410
same metter information here and the U.

9
00:00:43.580 --> 00:00:49.400
Particle system component is essentially a component class, much like our Sene components that we've

10
00:00:49.400 --> 00:00:55.550
been using, which means that we can attach this directly to an actor or another component within an

11
00:00:55.550 --> 00:01:00.680
actor in our classes and also give it a position in the world, which is what we're going to want to

12
00:01:00.680 --> 00:01:01.010
do.

13
00:01:01.280 --> 00:01:04.380
We're going to stick this to the back end of our projecto.

14
00:01:04.810 --> 00:01:08.660
And then inside of this component, all is really doing, of course, is managing quite a lot of stuff

15
00:01:08.660 --> 00:01:09.800
in the C++ code.

16
00:01:09.920 --> 00:01:13.100
But it just has housed within the component a U.

17
00:01:13.160 --> 00:01:18.170
Particle system, just like the one that we've used previously, which will allow us to attach this

18
00:01:18.170 --> 00:01:24.170
permanently to our projecto so that it will follow the position, like with any other scene component

19
00:01:24.170 --> 00:01:25.220
that we've used before.

20
00:01:25.580 --> 00:01:32.030
So if that declared as a new property in our header, we can move over to our code file and we just

21
00:01:32.030 --> 00:01:36.620
need to include the library where this is found, which is the particles.

22
00:01:36.650 --> 00:01:39.950
Forward slash particle system component dot h.

23
00:01:41.280 --> 00:01:47.640
Then as a quick challenge for you, just like you to create and then attach the new part component to

24
00:01:47.640 --> 00:01:51.710
the root component that we already have, so pause the video and give that one to go.

25
00:01:53.140 --> 00:01:53.280
OK.

26
00:01:53.490 --> 00:01:55.590
So we've done this plenty of times at this point.

27
00:01:55.650 --> 00:01:56.760
So let's go through this one.

28
00:01:58.430 --> 00:02:03.620
We just need to say that our particle trial is equal to create default sub object.

29
00:02:04.910 --> 00:02:09.230
Of the type you particle system component and then provide some text.

30
00:02:09.470 --> 00:02:11.300
I've gone for particle travel.

31
00:02:13.490 --> 00:02:17.700
Then for the attachments will set the particle trail to set up attachment.

32
00:02:18.820 --> 00:02:21.250
And attach it to the root component.

33
00:02:23.330 --> 00:02:25.640
And that's really all that we needed to do for this class.

34
00:02:25.940 --> 00:02:28.330
We can now head back over to the editor.

35
00:02:28.670 --> 00:02:30.020
With those changes compiled.

36
00:02:31.520 --> 00:02:36.960
When that's ready, we just need to go in to the projectile blueprint and set the new projectile to

37
00:02:37.130 --> 00:02:40.040
template to the projectile trail emitter.

38
00:02:43.550 --> 00:02:47.750
And then when we press play with these changes made, we can see that's working pretty well.

39
00:02:49.960 --> 00:02:55.210
So this is also going to allow us to hide the distance that we're spawning this away from the tank turret

40
00:02:55.510 --> 00:02:56.310
as an example here.

41
00:02:56.350 --> 00:03:00.670
I've set mine to be 100 units forward of the end of the turret.

42
00:03:01.030 --> 00:03:04.060
And I'd recommend playing around with some of the values here.

43
00:03:04.810 --> 00:03:09.880
If you move this a little bit too far away, you get the results looking kind of too obvious that the

44
00:03:09.910 --> 00:03:11.650
projectile was falling randomly in the air.

45
00:03:12.310 --> 00:03:17.440
And if you move it too close to the turret, the projectile is likely to hit another component within

46
00:03:17.440 --> 00:03:21.340
the tank and end up destroying itself or getting stuck on.

47
00:03:21.520 --> 00:03:23.240
Depending on your project setup.

48
00:03:23.680 --> 00:03:26.470
So I think for this example, 100 units works really well.

49
00:03:26.680 --> 00:03:28.810
It avoids the initial collision when we're moving.

50
00:03:29.050 --> 00:03:30.160
So I'm going to leave it.

51
00:03:30.160 --> 00:03:30.760
Is this.

52
00:03:30.970 --> 00:03:36.010
And because of the new particle system, I think this is actually looking pretty cool because that initial

53
00:03:36.010 --> 00:03:41.020
puff of smoke is kind of appearing at the very end of the barrel, which looks like that's kind of being

54
00:03:41.020 --> 00:03:43.390
forced out of the barrel and then firing that projectile.

55
00:03:43.420 --> 00:03:45.370
So for me, that's looking pretty cool.

56
00:03:45.800 --> 00:03:51.130
With that done, though, we've now seen the two main ways that that we can use the particles in our

57
00:03:51.130 --> 00:03:57.190
C++ code, either by spoiling them at runtime or implementing them as a component, as we've now done

58
00:03:57.250 --> 00:03:59.530
many times before in the project.
