1
00:00:04,730 --> 00:00:10,790
Hello and welcome in this lecture, we are going to be sorting out the angle of our BLENDE space, hooking

2
00:00:10,790 --> 00:00:12,110
that up to our game play.

3
00:00:12,290 --> 00:00:17,530
And in the process, we got to learn a lot of maths, a lot of transforms and vectors.

4
00:00:17,630 --> 00:00:20,420
So let's dive in and figure out how that works.

5
00:00:22,620 --> 00:00:27,060
OK, so we want to be able to get the angle at which we should be moving.

6
00:00:27,870 --> 00:00:34,680
However, before we do that, we need to do a little bit of maths because we want to understand how

7
00:00:34,710 --> 00:00:37,870
we can get this angle, which is local to the player.

8
00:00:38,470 --> 00:00:44,790
And I'll explain why that what I mean by local and global and how we can get that from a global velocity

9
00:00:44,820 --> 00:00:46,540
and what those terms mean anyway.

10
00:00:47,280 --> 00:00:48,060
So let's have a look.

11
00:00:48,060 --> 00:00:53,090
First of all, we need to have a bit of a basic primer on transforms and what transforms.

12
00:00:53,170 --> 00:00:56,370
We've seen them or you have seen them a little bit before.

13
00:00:56,940 --> 00:01:02,010
When you look at any of the seen components that these ones in the hierarchy, you can see they have

14
00:01:02,010 --> 00:01:02,640
a transform.

15
00:01:02,640 --> 00:01:05,670
Here's the location, rotation, scale properties.

16
00:01:05,700 --> 00:01:07,500
That's basically what a transform is.

17
00:01:08,190 --> 00:01:12,990
But one thing that you're not seeing here is that also part of this transform is the fact that these

18
00:01:12,990 --> 00:01:20,070
same components are in a hierarchy, meaning that the transform also has a parent or, you know, basically

19
00:01:20,070 --> 00:01:20,850
hierarchical.

20
00:01:21,600 --> 00:01:23,250
So how does that work?

21
00:01:23,490 --> 00:01:26,460
Well, here's a kind of toy example.

22
00:01:26,460 --> 00:01:28,940
We've got the cube here, which is our base.

23
00:01:28,950 --> 00:01:30,840
It's the center of our world or something.

24
00:01:31,330 --> 00:01:33,510
And so that's gonna be our world space.

25
00:01:34,140 --> 00:01:39,930
We've got this character here, the little smiley face, and he's got a position in the world relative

26
00:01:39,930 --> 00:01:41,400
to his home base.

27
00:01:42,270 --> 00:01:47,700
And then this character has a gun and the gun has a position relative to the character.

28
00:01:47,760 --> 00:01:53,130
So the way this hierarchy works is that the parents of the gun is the character.

29
00:01:53,140 --> 00:01:56,430
The parents of the character is his home base or the world.

30
00:01:57,810 --> 00:02:01,800
And then we have some local coordinate systems within these.

31
00:02:01,800 --> 00:02:06,450
So the worlds coordinate system is the the world system, the global system.

32
00:02:07,140 --> 00:02:12,450
Then the coordinates of our character are then local to its position.

33
00:02:12,480 --> 00:02:15,870
So the gun is positioned relative to its character.

34
00:02:15,900 --> 00:02:16,650
What does that mean?

35
00:02:17,100 --> 00:02:22,710
That means that if the character decides to go off on a little escapade, then the gun moves with it

36
00:02:22,740 --> 00:02:26,790
because the position of the gun relative to the character has remained the same.

37
00:02:27,180 --> 00:02:30,930
But because the character has moved, its position in the world has moved.

38
00:02:31,860 --> 00:02:33,630
Same happens with rotation.

39
00:02:33,850 --> 00:02:35,490
Here, the character turns around.

40
00:02:35,520 --> 00:02:37,500
The gun must turn around as well.

41
00:02:38,340 --> 00:02:41,250
That's how transforms work, essentially has also scale.

42
00:02:41,280 --> 00:02:42,360
But we're not going to look at scale.

43
00:02:42,360 --> 00:02:45,330
It's the same, but it's it's just complicating things.

44
00:02:45,330 --> 00:02:46,860
And we don't need to do.

45
00:02:46,950 --> 00:02:48,810
Have a look at that's not relevant to us.

46
00:02:50,070 --> 00:02:52,320
So let's have a look, a different look at this.

47
00:02:52,350 --> 00:02:54,720
We've got global space and local space.

48
00:02:54,750 --> 00:03:01,950
So the global space has the base at the center of the world and the character has gone off.

49
00:03:01,980 --> 00:03:06,990
And to the right, the local space, on the other hand, sees things in the opposite light.

50
00:03:07,020 --> 00:03:13,470
It says that the character is the center of the world and that the base has gone over to the left,

51
00:03:13,850 --> 00:03:14,740
has gone backwards.

52
00:03:14,810 --> 00:03:17,280
You know, that's the difference between global and local.

53
00:03:17,280 --> 00:03:19,250
It all depends on your point of view.

54
00:03:19,260 --> 00:03:20,370
Everything is relative.

55
00:03:20,820 --> 00:03:26,700
So this is what we mean when we talk about transforming between global and local space.

56
00:03:27,480 --> 00:03:29,160
And which one are we interested in?

57
00:03:29,460 --> 00:03:34,830
For our angle, we're interested in a local angle relative to where the player is looking.

58
00:03:35,220 --> 00:03:38,550
We're saying, you know, are we moving over to the right?

59
00:03:38,970 --> 00:03:42,210
That's what we're saying, that not globally, but locally.

60
00:03:42,230 --> 00:03:45,290
Are we moving to the right locally to our player?

61
00:03:45,330 --> 00:03:47,700
Because I favor players turned around 180 degrees.

62
00:03:48,000 --> 00:03:51,330
He shouldn't play a left animation just because he turned around.

63
00:03:52,170 --> 00:03:59,100
So one more important distinction is how we do transformations for vectors of different sorts.

64
00:03:59,820 --> 00:04:04,190
The first example I want to look at is a position vector.

65
00:04:04,770 --> 00:04:12,900
So a position vector basically is a vector that gives us the difference between the current location

66
00:04:13,410 --> 00:04:19,740
or the zero point in our coordinate system, which, when we are focused on the character, is the character

67
00:04:19,740 --> 00:04:20,370
himself.

68
00:04:20,940 --> 00:04:24,720
And then it gives us an arrow that points to where something should be.

69
00:04:24,990 --> 00:04:28,410
So in this case, it is the gun location vector.

70
00:04:29,070 --> 00:04:34,140
Now, if we transform this in that to our worldspace, this is what happens.

71
00:04:34,170 --> 00:04:39,180
The arrow now points from the center of our new world, the global space.

72
00:04:39,300 --> 00:04:40,410
And it points to the gun.

73
00:04:41,160 --> 00:04:44,910
So that's what happens if you transform a position vector.

74
00:04:45,540 --> 00:04:49,470
Now, if you do a direction vector, things look a little bit different.

75
00:04:49,500 --> 00:04:57,240
A direction vector is one that says this is the way I should point, not necessarily where a thing is.

76
00:04:58,290 --> 00:05:06,240
And this transforms rather differently because we now aren't interested in it pointing to the same location.

77
00:05:06,510 --> 00:05:09,930
So that position doesn't really get updated.

78
00:05:10,260 --> 00:05:15,180
Instead, it get the fact to get some rotated and scaled or whatever it is.

79
00:05:15,690 --> 00:05:19,170
And we end up with it looking a little bit like this.

80
00:05:19,860 --> 00:05:21,750
So that's actually the kind of transfer.

81
00:05:21,810 --> 00:05:27,180
Motion that we want to be doing because we're dealing with a velocity, which is a direction vector

82
00:05:27,210 --> 00:05:28,380
rather than a position vector.

83
00:05:28,660 --> 00:05:31,410
Velocity doesn't tell us anything about where we should be.

84
00:05:31,410 --> 00:05:36,540
It tells us about what direction we should be going in and how fast we should be going in that direction.

85
00:05:38,680 --> 00:05:45,310
So with that theory out of the way, let's go ahead and calculate our direction from this velocity.

86
00:05:45,340 --> 00:05:48,460
So we know the velocity is in the global space.

87
00:05:49,240 --> 00:05:51,970
And we want to convert it to local space.

88
00:05:52,330 --> 00:05:57,430
Now, that means that, generally speaking, we're always trying to do things the other way round,

89
00:05:57,460 --> 00:06:01,390
usually because we're saying, well, we've got the position, the local position of a gun.

90
00:06:01,420 --> 00:06:02,740
It's local transform.

91
00:06:03,070 --> 00:06:10,060
We want to figure out what it is in WorldSpace so that we can render it relative to everything else.

92
00:06:10,630 --> 00:06:12,610
Now, that's not what we're trying to do here.

93
00:06:12,640 --> 00:06:13,870
We're trying to do the opposite.

94
00:06:13,900 --> 00:06:17,320
So what we actually want is called an inverse transform.

95
00:06:17,320 --> 00:06:19,900
The transform goes this way from local to global.

96
00:06:20,290 --> 00:06:22,930
The inverse transform goes from global to local.

97
00:06:23,770 --> 00:06:28,030
So because we've got this global velocity, we want to inverse transforms.

98
00:06:28,060 --> 00:06:32,250
Let's take off here and look for inverse transform.

99
00:06:32,410 --> 00:06:34,880
And you can see that we've got these two options.

100
00:06:34,900 --> 00:06:36,580
We don't care about these matrix ones.

101
00:06:36,940 --> 00:06:40,000
We've got the two options of four direction and location.

102
00:06:40,000 --> 00:06:44,860
And as I said, the difference is that a location will move that position around.

103
00:06:45,210 --> 00:06:49,480
The direction is just going to apply the rotation and scale.

104
00:06:49,780 --> 00:06:51,010
So we want the direction.

105
00:06:52,010 --> 00:06:57,350
We need a transformer to rotate it by, we're gonna have to get that transform of the pawn itself of

106
00:06:57,350 --> 00:06:59,780
the character, where is that pawn in the world?

107
00:07:00,320 --> 00:07:04,850
So let's go ahead and grab off the pawn owner and look for the transform.

108
00:07:06,220 --> 00:07:08,890
Property get actor transformed, that would be the one.

109
00:07:09,490 --> 00:07:13,150
We'll pipe that into our inversed transform direction.

110
00:07:13,650 --> 00:07:16,240
And we've got ourselves a new vector out of this.

111
00:07:17,900 --> 00:07:22,040
So the next step would be to get the rotation of this vector.

112
00:07:22,220 --> 00:07:25,430
So we're looking to look for rotation.

113
00:07:25,460 --> 00:07:26,810
See what we can find.

114
00:07:27,440 --> 00:07:31,520
We've got fine look rotation, make rotation axes to Kitani on.

115
00:07:31,590 --> 00:07:35,120
Now let's have a look at rotation from X vector.

116
00:07:36,390 --> 00:07:42,240
If you read the documentation here, it says it's going to set the yaw and pitch from this vector,

117
00:07:42,540 --> 00:07:45,780
but it won't set the roll because it can't get that information from a vector.

118
00:07:45,810 --> 00:07:46,500
That's fine.

119
00:07:46,770 --> 00:07:48,690
We don't care about the role in this case.

120
00:07:48,780 --> 00:07:53,210
All we care about is the yaw because we want to see how far we turn to the right or left.

121
00:07:53,220 --> 00:07:56,400
So rotation from X vector, that's the one that we want.

122
00:07:56,700 --> 00:07:57,600
It's going to return.

123
00:07:57,610 --> 00:07:58,890
It's a rotator.

124
00:07:59,700 --> 00:08:02,220
And for us to get just the you're from that rotates.

125
00:08:02,220 --> 00:08:02,790
We're going to right.

126
00:08:02,790 --> 00:08:06,940
Click on the pen and hit split struct pen.

127
00:08:07,280 --> 00:08:11,400
She goes ahead and splits that struct into this role pitch and your.

128
00:08:11,610 --> 00:08:13,140
You could do that on a vector as well by the way.

129
00:08:13,140 --> 00:08:13,740
I think you can.

130
00:08:13,740 --> 00:08:13,980
Right.

131
00:08:13,980 --> 00:08:15,450
Click and let's see.

132
00:08:16,590 --> 00:08:18,960
I think I'd have to break the link to do it so I'm not going to show you.

133
00:08:19,500 --> 00:08:21,870
But basically we've now got our your here.

134
00:08:22,080 --> 00:08:23,220
And that's what we want to set.

135
00:08:23,250 --> 00:08:27,900
So again, many challenge set up the yaw to be the angle and test it out.

136
00:08:29,050 --> 00:08:35,320
So, again, many challenge set up the your to be our angle variable that goes into the BLENDE space

137
00:08:35,790 --> 00:08:39,910
and test it out, try it out in the game and see if you're able to run around successfully.

138
00:08:41,300 --> 00:08:41,880
Kay, welcome back.

139
00:08:41,910 --> 00:08:47,990
So we're going to drag in again our angle variable set angle, going to set the angle from the your.

140
00:08:48,300 --> 00:08:53,030
And we're going to get the execution pin from the end of speed in a compile and save.

141
00:08:53,140 --> 00:08:56,640
That's and we're going to go over to the sandbox and hit play.

142
00:08:58,330 --> 00:09:03,760
And now let's try moving around a controller would be ideal so you can test out the different gradients

143
00:09:04,190 --> 00:09:09,880
and that nuance says and sure enough, you can see if I start moving around now, I'm able to move backwards.

144
00:09:09,880 --> 00:09:14,860
I'm able to move forward, sprinting and sideways and 45 degrees.

145
00:09:14,890 --> 00:09:20,350
All of that works based on the maths that we've calculated to calculate our angle.

146
00:09:21,710 --> 00:09:22,120
Great stuff.

147
00:09:22,140 --> 00:09:27,380
So we've learned a lot about transforms and vectors and how you can transform vectors.

148
00:09:27,900 --> 00:09:30,240
Both inverse and forward transforming.

149
00:09:30,750 --> 00:09:36,510
And in the next act, you're going to look at fixing this foot sliding that we are seeing here.

150
00:09:36,870 --> 00:09:37,470
I'll see you there.
