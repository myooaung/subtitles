0
1
00:00:00,700 --> 00:00:05,520
Hey and welcome to this lesson where we're going to start adding some replayability into TripleX.
1

2
00:00:05,620 --> 00:00:11,380
Now currently when we play our game once it exits but by the end of this lesson we're going to be able
2

3
00:00:11,380 --> 00:00:14,560
to continue playing after we complete the level.
3

4
00:00:14,560 --> 00:00:18,840
So to get started with this we're going to be taking a look at a while loop.
4

5
00:00:19,030 --> 00:00:21,100
It looks very similar to an if statement.
5

6
00:00:21,290 --> 00:00:25,740
But here we are using the keyword while which is all lowercase.
6

7
00:00:25,750 --> 00:00:30,960
And then we provide a condition within the parentheses just like how we do with an if statement.
7

8
00:00:31,190 --> 00:00:36,310
But the difference here and the main idea behind the while loop is the compound statement we provide
8

9
00:00:36,460 --> 00:00:40,300
will loop continuously while the condition is true.
9

10
00:00:40,960 --> 00:00:45,790
So another way to think of this is that the code block will execute repeatedly until the condition is
10

11
00:00:45,790 --> 00:00:47,050
not met.
11

12
00:00:47,050 --> 00:00:49,720
For example if the condition is false.
12

13
00:00:49,720 --> 00:00:55,120
Now we need to be careful here when working with while loops because you could end up in a situation
13

14
00:00:55,360 --> 00:00:59,450
where you've unintentionally found yourself in an endless loop.
14

15
00:00:59,530 --> 00:01:03,910
So there's something I want you to remember at any point while you are running your program you can
15

16
00:01:03,910 --> 00:01:07,770
press control C to stop your program from running.
16

17
00:01:07,770 --> 00:01:11,770
That we'll be taking a look at a situation where we need to do this shortly but we will fix this so
17

18
00:01:11,770 --> 00:01:14,210
we won't have to kill the program again.
18

19
00:01:14,230 --> 00:01:19,990
So right now I want you to pause here and implement a while loop into your main function and hard code
19

20
00:01:19,990 --> 00:01:26,410
the condition as true for now and then add a code block for it that executes our play game function.
20

21
00:01:26,470 --> 00:01:30,910
Then once you've done this we can continue and take a look at how this all works together
21

22
00:01:33,710 --> 00:01:33,990
okay.
22

23
00:01:34,010 --> 00:01:39,680
So I have implemented my while loop into my main function and I've hardcoded the condition as true to
23

24
00:01:39,680 --> 00:01:43,400
repeat my play game function within this code block.
24

25
00:01:43,400 --> 00:01:49,130
Now just to make it clear the while loop is going to start by executing play game our program will then
25

26
00:01:49,190 --> 00:01:52,970
run through all of the code of play game.
26

27
00:01:53,060 --> 00:01:58,550
And remember when we get to our cin line the program will pause and wait for input.
27

28
00:01:58,550 --> 00:02:02,840
Then once the player enters the guess the program will continue running through the code of play game
28

29
00:02:03,050 --> 00:02:09,100
and then once it gets to the end the while loop will call play game again and it will repeat every step.
29

30
00:02:09,110 --> 00:02:10,220
Just as we've just seen.
30

31
00:02:10,640 --> 00:02:17,800
So let's try this to save our work that's compile our code and let's run Triple X  .
31

32
00:02:17,810 --> 00:02:20,020
The program runs if we enter the correct answer.
32

33
00:02:20,030 --> 00:02:22,340
Notice that it repeats the game again.
33

34
00:02:22,430 --> 00:02:25,160
But I have another issue here with regards to new lines.
34

35
00:02:25,160 --> 00:02:30,380
My program is starting on the same line as the last string printed to the terminal to fix this.
35

36
00:02:30,380 --> 00:02:35,570
I'm going to add the backslash and escape sequence at the start of our print introduction function where
36

37
00:02:35,570 --> 00:02:37,890
we print our first string to the terminal.
37

38
00:02:38,390 --> 00:02:42,380
But I'm also going to add another backslash end as well just to give it some more space.
38

39
00:02:42,380 --> 00:02:47,930
Now if we press control C to stop our program from running because it's still waiting for input we can
39

40
00:02:48,110 --> 00:02:49,190
break out the program.
40

41
00:02:49,310 --> 00:02:57,020
We can compile our code again and then we can run Triple X and now if we enter two three four as the
41

42
00:02:57,020 --> 00:03:01,230
correct answer we can see we have a bit more space between our messages here.
42

43
00:03:01,340 --> 00:03:04,280
Another program repeats so I mentioned the endless loop.
43

44
00:03:04,280 --> 00:03:08,990
This means that the code in our program will loop endlessly and there's no way it can stop and in some
44

45
00:03:08,990 --> 00:03:15,500
cases it can cause our computer to crash and we can end up in an endless loop with Triple X.
45

46
00:03:15,500 --> 00:03:18,920
If we end up using any character other than a number in the terminal.
46

47
00:03:18,920 --> 00:03:24,560
So for example if I typed in 2 for X noticed that we've ended up in an endless loop.
47

48
00:03:24,680 --> 00:03:27,430
So we want to press control C to jump out of this.
48

49
00:03:27,560 --> 00:03:30,020
But let's add a real fix for this right now.
49

50
00:03:30,020 --> 00:03:35,270
So this is happening because anytime whenever we call cin and then enter character other than a number
50

51
00:03:35,270 --> 00:03:37,840
into the terminal it results in an error.
51

52
00:03:38,000 --> 00:03:44,660
And any future attempts to call or use cin will fail and because we've used the while loop our play
52

53
00:03:44,660 --> 00:03:49,310
game function just endlessly executes without pausing at our cin lines.
53

54
00:03:49,340 --> 00:03:52,220
This is why we have the endless loop so to fix this.
54

55
00:03:52,220 --> 00:03:57,230
We need to add some code in our while loop below our play game function.
55

56
00:03:57,260 --> 00:04:00,960
We're not going to worry too much about the details we're going to add this line here.
56

57
00:04:01,010 --> 00:04:06,530
That clears any errors in relation to input but we need to add another line too because if a player
57

58
00:04:06,530 --> 00:04:10,520
enters a bad character it will still be left over in the input buffer.
58

59
00:04:10,520 --> 00:04:15,340
Even after we clear the error away so we need to add this line here to to fix that.
59

60
00:04:15,560 --> 00:04:19,520
I'm skipping over the details here because we're only going to need to do this once and we'll never
60

61
00:04:19,520 --> 00:04:21,360
need to do this in Unreal.
61

62
00:04:21,360 --> 00:04:25,940
But if you want to discuss these lines of code more in detail why not post in the community forum and
62

63
00:04:25,940 --> 00:04:27,840
chat with your fellow students.
63

64
00:04:27,890 --> 00:04:32,210
But for now I want you to pause here and look at these lines of code carefully.
64

65
00:04:32,210 --> 00:04:38,270
Notice the periods here too and implement these lines into a while loop after play game is called
65

66
00:04:41,940 --> 00:04:42,370
Okay
66

67
00:04:42,390 --> 00:04:45,120
These lines of code fixed our endless loop issue.
67

68
00:04:45,120 --> 00:04:52,230
Now if we save our work compile our code and run a Triple X and try entering any bad characters we can
68

69
00:04:52,230 --> 00:04:56,690
see that the level just restarts and we can't go into this endless loop.
69

70
00:04:56,700 --> 00:05:01,070
Even if we write Triple X here it still doesn't cause any endless loops.
70

71
00:05:01,200 --> 00:05:01,800
Awesome stuff.
71

72
00:05:01,830 --> 00:05:07,350
So remember we need to press control C to exit the program so we're going to switch gears now and take
72

73
00:05:07,350 --> 00:05:11,490
a look at how we can make our play game function return some data.
73

74
00:05:11,490 --> 00:05:13,500
Currently it returns no data.
74

75
00:05:13,500 --> 00:05:15,910
That's why we use the keyword void.
75

76
00:05:15,930 --> 00:05:22,350
But we wanted to return if the player has successfully completed the level, in order to do this.
76

77
00:05:22,410 --> 00:05:27,510
We need to start working with booleans and we've technically already been using boolean.
77

78
00:05:27,510 --> 00:05:33,200
So far we've been working with the conditions in our if statements and wild statements and we hardcoded
78

79
00:05:33,390 --> 00:05:38,390
true or false and that's all a billion is is a value that is true or false.
79

80
00:05:39,710 --> 00:05:45,140
Now before we take a look at our play game function we're going to start by declaring a new variable
80

81
00:05:45,380 --> 00:05:52,040
in our while loop and this will be used to store if the player has completed the current level.
81

82
00:05:52,040 --> 00:05:58,140
Remember when we declared our variables CodeA and GuessA variables like that they were integers.
82

83
00:05:58,220 --> 00:06:00,050
But we're going to follow the same guidelines here.
83

84
00:06:00,050 --> 00:06:06,140
We're going to start with a data type and for boolean we need to use a keyword bool, then we can enter
84

85
00:06:06,140 --> 00:06:11,500
the variable name and we also want to conform to Unreal's coding standard here. In their documentation
85

86
00:06:11,510 --> 00:06:16,470
they list that all boolean variable names must be prefixed with a lower case b.
86

87
00:06:16,520 --> 00:06:23,030
So let's follow these guidelines and call our variable bLevelComplete and we're not going to initialize
87

88
00:06:23,030 --> 00:06:23,660
this just yet.
88

89
00:06:23,660 --> 00:06:26,370
So we can end this line with a semicolon.
89

90
00:06:26,390 --> 00:06:32,510
Now I want you to change the type of data your play game function returns by changing the data type
90

91
00:06:32,510 --> 00:06:35,680
for play game from void to bool.
91

92
00:06:35,690 --> 00:06:40,640
So I want you to pause here to do this and then I want you to compile your code and see what happens.
92

93
00:06:44,540 --> 00:06:49,390
Okay so I've changed the data type of play game from a void to bool.
93

94
00:06:49,430 --> 00:06:54,140
Now if you've done this too you should notice that when you tried to compile the compiler tells us  that
94

95
00:06:54,140 --> 00:06:58,220
there's an error, "play game must return a value."
95

96
00:06:58,220 --> 00:07:06,260
Now remember that's our main function returns an integer so our play game function must return a boolean
96

97
00:07:06,680 --> 00:07:12,230
and it must return a boolean that's every possible place where our function can end.
97

98
00:07:12,230 --> 00:07:19,070
And in our play game function the function can end in two possible places it can end in over our if
98

99
00:07:19,280 --> 00:07:20,840
or else statements.
99

100
00:07:20,840 --> 00:07:25,340
So to return a boolean that tells us if the player has won the game or if they've completed the level
100

101
00:07:25,670 --> 00:07:29,090
we can simply return true in our if statement.
101

102
00:07:29,090 --> 00:07:34,310
And if the player has failed that level we can simply return false in our else statement.
102

103
00:07:34,370 --> 00:07:34,820
Awesome.
103

104
00:07:34,820 --> 00:07:38,510
So now our play game function handles playing our game and it returns.
104

105
00:07:38,510 --> 00:07:44,720
If the player has completed the current level or not. So now because this function returns a boolean
105

106
00:07:44,840 --> 00:07:50,980
we can initialize our level complete boolean variable with the results of our play game function.
106

107
00:07:51,020 --> 00:07:57,860
So where we declare our variable bLevelComplete we can initialize it with the result of play game and
107

108
00:07:57,860 --> 00:08:03,830
we can remove the line where we call play game just below. Amazing so we use the while loop to loop our
108

109
00:08:03,830 --> 00:08:09,600
game and every time we play it it tells us if the player has completed that level or not and we'll go
109

110
00:08:09,600 --> 00:08:14,990
to see why we're making our play game function return a boolean in the next lesson we'll be taking a
110

111
00:08:14,990 --> 00:08:17,660
look at how we can increase the game's difficulty.
111

112
00:08:17,660 --> 00:08:19,960
So when you're ready I'll see you in the next lesson.
