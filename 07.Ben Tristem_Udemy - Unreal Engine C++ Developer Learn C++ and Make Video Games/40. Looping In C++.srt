1
00:00:05,560 --> 00:00:07,450
Hello everybody and welcome back in this lecture.

2
00:00:07,450 --> 00:00:13,690
We're gonna have a closer look at looping in C++ now the broadly speaking there are four different types

3
00:00:13,690 --> 00:00:18,820
of looping and in this lecture we're going to cover three of them in detail and just mention the other

4
00:00:18,820 --> 00:00:23,620
one and we might look at that later on in the section and certainly later on in the course.

5
00:00:23,620 --> 00:00:30,700
So the while loop itself is one variance and then we have a do while which we will see is like an inverse

6
00:00:30,700 --> 00:00:32,030
of the while loop.

7
00:00:32,110 --> 00:00:36,700
Now a for loop is another option so those are the three that we're going to look at in this lecture.

8
00:00:36,760 --> 00:00:42,710
And one interesting thing is that a four and a while loop are essentially the same type of loop.

9
00:00:42,760 --> 00:00:48,550
However they are written differently and also they tend to be used differently as well depending on

10
00:00:48,760 --> 00:00:55,180
what type of loop you're running through a do while loop has a slightly different execution flow we'll

11
00:00:55,180 --> 00:00:59,170
have a brief look at that and the other one the fourth one that we're not going to dive into details

12
00:00:59,170 --> 00:01:06,440
in this lecture is a range based for loop which is typically shortened to range for.

13
00:01:06,610 --> 00:01:13,330
So first of all the while loop so a while loop and all of these loops are very much like an if statement

14
00:01:13,570 --> 00:01:14,730
they'll have a condition.

15
00:01:14,740 --> 00:01:20,020
And once that condition is true they can execute the code within our curly braces.

16
00:01:20,050 --> 00:01:26,800
So whilst the condition is true we could be counting a number whilst i is less than 10 let's say we

17
00:01:26,800 --> 00:01:32,560
can execute a certain code and we can also increment or decrement that particular variable that we've

18
00:01:32,560 --> 00:01:34,390
got counting up.

19
00:01:34,390 --> 00:01:37,720
Now while loops will always check fact condition first.

20
00:01:37,720 --> 00:01:44,660
So if that condition is false that code within the curly braces will not be executed.

21
00:01:44,680 --> 00:01:51,850
Use these when the amount of loops is unknown so we'll unlikely to use them in this particular example

22
00:01:51,850 --> 00:01:58,060
that we're working on our game here because we know exactly how many iterations we're going to do it

23
00:01:58,060 --> 00:02:02,400
will be the length of the hidden word all the input minus one for instance.

24
00:02:02,990 --> 00:02:03,240
Okay.

25
00:02:03,250 --> 00:02:07,420
So let's have a look at the for loop next a for loop would be written out like this.

26
00:02:07,420 --> 00:02:12,710
We've got an initialization so we might set a counter to 0 or maybe to 10.

27
00:02:12,730 --> 00:02:14,310
It depends what you're trying to achieve.

28
00:02:14,560 --> 00:02:15,790
And then we have our condition.

29
00:02:15,790 --> 00:02:20,770
So whilst that condition is true the code is going to be executed.

30
00:02:20,980 --> 00:02:25,410
And then like I was saying at the beginning of the counters at 10 perhaps you're going to count down.

31
00:02:25,420 --> 00:02:28,850
So whilst we can increment we can also decrement as well.

32
00:02:28,850 --> 00:02:30,640
And it doesn't always have to be by 1.

33
00:02:30,640 --> 00:02:35,590
It does depend on what you're trying to accomplish in the code certainly in our examples coming up.

34
00:02:35,590 --> 00:02:37,420
We'll just be doing it by 1.

35
00:02:37,420 --> 00:02:41,590
Now use these when you know how many times the loop will be run.

36
00:02:41,620 --> 00:02:45,360
And we have a pretty good idea of how many times the loop will be run.

37
00:02:45,430 --> 00:02:51,000
In the case of our words the do while loop we won't go into that in too much detail here.

38
00:02:51,160 --> 00:02:53,380
But basically it's like a while loop.

39
00:02:53,560 --> 00:03:00,450
But the code to be executed will be executed first regardless of the condition.

40
00:03:00,460 --> 00:03:05,410
So there are certain examples where you will want your code to be executed at least once and then of

41
00:03:05,410 --> 00:03:09,310
course whilst the condition is true it will continue doing that.

42
00:03:09,370 --> 00:03:14,770
But if the condition ended up being false basis it won't run it anymore so we'll execute it at least

43
00:03:14,830 --> 00:03:15,270
once.

44
00:03:15,270 --> 00:03:17,260
That's a big difference between the two.

45
00:03:18,070 --> 00:03:21,390
So let's go dive over into v as code and start playing with our loops.

46
00:03:22,150 --> 00:03:22,530
Okay.

47
00:03:22,540 --> 00:03:24,220
Welcome over into V.S. code.

48
00:03:24,220 --> 00:03:27,870
Now let's have a look at where we can place our test code.

49
00:03:27,880 --> 00:03:29,280
I'm gonna do in setup up game again.

50
00:03:29,290 --> 00:03:36,520
I'm not going to delete this block of code here that's going to be useful for later on during your challenge

51
00:03:36,520 --> 00:03:40,290
when we actually start thinking about how to access elements of an array.

52
00:03:40,330 --> 00:03:44,090
But first of all let's do the basics of a while loop.

53
00:03:44,090 --> 00:03:49,530
Okay so let's start typing if we go while and then press tab we can set up our condition.

54
00:03:49,540 --> 00:03:52,970
Now I'm going to say why I is less than 10.

55
00:03:53,020 --> 00:03:58,750
Now you may be asking okay why Lesson 10 why why are we picking that word this is just an example of

56
00:03:58,780 --> 00:04:02,750
We're counting up to let's say 10 elements of an array.

57
00:04:02,800 --> 00:04:08,770
Now the issue here of course is you may say well why is it less than 10 and not less than or equal to

58
00:04:08,770 --> 00:04:09,500
10.

59
00:04:09,580 --> 00:04:15,210
Well remember when we're accessing the first element of the array is in fact 0.

60
00:04:15,370 --> 00:04:18,780
So we're going to count up to nine.

61
00:04:18,790 --> 00:04:23,970
And when it hits 10 when the counter hits 10 the code will no longer execute.

62
00:04:23,980 --> 00:04:30,250
So here for instance to test this I can print out to our terminal so we can actually see what's going

63
00:04:30,310 --> 00:04:30,880
on.

64
00:04:30,930 --> 00:04:31,800
It's a print line.

65
00:04:31,810 --> 00:04:34,240
It will need to be in the text macro.

66
00:04:34,240 --> 00:04:34,810
There we go.

67
00:04:34,810 --> 00:04:36,810
And what are we printing out here.

68
00:04:37,090 --> 00:04:40,540
That's actually printout so formats specify I.

69
00:04:40,660 --> 00:04:42,880
And then print out I.

70
00:04:42,930 --> 00:04:48,160
Now the problem here of course is we've got a red squiggles and and it's saying Well let's remember

71
00:04:48,160 --> 00:04:49,210
a semicolon.

72
00:04:49,240 --> 00:04:56,730
It's saying here if we hover over this undefined we need to say what I is now I is going to be an integer.

73
00:04:56,740 --> 00:05:05,460
It's counting up so in 32 I equals zero because we're starting at the first elements of an array.

74
00:05:05,460 --> 00:05:06,960
In this particular instance.

75
00:05:06,990 --> 00:05:07,930
So there we go.

76
00:05:07,980 --> 00:05:11,130
But what would this do if we just ran our code.

77
00:05:11,170 --> 00:05:15,620
There's no need to launch our game and test this we can logically go through this.

78
00:05:15,660 --> 00:05:22,210
So I is equal to zero while I is less than 10 which it currently is great.

79
00:05:22,230 --> 00:05:26,120
We're going to print out whatever I happens to be.

80
00:05:26,120 --> 00:05:28,790
Okay but we're not doing anything to.

81
00:05:28,790 --> 00:05:29,060
I.

82
00:05:29,090 --> 00:05:31,570
So this will just be one of those infinite loops.

83
00:05:31,580 --> 00:05:36,860
It's just going to continue printing out zeros in this particular case.

84
00:05:36,890 --> 00:05:37,380
OK.

85
00:05:37,400 --> 00:05:41,870
So we can hear incremented I plus plus or semicolon.

86
00:05:41,870 --> 00:05:44,880
And now it's going to change the value to one.

87
00:05:44,960 --> 00:05:47,390
It's going to assessor is I still less than 10.

88
00:05:47,420 --> 00:05:48,050
Yes.

89
00:05:48,100 --> 00:05:53,510
So I'll print out one print out to print out three until it gets to Nine it will print out nine it'll

90
00:05:53,600 --> 00:05:59,120
increment it will come back up to the condition I is now 10 and that's it.

91
00:05:59,150 --> 00:06:03,950
This code here within our curly braces will stop being executed.

92
00:06:03,950 --> 00:06:07,010
Now let's look at the same code.

93
00:06:07,010 --> 00:06:13,510
But this time in a for loop so first of all this is where we initialize something.

94
00:06:13,530 --> 00:06:16,430
So in this case and in 32 I equals zero.

95
00:06:16,860 --> 00:06:24,390
So whilst I is less than 10 and then we increment and then we can take what we were doing before and

96
00:06:24,390 --> 00:06:25,940
pop it straight in there.

97
00:06:26,280 --> 00:06:30,930
If we save that now both of these bits of code do EXACTLY the same thing.

98
00:06:30,990 --> 00:06:36,040
And this is what I mean by a for loop being better for a known count.

99
00:06:36,210 --> 00:06:38,160
You can see here this is nice.

100
00:06:38,160 --> 00:06:40,730
This is only for lines of code.

101
00:06:40,800 --> 00:06:43,770
This one is a lot more cumbersome.

102
00:06:43,770 --> 00:06:49,650
I would say so I would use a while loop when you don't really know how many times you're going to iterate

103
00:06:49,650 --> 00:06:50,490
round a loop.

104
00:06:51,010 --> 00:06:51,380
Okay.

105
00:06:51,390 --> 00:06:57,660
So before we move on to your challenge I want to cover a do loop really quickly let us in this case

106
00:06:57,690 --> 00:06:59,700
also run the same sort of code.

107
00:06:59,700 --> 00:07:03,560
So whilst I less than 10 which is good.

108
00:07:03,720 --> 00:07:05,040
What are we going to do.

109
00:07:05,070 --> 00:07:07,360
Well we're going to print out the same thing here.

110
00:07:07,530 --> 00:07:10,910
Now what we haven't done is we haven't given I a value.

111
00:07:10,920 --> 00:07:16,380
So let's go into 32 I equals zero.

112
00:07:16,390 --> 00:07:20,880
So in this particular case this will do exactly the same as everything else is done.

113
00:07:21,010 --> 00:07:22,620
Apart from we also need to go here.

114
00:07:22,630 --> 00:07:24,240
I plus plus.

115
00:07:24,310 --> 00:07:31,540
So it's always going to execute this first then it will say whilst it's less than that.

116
00:07:31,540 --> 00:07:36,490
So this this is an interesting one there are a couple of things that we can do and play with this particular

117
00:07:37,090 --> 00:07:38,720
do while loop.

118
00:07:39,130 --> 00:07:40,670
We do need our semicolon.

119
00:07:41,390 --> 00:07:41,790
OK.

120
00:07:41,800 --> 00:07:46,960
So let's have one final look at how do while loop we know if it set to 10 it will print out 10 because

121
00:07:46,960 --> 00:07:50,440
it will run through and execute the code at least once.

122
00:07:50,440 --> 00:07:55,930
However if we set this to zero do you think you will also still print out 10 or will it stop at 9.

123
00:07:56,500 --> 00:07:57,610
Well let's run through it.

124
00:07:57,640 --> 00:08:03,250
But maybe with a smaller number than 10 let's just go for two in fact I'm going to change all of the

125
00:08:03,410 --> 00:08:10,810
tens too because when we run it in the moment just to check everything works how we expect it to over

126
00:08:10,930 --> 00:08:16,980
it in our game it's going to be a bit cumbersome if everything goes off of our in-game terminal.

127
00:08:17,230 --> 00:08:18,690
So let's have a look here.

128
00:08:18,700 --> 00:08:19,780
Let's run through the codes.

129
00:08:19,870 --> 00:08:26,140
I is set to zero and we're going to do this and we print out zero and then we increment I while I is

130
00:08:26,140 --> 00:08:26,920
less than 2.

131
00:08:26,950 --> 00:08:35,180
Ok so I is now one we print how the value of one and then increment incremented six now two while I's

132
00:08:35,240 --> 00:08:35,830
than 2.

133
00:08:35,900 --> 00:08:37,480
No it will stop.

134
00:08:37,480 --> 00:08:43,550
So all of these should printout 0 1 0 1 0 1 providing we.

135
00:08:43,570 --> 00:08:48,360
Now go ahead and change the variable names so let's go ahead and change these eyes.

136
00:08:48,370 --> 00:08:54,270
Now if I hold down control I can select multiple eyes at the same time.

137
00:08:54,340 --> 00:08:57,190
Really useful because I can place the cursor there.

138
00:08:57,310 --> 00:08:58,160
I can delete that.

139
00:08:58,180 --> 00:09:05,290
And because we're dealing with unreal remember you need a capitalization on your variables to meet the

140
00:09:05,290 --> 00:09:05,980
code standard.

141
00:09:05,980 --> 00:09:08,300
So let's do these eyes as well.

142
00:09:08,320 --> 00:09:09,500
We've got those ones there.

143
00:09:09,540 --> 00:09:13,500
I must switch that out to a J for this particular instance.

144
00:09:13,510 --> 00:09:15,490
So we can run our code real quick.

145
00:09:15,490 --> 00:09:18,100
Let's go ahead and save compile our code.

146
00:09:18,100 --> 00:09:20,310
Hopefully all is well with it.

147
00:09:20,320 --> 00:09:20,800
Excellent.

148
00:09:20,800 --> 00:09:26,090
With everything compiled we press it we get 0 1 0 1 0 1.

149
00:09:26,140 --> 00:09:27,170
Perfect.

150
00:09:27,190 --> 00:09:27,560
OK.

151
00:09:27,570 --> 00:09:33,640
So we've had a bit of a diver over into loops and the various ways they can be put together.

152
00:09:33,670 --> 00:09:39,640
And now it's time for your challenge Okay so this challenge is really just the beginnings of making

153
00:09:39,640 --> 00:09:42,940
sure we can go through our head in word and print out those characters.

154
00:09:42,940 --> 00:09:47,620
We will then build upon that to assess the letters against one another.

155
00:09:47,620 --> 00:09:54,430
So what I'd like you to do is basically print out each character of both our hidden word and our inputs

156
00:09:54,700 --> 00:10:02,560
on a new line in our in-game terminal sets the number of iteration to the words length and test them

157
00:10:02,560 --> 00:10:04,060
one at a time.

158
00:10:04,060 --> 00:10:08,680
Now what I would recommend that you do because you could quite easily do this in multiple ways.

159
00:10:08,710 --> 00:10:16,270
I'm going to guide you down the path of using the is I as a Graham function for this code and then passing

160
00:10:16,270 --> 00:10:24,250
in the hidden word and input elsewhere into the is I saw Graham function in order to execute and print

161
00:10:24,250 --> 00:10:27,630
out both the hidden word and the inputs.

162
00:10:27,700 --> 00:10:32,350
Remember to test them one that's a time to make sure that it's working first of all before you dive

163
00:10:32,350 --> 00:10:38,120
into deep pause the video now and give that a go.

164
00:10:38,210 --> 00:10:39,620
Okay everybody Welcome back.

165
00:10:39,650 --> 00:10:46,200
Let's go ahead now and print how each character of both our hidden word and our inputs okay.

166
00:10:46,210 --> 00:10:49,300
So the first thing I'm going to do here is just clean up our code.

167
00:10:49,300 --> 00:10:52,230
I don't need all those loop examples.

168
00:10:52,220 --> 00:10:53,460
Let's save the work.

169
00:10:53,830 --> 00:10:57,930
Now the first thing I'm going to do we're going to call is Isaac ram.

170
00:10:58,120 --> 00:11:03,060
The beauty of this is we're already calling it for the inputs.

171
00:11:03,160 --> 00:11:05,230
So we have a look up here.

172
00:11:05,230 --> 00:11:12,610
The input is being passed into processed gas and then when we get here the gas itself which is the same

173
00:11:12,700 --> 00:11:19,720
string coming through is being passed into is Isaac gram so providing that this is code which means

174
00:11:19,720 --> 00:11:25,210
that the hidden word length is right and it's not the hidden word that has been guessed.

175
00:11:25,360 --> 00:11:28,300
We should get it repeating out whatever we've got.

176
00:11:28,300 --> 00:11:34,040
So we'll test that one first and then we'll call it from another place for the hidden word itself.

177
00:11:34,150 --> 00:11:36,940
So we know we're going to be using a for loop.

178
00:11:37,210 --> 00:11:41,080
I'm going to set a initial condition integer.

179
00:11:41,080 --> 00:11:50,230
Now I could just leave it as I however I want to set it to something else like index.

180
00:11:50,230 --> 00:11:54,100
So you've got index there whilst the index is less than.

181
00:11:54,100 --> 00:12:00,280
Now even though we're doing the the inputs here we're not typing in inputs because this function has

182
00:12:00,280 --> 00:12:03,220
no idea what inputs is it's completely out of scope.

183
00:12:03,610 --> 00:12:12,480
However what it does have a notion of Is word so you can put the word dot length now the reason why

184
00:12:12,480 --> 00:12:18,700
we're doing this if you remember is the elements that say element three of the array is the fourth letter.

185
00:12:18,810 --> 00:12:20,210
So that's absolutely fine.

186
00:12:20,220 --> 00:12:26,430
So won't go any larger than one minus the length of the word essentially which is great that's exactly

187
00:12:26,430 --> 00:12:32,910
what we wanted to do and we're going to increment index by one every time so it will go through every

188
00:12:32,910 --> 00:12:34,830
single letter of our word.

189
00:12:34,830 --> 00:12:35,880
Now what do we want to do.

190
00:12:35,880 --> 00:12:37,250
Well we want to print it out.

191
00:12:37,260 --> 00:12:46,340
So if we go print line text macro and plop in there a character so percent it's safe as the format specified

192
00:12:46,680 --> 00:12:50,200
and then we need to tell it what character that is.

193
00:12:50,220 --> 00:12:55,280
So that will be the word we know that's the variable we're using we'll open up our square brackets here.

194
00:12:55,440 --> 00:12:59,520
The square brackets in this form are called the subscript operator.

195
00:12:59,520 --> 00:13:03,090
In this particular case we're going to have to pass in a value there.

196
00:13:03,270 --> 00:13:06,840
We've already got the value we're using it as index.

197
00:13:06,840 --> 00:13:12,770
So this is a great example of when we're using a variable rather than a magic number in that.

198
00:13:12,780 --> 00:13:16,190
And that's what we wanted to try and get with all of our code.

199
00:13:16,230 --> 00:13:17,050
Excellent.

200
00:13:17,070 --> 00:13:23,400
So that's all we need to do at this particular point if I save my file here go over into bulls and cows

201
00:13:23,460 --> 00:13:25,460
and compile my code.

202
00:13:25,650 --> 00:13:29,600
What we should do is hopefully get it working when we press play.

203
00:13:29,610 --> 00:13:35,880
It won't do anything initially but we'll have to type in something that is the right length and it should

204
00:13:36,180 --> 00:13:38,770
repeat it out on each individual line.

205
00:13:38,790 --> 00:13:43,640
So if I go and go quiet for instance it repeats.

206
00:13:43,650 --> 00:13:46,750
That's how if I do bakes it will do that.

207
00:13:46,770 --> 00:13:47,480
Perfect.

208
00:13:47,490 --> 00:13:50,040
Our code is working as we would expect it to.

209
00:13:50,760 --> 00:13:51,610
Okay.

210
00:13:51,660 --> 00:13:56,030
Now the other part of the challenge was to also do the hidden word itself.

211
00:13:56,040 --> 00:14:00,560
Now the hidden word is set all the way up parents set up game.

212
00:14:00,560 --> 00:14:06,630
Now it doesn't really matter where in our code we decide to call is Isiah Graham to run that but we

213
00:14:06,630 --> 00:14:08,390
could do it here.

214
00:14:08,430 --> 00:14:09,810
That would be absolutely fine.

215
00:14:09,820 --> 00:14:13,690
So we called is Isiah Graham spell it correctly.

216
00:14:13,730 --> 00:14:14,780
Is Isiah Graham.

217
00:14:14,790 --> 00:14:15,810
There we go.

218
00:14:15,810 --> 00:14:19,410
And pass in here the hidden word

219
00:14:22,110 --> 00:14:27,540
what we should find is that when we run our game and we will need to compile first it will print out

220
00:14:27,540 --> 00:14:33,190
the hidden word character by character on each individual line and then the other bits that we did.

221
00:14:33,540 --> 00:14:35,940
Well that should work as well.

222
00:14:36,930 --> 00:14:39,710
Excellent it's finished compiling a.

223
00:14:39,710 --> 00:14:40,440
There we go.

224
00:14:40,440 --> 00:14:46,950
We print it out cake's line by line and our other bits of code should be working absolutely fine.

225
00:14:46,970 --> 00:14:49,420
So then how did you guys get on.

226
00:14:49,440 --> 00:14:55,080
I hope you managed to conquer loops loops are incredibly useful and used all the time.

227
00:14:55,080 --> 00:14:59,010
So getting a handle on them nice and early is really important.

228
00:14:59,010 --> 00:15:01,410
I hope you've had lots of fun playing with a full load.

229
00:15:01,410 --> 00:15:06,540
We going to build on that to create a more complex form that's going to be checking letters against

230
00:15:06,540 --> 00:15:09,900
one another and that will be in the next video.

231
00:15:09,900 --> 00:15:11,240
Please share your work.

232
00:15:11,250 --> 00:15:15,870
Any questions ask over in the discussions and I'll see you all in the next lecture.
