WEBVTT
1
00:00:04.270 --> 00:00:07.110
Hello everybody and welcome to pointers.

2
00:00:07.120 --> 00:00:12.370
Your point is primer is going to be a bit of a theory lecture and then we'll dive into using it in the

3
00:00:12.370 --> 00:00:14.110
next lecture.

4
00:00:14.110 --> 00:00:19.120
So we've not really used them before so we want to prepare you for that because they're a little bit

5
00:00:19.120 --> 00:00:24.130
different but similar to how we've used references before you'll see some similarities there.

6
00:00:24.550 --> 00:00:30.640
However we've not covered them yet so the clue that you're using a pointer is basically when you see

7
00:00:30.640 --> 00:00:33.580
a star or an asterisk next to a type.

8
00:00:33.580 --> 00:00:38.190
Now remember the type could be a class it could be a struct.

9
00:00:38.350 --> 00:00:40.870
Any of these user defined types are also valid.

10
00:00:40.870 --> 00:00:46.780
Now this is not a star as in multiplication but when it's next to a type or a variable it's going to

11
00:00:46.780 --> 00:00:49.950
be a pointer and we'll go through an example in a moment.

12
00:00:49.990 --> 00:00:52.920
Now pointers are simply memory addresses.

13
00:00:53.080 --> 00:00:58.450
So you have to follow that pointer to the object in question all the function in question to actually

14
00:00:58.450 --> 00:00:59.770
do anything with it.

15
00:01:00.190 --> 00:01:02.890
So why would you bother even using pointers.

16
00:01:02.890 --> 00:01:08.830
Well the benefit is it saves you moving things around in memory much like references now so you've got

17
00:01:08.830 --> 00:01:15.640
a huge objects or many objects a large building piece of a terrain any complex game object you don't

18
00:01:15.640 --> 00:01:20.200
want to be moving that thing around and copying it from one place in memory to another.

19
00:01:20.260 --> 00:01:22.130
So it saves you from doing that.

20
00:01:22.390 --> 00:01:27.460
You're simply referring to things by reference rather than the actual value.

21
00:01:27.460 --> 00:01:30.860
And you can point to pretty much any object.

22
00:01:30.880 --> 00:01:32.760
Now there is a disadvantage here.

23
00:01:32.830 --> 00:01:39.850
You can lose control of your data the moment that you've started using a pointer to something.

24
00:01:39.850 --> 00:01:43.660
How about that there's another pointer to exactly the same thing.

25
00:01:43.780 --> 00:01:46.180
Who's in control of that data.

26
00:01:46.270 --> 00:01:48.280
You could lose track of the data.

27
00:01:48.340 --> 00:01:50.460
You could lose track of the object itself.

28
00:01:50.470 --> 00:01:57.750
So there are potential disadvantages but there are also plenty of ways of managing it as well okay.

29
00:01:57.750 --> 00:02:00.180
So let's have a look at the pointer syntax.

30
00:02:00.180 --> 00:02:02.890
Now this will be very familiar to you.

31
00:02:02.910 --> 00:02:08.790
Now let's say we've got our type and it's a pointer and then the name of the pointer itself.

32
00:02:08.880 --> 00:02:13.130
So much like a reference that asterisk can go in any place.

33
00:02:13.260 --> 00:02:16.490
All of these three statements are equivalent.

34
00:02:16.500 --> 00:02:24.080
Now we're going to use the first much like references in all cases name of pointer is a pointer.

35
00:02:24.150 --> 00:02:29.070
I've known these things so they're quite obvious of course and in all cases the type of the object pointed

36
00:02:29.070 --> 00:02:31.740
to is F Type.

37
00:02:31.740 --> 00:02:36.210
Now it is important that the type match is the thing that you're pointing to.

38
00:02:36.210 --> 00:02:39.660
It won't compile otherwise it'll throw up an error.

39
00:02:39.810 --> 00:02:45.120
It's basically the compiler making sure you're being consistent and that when you get to that address

40
00:02:45.120 --> 00:02:49.860
it is expecting to find something of the type on the left.

41
00:02:49.870 --> 00:02:57.330
Now imagine we have an actor in our scene called some actor and obviously it is of type A actor.

42
00:02:57.610 --> 00:03:06.200
So the actor star tells us that there's a pointer to an actor and the actor is called some actor.

43
00:03:06.320 --> 00:03:13.950
Now the Actor class has a method or function called Get name which we will be using very soon.

44
00:03:14.030 --> 00:03:20.170
Now if we use the star next to some actor by itself that will D reference the pointer.

45
00:03:20.180 --> 00:03:26.150
Now what does the referencing mean basically going to that memory address and just using the value that

46
00:03:26.150 --> 00:03:33.810
is there so as an example if you were to use the DOS operator we could write and it has to be in brackets

47
00:03:34.260 --> 00:03:39.510
a star some actor don't get a name that would work absolutely fine.

48
00:03:39.510 --> 00:03:46.140
However you can follow an access in one using the arrow which is just the dash followed by the right

49
00:03:46.140 --> 00:03:49.790
Chevron which is the arrow operator.

50
00:03:50.690 --> 00:03:56.960
So instead of typing star some actor in brackets don't get a name we can access the name of some actor

51
00:03:57.380 --> 00:04:04.880
the arrow operator get name and we'll see this in action soon but basically use the arrow operator when

52
00:04:04.880 --> 00:04:10.040
it's a pointer and the dot operator when it's not a pointer we'll get to that when we start talking

53
00:04:10.040 --> 00:04:16.870
about getting an actors transform in a few lectures time so that's it for this point is primer and what

54
00:04:16.870 --> 00:04:23.170
I would recommend is doing a bit of background reading on pointers as well as actually using them in

55
00:04:23.170 --> 00:04:30.010
the upcoming lectures pointers and references are two of those things that are very simple but can really

56
00:04:30.010 --> 00:04:35.110
confuse people as well so we'll take it step by step and we'll build upon knowledge and we'll keep coming

57
00:04:35.110 --> 00:04:42.310
back around to pointers and reinforcing that knowledge of how to use them over in on real and I'll see

58
00:04:42.310 --> 00:04:44.110
you will in the next lecture.
