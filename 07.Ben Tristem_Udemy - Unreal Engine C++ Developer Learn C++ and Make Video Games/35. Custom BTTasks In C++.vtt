WEBVTT
1
00:00:04.660 --> 00:00:05.800
Hello and welcome.

2
00:00:05.860 --> 00:00:11.320
In this lecture, we are going to be starting to add even more functionality into our behavior tree

3
00:00:11.320 --> 00:00:13.300
by adding a custom task.

4
00:00:13.330 --> 00:00:18.010
This clear blackboard value going to make that entirely custom in C++.

5
00:00:18.310 --> 00:00:20.050
Let's dive in and see how to do it.

6
00:00:21.160 --> 00:00:28.790
OK, so I'd like to expand out the behavior of this behavior tree so that we can get to investigate.

7
00:00:28.850 --> 00:00:32.900
And once we're done investigating, we move on to going back home.

8
00:00:33.200 --> 00:00:40.070
So I'm going to add a little move to task here afterwards, which just returns us to the start location.

9
00:00:40.880 --> 00:00:47.120
And what we need to do in order to get there is to have some notion of whether we've already visited

10
00:00:47.180 --> 00:00:48.980
the last known play location.

11
00:00:49.460 --> 00:00:54.470
And the way I'm going to do that is essentially by unsettling the last known play location once we have

12
00:00:54.470 --> 00:00:55.430
investigated it.

13
00:00:56.030 --> 00:00:57.800
Now, if we don't currently have a way of doing that.

14
00:00:57.830 --> 00:01:00.800
But first of all, let's create the decorator.

15
00:01:01.010 --> 00:01:10.040
So add a decorator to investigating Blackbaud that is going to be going to go and rename it to has investigated

16
00:01:10.460 --> 00:01:16.430
like so and this is going to check if the last name player location is set.

17
00:01:17.000 --> 00:01:22.880
And that means that we need to have some sort of node that allows us to unset a blackboard key.

18
00:01:23.930 --> 00:01:25.320
Now, that doesn't actually exist.

19
00:01:25.340 --> 00:01:26.630
You two thought it does, but it doesn't.

20
00:01:26.660 --> 00:01:31.220
So this is a great opportunity for me to show you how we can create a custom task.

21
00:01:31.520 --> 00:01:35.480
Now, you could do it very easily using blueprints or work.

22
00:01:35.570 --> 00:01:37.170
I'm going to show you the slightly hard away.

23
00:01:37.190 --> 00:01:40.830
But the one that gives you a lot of power, which is doing it through C++.

24
00:01:41.600 --> 00:01:48.740
So we're going to go over to main content brands that go to add new and go to new C++ class.

25
00:01:48.770 --> 00:01:51.390
And we're gonna want to show all classes checkbox.

26
00:01:51.890 --> 00:01:54.290
And then we're searching for B.T. Task.

27
00:01:54.770 --> 00:01:56.750
And there's a lots of options here.

28
00:01:57.110 --> 00:02:03.740
You can see a lot of them are actually those built in tasks such as make noise or there is a move to

29
00:02:03.740 --> 00:02:04.730
here or wait.

30
00:02:05.300 --> 00:02:08.960
Now, you could go and have a look at the C++ to see how those are implemented.

31
00:02:08.990 --> 00:02:09.920
That's always useful.

32
00:02:10.340 --> 00:02:16.370
But what we're interested in is what should we inherit from what should we use as the basis for our

33
00:02:16.430 --> 00:02:17.000
own node?

34
00:02:17.510 --> 00:02:23.810
Now, as a couple of options here, you could choose to have a B.T. task node as your basis, or you

35
00:02:23.810 --> 00:02:25.430
could use the blackboard base.

36
00:02:25.460 --> 00:02:26.900
Now, what's the difference between the two?

37
00:02:27.590 --> 00:02:28.430
Let's have a quick look.

38
00:02:28.850 --> 00:02:31.940
So move to actually uses the blackboard base.

39
00:02:32.060 --> 00:02:39.140
And what that means is that it has this blackboard key dropdown that allows us to choose a blackboard

40
00:02:39.140 --> 00:02:40.130
key to work with.

41
00:02:40.430 --> 00:02:43.640
That means we don't have to hard code into our task.

42
00:02:43.730 --> 00:02:48.740
The blackboard keys that we're working with, which is great because it allows us to reuse those tasks

43
00:02:48.740 --> 00:02:49.820
in different situations.

44
00:02:50.180 --> 00:02:54.800
So if you need a blackboard key, then the blackboard base is a great ones go with.

45
00:02:54.860 --> 00:02:56.480
Otherwise you use the other one.

46
00:02:56.960 --> 00:03:02.510
So let's go and add new add a new C++ class again, show all classes and we're looking for the Beattie

47
00:03:02.510 --> 00:03:03.530
task again.

48
00:03:03.650 --> 00:03:06.740
And we salute selecting the blackboard base hit next.

49
00:03:07.140 --> 00:03:10.790
Now I'm going to rename this to Beatty Task Underscore.

50
00:03:11.390 --> 00:03:14.350
Clear blackboard value.

51
00:03:15.450 --> 00:03:18.190
I'm going to go ahead and create that class here.

52
00:03:18.980 --> 00:03:20.450
Now, initially, this will fail.

53
00:03:20.480 --> 00:03:20.960
So let's click.

54
00:03:20.990 --> 00:03:21.260
Yes.

55
00:03:21.290 --> 00:03:23.300
And see what the error message is here.

56
00:03:23.900 --> 00:03:29.840
It's saying something about L and K, which stands for Link, unresolved external symbol, blah, blah,

57
00:03:29.840 --> 00:03:30.050
blah.

58
00:03:30.200 --> 00:03:35.570
Usually when you've got this kind of error from the Hlinka, this is saying that you've got something

59
00:03:35.600 --> 00:03:43.010
in your head of files that wasn't in your C++ or in this case, it means that there isn't a module included

60
00:03:43.100 --> 00:03:49.550
that we are relying upon and based on the types of symbols that it's looking for.

61
00:03:49.580 --> 00:03:52.550
I can see here it's the I gameplay task owner interface.

62
00:03:53.180 --> 00:03:58.700
It seems to be looking for something to do with game play tasks and that that is a module in actual

63
00:03:58.700 --> 00:03:58.920
fact.

64
00:03:58.940 --> 00:04:05.810
So if we go over to our Visual Studio code and just open up the file browser, just going to scroll

65
00:04:05.810 --> 00:04:12.030
up to my project then under source, simple shooter, there should be a simple shooter dot build dot

66
00:04:12.030 --> 00:04:12.280
C.

67
00:04:12.280 --> 00:04:13.760
S or whatever your project name is.

68
00:04:13.760 --> 00:04:14.280
Dot build.

69
00:04:14.390 --> 00:04:14.670
Yes.

70
00:04:15.260 --> 00:04:21.140
And in here, if I give us a little bit more space, you can see that we've got this public dependencies,

71
00:04:21.230 --> 00:04:29.350
module names and the module name here that we want to add to this list is going to be gameplay.

72
00:04:30.990 --> 00:04:31.740
Tasks.

73
00:04:31.860 --> 00:04:32.580
With an S..

74
00:04:33.330 --> 00:04:38.870
And if we go ahead and add that and go back and compile now, hopefully everything should compile successfully.

75
00:04:39.180 --> 00:04:44.550
For whatever reason, this doesn't automatically get added when you override for the Beattie task.

76
00:04:44.850 --> 00:04:48.510
Now, once that's done, let's go and have a look at what was created here.

77
00:04:49.230 --> 00:04:57.210
We should have a new class, which is our BTR task, underscore a clear blackboard value, and it's

78
00:04:57.210 --> 00:04:58.980
pretty empty at the moment.

79
00:04:59.520 --> 00:05:05.130
Now, what I want to do is if we were to add this in to our behavior tree at the moment, it would have

80
00:05:05.130 --> 00:05:06.180
an ugly name.

81
00:05:06.540 --> 00:05:09.960
So we want a nice human readable name for this task.

82
00:05:10.380 --> 00:05:14.700
And the way we're gonna do this is by adding in a constructor and setting a property.

83
00:05:14.760 --> 00:05:17.370
So let's create a public constructor here.

84
00:05:18.090 --> 00:05:21.410
The constructor always has the same name as the class, so we can copy that.

85
00:05:21.900 --> 00:05:23.160
Doesn't need to take any arguments.

86
00:05:23.160 --> 00:05:24.030
Semicolon at the end.

87
00:05:24.090 --> 00:05:28.050
And then let's create the implementation over in the C++.

88
00:05:28.770 --> 00:05:33.960
And the implementation just needs to set a variable called node name.

89
00:05:34.380 --> 00:05:40.590
So if you set node name and then you use a string, then the string that we set is gonna be the node

90
00:05:40.590 --> 00:05:40.800
name.

91
00:05:40.830 --> 00:05:41.880
So it's gonna be clear.

92
00:05:42.150 --> 00:05:42.990
Blackbaud.

93
00:05:44.150 --> 00:05:48.740
Value just with the spaces and the correct capitalization should be nice and easy.

94
00:05:48.830 --> 00:05:54.080
Now, one thing that I forgot to do at the time of recording is to surround this by the text macro.

95
00:05:54.470 --> 00:05:59.630
Now, you should go ahead and do that in your code, but you'll see that in my code it will persist

96
00:05:59.890 --> 00:06:01.280
in just being like this.

97
00:06:01.970 --> 00:06:04.340
And we should be able to go and compile that.

98
00:06:04.430 --> 00:06:05.000
Now.

99
00:06:06.810 --> 00:06:08.940
Awesome, that compiled successfully.

100
00:06:09.570 --> 00:06:12.000
So I challenge you to add this new node.

101
00:06:12.360 --> 00:06:17.760
So add it to the end of the investigation behavior and just check that it completes basically it should

102
00:06:17.790 --> 00:06:21.300
automatically complete without doing anything at all.

103
00:06:21.660 --> 00:06:22.500
But check the names.

104
00:06:22.500 --> 00:06:22.770
Correct.

105
00:06:22.800 --> 00:06:23.010
Check.

106
00:06:23.010 --> 00:06:26.280
They are able to add it and we'll look at adding the behavior in the next lecture.

107
00:06:26.280 --> 00:06:27.360
So pause video and have a go.

108
00:06:28.730 --> 00:06:29.020
OK.

109
00:06:29.140 --> 00:06:29.650
Welcome back.

110
00:06:29.740 --> 00:06:35.590
So let's go to our enemy a I and add in at the end of the investigate behavior.

111
00:06:35.680 --> 00:06:39.430
We're going to add in our clear Blackbaud value.

112
00:06:39.430 --> 00:06:41.260
You can see that's got the nice name there.

113
00:06:41.740 --> 00:06:45.640
And you can also see that if you go over to the details pain, you can select a blackboard key.

114
00:06:45.640 --> 00:06:49.660
We're going to select the last name play location, even though that doesn't do anything yet.

115
00:06:50.020 --> 00:06:54.340
You can see that we have that functionality because we inherited from Blackbaud Base.

116
00:06:55.030 --> 00:06:58.300
And let's just check that it completes automatically.

117
00:06:58.360 --> 00:06:58.960
Should do.

118
00:06:59.830 --> 00:07:00.820
And then it should move on.

119
00:07:00.850 --> 00:07:07.090
Let's move it onto a Waite's task afterwards so that we can see that just goes straight through or completes

120
00:07:07.090 --> 00:07:07.810
automatically.

121
00:07:08.320 --> 00:07:17.470
So I'm going to play I am going to go and hide myself round a corner as much as I can, and then I'm

122
00:07:17.470 --> 00:07:20.860
going to go and have a look at the investigating it went through.

123
00:07:20.920 --> 00:07:23.080
And actually, he's seen me.

124
00:07:23.140 --> 00:07:25.210
So let's go and hide again.

125
00:07:25.240 --> 00:07:26.980
Go and hide round the corner if I can.

126
00:07:28.640 --> 00:07:30.930
Here we go, and then I'm going to go to the.

127
00:07:31.120 --> 00:07:31.540
They go.

128
00:07:31.660 --> 00:07:35.880
It's gone right through the clear Blackbaud value, which must mean that it succeeded because we know

129
00:07:35.920 --> 00:07:37.540
if it was a sequence and it failed.

130
00:07:37.840 --> 00:07:38.470
It must have.

131
00:07:38.620 --> 00:07:40.800
It will have stopped and not gone onto the weight.

132
00:07:41.260 --> 00:07:42.940
So that's working correctly.

133
00:07:42.940 --> 00:07:47.970
The clear blackboard value is just returning success straight away and going on to waiting.

134
00:07:48.330 --> 00:07:51.730
The next lecture, we're gonna look at how we can actually add in the functionality.

135
00:07:52.060 --> 00:07:52.570
I'll see there.
