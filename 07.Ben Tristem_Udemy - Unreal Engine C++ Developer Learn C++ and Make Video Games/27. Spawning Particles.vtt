WEBVTT
1
00:00:04.290 --> 00:00:08.910
So we now have the main mechanics of our game implemented and working.

2
00:00:09.000 --> 00:00:13.800
We can play through essentially the entire game loop and enter a win or lose state.

3
00:00:13.980 --> 00:00:16.380
What the project is currently missing is the flair.

4
00:00:16.620 --> 00:00:21.570
And we're going to begin addressing that in this lecture with the use of particle effects.

5
00:00:21.840 --> 00:00:27.450
So I've provided all of the effects we'll be using for this so we can jump straight into the code and

6
00:00:27.450 --> 00:00:30.450
begin seeing how to spawn the particles at runtime.

7
00:00:30.570 --> 00:00:36.630
So if we begin by implementing the effects in our base class, the pawn base class, because remember,

8
00:00:36.630 --> 00:00:43.230
this is the universal functionality that the child classes will be using regardless.

9
00:00:43.470 --> 00:00:48.120
And in a in a kind of more fleshlight game, you may have different effects for the turrets and different

10
00:00:48.120 --> 00:00:49.380
effects for the player.

11
00:00:49.620 --> 00:00:51.310
And then you could just override the effects.

12
00:00:51.360 --> 00:00:57.240
But knowing that regardless of the type of effect you're using, that all of the pawn based classes

13
00:00:57.240 --> 00:00:59.820
will need some form of effect to play.

14
00:01:00.630 --> 00:01:06.210
The first thing we need to do here is to create a new pointer to the You Park system, which our name

15
00:01:06.270 --> 00:01:07.800
Death Particle will provide.

16
00:01:07.850 --> 00:01:11.070
This a simple you property to allow us to edit this anywhere.

17
00:01:12.760 --> 00:01:15.550
And provide a category named effects.

18
00:01:15.810 --> 00:01:20.200
I'll also take this opportunity to do something that we probably should have done from the beginning,

19
00:01:20.530 --> 00:01:24.140
and that's create a health component in the base class here.

20
00:01:24.470 --> 00:01:28.360
So at the moment, we're adding these manually into the child blueprint classes.

21
00:01:28.660 --> 00:01:34.630
And as we're not actually making use of a blueprint derived health component, we can just declare and

22
00:01:34.660 --> 00:01:36.310
implement the health component here.

23
00:01:36.550 --> 00:01:38.800
As both of the PWN classes will need one anyway.

24
00:01:39.220 --> 00:01:42.850
So first, we need to remember to forward declare our health component class.

25
00:01:45.260 --> 00:01:49.250
And then create a new health component pointer named health component.

26
00:01:53.530 --> 00:01:58.390
We can then just copy the property from any of the other components above and will paste that in just

27
00:01:58.410 --> 00:01:58.570
here.

28
00:02:01.140 --> 00:02:04.770
In our COFO, we can create our health component just like any other.

29
00:02:06.530 --> 00:02:08.570
Using the create default sub object.

30
00:02:13.950 --> 00:02:18.960
Of type health component and set the text to health component.

31
00:02:20.870 --> 00:02:26.300
As we considered when creating the health component, this doesn't have a requirement for a transform

32
00:02:26.570 --> 00:02:31.100
due to the type of component we've gone for, which means that we won't need to use the set up attachment

33
00:02:31.100 --> 00:02:32.360
for the component type.

34
00:02:33.940 --> 00:02:38.380
And then obviously, to get the reference to this, we just need to include the tune tanks, forward

35
00:02:38.380 --> 00:02:44.470
slash component, forward slash health component, not hej at the top of our code while moving down

36
00:02:44.470 --> 00:02:46.240
to the handle destruction function.

37
00:02:46.270 --> 00:02:51.430
We're not going to use the new game play static's and the function within this that we want for the

38
00:02:51.460 --> 00:02:58.630
particles to be sporn emitter at location, start spawning a particle emitter at a given location.

39
00:02:58.990 --> 00:03:04.300
The first argument is Take's will be a reference to this and it will then want the particles that we

40
00:03:04.300 --> 00:03:07.090
wanted to spawn and that will be our death particle.

41
00:03:07.540 --> 00:03:14.410
Then for the location to spawn the particles, we can just use the location of the porn that this is

42
00:03:14.410 --> 00:03:20.980
on when it's destroyed by using the GETT Act allocation and the function also takes in a rotation argument.

43
00:03:21.280 --> 00:03:24.850
But we won't need to apply or add any kind of offset to the rotation.

44
00:03:25.090 --> 00:03:29.740
So if we leave this blank or just don't provide an additional argument that will complete the function

45
00:03:29.740 --> 00:03:34.780
call and doing this will set the rotation to default to zero on the X, Y and Z.

46
00:03:35.170 --> 00:03:39.340
So these spawn a better allocation, already accounts for a no reference being passed in.

47
00:03:39.640 --> 00:03:43.930
So we can just call this and not worry about the property being left blank in the editor.

48
00:03:44.260 --> 00:03:49.510
And then while still in the idea, we can also handle the other class that will make use of the particle

49
00:03:49.510 --> 00:03:52.960
system and that will be the projectile for the impact effects.

50
00:03:53.170 --> 00:03:54.880
So in the projectile, I had a class.

51
00:03:54.880 --> 00:03:57.580
We want to create another pointer to the U.

52
00:03:57.640 --> 00:04:00.280
Particle system and we'll name this one hit particle.

53
00:04:01.340 --> 00:04:07.170
This can use the same you property specifiers as before, we'll make this edit anywhere and provide

54
00:04:07.170 --> 00:04:07.270
it.

55
00:04:07.310 --> 00:04:09.260
The category of effects.

56
00:04:10.420 --> 00:04:13.180
Then in the code file, you have a small challenge waiting for you.

57
00:04:13.300 --> 00:04:19.270
So take what you know about the setup of our project and see if you can spawn a particle whenever the

58
00:04:19.300 --> 00:04:23.740
projectile hit something, whether that's a wall floor or any type of porn.

59
00:04:23.860 --> 00:04:28.220
So see if you can remember the function call for the spawning of the particle emitter.

60
00:04:28.300 --> 00:04:33.040
But of course, if you do get stuck, you can just revisit the implementation we've just made in our

61
00:04:33.250 --> 00:04:33.970
base class.

62
00:04:34.270 --> 00:04:36.370
So I pulled video and give this one to go.

63
00:04:37.670 --> 00:04:37.830
OK.

64
00:04:38.000 --> 00:04:39.000
So hopefully you've got this one.

65
00:04:39.270 --> 00:04:40.650
The first thing that we needed to do.

66
00:04:40.980 --> 00:04:48.330
We already have the checks in place for our use to see whether we've hit something valid that isn't

67
00:04:48.330 --> 00:04:50.460
ourselves before we apply damage.

68
00:04:50.880 --> 00:04:56.130
It makes sense that we want to use this result to be when we Spoonhour effects as well as we don't want

69
00:04:56.130 --> 00:05:01.050
the effects going off when the projectile is not destroyed or vice versa.

70
00:05:01.110 --> 00:05:04.290
We don't want the projectile being destroyed without showing the effects.

71
00:05:04.500 --> 00:05:05.790
So we can test everything in here.

72
00:05:06.240 --> 00:05:12.840
Then we just need to use the spoon, a better allocation function on the new gameplay statics as we've

73
00:05:12.840 --> 00:05:13.560
done previously.

74
00:05:13.920 --> 00:05:18.330
And then we're passing in exactly the same parameters here, just swapping out the death particle that

75
00:05:18.330 --> 00:05:21.210
we used for the hit particle in this class.

76
00:05:21.540 --> 00:05:24.990
So that's gonna be a reference to this, the hit particle.

77
00:05:25.380 --> 00:05:29.250
We'll get the actual location and we won't need to pass in a rotation here.

78
00:05:29.670 --> 00:05:34.260
Well, so back in this function, I've just noticed that we could also drop the destroy function into

79
00:05:34.320 --> 00:05:39.300
our F check here, too, to ensure that we're not destroying the projectile when it hasn't met a valid

80
00:05:39.360 --> 00:05:44.580
damage criteria, as this could lead the projectile to being destroyed when we're hitting the owner.

81
00:05:44.970 --> 00:05:48.740
And because none of the effects or anything would be getting played, it would just have this kind of

82
00:05:48.960 --> 00:05:49.510
disappearing.

83
00:05:49.860 --> 00:05:51.870
That could look a little bit confusing in the game.

84
00:05:52.900 --> 00:05:57.190
With that done, we can return to the editor and compile this to check the changes.

85
00:05:57.460 --> 00:06:02.530
The first thing is that both of the pawns will now have to health components.

86
00:06:02.590 --> 00:06:06.850
So we'll go into these classes and we'll remove the ones that we have assigned manually.

87
00:06:10.930 --> 00:06:17.020
We can then see that with either of these selected, we have our new effects category and the death

88
00:06:17.020 --> 00:06:17.840
particle slot.

89
00:06:17.980 --> 00:06:22.980
So we can just feel that using the dropdown and selecting the P underscore death effect.

90
00:06:25.120 --> 00:06:27.910
We also want to do the same for our projecto class, too.

91
00:06:28.330 --> 00:06:35.050
So just use the collapsed ed and search for effects and then place the hit effect into this slot.

92
00:06:35.560 --> 00:06:39.310
With that done, we can finish by testing our new particle effects and action.

93
00:06:39.610 --> 00:06:40.750
And they're looking pretty cool.

94
00:06:40.760 --> 00:06:46.030
So just some simple effects like that are already making things just look that little bit more interesting.

95
00:06:46.270 --> 00:06:51.340
Making an effect on the world and the objects that they interact with look that little bit more meaningful.
