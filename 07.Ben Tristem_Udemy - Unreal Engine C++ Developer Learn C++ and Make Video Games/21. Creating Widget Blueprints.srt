1
00:00:04,350 --> 00:00:07,270
OK, so we're going to be covering it, use of widgets in this lecture.

2
00:00:07,630 --> 00:00:13,090
This is gonna be nice and simple as there won't be a whole lot of communication between classes and

3
00:00:13,090 --> 00:00:15,830
will only be used for a kind of fell ahead.

4
00:00:15,880 --> 00:00:21,870
To emphasize the start and end of game flow, meaning we won't need to whereby things like button interact

5
00:00:21,870 --> 00:00:25,450
from different menu sub settings and things like that.

6
00:00:25,930 --> 00:00:31,600
So we're going to begin by creating a new folder in the blueprint structure named Widgets.

7
00:00:34,530 --> 00:00:40,320
Inside of the new folder, right click, highlight the user interface, select widget blueprint and

8
00:00:40,320 --> 00:00:47,850
name it WPP underscore game start save for widget blueprints and the name of the blueprint we are creating.

9
00:00:48,360 --> 00:00:53,310
If the widget class is something new to you, then there may be a lot of information on screen.

10
00:00:53,580 --> 00:00:58,980
But we're going to go through this step by step and use what we need so that by the end of the lecture

11
00:00:59,070 --> 00:01:00,690
it should all make a lot more sense.

12
00:01:01,140 --> 00:01:06,750
The main things to notice or understand, first of all, is that we're currently in the design section

13
00:01:06,870 --> 00:01:13,590
of the widget, which is the visual area where we create our visual components, such as text buttons,

14
00:01:13,680 --> 00:01:19,740
sliders and things like that for our menus, loading screens or just kind of visual representation screens

15
00:01:19,750 --> 00:01:20,670
like we're using here.

16
00:01:21,090 --> 00:01:26,580
Next to the designer text, which is actually a button is our graph button.

17
00:01:26,850 --> 00:01:32,070
And this will take us to the development section where we can add our blueprint implementation similar

18
00:01:32,070 --> 00:01:33,750
to most of the other blueprints.

19
00:01:33,990 --> 00:01:36,870
You may have seen the project or the engine before.

20
00:01:37,120 --> 00:01:42,090
For another, we're just going to be working to get the visual aspects implemented, which for our start

21
00:01:42,090 --> 00:01:46,540
menu is going to be super simple as it consists of a single text element.

22
00:01:46,860 --> 00:01:52,020
So in the pallet section to the left, search for the text option or you can see it just here.

23
00:01:52,290 --> 00:01:57,870
If I scroll down a little bit and then we just want to drag the text element into the canvas, which

24
00:01:57,870 --> 00:02:00,240
is the section in the main window just here.

25
00:02:00,480 --> 00:02:01,950
This is just done a few things.

26
00:02:02,010 --> 00:02:07,410
So in the lower left section, we can see that we have a hierarchy panel which controls the placement

27
00:02:07,440 --> 00:02:09,840
order of the widget elements.

28
00:02:10,230 --> 00:02:16,110
At that moment, we've placed the text element onto the existing canvas element and the canvas is just

29
00:02:16,110 --> 00:02:19,570
a term for the holder of everything that will be displayed onscreen.

30
00:02:19,740 --> 00:02:25,680
When the widget is added to be rendered and the hierarchy here will control the order in which things

31
00:02:25,680 --> 00:02:30,510
are displayed to ensure that things that you place in front of another element obviously are rendered.

32
00:02:30,540 --> 00:02:34,950
On top of that, not every element can be placed on top of each other.

33
00:02:35,160 --> 00:02:40,830
But those that can follow a hierarchy where the lower elements will be rendered on top of the other

34
00:02:40,830 --> 00:02:41,400
elements.

35
00:02:41,550 --> 00:02:45,900
The other thing that's just happened as well is that to the right of the screen, we can see the user

36
00:02:45,900 --> 00:02:52,080
details panel, and this correlates to an anchor that is just being placed in the top left of the canvas,

37
00:02:52,230 --> 00:02:57,510
which is where the text will be aligned and tried to keep its position based on a dynamic screen resolution.

38
00:02:57,630 --> 00:03:01,110
So there's a small slider just to the bottom right of the canvas.

39
00:03:01,140 --> 00:03:06,630
And if I drag this around, we can see that the text will always try to stay a set distance from the

40
00:03:06,630 --> 00:03:07,050
anchor.

41
00:03:07,290 --> 00:03:11,460
And whilst I'm doing this, I'm just going to zoom out a little bit and I'm going to snap the canvas

42
00:03:11,490 --> 00:03:15,450
to 1920 as a slightly more standard screen resolution.

43
00:03:15,630 --> 00:03:18,990
So I want this text to always be roughly centred on the screen.

44
00:03:19,050 --> 00:03:24,900
So I'm going to change the anchor to the middle of the screen by selecting the anchor dropdown and choosing

45
00:03:24,900 --> 00:03:25,710
the middle option.

46
00:03:26,040 --> 00:03:29,310
Can I change the position of the text based on its anchor?

47
00:03:29,550 --> 00:03:32,760
So zero at the X and the Y positions.

48
00:03:33,120 --> 00:03:39,720
And because screen positions are calculated from zero zero, which is the top left of the screen, you

49
00:03:39,720 --> 00:03:43,110
can see that the text is actually anchored at the same point.

50
00:03:43,440 --> 00:03:48,870
So to fix this, I'm just going to set the alignment two point five on the X and the way of the tax

51
00:03:48,870 --> 00:03:51,120
element and that will center the text force.

52
00:03:51,540 --> 00:03:53,400
And I also want the text to be much bigger.

53
00:03:53,460 --> 00:03:55,650
So this is going to be like a main focal point.

54
00:03:55,920 --> 00:04:00,600
And we can do this by going to the options here and dropping down the font options.

55
00:04:00,920 --> 00:04:07,200
And we can just increase the font size to 80 and also change the font to use the light typeface, just

56
00:04:07,200 --> 00:04:10,050
as the robots so bold looks a little bit unpleasant to me.

57
00:04:10,320 --> 00:04:15,570
So this is no throwing in our placement off again, because we've gone past the X and Y binds here.

58
00:04:15,960 --> 00:04:20,490
You can see the outline of the green box, which is trying to kind of contain the text with him so we

59
00:04:20,490 --> 00:04:26,460
can fix this by just using this tech option to set the text to size this to content.

60
00:04:26,730 --> 00:04:33,180
And this will automatically update the kind of binding box for this based on the size of the text as

61
00:04:33,180 --> 00:04:33,900
it updates.

62
00:04:34,260 --> 00:04:38,940
Okay, so now we've got something which is perfectly central and this can look a little bit unsettling.

63
00:04:39,000 --> 00:04:41,070
So I'm just going to move this up the screen.

64
00:04:41,340 --> 00:04:43,320
Minus 200 units on the Y.

65
00:04:44,790 --> 00:04:48,750
So the final step we need to take for our text element, and this is very important.

66
00:04:48,960 --> 00:04:54,030
So really make sure you don't miss this stage or else you'll be stuck later when we're implementing

67
00:04:54,060 --> 00:04:56,220
our logic to update the text.

68
00:04:56,520 --> 00:04:57,690
So, again, really important.

69
00:04:58,200 --> 00:05:04,200
And that is to take this very small is variable box at the top of the details panel.

70
00:05:04,440 --> 00:05:05,420
Super easy to miss.

71
00:05:05,550 --> 00:05:07,200
A lot of people can forget to do this.

72
00:05:07,350 --> 00:05:12,720
And it means that we will not have access to anything in our development section that isn't marked here

73
00:05:12,780 --> 00:05:13,680
to be a variable.

74
00:05:14,160 --> 00:05:15,270
And this isn't too important.

75
00:05:15,300 --> 00:05:20,250
But I'm also going to rename the text just so we know what this is at a glance, rather than having

76
00:05:20,250 --> 00:05:22,830
the generic text with a number after it.

77
00:05:23,280 --> 00:05:28,830
So we can now move over to the graph section and start implementing our logic for the widget.

78
00:05:29,040 --> 00:05:31,200
So we have three default elements here.

79
00:05:31,530 --> 00:05:35,040
The tech, which you'll be familiar with is the constant update function.

80
00:05:35,220 --> 00:05:37,880
The construct is similar to begin play.

81
00:05:37,920 --> 00:05:44,820
So this is run when the game starts and the pre construct is essentially a constructor, which allows

82
00:05:44,820 --> 00:05:47,700
us to visualize a widget changes in the editor.

83
00:05:47,910 --> 00:05:53,370
So be careful here because if you place things and try to reference something like the player, which

84
00:05:53,370 --> 00:05:58,530
only exists in the context of playing the game when you started running it, you'll be likely met with

85
00:05:58,690 --> 00:06:02,800
the editor crashing as you're trying to get a reference that doesn't exist for our use.

86
00:06:02,820 --> 00:06:04,890
We only actually need the construct.

87
00:06:05,160 --> 00:06:09,180
So I'll just remove the two other events and to get this started.

88
00:06:09,210 --> 00:06:14,880
I'm going to control drag the text element into the graph, holding controlled and dragging something

89
00:06:14,880 --> 00:06:15,050
in.

90
00:06:15,120 --> 00:06:18,690
We'll get the variable rather than setting the variable.

91
00:06:18,990 --> 00:06:22,560
And this will allow us to start updating some of the properties.

92
00:06:22,650 --> 00:06:26,970
So if we know drag from this return pen and search for a set text.

93
00:06:29,940 --> 00:06:32,480
I then filled the text with get ready.

94
00:06:32,630 --> 00:06:36,620
And this will just be something to give the player a heads up that the game is about to start.

95
00:06:36,980 --> 00:06:40,130
Next, I'm going to create a timer by function name.

96
00:06:40,400 --> 00:06:43,270
And this is the same as the time as we've been using in C++.

97
00:06:43,310 --> 00:06:45,700
You can see here on the return node.

98
00:06:45,830 --> 00:06:47,750
You even have an F timer handle.

99
00:06:48,020 --> 00:06:52,550
So in a similar way to how we've used this in C++, we're just going to call a function.

100
00:06:52,580 --> 00:06:56,870
So that will be the function name we have just here and we'll be calling that every so many seconds.

101
00:06:57,110 --> 00:06:59,170
So I'm going to set this to be called Countdown.

102
00:06:59,540 --> 00:07:05,750
And this will play every one second to create a kind of stopwatch style count display to make sure that

103
00:07:05,750 --> 00:07:07,220
I don't have any spelling issues here.

104
00:07:07,580 --> 00:07:11,480
I'm going to just copy the text and create the new function that we want to call.

105
00:07:11,810 --> 00:07:14,540
And I'll paste that in here then to keep things nice and tidy.

106
00:07:14,870 --> 00:07:16,760
I'll select everything that we've just created.

107
00:07:16,790 --> 00:07:22,670
So those two nodes and on either of these nodes select to collapse this to a function and I'll name

108
00:07:22,730 --> 00:07:24,680
the new function, initialize text.

109
00:07:27,450 --> 00:07:33,510
Then something I tend to do with timers in blueprint's is to track in the function that the timer is

110
00:07:33,510 --> 00:07:38,220
calling so that if I have a need quick access to this, especially in larger blueprints, I can just

111
00:07:38,220 --> 00:07:40,350
double click the mode and that'll take me straight in.

112
00:07:40,710 --> 00:07:42,360
That's one issue with blueprint timers.

113
00:07:42,660 --> 00:07:48,210
Is it because you're only querying it by the text string or the name of the function?

114
00:07:48,600 --> 00:07:53,760
It can make it kind of cumbersome to find the function that's calling if you've got a long list of functions

115
00:07:53,820 --> 00:07:55,440
in the panel to left.

116
00:07:55,500 --> 00:07:59,700
So doing this just is a nice, easy way in and out of the time of functions.

117
00:08:00,150 --> 00:08:06,180
So now back inside of the current time function, we need a new variable of type int that.

118
00:08:06,230 --> 00:08:06,700
Oh, cool.

119
00:08:06,720 --> 00:08:07,350
Start delay.

120
00:08:11,500 --> 00:08:15,770
And as soon as we enter this function, we want to use our decrement in option.

121
00:08:20,970 --> 00:08:23,370
We can then update the text condign text.

122
00:08:26,680 --> 00:08:30,580
But this time it will read the value of the start delay integer.

123
00:08:34,280 --> 00:08:39,320
So plugging this in will automatically convert this from an integer to a text variable force.

124
00:08:39,710 --> 00:08:42,740
Then once we have our current on time is starting to show.

125
00:08:43,040 --> 00:08:45,280
Then going to run a branch check from this site.

126
00:08:45,320 --> 00:08:46,430
Kind of like an if statement.

127
00:08:46,640 --> 00:08:52,970
And we'll see if the start delay is still more than zero, meaning that we haven't reached the end of

128
00:08:53,000 --> 00:08:53,740
our countdown.

129
00:08:56,420 --> 00:08:59,960
Then we're going to call the countdown timer again in another seconds time.

130
00:09:03,790 --> 00:09:10,400
And if that's false and we are zero, then we want to set the text to go, which would just be again

131
00:09:10,490 --> 00:09:13,610
the kind of heads up plan notification that the game has started.

132
00:09:17,030 --> 00:09:21,190
Rules are going to clear the time here by passing in the name count down.

133
00:09:21,290 --> 00:09:23,750
So we're stopping the count on time from running again.

134
00:09:24,200 --> 00:09:27,870
And this is just kind of a security check to make sure that we haven't accidentally set something to

135
00:09:27,890 --> 00:09:29,240
looping where we don't want it to.

136
00:09:29,900 --> 00:09:34,490
And if you were to recall the timer, when you're not expecting it to fire off another time, then we

137
00:09:34,490 --> 00:09:39,310
could have issues where restarts the countdown or start showing text when we don't want it to again.

138
00:09:41,430 --> 00:09:44,880
And the final step is that we're going to create another timer by function name.

139
00:09:45,000 --> 00:09:47,280
And this one will cool remove UI.

140
00:09:49,620 --> 00:09:52,840
Again, just to make sure that I don't misspell this in the new function, correct.

141
00:09:52,980 --> 00:09:54,060
I'll copy this text.

142
00:09:54,150 --> 00:09:58,650
Go over and create a new function and paste in the remove UI text.

143
00:09:58,920 --> 00:10:04,320
Then inside of this function, we just want to call a widget specific function, which is the remove

144
00:10:04,380 --> 00:10:06,030
from parent for widgets.

145
00:10:06,060 --> 00:10:12,570
This is basically how you remove a widget from the screen and also destroy it because it's not an actor

146
00:10:12,630 --> 00:10:14,610
or an object in the same kind of way.

147
00:10:15,150 --> 00:10:17,610
You don't use the destroy function like we've seen before.

148
00:10:17,700 --> 00:10:20,550
We specifically use the remove from parent.

149
00:10:20,940 --> 00:10:25,170
And there's one more thing that we need to do, and that's to create a function named set start delay.

150
00:10:28,250 --> 00:10:31,460
We can outrank the start delay value into the graph.

151
00:10:31,490 --> 00:10:38,240
So this is the other option from we use control drag previously out drag will allow us to set the variable

152
00:10:38,420 --> 00:10:43,910
and we just want to hook the execution pins up from the start of the function to the variable.

153
00:10:44,150 --> 00:10:50,270
And if we also drag the green int value pin into the start delay function mode, this will automatically

154
00:10:50,270 --> 00:10:52,010
create an input value for us.

155
00:10:52,220 --> 00:10:53,030
So just a handy tip.

156
00:10:53,360 --> 00:10:58,580
If you're not familiar with blueprints and the notes, you can prefill input or output values like this

157
00:10:58,820 --> 00:10:59,820
by just tracking them in.

158
00:10:59,930 --> 00:11:01,790
You can say it's automatically named as well.

159
00:11:01,850 --> 00:11:02,660
So super handy.

160
00:11:03,050 --> 00:11:07,650
So this function will allow us to keep the start delay value secure in this class.

161
00:11:07,880 --> 00:11:12,980
But we can call the function from other classes to easily update how long we want the start delay to

162
00:11:12,980 --> 00:11:13,400
last.

163
00:11:13,430 --> 00:11:15,080
When creating this widget.

164
00:11:15,410 --> 00:11:22,430
So in a similar way to how we've been setting many of our variables in the C++ classes to be in the

165
00:11:22,460 --> 00:11:28,730
private section to avoid other classes being able to access or accidentally override a property between

166
00:11:28,730 --> 00:11:31,630
classes, we can do something very similar and blueprints.

167
00:11:31,790 --> 00:11:38,050
By selecting our start delay integer and taking this to be private in the private checkbox here.

168
00:11:38,360 --> 00:11:42,440
So this will be used later when we create our widgets from our game mode class.

169
00:11:42,650 --> 00:11:46,510
But we kind of already know how we're going to be setting this up so we can get this ready for use later.

170
00:11:46,820 --> 00:11:49,900
And just plug everything in when that game night class is ready to go.
