1
00:00:04,190 --> 00:00:05,060
Everyone, welcome back.

2
00:00:05,090 --> 00:00:09,740
In this lecture, we'll be creating our health component, which will be a flexible class, allowing

3
00:00:09,740 --> 00:00:16,010
us to record health undamaged for any actor or pawn that we place in the world, whilst will only be

4
00:00:16,010 --> 00:00:18,470
applying this to our own classes for this game.

5
00:00:18,740 --> 00:00:23,060
Something like our health component would be great for recording damage to props around the world.

6
00:00:23,090 --> 00:00:30,110
If you wanted to align things like Biros Kraatz vehicles, all of those to take damage before exploding

7
00:00:30,110 --> 00:00:31,340
or reacting in some way.

8
00:00:31,670 --> 00:00:36,560
So before we create our health components, I just wanted to cover the difference between the actor

9
00:00:36,560 --> 00:00:41,960
components and the sync components, as we've now been using both of these throughout the project.

10
00:00:42,120 --> 00:00:46,510
And I know that you've already worked a lot with the Grabow actor component in the previous section.

11
00:00:46,820 --> 00:00:52,160
So I've created two new blueprint classes between the lectures just to kind of visualize a few of the

12
00:00:52,160 --> 00:00:54,170
concepts so you won't need these to follow along.

13
00:00:54,440 --> 00:00:57,800
And I'll be removing them as soon as this example is over.

14
00:00:58,100 --> 00:01:05,090
So I have my BP underscore scene and BP underscore actor for the class and the actor components respectively

15
00:01:05,330 --> 00:01:06,320
inside of the pawn tank.

16
00:01:06,380 --> 00:01:11,630
I've added both of these in the components section and we can see here that the BP underscore scene

17
00:01:11,810 --> 00:01:14,840
is showing up here with many of the other components that we already have.

18
00:01:14,930 --> 00:01:19,530
Whilst the BP underscore actor is kind of done here by itself and kind of lonely.

19
00:01:19,670 --> 00:01:26,150
So both of these class types are very similar and that they can both be placed on actors, as we can

20
00:01:26,150 --> 00:01:26,600
see here.

21
00:01:26,810 --> 00:01:33,200
And the main difference is that the scene component is up in the top section and has a transform, meaning

22
00:01:33,200 --> 00:01:38,540
that it can be moved around in the world and attached to other scene components, whereas the actor

23
00:01:38,540 --> 00:01:42,950
component can be attached to only an actor and not other components.

24
00:01:43,130 --> 00:01:46,970
And it also has no transform or representation or place in the world.

25
00:01:47,090 --> 00:01:52,700
So if we take a quick look in the content browser and create a new blueprint, look for something like

26
00:01:52,700 --> 00:01:57,170
these static mesh components as this is something we've already used in our classes.

27
00:01:57,440 --> 00:02:02,180
And we can again take another look in to some of the inheritance and see that many of the components

28
00:02:02,180 --> 00:02:08,750
that we are already using are just a child class of the same component type, which itself is a child

29
00:02:08,780 --> 00:02:10,310
of the actor component.

30
00:02:10,760 --> 00:02:15,530
So again, we can just see that all this really happening here is the sync component is inheriting everything

31
00:02:15,590 --> 00:02:20,990
that the actor component has, such as being able to be placed on other actors in classes, and then

32
00:02:20,990 --> 00:02:26,480
it's getting some of his own functionality, such as the recognition of world transforms and things

33
00:02:26,750 --> 00:02:28,280
as part of its own class.

34
00:02:28,550 --> 00:02:33,410
So with all of that information fresh in mind, your challenge is to use what I've already described

35
00:02:33,650 --> 00:02:37,520
and consider which class would work best for our new health component.

36
00:02:37,850 --> 00:02:39,500
If you don't already have an answer in mind.

37
00:02:39,710 --> 00:02:44,690
Pause the video here and take a look at the class descriptions to see if that will help.

38
00:02:45,790 --> 00:02:51,880
Okay, so the main thing that would be the deciding point here is that we would have very few arguments

39
00:02:52,180 --> 00:02:55,930
that could be made for the health component to need a place in the world.

40
00:02:56,020 --> 00:02:58,720
We're not going to be attaching this to the player's hand, for example.

41
00:02:58,900 --> 00:03:01,210
We're not going to be placing this on other components.

42
00:03:01,480 --> 00:03:06,070
So in this instance, I think it's going to make sense to make this a reusable, active component.

43
00:03:06,610 --> 00:03:11,080
So choose to create a new C++ class and search for the active component type.

44
00:03:12,430 --> 00:03:13,780
Nameless, one health component's.

45
00:03:15,440 --> 00:03:17,940
And place it in a new folder named Component's.

46
00:03:21,000 --> 00:03:26,030
As always, when that's open, we'll take our usual steps of removing the tick event as we're not going

47
00:03:26,030 --> 00:03:28,470
to need this to update constantly over time.

48
00:03:29,040 --> 00:03:31,380
And we'll take the second public section with it.

49
00:03:33,050 --> 00:03:39,020
Then create a private section and create two float variables, one named default health, which are

50
00:03:39,020 --> 00:03:42,890
set to one hundred and one named health, that I'll default to zero.

51
00:03:44,750 --> 00:03:50,540
Then the default health will need a new property with the editor anywhere with you property complete,

52
00:03:50,840 --> 00:03:57,110
the health variable will be updated purely in C++ and set based on the default health.

53
00:03:57,170 --> 00:04:00,500
So we shouldn't need this to be exposed or have any new properties here.

54
00:04:01,040 --> 00:04:05,390
And the final variable that we need is the reference to the game mode that we'll be using to pass a

55
00:04:05,390 --> 00:04:06,440
message along later.

56
00:04:06,620 --> 00:04:14,150
If the owner's health is lowered to zero, so we'll create a pointer to the A tank game mode base and

57
00:04:14,150 --> 00:04:16,220
we'll name this one game mode ref.

58
00:04:17,280 --> 00:04:22,120
And then, of course, at the top of this head, a fight we just need to include a full declaration

59
00:04:22,120 --> 00:04:26,100
to this class by using Class A tank game mode base.

60
00:04:26,920 --> 00:04:32,620
So to finish our declarations, we want to create a new protected function of type, avoid name to take

61
00:04:32,620 --> 00:04:33,070
damage.

62
00:04:33,220 --> 00:04:37,570
This will be another function that will be binding to an existing function in the class.

63
00:04:37,780 --> 00:04:41,260
And this will be the any damage event on the owning pawn.

64
00:04:41,500 --> 00:04:46,240
So for that reason, we're going to need the overwrites very similar to what we did with the on hit

65
00:04:46,240 --> 00:04:48,100
function we created previously.

66
00:04:48,400 --> 00:04:49,880
These overwrites are all very similar.

67
00:04:49,900 --> 00:04:54,640
So I have these ready as they're all kind of similar types to the unhit overrides.

68
00:04:54,730 --> 00:04:59,020
And again, these kind of explain themselves and what they do in the naming.

69
00:04:59,290 --> 00:05:03,190
So we're going to need an active pointer named damage actor.

70
00:05:03,520 --> 00:05:08,080
So the actor which is being damaged then will need a flight variable named damage.

71
00:05:08,170 --> 00:05:11,470
So the amount of damage being passed into them followed by a contest.

72
00:05:11,890 --> 00:05:12,730
You damage type.

73
00:05:13,060 --> 00:05:14,170
Again, this will be a pointer.

74
00:05:14,260 --> 00:05:16,330
And this one is named damage type.

75
00:05:16,360 --> 00:05:17,890
So the type of damage being used.

76
00:05:18,910 --> 00:05:22,420
Then a controller pointer named instigated by.

77
00:05:24,610 --> 00:05:27,880
And then finally, another act pointer named damage caused.

78
00:05:28,060 --> 00:05:28,980
So, again, very similar.

79
00:05:29,140 --> 00:05:30,400
The overall instigator.

80
00:05:30,440 --> 00:05:36,610
So the possessed porn or controller that was responsible for sending the damage and then the specific

81
00:05:36,850 --> 00:05:38,710
actor which is causing the damage.

82
00:05:39,280 --> 00:05:41,570
And again, because this is going to be a delegate.

83
00:05:41,590 --> 00:05:44,440
We need to add a you function above this.

84
00:05:46,680 --> 00:05:50,610
Then to finish getting this class ready, I'll take the usual steps to implement the function.

85
00:05:52,860 --> 00:05:57,450
Then I'll delete the tech function and make sure to set the kind of a tech to be false.

86
00:05:57,750 --> 00:06:01,920
As mentioned, we won't be using the tech functionality in this class as it will be another class,

87
00:06:01,950 --> 00:06:06,960
which is kind of completely reactive to functions being called on it or those which has been assigned

88
00:06:06,960 --> 00:06:09,060
to by the bindings with all of that done.

89
00:06:09,090 --> 00:06:13,050
We have our class set up and ready to implement its new functionality.

90
00:06:13,170 --> 00:06:14,420
We have quite a bit to do in this class.

91
00:06:14,490 --> 00:06:19,200
I think we should have everything ready to implement the whole class in the next lecture without leaving

92
00:06:19,230 --> 00:06:20,550
all of the comments to come back to.
