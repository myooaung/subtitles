1
00:00:04,240 --> 00:00:10,270
Everyone, and welcome back in this lecture will be creating and displaying our start and end widgets

2
00:00:10,330 --> 00:00:13,450
to the screen to encapsulate the flow of gameplay.

3
00:00:13,840 --> 00:00:19,690
We need to start off in our BP underscore game mode based blueprint in the event graph.

4
00:00:19,810 --> 00:00:21,580
We can get rid of the begin play.

5
00:00:21,760 --> 00:00:24,580
And the event tech as we won't be using those.

6
00:00:24,970 --> 00:00:30,460
What we want to do instead is override our functions from the C++ parent class.

7
00:00:30,970 --> 00:00:36,220
We can do this by going to the function section, highlighting the function text to get the override

8
00:00:36,220 --> 00:00:39,050
option and then clicking that button when it appears.

9
00:00:39,550 --> 00:00:45,010
If we then drop this down, we can see all of the inherited functions to override and the two that we're

10
00:00:45,010 --> 00:00:46,640
interested in fall under the tank.

11
00:00:46,660 --> 00:00:51,940
Game mode category, which are the custom functions that we've created in our own class.

12
00:00:52,060 --> 00:00:57,910
So if we start by selecting the game starts and then go back and also select the game over function,

13
00:00:58,120 --> 00:01:02,410
these will then be implemented into the event graph as event notes.

14
00:01:02,470 --> 00:01:07,810
So because we've defined these as a blueprint implementable, we don't have a parent function to implement

15
00:01:08,080 --> 00:01:09,490
or call the override on.

16
00:01:09,910 --> 00:01:13,160
So we won't need to add the call to parent function here.

17
00:01:13,210 --> 00:01:14,440
If you've seen that used before.

18
00:01:14,860 --> 00:01:21,360
So what we want to do here is to create our widgets as soon as these functions are called in the C++

19
00:01:21,430 --> 00:01:22,600
counterpart class.

20
00:01:22,810 --> 00:01:26,500
As this was the intention to get everything like that running in our blueprint.

21
00:01:26,590 --> 00:01:29,950
So to create a widget we call the create widget function.

22
00:01:30,220 --> 00:01:33,370
That's taken a parameter here of the type of widget that we want to pass in.

23
00:01:33,730 --> 00:01:39,100
So for our game start function, this will be the WBB underscore game start.

24
00:01:39,400 --> 00:01:41,310
And this only creates the widget.

25
00:01:41,320 --> 00:01:48,130
So it kind of makes the object exist in the context of the current world to make actually show on screen.

26
00:01:48,340 --> 00:01:53,680
We need to take the returning widget reference here and call the ad to viewport function.

27
00:01:54,190 --> 00:01:57,710
Also remember that we've set up those SACEUR functions in our widget blueprint.

28
00:01:57,790 --> 00:02:00,820
So we need to pass in a value for the start delay.

29
00:02:01,090 --> 00:02:04,270
So because we have a reference to the exact widget type.

30
00:02:04,450 --> 00:02:10,740
This way we can pull from the return value again and call the set start delay function within that class.

31
00:02:11,140 --> 00:02:15,610
We can provide the amount of time that we want the game start countdown to take.

32
00:02:15,910 --> 00:02:20,380
And then we're going to want to ensure that this is called before the widget is being displayed to avoid

33
00:02:20,380 --> 00:02:26,770
any kind of visual jolts in the widget elements being updated after they've been kind of placed on the

34
00:02:26,770 --> 00:02:27,160
screen.

35
00:02:27,370 --> 00:02:29,830
Have also gone ahead and added some reworked notes here.

36
00:02:29,830 --> 00:02:31,450
So you can see me doing that in the background.

37
00:02:31,570 --> 00:02:33,220
Just keep things a little bit tidier.

38
00:02:33,370 --> 00:02:36,730
And if you're not familiar with this, the easiest way to get Re-route notes, you can search for them

39
00:02:36,730 --> 00:02:37,390
if you wanted.

40
00:02:37,810 --> 00:02:42,820
But if you really have some wires available or you need to do is double click on The Wire where you

41
00:02:42,820 --> 00:02:46,600
would like a reboot note to be placed, and then you can kind of move these around so that we don't

42
00:02:46,600 --> 00:02:48,280
have so many wires going through each other.

43
00:02:48,460 --> 00:02:54,160
So for the start, time alone, it looks as though we haven't created a value to use for this section

44
00:02:54,160 --> 00:02:54,520
just yet.

45
00:02:54,580 --> 00:03:01,390
So would just prefer this with a hard set value of two seconds just to test things and make sure that

46
00:03:01,390 --> 00:03:02,050
they're working.

47
00:03:02,350 --> 00:03:05,920
We can then copy the create widget note and paste that just below.

48
00:03:06,070 --> 00:03:09,910
I've used control w here to get the copy paste in a single command.

49
00:03:10,330 --> 00:03:14,050
Then we just need to replace the widget reference with the game and widget.

50
00:03:14,560 --> 00:03:19,420
Again, we're gonna want to call the function that will update the text before displaying the widget.

51
00:03:19,450 --> 00:03:24,370
So this is controlling the display of showing whether the player has won or lost the game.

52
00:03:24,880 --> 00:03:28,450
So pulling from the return node will cool the set play player.

53
00:03:28,450 --> 00:03:35,500
One function from the WBB underscore game and class and pass the player one from our game mode function.

54
00:03:35,500 --> 00:03:37,060
Call into the set.

55
00:03:37,120 --> 00:03:39,850
Play at one function with a couple more rewrite notes.

56
00:03:40,210 --> 00:03:41,290
Just keep things again.

57
00:03:41,500 --> 00:03:45,800
Slightly tidier and easy to maintain with an ad at the widget to the screen.

58
00:03:45,850 --> 00:03:50,500
By pulling from the re-route pen and calling the ad to viewport function.

59
00:03:50,680 --> 00:03:56,290
So this when I display both the widgets during the gameplay as we already have everything set up to

60
00:03:56,290 --> 00:03:56,820
account for them.

61
00:03:56,830 --> 00:03:59,440
So if we press play, we can go ahead and test this.

62
00:04:03,200 --> 00:04:04,010
So we can see her there.

63
00:04:04,130 --> 00:04:05,240
Everything seems to have worked.

64
00:04:08,720 --> 00:04:13,610
If we destroy the enemy Tarrant's, then we are greeted with the wind state widget.

65
00:04:14,330 --> 00:04:19,370
Then if I play again, we can see that the loose state is also working if we like the target to deplete

66
00:04:19,520 --> 00:04:20,150
our health.

67
00:04:20,330 --> 00:04:23,370
The only real problem here is that nothing is actually changing for the player.

68
00:04:23,540 --> 00:04:26,390
So the tank is not being hidden and we can still move about freely.

69
00:04:26,810 --> 00:04:29,000
It almost feels as though nothing actually happened.

70
00:04:29,180 --> 00:04:35,300
So let's just go back to our C++ class and make some of those changes to start addressing at least a

71
00:04:35,300 --> 00:04:36,980
few of these issues in this lecture.

72
00:04:37,010 --> 00:04:42,250
So the first thing we want to do is go to our game mode class in the protected section here.

73
00:04:42,320 --> 00:04:47,960
We can add a new variable for use in our blueprint class, which will control the countdown duration.

74
00:04:47,960 --> 00:04:48,970
We just saw that we're missing.

75
00:04:49,100 --> 00:04:50,750
So I'll give you a small challenge here.

76
00:04:50,960 --> 00:04:55,370
Create a new protected variable of type int 32 named start delay.

77
00:04:55,760 --> 00:05:01,550
Also provide the new property to ensure that changes can be made in the default class as the game mode

78
00:05:01,550 --> 00:05:03,680
doesn't exist until the game starts.

79
00:05:03,770 --> 00:05:06,800
So instance, use in game mode doesn't usually very useful.

80
00:05:07,160 --> 00:05:12,830
Besides, if you know you're going to be updating something during the game that be working after the

81
00:05:12,830 --> 00:05:18,350
event begin, players being called also make it readable in blueprint's and then provide a category

82
00:05:18,410 --> 00:05:19,400
named game loop.

83
00:05:20,440 --> 00:05:26,050
Okay, so hopefully you have that we will start by creating the Integer 32 named Start Didley, which

84
00:05:26,080 --> 00:05:28,660
I'll set to a default value of three.

85
00:05:31,670 --> 00:05:33,650
And making it edit devotes only.

86
00:05:36,790 --> 00:05:38,980
Providing the blueprint read-only specify.

87
00:05:41,190 --> 00:05:43,370
And then giving it a category, name of game loop.

88
00:05:43,920 --> 00:05:48,950
So all very standard stuff, but I just wanted to try wording the process a little bit differently to

89
00:05:48,950 --> 00:05:54,030
see if the concepts in general and I'm making sense, rather than focusing on the exact steps that we've

90
00:05:54,030 --> 00:05:55,260
taken in the past for the U.

91
00:05:55,260 --> 00:06:00,960
Properties before compiling then and checking some of our changes, I'm also going to go to our pawn

92
00:06:01,050 --> 00:06:03,600
tank code file and just make it change.

93
00:06:03,870 --> 00:06:05,040
That will be removing later.

94
00:06:05,070 --> 00:06:11,460
But I wanted to provide a visual example to aid the description I provided in some of the previous lectures.

95
00:06:11,820 --> 00:06:17,010
So down in the 100 destruction function, I'm going to add a cool to destroy the pawn.

96
00:06:17,190 --> 00:06:19,620
Very similar to what we have in the turret class.

97
00:06:20,040 --> 00:06:22,820
And this will help us visualize exactly when we've lost the game.

98
00:06:23,040 --> 00:06:28,560
But also for anybody who hasn't seen the jumpy camera transition I mentioned when a controlled pawn

99
00:06:28,560 --> 00:06:29,130
is destroyed.

100
00:06:29,370 --> 00:06:31,980
This will let you know what to look out for in your own projects.

101
00:06:32,190 --> 00:06:34,060
So let's be sure to save all of that.

102
00:06:34,080 --> 00:06:36,660
Go back to the editor and recompile.

103
00:06:38,900 --> 00:06:43,520
The first thing then when we're back in the game mode class, we cannot get our start delay variable

104
00:06:43,790 --> 00:06:46,510
and pass that straight into the start widget function.

105
00:06:46,970 --> 00:06:51,080
This leads us to and I very quickly change how long the current line period will take.

106
00:06:51,170 --> 00:06:55,430
So you can play around with some values here to get a start to count on time that you like.

107
00:06:55,520 --> 00:06:58,090
I'm going to settle for these three seconds here.

108
00:06:58,840 --> 00:06:59,610
And then press play.

109
00:06:59,690 --> 00:07:02,030
I'm just going to go over to the turret.

110
00:07:02,330 --> 00:07:04,040
We're ready now that we can enter the wind state.

111
00:07:04,460 --> 00:07:07,430
So I'll let the turret win here so that we can test our loose state.

112
00:07:07,640 --> 00:07:10,400
And we can see that the text is now updating correctly.

113
00:07:10,480 --> 00:07:16,760
We get thrown quite sharply to the scene at defo camera, which is the result we're trying to avoid

114
00:07:16,820 --> 00:07:20,360
by creating our custom handle destruction logic for the player later.

115
00:07:20,870 --> 00:07:25,310
But this is what I meant by that kind of jumpy camera movement from one camera to another.

116
00:07:25,520 --> 00:07:30,230
If you completely destroying a pawn and we look at how and why we can get around that a little bit later,

117
00:07:30,470 --> 00:07:35,360
this will require a player controller, which will be a topic that we cover in future lectures.
