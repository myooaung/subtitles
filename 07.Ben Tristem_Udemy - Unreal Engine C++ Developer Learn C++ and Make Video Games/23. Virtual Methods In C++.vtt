WEBVTT
1
00:00:04.540 --> 00:00:09.710
So in this lecture, we're going to be talking all about the virtual method in C++.

2
00:00:09.730 --> 00:00:10.690
We've seen it before.

3
00:00:10.690 --> 00:00:13.120
We've used it, but have we fully understood it?

4
00:00:13.240 --> 00:00:13.900
Let's see.

5
00:00:14.320 --> 00:00:20.470
So the idea of a virtual method is that it allows us to override functions in a base class.

6
00:00:20.500 --> 00:00:24.010
We've seen this with things like begin play and take in.

7
00:00:24.100 --> 00:00:24.730
Unreal.

8
00:00:25.120 --> 00:00:29.710
But let's get further into this and understand why they're marked as virtual.

9
00:00:30.130 --> 00:00:33.890
It allows us to change functionality in that base class.

10
00:00:34.780 --> 00:00:41.710
And it does something called dynamic dispatch, which against talk about in a second to kind of understand

11
00:00:42.100 --> 00:00:48.490
what this really means and why virtual methods aren't the default functionality in C++ as they are in

12
00:00:48.490 --> 00:00:50.680
many other languages, such as C Sharp.

13
00:00:51.010 --> 00:00:52.120
So let's have a look at this.

14
00:00:52.630 --> 00:00:57.840
I'm going to be doing this in the CVP Dots, S.H. Web site.

15
00:00:58.210 --> 00:00:59.890
So the way is not an unreal here at all.

16
00:00:59.890 --> 00:01:05.170
We're just looking at the raw C++ functionality so that you can understand this language feature and

17
00:01:05.170 --> 00:01:05.890
how it works.

18
00:01:06.400 --> 00:01:10.510
Now, the first thing I'm going to do here is just go ahead and clear out the main method.

19
00:01:10.900 --> 00:01:16.050
And in our use case, we are going to think about a class for guns.

20
00:01:16.270 --> 00:01:19.450
Seeing as this is a very common use case for games.

21
00:01:19.930 --> 00:01:20.770
So let's have it.

22
00:01:20.770 --> 00:01:22.570
Look at a class.

23
00:01:22.600 --> 00:01:24.970
Call it gun fairly straightforwardly.

24
00:01:25.450 --> 00:01:31.660
And then we're going to have the body of this class be public and a void shoot method.

25
00:01:32.680 --> 00:01:38.470
And I'm just going to go ahead and declare the body of this shoot method right here in line to keep

26
00:01:38.470 --> 00:01:39.340
things super simple.

27
00:01:39.370 --> 00:01:41.380
By the way, you can do this if you haven't seen this before.

28
00:01:41.620 --> 00:01:47.890
But generally speaking, we want to do things in a separate C++ file to keep things separate, to make

29
00:01:47.890 --> 00:01:49.600
the compilation times quicker and so on.

30
00:01:49.900 --> 00:01:52.210
But here, where it's just a toy example, this is fine.

31
00:01:52.750 --> 00:01:55.280
So we're going to do an SDD C out.

32
00:01:55.330 --> 00:01:59.770
So using C++ as output string stuff and we're going to go bang.

33
00:02:00.490 --> 00:02:04.780
Basically when we call this method and then we're going to end line.

34
00:02:05.770 --> 00:02:07.850
And that's the body of our shoot method.

35
00:02:07.930 --> 00:02:11.560
And we can cap off the class where the curly brace and semicolon.

36
00:02:12.130 --> 00:02:14.740
So let's go ahead and actually use this class.

37
00:02:14.800 --> 00:02:23.470
I'm going to create a my gun variable in Maine and I am going to call my gun dot shoot and let's see

38
00:02:23.530 --> 00:02:27.070
if everything is working here as it should hit the run button.

39
00:02:27.160 --> 00:02:30.310
And Bang is calling the method as we'd expect.

40
00:02:31.150 --> 00:02:39.400
Now, what happens if I want to extend my gun and perhaps make a rifle or pistol?

41
00:02:39.490 --> 00:02:40.270
Let's call a pistol.

42
00:02:40.660 --> 00:02:47.050
So class pistol is a inherited from gun, which would do like this.

43
00:02:47.290 --> 00:02:50.920
And if you haven't seen this before, you probably haven't written this necessarily before.

44
00:02:51.310 --> 00:02:57.280
You do a public inheritance from guns so that other classes can see that you inherit from gun and then

45
00:02:57.280 --> 00:02:58.870
we do in the public section.

46
00:02:58.960 --> 00:03:05.920
We want to maybe create our own shoot method for the pistol that overrides this functionality instead

47
00:03:05.920 --> 00:03:07.840
of printing bang at the end here.

48
00:03:08.440 --> 00:03:12.460
We want to print peel because it's a smaller gun.

49
00:03:12.820 --> 00:03:17.290
It makes a smaller sound and that's our shoot method there.

50
00:03:17.590 --> 00:03:19.960
And let's cap off the class there.

51
00:03:20.650 --> 00:03:23.290
And what we want to do is create ourselves a pistol.

52
00:03:23.380 --> 00:03:27.790
So pistol my pistol in the main method here.

53
00:03:28.800 --> 00:03:33.880
And because these are are just existing here, right on the main method, we're not using pointers to

54
00:03:33.880 --> 00:03:34.030
them.

55
00:03:34.030 --> 00:03:38.260
That's why we're using the dot operator here instead of the arrow.

56
00:03:38.920 --> 00:03:42.100
So the my pistol dot shoot.

57
00:03:42.340 --> 00:03:43.270
Let's see what that does.

58
00:03:43.810 --> 00:03:47.110
I'll expect it to print PUE, which it does.

59
00:03:47.380 --> 00:03:47.770
Cool.

60
00:03:48.340 --> 00:03:48.530
Okay.

61
00:03:48.580 --> 00:03:54.640
So let's remove our methods that are calling shoot directly on these and let's see how things would

62
00:03:54.640 --> 00:03:56.830
behave with a pointer.

63
00:03:57.490 --> 00:04:01.690
So I'm going to create a gun pointer called Gun.

64
00:04:02.730 --> 00:04:03.480
PTL.

65
00:04:04.760 --> 00:04:07.950
And on the next, Lynna could do it on the same line simplicity's sake.

66
00:04:07.970 --> 00:04:08.900
I'm going to do it on the next line.

67
00:04:08.900 --> 00:04:16.100
I'm going to set that gun pointer to point to the address of the address of operator, the address of

68
00:04:16.100 --> 00:04:16.310
the.

69
00:04:16.370 --> 00:04:18.130
My gun variable.

70
00:04:18.800 --> 00:04:23.750
And then because it's the pointer, we need to use the arrow operator to call the shoot method.

71
00:04:23.930 --> 00:04:30.310
So I'm going to call shoot on my gun click run and we get bang as the result there.

72
00:04:30.470 --> 00:04:30.950
Cool.

73
00:04:31.430 --> 00:04:34.460
Now what happens if I do the same thing?

74
00:04:34.490 --> 00:04:40.620
But instead of setting the gun pointed to point to my gun, I set it to point to my pistol.

75
00:04:41.040 --> 00:04:42.320
Let's go ahead and hit run now.

76
00:04:43.010 --> 00:04:43.210
Okay.

77
00:04:43.250 --> 00:04:44.990
That's an interesting behavior there.

78
00:04:45.440 --> 00:04:51.680
What's going on here is is calling this first method in both instances.

79
00:04:52.100 --> 00:04:55.520
So why hasn't this second shoot method been called?

80
00:04:55.520 --> 00:04:57.800
We've got a pistol here as the pointer.

81
00:04:58.520 --> 00:05:05.510
Well, what happens if you don't have a virtual method is that by default, C++ will use the type of

82
00:05:05.510 --> 00:05:08.420
your pointer, which this is a gun point to remember.

83
00:05:08.870 --> 00:05:11.870
We'll use that type to find the method to call.

84
00:05:11.900 --> 00:05:17.960
So it will go and call this shoot method at the top rather than the overridden method in pistol.

85
00:05:18.290 --> 00:05:23.510
In order for it to cool the overridden in method in pistol, it would have to cool, it would have to

86
00:05:23.510 --> 00:05:25.450
have a pointer of type pistol.

87
00:05:26.120 --> 00:05:27.560
Now that's fine.

88
00:05:27.620 --> 00:05:29.370
And you can see why they do this.

89
00:05:29.390 --> 00:05:30.380
It's for efficiency.

90
00:05:30.410 --> 00:05:32.240
C++ is all about efficiency.

91
00:05:32.600 --> 00:05:39.290
If something is going to cost more when it's compiled, when it runs, then C++ won't do it by default

92
00:05:39.290 --> 00:05:40.480
unless you ask it to.

93
00:05:40.850 --> 00:05:46.280
So it's very easy for C++ to make the look up and go, well, this is a gun pointer, so I'll call this

94
00:05:46.280 --> 00:05:47.360
gun point a method.

95
00:05:47.830 --> 00:05:50.050
And this is where dynamic dispatch comes in.

96
00:05:50.090 --> 00:05:53.930
This fancy term basically means that we don't want it to do that.

97
00:05:54.260 --> 00:05:59.900
Well, we wanted to do is say, hang on a second, what's actually stored in that gun pointer?

98
00:06:00.050 --> 00:06:02.000
What's read the real type there?

99
00:06:02.540 --> 00:06:06.110
And the real type, we realize is it's a type pistol.

100
00:06:06.440 --> 00:06:12.530
And so we've got to ask ourselves, is there a method for that type that's overridden?

101
00:06:12.560 --> 00:06:13.580
And yes, there is.

102
00:06:13.700 --> 00:06:18.260
So how do we give C++ the permission to be just that little bit less efficient?

103
00:06:18.620 --> 00:06:25.040
And give us the ability to override without having to change that point to type, which isn't always

104
00:06:25.040 --> 00:06:26.120
necessarily possible.

105
00:06:26.120 --> 00:06:28.340
In fact, in many cases it isn't possible.

106
00:06:28.370 --> 00:06:35.210
As is the case when you're having your own custom actor class, Unreal doesn't have the pointer set

107
00:06:35.210 --> 00:06:37.480
up to point to your particular class.

108
00:06:37.490 --> 00:06:41.180
That would require them to change the whole engine every time you introduce in a new class.

109
00:06:41.480 --> 00:06:42.950
No, that's just not possible.

110
00:06:43.310 --> 00:06:46.250
They have pointed to something of type act to star.

111
00:06:46.550 --> 00:06:50.990
So when they call begin play, you wanted to call your begin play method.

112
00:06:51.020 --> 00:06:52.490
So it has to be virtual.

113
00:06:52.790 --> 00:06:54.200
And that is the key here.

114
00:06:54.530 --> 00:07:02.120
If we stick virtual in front of the method in the parent class, this now signals to C++ that.

115
00:07:02.120 --> 00:07:03.050
Hang on a second.

116
00:07:03.470 --> 00:07:11.000
If I am calling shoot on a pointer of type gun pointer, I need to check that this isn't, for example,

117
00:07:11.060 --> 00:07:14.150
a pistol and that this shoot method has been overridden.

118
00:07:14.570 --> 00:07:19.150
So if we go ahead and hit run now, you can see we get bang and then pull.

119
00:07:19.670 --> 00:07:23.870
So it is working, as we'd expect with dynamic dispatch.

120
00:07:24.230 --> 00:07:29.640
And that is the term for this thing where we basically just mean check what kind of type.

121
00:07:29.660 --> 00:07:33.230
This is really being held in the pointer and call the relevant method.

122
00:07:34.160 --> 00:07:39.680
Now there is an extra little bit of syntax that you will often see as use, and that is the override

123
00:07:39.740 --> 00:07:40.250
keyword.

124
00:07:40.550 --> 00:07:45.320
And he put that after a method that you are trying to override as virtual.

125
00:07:46.040 --> 00:07:53.120
And basically, the override keyword isn't strictly necessary, nor is putting virtual again against

126
00:07:53.120 --> 00:07:56.210
something on the child class of a gun.

127
00:07:56.270 --> 00:07:59.180
So you don't have to put virtual, but it doesn't hurt to do it.

128
00:07:59.720 --> 00:08:06.530
But override is particularly helpful because it allows us to just make sure that we've got our naming

129
00:08:06.530 --> 00:08:07.040
correct.

130
00:08:07.070 --> 00:08:13.850
So if I hit run everything runs as before when I have override, but say I had mistakenly got the name

131
00:08:13.850 --> 00:08:17.330
of this method wrong, so I don't do the override.

132
00:08:17.330 --> 00:08:19.180
And I had called a oh no shoot.

133
00:08:19.970 --> 00:08:22.760
For example, I copied the name wrong.

134
00:08:22.790 --> 00:08:24.350
I typed it instead of copying it.

135
00:08:24.660 --> 00:08:29.030
If I hit run now, then you see we've got the same error again because we're trying to cool to shoot.

136
00:08:29.420 --> 00:08:32.210
We mistakenly overrode it incorrectly.

137
00:08:32.510 --> 00:08:33.600
It's going bang, bang.

138
00:08:34.130 --> 00:08:37.850
So the way I could avoid this is by saying, well, I'm trying to override something.

139
00:08:37.850 --> 00:08:40.460
So I put my override key word in here.

140
00:08:40.880 --> 00:08:45.710
And if I tried to compile it now you can see that it's saying shooter is marked as override, but there

141
00:08:45.710 --> 00:08:48.710
is no method, no virtual method for me to override.

142
00:08:49.220 --> 00:08:50.810
In which case I can go.

143
00:08:50.870 --> 00:08:52.370
Oh, yeah, I've mistype that.

144
00:08:52.460 --> 00:08:57.140
So I'm going to go ahead and correct my code and just make it back to shoot.

145
00:08:57.590 --> 00:08:59.340
And now it works as I intended.

146
00:08:59.370 --> 00:09:03.080
So it's just that little bit of extra safety by putting that override there.

147
00:09:03.490 --> 00:09:03.900
And instead.

148
00:09:04.080 --> 00:09:09.200
This would also protect us against the case where the thing that we're trying to override isn't virtual,

149
00:09:09.200 --> 00:09:10.340
if I try to do that.

150
00:09:10.400 --> 00:09:16.640
You can see that it's saying it's marked as override, but it doesn't override because that parent class

151
00:09:16.970 --> 00:09:19.280
doesn't have a virtual function for shoot.

152
00:09:19.490 --> 00:09:25.580
So hopefully this has given you somewhat of an overview of how C++ uses and implements virtual functions

153
00:09:25.580 --> 00:09:28.160
and why we have to be so explicit about them.

154
00:09:28.810 --> 00:09:32.420
Now, let's think about some more use cases for virtual functions.

155
00:09:32.480 --> 00:09:34.760
In general, we've already seen some from the engine.

156
00:09:34.760 --> 00:09:37.430
Where have you seen Virtual used before?

157
00:09:38.650 --> 00:09:40.180
Where can you imagine using it?

158
00:09:40.210 --> 00:09:45.050
We've just seen a use case example where you might have a gun and different overrides of that that implement

159
00:09:45.100 --> 00:09:46.690
shoot in different ways.

160
00:09:47.470 --> 00:09:53.650
How else could you imagine using virtual functions that override the functionality in parent classes

161
00:09:53.740 --> 00:09:55.540
when you thought of an answer to those two questions?

162
00:09:55.600 --> 00:10:01.170
Go and follow the link to the discussions in this lecture and post your answer there.

163
00:10:01.230 --> 00:10:05.860
The use cases and the places that you've used them before and see what other people have come up with.

164
00:10:06.190 --> 00:10:11.200
Maybe that will help you solidify your understanding of virtual methods.

165
00:10:11.350 --> 00:10:12.250
That's it for this lecture.

166
00:10:12.310 --> 00:10:15.520
I'll see you in the next one where we'll be using virtual methods in anger.
