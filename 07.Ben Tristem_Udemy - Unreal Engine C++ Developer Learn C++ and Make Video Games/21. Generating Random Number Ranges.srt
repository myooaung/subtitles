0
1
00:00:00,690 --> 00:00:04,800
Hey and welcome to this lesson where we're going to look at working with random numbers.
1

2
00:00:04,920 --> 00:00:11,160
So in our play game function we declare and initialize the code that the player has to guess at the
2

3
00:00:11,160 --> 00:00:14,930
moment we are initializing it with the result from this rand(); function.
3

4
00:00:15,300 --> 00:00:21,240
And this function returns any value between the range of zero and thirty two thousand seven hundred
4

5
00:00:21,450 --> 00:00:22,700
and sixty seven.
5

6
00:00:22,740 --> 00:00:24,200
But let's not just take my word for it.
6

7
00:00:24,210 --> 00:00:29,940
Let's head down to our while loop in our main function and let's select all of our code within the code
7

8
00:00:29,940 --> 00:00:35,850
block and let's comment it out by holding down control and pressing the slash key the same key that
8

9
00:00:35,850 --> 00:00:38,340
we would use to start a comment.
9

10
00:00:38,400 --> 00:00:43,450
So this comments out all of our code for now and at the moment our while loop won't do anything at all.
10

11
00:00:43,610 --> 00:00:51,630
But at the start of the code block let's just see out the rand(); function and let's feed a new line to
11

12
00:00:51,630 --> 00:00:53,700
the terminal.
12

13
00:00:53,700 --> 00:01:00,450
Now when we save and compile our code and run our program our program will repeatedly print the values
13

14
00:01:00,480 --> 00:01:02,780
that Rand returns to the terminal.
14

15
00:01:02,970 --> 00:01:07,980
So remember to press control C to stop our program running and now we can see all the kinds of values
15

16
00:01:07,980 --> 00:01:10,040
that rand is giving us.
16

17
00:01:10,170 --> 00:01:15,000
So we want to look at how we can tame these random values so we can work within a range of our choosing
17

18
00:01:15,330 --> 00:01:16,200
to do this.
18

19
00:01:16,200 --> 00:01:22,710
We're going to be using the modulus operator symbolized in C++ by the percentage % sign the modulus operator
19

20
00:01:22,710 --> 00:01:26,550
gives us the remainder from performing a division.
20

21
00:01:26,550 --> 00:01:32,370
So as an example 9 divide by four is two remainder 1.
21

22
00:01:32,520 --> 00:01:39,120
So 9 % 4 is just simply 1 the modulus just gives us the remainder from the division but we're
22

23
00:01:39,120 --> 00:01:45,240
going to use this to map our random numbers to a range instead of repeatedly printing out what rand
23

24
00:01:45,240 --> 00:01:51,000
returns let's print out a rand() % 2 and let's just see what happens.
24

25
00:01:51,000 --> 00:01:53,530
Let's compile our code and run our program.
25

26
00:01:54,130 --> 00:01:54,410
Okay.
26

27
00:01:54,420 --> 00:01:59,650
We can see now that it results in values between the range of 0 and 1.
27

28
00:01:59,720 --> 00:02:02,560
Now let's change this to rand( ) % 3.
28

29
00:02:02,820 --> 00:02:06,770
Let's do the same let's compile our code and run the program.
29

30
00:02:06,780 --> 00:02:11,080
We can see it starts printing out values that's between 0 and 2.
30

31
00:02:11,160 --> 00:02:17,900
If we change this to rand( ) % 5 we get values between 0 and 4.
31

32
00:02:18,430 --> 00:02:20,560
And if we do rand( ) % 10
32

33
00:02:23,590 --> 00:02:27,150
we get values between 0 and 9.
33

34
00:02:27,190 --> 00:02:27,490
Okay.
34

35
00:02:27,490 --> 00:02:30,640
So what we can start to see here is that there's a pattern emerging.
35

36
00:02:30,640 --> 00:02:37,990
We can see that no matter what value we have once we do this modulo operation it maps the value between
36

37
00:02:37,990 --> 00:02:45,160
a range of numbers and the range is simply between zero and the modulus value subtracted by one.
37

38
00:02:45,160 --> 00:02:51,770
So even if we have two 2524 % 10 two thousand five hundred and twenty
38

39
00:02:51,770 --> 00:02:58,810
four will be mapped to a range between 0 and 9 it won't be mapped between 0 and 10 because the range
39

40
00:02:58,810 --> 00:03:02,430
goes from 0 and the modulus value subtracted by 1.
40

41
00:03:02,440 --> 00:03:08,950
So the range is 0 to 9 and the results we get from this is the same as the remainder we would get from
41

42
00:03:08,950 --> 00:03:12,430
dividing 2524 by 10
42

43
00:03:12,790 --> 00:03:18,160
So this is great because we can now use this to have more control over our random numbers as we can
43

44
00:03:18,160 --> 00:03:22,070
see we can limit them to a range of our own choice.
44

45
00:03:22,100 --> 00:03:26,900
Now let's remove this line of code here that we added into the while loop and then select all of our
45

46
00:03:26,900 --> 00:03:27,910
code in the while loop.
46

47
00:03:28,040 --> 00:03:33,800
And let's uncomment it by holding down left control and pressing the forward slash key So your challenge
47

48
00:03:33,800 --> 00:03:39,500
right now is to limit the range of the random numbers that we generate and initialize our CodeA CodeB
48

49
00:03:39,530 --> 00:03:41,930
and CodeC variables with
49

50
00:03:41,930 --> 00:03:45,340
Then once you've done this try playing your game.
50

51
00:03:45,340 --> 00:03:50,720
So pause here and make use of the modulus operator and then we can take a look at the result together
51

52
00:03:54,730 --> 00:03:56,620
Okay so I hope you had a go at this.
52

53
00:03:56,620 --> 00:04:01,810
I'm now initializing my code variables with the value that gets returned from the rand( ) % 4
53

54
00:04:01,950 --> 00:04:02,570
4
54

55
00:04:03,100 --> 00:04:07,870
Now this means that the range of values that are generated from my code variables will be between zero
55

56
00:04:08,230 --> 00:04:08,770
and three.
56

57
00:04:08,770 --> 00:04:11,950
So the values I enter must be within this range.
57

58
00:04:11,980 --> 00:04:13,490
So there are three numbers in the code.
58

59
00:04:13,570 --> 00:04:18,270
The codes add up to 6 and the codes multiply to give 6.
59

60
00:04:18,310 --> 00:04:22,590
So three times two is six and six times one is six.
60

61
00:04:22,750 --> 00:04:25,600
And three add to add one is six as well.
61

62
00:04:25,600 --> 00:04:28,400
So the answer here is three two one.
62

63
00:04:29,480 --> 00:04:34,600
But I could have entered those in any order so I complete the level and the difficulty increases.
63

64
00:04:34,600 --> 00:04:38,410
But of course we're not actually making use of our difficulty parameter yet.
64

65
00:04:38,590 --> 00:04:43,810
So the difficulty isn't actually affecting how the code gets generated in any way.
65

66
00:04:43,810 --> 00:04:49,180
Now we'll come back to this in a few moments but before we do that let's first cover another issue.
66

67
00:04:49,240 --> 00:04:53,690
I'm going to change the mod % value from four to two.
67

68
00:04:53,830 --> 00:04:59,350
Now if I jump out the program and compile my code again and run the program we can see that it says
68

69
00:04:59,350 --> 00:05:02,400
the codes multiply to give zero.
69

70
00:05:02,530 --> 00:05:08,070
Now to make our game better we really want to avoid zeros being generated.
70

71
00:05:08,110 --> 00:05:10,540
Now let's just break down our possible results.
71

72
00:05:10,540 --> 00:05:17,350
If we called rand( ) % 1 the range of our code being generated would go from zero to zero.
72

73
00:05:17,350 --> 00:05:19,360
So this isn't really good at all.
73

74
00:05:19,360 --> 00:05:23,950
Now instead of thinking in terms of the modulus value for now we can start to think in terms of our
74

75
00:05:23,950 --> 00:05:26,020
game and our difficulty value.
75

76
00:05:26,020 --> 00:05:31,750
So the modulus value is going to be our difficulty value or our difficulty parameter.
76

77
00:05:31,750 --> 00:05:38,050
So if we were on level difficulty one CodeA CodeB and CodeC would be generated within the range of
77

78
00:05:38,110 --> 00:05:44,980
zero to zero which is no good really if we want difficulty level 2 the range would be between 0 and
78

79
00:05:44,980 --> 00:05:52,300
1 if we were on difficulty level 3 the range would be between 0 and 2 and so on and so on that we really
79

80
00:05:52,300 --> 00:05:54,610
want to remove zero from the range.
80

81
00:05:54,760 --> 00:06:00,500
To do this we can simply add one to the Modulus value or in our case difficulty.
81

82
00:06:00,580 --> 00:06:06,890
This way we offset the range by 1 and 0 will be completely removed from the possible results.
82

83
00:06:06,910 --> 00:06:12,880
So this is what I want you to do initialize your code variables with rand( ) % Difficulty parameter
83

84
00:06:12,970 --> 00:06:19,930
of the play game function then offset the range by 1 to do this you want to add 1 to the difficulty
84

85
00:06:20,230 --> 00:06:22,630
then play your game and see how you get on this time
85

86
00:06:26,250 --> 00:06:32,460
ok so now where initializing our code variables with rand( ) % Difficulty + 1
86

87
00:06:32,480 --> 00:06:37,670
This means that we offset the range by 1 we will no longer have any zeros in our code.
87

88
00:06:37,730 --> 00:06:42,230
So for the first level the only possible values our code can be is 1.
88

89
00:06:42,230 --> 00:06:45,950
So the answer is just going to be 1 1 1.
89

90
00:06:46,040 --> 00:06:52,070
So I move onto the next level and the second level the only possible values our code could be is 1 or
90

91
00:06:52,070 --> 00:06:52,740
2.
91

92
00:06:52,820 --> 00:06:56,000
So the codes add up to 4 and the codes multiply to give 2.
92

93
00:06:56,000 --> 00:07:00,500
So this will be 1 1 2 and the level increases.
93

94
00:07:00,500 --> 00:07:01,320
So this works.
94

95
00:07:01,340 --> 00:07:03,080
And if you're happy with your game being this way.
95

96
00:07:03,080 --> 00:07:09,030
Well that's great but if we want the game to get much harder as we go on we need to do something else.
96

97
00:07:09,140 --> 00:07:11,350
Now there's probably many different ways that we can do this.
97

98
00:07:11,360 --> 00:07:13,660
Let's just take a look at one way.
98

99
00:07:13,670 --> 00:07:20,270
Instead of calling it rand( ) % Difficulty + 1 lets see what happens if we call rand( ) % Difficulty
99

100
00:07:20,300 --> 00:07:24,020
and then offset it by adding that difficulty again.
100

101
00:07:24,020 --> 00:07:26,150
Let's look at some possible results here.
101

102
00:07:26,390 --> 00:07:30,800
So if the difficulty is 1 then the range would just be 1 to 1.
102

103
00:07:30,830 --> 00:07:36,560
Okay very simple but if the difficulty is 2 then the range would go between 2 and 3.
103

104
00:07:36,710 --> 00:07:41,390
So we can start to see already that this starts to get harder because the range is being offset by the
104

105
00:07:41,390 --> 00:07:47,840
difficulty level 3 would go between 3 and 5 4 between 4 and 7 by the time we get to 5.
105

106
00:07:47,840 --> 00:07:50,400
The range would be between 5 and 9.
106

107
00:07:50,410 --> 00:07:54,930
So this way the game will be much harder so let's try this.
107

108
00:07:54,930 --> 00:07:56,040
Let's give this a go.
108

109
00:07:56,110 --> 00:08:02,470
Instead of calling rand( ) % Difficulty + 1 we're going to change this to rand( ) % Difficulty + Difficulty
109

110
00:08:02,850 --> 00:08:08,050
and we can highlight all of this expression here and then we can copy it and we can paste it below so
110

111
00:08:08,050 --> 00:08:12,850
we can initialize CodeB and CodeC with the same expression.
111

112
00:08:12,850 --> 00:08:17,830
And now if we save our work compile our code and run our program.
112

113
00:08:17,830 --> 00:08:19,750
This should be much harder to play.
113

114
00:08:19,750 --> 00:08:25,360
So the codes multiply to give 1 it's starting off pretty simple so it's just gonna be 1 1 1.
114

115
00:08:25,390 --> 00:08:28,000
We complete the level and move on to the next level.
115

116
00:08:28,000 --> 00:08:34,280
Now it says that 3 numbers in the code the codes add up to 7 and the codes multiply to give twelve.
116

117
00:08:34,540 --> 00:08:37,870
So I think this is two two three okay.
117

118
00:08:38,250 --> 00:08:41,800
I completely level and I move on and it gets much harder.
118

119
00:08:41,800 --> 00:08:47,260
Now you may have noticed this already but our game isn't completely random yet every time we play it
119

120
00:08:47,500 --> 00:08:49,720
it produces the same result.
120

121
00:08:49,750 --> 00:08:53,230
So we have one more step and I want you to do this.
121

122
00:08:53,290 --> 00:08:56,350
We need to initialize rand( ) with a different seed.
122

123
00:08:56,350 --> 00:08:59,950
Doing this will produce more random results for our game.
123

124
00:08:59,960 --> 00:09:03,700
Imagine all of our numbers on a deck of cards at the moment.
124

125
00:09:03,700 --> 00:09:08,580
Our game would be equivalent as the cards being in the same order every time we play the game.
125

126
00:09:08,620 --> 00:09:11,980
So seeding it is basically like shuffling the deck of cards.
126

127
00:09:11,980 --> 00:09:17,410
We are creating a new random sequence of numbers that our program can use and the best way to do this
127

128
00:09:17,410 --> 00:09:22,840
is based on your computer's time to gain access to time in our program we first need to include a header
128

129
00:09:22,840 --> 00:09:26,320
file that will allow us to call code related to time.
129

130
00:09:26,320 --> 00:09:31,810
So you need to #include<ctime header file that at the start of your main function.
130

131
00:09:31,810 --> 00:09:33,820
Add to this line of code.
131

132
00:09:33,880 --> 00:09:36,460
This creates a new seed when we play our game.
132

133
00:09:36,460 --> 00:09:39,410
Imagine it's shuffling the deck of cards for us.
133

134
00:09:39,610 --> 00:09:41,620
So pause here to add these lines of code
134

135
00:09:45,180 --> 00:09:49,860
okay so I've included the header file then at the start of my main function I'm seeding rand( )
135

136
00:09:49,860 --> 00:09:51,790
Based on the time of day.
136

137
00:09:51,810 --> 00:09:53,930
So now when we run our program we get different results.
137

138
00:09:53,970 --> 00:09:56,430
Every time we play so level 1 still kind of easy.
138

139
00:09:56,430 --> 00:09:58,030
So that's gonna be 1 1 1.
139

140
00:09:58,230 --> 00:10:02,640
But moving on to Level 2 it says the codes add up to 6 and the codes multiply to give 8.
140

141
00:10:02,730 --> 00:10:09,030
If we restart the game and complete the first level we can see now that we get a different result the
141

142
00:10:09,030 --> 00:10:13,290
code adds up to 9 and the codes multiply to give twenty seven.
142

143
00:10:13,320 --> 00:10:15,930
So our games are a lot more random now.
143

144
00:10:15,930 --> 00:10:16,380
Awesome.
144

145
00:10:16,380 --> 00:10:21,450
So if you followed along with me here your game should start to get much harder with each level.
145

146
00:10:21,450 --> 00:10:23,220
So play your game.
146

147
00:10:23,220 --> 00:10:29,520
How far can you get and what level can you get to what level does it start to get really difficult for
147

148
00:10:29,520 --> 00:10:30,240
you.
148

149
00:10:30,240 --> 00:10:32,010
I would love to see how you get on with this.
149

150
00:10:32,010 --> 00:10:38,310
Make sure to share your results in the community and if you have your own way of generating harder difficulties
150

151
00:10:38,670 --> 00:10:39,900
as the levels go on.
151

152
00:10:40,050 --> 00:10:45,090
This would be really cool to see and other students could find this really helpful so make sure to post
152

153
00:10:45,090 --> 00:10:51,220
your progress in the community and well done for making it this far into the section.
153

154
00:10:51,610 --> 00:10:57,700
So we have our full game here now we've written our first game in C++ and we've built some solid foundations
154

155
00:10:57,880 --> 00:11:01,240
that's really going to help us out as we switch over to unreal.
155

156
00:11:01,240 --> 00:11:03,220
So I really hope you've enjoyed this section.
156

157
00:11:03,250 --> 00:11:05,650
I can't wait to see you in the next section.
157

158
00:11:05,800 --> 00:11:10,200
So make sure to share your progress and play an active part in our community.
158

159
00:11:10,300 --> 00:11:11,230
Help other students out.
159

160
00:11:11,230 --> 00:11:16,630
They get stuck and show off your awesome first game that you've built in C++ so give yourself a pat
160

161
00:11:16,630 --> 00:11:17,260
on the back.
161

162
00:11:17,260 --> 00:11:21,550
Well done in the next section we'll be building our first game in Unreal Engine 4.
