1
00:00:04,210 --> 00:00:09,970
In this lecture, we're going to return to our tank class and complete the implementation of what happens

2
00:00:09,970 --> 00:00:15,430
when the base class handle destruction function is called to begin, we'll need some new properties

3
00:00:15,790 --> 00:00:19,240
in our tank pedophile first in the private section.

4
00:00:19,270 --> 00:00:25,000
We're going to create a boolean named B is player alive, which we'll use to stop the movement being

5
00:00:25,000 --> 00:00:25,480
tracked.

6
00:00:25,810 --> 00:00:31,990
If the player has been killed and also as a variable later for the turret class to check against whether

7
00:00:31,990 --> 00:00:34,310
it should be firing at the player or not.

8
00:00:34,610 --> 00:00:39,400
I'll also initialize this when we create it to be true, to ensure that we always start the game with

9
00:00:39,400 --> 00:00:45,730
the player being classed as alive, the way that we'll be using this boolean variable for the Taat class.

10
00:00:46,240 --> 00:00:47,110
We have a couple of ways.

11
00:00:47,140 --> 00:00:52,750
So the first option would be to make the boolean public so that external classes have the immediate

12
00:00:52,810 --> 00:00:56,440
access to the variable as long as they have a reference to the class.

13
00:00:56,740 --> 00:01:02,380
However, where possible, we want to keep our variables as secure as possible to stop other classes

14
00:01:02,380 --> 00:01:07,450
being able to accidently set or override the variable details.

15
00:01:07,810 --> 00:01:14,590
So instead, we're going to make use of our public section and create a get a function of type boolean

16
00:01:14,680 --> 00:01:21,660
named Gett is player alive and then implement this with our C++ helper inside of this function.

17
00:01:21,670 --> 00:01:26,070
Or we're going to do is return our new B is player alive value.

18
00:01:26,530 --> 00:01:31,600
And this will align with the function to be called outside of the class by the TARP class or any other

19
00:01:31,600 --> 00:01:37,480
class that may need to know the state of the player, whilst also ensuring that the actual variable

20
00:01:37,480 --> 00:01:44,260
itself is not accessible and therefore classed as a class a variable, meaning that we cannot make any

21
00:01:44,260 --> 00:01:49,150
accidental changes to this variable from outside of the class, which generally makes it a little bit

22
00:01:49,150 --> 00:01:52,990
harder to track where the body is being set and what's happening to it.

23
00:01:53,470 --> 00:01:56,350
Next, we can flesh out our hundred destruction function.

24
00:01:56,830 --> 00:02:02,470
So the first thing that we want to do is set our new B is player a variable to folks.

25
00:02:03,070 --> 00:02:07,780
We want to handle the last two points that we've considered before, and that is to hide the tank from

26
00:02:07,780 --> 00:02:10,390
view and stop further input from being handled.

27
00:02:11,170 --> 00:02:13,870
We can do this with two standard actor functions.

28
00:02:13,990 --> 00:02:19,780
The first that we use is the set actor hidden in-game and set this to be true.

29
00:02:20,380 --> 00:02:24,430
And then we're also going to set to take an able to be false.

30
00:02:24,790 --> 00:02:30,770
So this will hide any of the visual components on the actor and also set the tech functionality to stop

31
00:02:30,770 --> 00:02:31,060
running.

32
00:02:31,360 --> 00:02:34,900
So this is useful because it will have C save us a little bit of performance.

33
00:02:34,930 --> 00:02:40,090
When the player isn't being used and it's also going to stop the movement anyway, because that is where

34
00:02:40,090 --> 00:02:46,930
we have the movement functionality being run to actually drive the movements and the rotation logic.

35
00:02:47,380 --> 00:02:53,770
Then to finish off the tank destruction functionality, we can jump straight over to the target class

36
00:02:53,860 --> 00:02:57,340
and immediately use this new alife boolean functionality.

37
00:02:57,640 --> 00:03:03,850
So your challenge here will be to use what we've been implementing in the tank class, add a check somewhere

38
00:03:03,970 --> 00:03:11,590
in the check fire condition function and stop the turret from firing if the player is classed as that.

39
00:03:12,100 --> 00:03:13,930
So this challenge has multiple layers.

40
00:03:13,990 --> 00:03:19,510
Think of where you could place the check and then also ensure that you can use a function cool from

41
00:03:19,540 --> 00:03:21,520
another class as the argument.

42
00:03:22,000 --> 00:03:25,470
As always, go ahead and post video while starting to give this one to go.

43
00:03:27,200 --> 00:03:31,120
Okay, so we have a number of options of where we could do our conditional check here.

44
00:03:31,650 --> 00:03:36,720
Like with anything in programming, there's usually no right option for this use case, though.

45
00:03:36,750 --> 00:03:41,580
I'm just going to borrow the existing F check that we already have to ensure that we return.

46
00:03:41,610 --> 00:03:43,230
Straight out of the function.

47
00:03:43,590 --> 00:03:46,110
If the player has died, then we just need to cool.

48
00:03:46,110 --> 00:03:52,590
The public gets a function that we've just implemented and we already have the reference to our player

49
00:03:52,590 --> 00:03:52,850
pool.

50
00:03:52,920 --> 00:03:56,130
So this will just be a pawn get is alive.

51
00:03:56,520 --> 00:04:03,310
So for this, we're just going to say or if play a pawn get is a life that and that will be our F check.

52
00:04:03,810 --> 00:04:06,570
Although this is currently a positive based condition.

53
00:04:07,050 --> 00:04:10,140
So we're going to want to add the not condition before this.

54
00:04:10,530 --> 00:04:16,590
So if we just read this f check now as kind of standard text, wouldn't I be saying if there isn't a

55
00:04:16,590 --> 00:04:21,540
player POUM or if the player isn't alive, then return?

56
00:04:22,060 --> 00:04:24,210
And I think that's a pretty clean way to implement this.

57
00:04:24,210 --> 00:04:30,270
And it means that we know that we're always going to return out of this function if the important factors

58
00:04:30,270 --> 00:04:32,760
for firing at the player haven't been met.

59
00:04:33,370 --> 00:04:38,190
But those changes made, we can I hop back over to the editor and test our new functionality.

60
00:04:38,700 --> 00:04:41,580
So I have the two tests that I wanted to check for here.

61
00:04:41,610 --> 00:04:47,790
The first was just to ensure that being destroyed would stop me from being able to make additional movement

62
00:04:48,360 --> 00:04:51,450
and also remove the visualizations of the pawn.

63
00:04:52,230 --> 00:04:58,980
And the second time I had my finger being helped down on the move forward direction whilst I was being

64
00:04:58,980 --> 00:04:59,490
destroyed.

65
00:04:59,970 --> 00:05:05,460
And we can see that we haven't no continued movement or momentum after the destruction.

66
00:05:05,970 --> 00:05:11,340
And of course, the main thing here is that the camera knight doesn't jump back to a new position because

67
00:05:11,340 --> 00:05:12,350
we're still keeping the camera.

68
00:05:12,360 --> 00:05:13,620
That's still what we're viewing through.

69
00:05:14,040 --> 00:05:18,810
We've just hidden and stopped the movement so that we don't get the unfortunate kind of default.

70
00:05:18,940 --> 00:05:21,920
Pollner response is when destroying them from the level.
