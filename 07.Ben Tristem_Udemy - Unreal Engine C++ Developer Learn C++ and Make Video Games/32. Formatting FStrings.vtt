WEBVTT
1
00:00:04.870 --> 00:00:06.770
Hello everybody and welcome back.

2
00:00:06.790 --> 00:00:12.670
At the moment we've got an issue with inserting data into our strings so we're printing out to the terminal

3
00:00:12.670 --> 00:00:19.120
currently and it's quite Noddy we want to be able to say you've got this many lives and the hidden word

4
00:00:19.390 --> 00:00:25.090
is this long etc. We want to be able to insert this data that we've got into our string so we can show

5
00:00:25.090 --> 00:00:32.740
it to our player now when using f strings we need to insert data into our strings using what's known

6
00:00:32.980 --> 00:00:34.630
as a format specified.

7
00:00:35.170 --> 00:00:40.750
Now we should use the F string printf function to do this.

8
00:00:40.750 --> 00:00:44.710
Now we've hardcoded this into our terminal code itself.

9
00:00:44.800 --> 00:00:46.780
So we'll do it longhand to begin with.

10
00:00:46.780 --> 00:00:48.490
So you know what it should look like.

11
00:00:48.610 --> 00:00:55.060
But then we can make it our code that is look a lot simpler by removing this because it's already being

12
00:00:55.060 --> 00:00:57.550
included so be pointless doing it twice.

13
00:00:57.550 --> 00:01:02.290
But it is important because if you ever want to insert different types of data into something you're

14
00:01:02.290 --> 00:01:04.210
printing out to the player.

15
00:01:04.360 --> 00:01:10.160
You can have to format it using this function now form it specifies.

16
00:01:10.160 --> 00:01:15.710
There are a load of them in this particular section we're going to use percentage s for our strings

17
00:01:15.940 --> 00:01:23.990
and percentage ie for integers Paco's notation so that percentage I now come up and I'll challenge now

18
00:01:23.990 --> 00:01:30.150
our printer function is what's known as a static member function in the last lecture.

19
00:01:30.160 --> 00:01:36.220
We use the dots operator to access instances of strings that already exist.

20
00:01:36.220 --> 00:01:43.960
However print f doesn't require an instance of an F string and we can use it to format any f string

21
00:01:43.960 --> 00:01:44.770
that we want.

22
00:01:44.920 --> 00:01:51.310
Now this is a gotcha because I know some of you are going to read that and I did when I first saw it

23
00:01:51.600 --> 00:01:52.390
printed off.

24
00:01:52.420 --> 00:01:58.880
Well it doesn't print anything that's important what it does is it formats.

25
00:01:58.900 --> 00:02:05.980
So in order to print out to our terminal we still need to use print line to output to the terminal.

26
00:02:05.980 --> 00:02:06.300
Okay.

27
00:02:06.310 --> 00:02:10.990
So before we jump into the coding itself let's talk about the correct formatting.

28
00:02:10.990 --> 00:02:17.710
So we've just a string what we can do is what we've been doing so far we can pass it in like this and

29
00:02:17.710 --> 00:02:23.050
we can even just go print line without the text there and just pass in an F string variable.

30
00:02:23.050 --> 00:02:23.790
That would work.

31
00:02:24.250 --> 00:02:32.620
However when it comes to the rest of it when inserting values you'll need to do this and I can see some

32
00:02:32.620 --> 00:02:35.530
of your eyes widening as you look at this.

33
00:02:35.530 --> 00:02:40.890
Don't worry we'll break it down step by step in fact we'll go from the inside outwards.

34
00:02:41.470 --> 00:02:42.520
So let's have a look.

35
00:02:42.520 --> 00:02:45.810
Let me turn on my pointer.

36
00:02:46.170 --> 00:02:47.490
So let's have a look at this area.

37
00:02:47.520 --> 00:02:48.680
Here we've got.

38
00:02:48.960 --> 00:02:49.940
Hello.

39
00:02:49.950 --> 00:02:52.820
And then the percentage the format specified.

40
00:02:53.150 --> 00:02:58.940
S So we're looking for each string outside of that we've got the text macro itself.

41
00:02:58.950 --> 00:02:59.970
Which is fine.

42
00:02:59.970 --> 00:03:03.910
And then we have this comma we're passing in the hidden word.

43
00:03:03.960 --> 00:03:10.950
So when this prints out it will say hello and whatever the hidden word has been defined as and you'll

44
00:03:10.950 --> 00:03:17.970
notice this little asterisk or star here we'll delve into that more detail in a moment and then we've

45
00:03:17.970 --> 00:03:25.200
got our f string print f function which will format this without this in place.

46
00:03:25.230 --> 00:03:28.380
This part of our code would not work.

47
00:03:28.380 --> 00:03:33.770
Now I'll show you in a minute that we do already have that in place so we can remove that later on.

48
00:03:33.780 --> 00:03:36.650
But we'll type it out fully to begin with.

49
00:03:36.780 --> 00:03:42.130
And then we've got print line so we know where outputting to our terminal.

50
00:03:42.240 --> 00:03:48.890
Let's dive over into V.S. code and take a closer look Okay everybody Welcome back.

51
00:03:48.890 --> 00:03:54.110
Now the first thing I want to do here is move my setup game function call.

52
00:03:54.200 --> 00:03:56.060
So it's slightly higher.

53
00:03:56.150 --> 00:04:02.510
It makes the most sense to set up our game as one of the first things that we do then we know that the

54
00:04:02.510 --> 00:04:07.700
hidden word and the lives are set and ready to go.

55
00:04:07.700 --> 00:04:10.850
Now let's have a closer look at what we can do here.

56
00:04:11.680 --> 00:04:11.920
OK.

57
00:04:11.960 --> 00:04:18.680
So what we want to do here is print line and then if it wasn't already built into the code we would

58
00:04:18.710 --> 00:04:27.180
then need to do the F string followed by the scope resolution operator and then prints o F's thing.

59
00:04:27.230 --> 00:04:29.410
I wondered why it wasn't auto completing.

60
00:04:29.420 --> 00:04:37.250
There we go print f then we can use our text macro then we can put in our string and then we would need

61
00:04:37.310 --> 00:04:46.960
our arguments at the end and in this case it's going to be star asterisk hidden word.

62
00:04:46.960 --> 00:04:51.420
Now the star itself already going to use that with strings and we'll look at why in a moment.

63
00:04:51.430 --> 00:04:54.240
And of course we need to end that with a semicolon.

64
00:04:54.280 --> 00:04:59.950
Now I'm just going to check that I have the right number of parentheses in so as you hover over and

65
00:04:59.950 --> 00:05:01.240
click.

66
00:05:01.240 --> 00:05:07.540
You can make sure that the pairs of parentheses are all highlighted and they'll probably have a red

67
00:05:07.540 --> 00:05:10.700
squiggle underneath as well but that's a good visual indicator.

68
00:05:11.080 --> 00:05:18.460
So here we can go the hidden word is colon and then we're going to use the format specify percentage

69
00:05:18.730 --> 00:05:22.200
as we're gonna save our work here and just make sure that works.

70
00:05:22.240 --> 00:05:24.070
And then we'll delve into the details.

71
00:05:24.220 --> 00:05:31.300
So overreliant on real compiler code and what I'm expecting to see is right at the top before we welcome

72
00:05:31.300 --> 00:05:36.660
the player just the debug line essentially saying that the hidden word is cake.

73
00:05:36.730 --> 00:05:40.210
And there we go that's exactly what I expect to see.

74
00:05:40.210 --> 00:05:42.210
So this go back over into code.

75
00:05:42.400 --> 00:05:44.830
And first of all make comments here.

76
00:05:44.820 --> 00:05:49.510
This is a debug line that we can then turn on and off.

77
00:05:49.510 --> 00:05:56.930
So as with as we start developing our code and our game in general we're going to have different hidden

78
00:05:56.960 --> 00:05:57.680
words.

79
00:05:57.680 --> 00:06:02.510
So we're going to turn this on when testing the game to make sure that we know what the hidden word

80
00:06:02.510 --> 00:06:06.500
is so we're able to test our bulls and cows later on as we're assessing it.

81
00:06:06.590 --> 00:06:12.590
And then when we pass it on to a player to use we can simply comment out that line and then they can

82
00:06:12.590 --> 00:06:17.960
play the game without knowing what the hidden word happens to be so I'm just going to copy this line

83
00:06:17.960 --> 00:06:23.240
of code real quick and come down and paste it in again.

84
00:06:23.240 --> 00:06:30.240
So the way that we can format things within this particular game is like this.

85
00:06:30.440 --> 00:06:34.400
We don't actually need to include the printer function.

86
00:06:34.430 --> 00:06:35.180
Why.

87
00:06:35.180 --> 00:06:42.350
Well if I go over to our code that's running the console you'll see here that we've included it as parts

88
00:06:42.410 --> 00:06:47.950
of the print lines definition and this is a nice bit of optimization.

89
00:06:47.960 --> 00:06:53.930
It's one of those things where if we have to type this again and again and again that is something you'd

90
00:06:53.930 --> 00:06:56.770
want to do in your future code as well.

91
00:06:56.780 --> 00:07:01.190
Now the other thing I want to talk about is why we have an asterisk here.

92
00:07:01.190 --> 00:07:07.670
Well one of the really handy things about V.S. code is you can hold down old and you can start investigating.

93
00:07:07.670 --> 00:07:09.070
So let's go ahead and do that now.

94
00:07:09.080 --> 00:07:16.190
I'm going to hold down old on my keyboard and probably option on the Mac and let's go ahead and click

95
00:07:16.640 --> 00:07:18.560
on r asterisk and all.

96
00:07:18.980 --> 00:07:23.660
And where we've ended up is in the unreal string header file.

97
00:07:23.780 --> 00:07:29.200
Don't worry you don't have to understand everything that you're about to see in front of you.

98
00:07:29.300 --> 00:07:36.020
What this is going to do and it's commented at the top here is it's going to get a pointer to this string.

99
00:07:36.290 --> 00:07:43.460
Now would discuss point is in much more detail later on a pointer is simply an address where that string

100
00:07:43.460 --> 00:07:52.310
is stored in memory and then it's going to return a pointer to an array of characters.

101
00:07:52.310 --> 00:07:58.130
So there is some terminology in there that some of you won't have a clue what it means but basically

102
00:07:58.130 --> 00:08:07.890
puts if I was to write out cake C A K E that would be an array of length five because we've got half

103
00:08:07.890 --> 00:08:17.540
four characters CSKA and a null character to let the compiler know that that is the end of that string.

104
00:08:17.540 --> 00:08:24.010
Now if we had something else like monkey then the array would be not six but seven characters long.

105
00:08:24.050 --> 00:08:32.710
So you can see that this array varies in size which is why we need to access it in this particular way.

106
00:08:32.900 --> 00:08:35.860
Whereas if we go back to our main code here.

107
00:08:36.260 --> 00:08:41.770
If we were accessing something like lives which is an integer if we have a look let's close down the

108
00:08:41.770 --> 00:08:49.340
young real string had a file for have a look here it's an integer now the int 32 it's 32 bits.

109
00:08:49.340 --> 00:08:57.070
Divide that by eight which is four bytes it's a four byte space in memory that's going to be occupied.

110
00:08:57.380 --> 00:09:03.470
Whereas the F string is dynamic it depends how many characters are within that string itself.

111
00:09:03.620 --> 00:09:05.140
But I digress.

112
00:09:05.150 --> 00:09:13.700
So the point is that print f is a function from the C standard library so it has no knowledge of use

113
00:09:13.700 --> 00:09:15.660
it to find types like F string.

114
00:09:15.720 --> 00:09:21.140
However null terminated strings like the C K with that null character at the end.

115
00:09:21.140 --> 00:09:25.890
So an array that's five in length have its cake it does understand.

116
00:09:25.940 --> 00:09:28.680
So we need to access it with the asterisk or star.

117
00:09:29.450 --> 00:09:36.500
Okay wow so that was quite a bit to take in so let's just summarise how we are going to format our strings

118
00:09:36.560 --> 00:09:38.290
within our game.

119
00:09:38.450 --> 00:09:45.320
We're going to print line when it comes out to the console because in our code we already have this

120
00:09:45.380 --> 00:09:49.890
print f included within the definition of our print line function.

121
00:09:50.000 --> 00:09:55.060
We don't have to keep writing it every single time which means that we can print line.

122
00:09:55.160 --> 00:10:02.840
Make sure you're using the text macro then we put our string in and if we need to include extra data

123
00:10:02.840 --> 00:10:11.450
we need to make sure we use format specifies and if we wanted to include let's say it is percentage

124
00:10:11.540 --> 00:10:20.960
ie characters long we would then need another argument at the back here probably saying hidden word

125
00:10:22.310 --> 00:10:24.300
dot length.

126
00:10:24.350 --> 00:10:29.750
And remember that is a function so it requires those parentheses characters long and just kind of remove

127
00:10:29.750 --> 00:10:32.780
this capitalization have a strange habit of doing that.

128
00:10:32.780 --> 00:10:36.620
So let's just test this here and see how it operates.

129
00:10:36.710 --> 00:10:43.280
So let's compile our code once it's compiled we'll play it and what we should find is I don't know.

130
00:10:43.420 --> 00:10:48.560
I don't know whether this is going to go off the end of our terminal is if it does only to specify a

131
00:10:48.560 --> 00:10:53.150
new line in that it is four carat as long.

132
00:10:53.150 --> 00:10:56.130
So we've got wrapping enabled that's absolutely fine.

133
00:10:56.240 --> 00:11:02.210
But it looks a bit rubbish that the characters is gone along so let's be explicit here and put in a

134
00:11:02.210 --> 00:11:12.630
new line save our file and let's go over into one real compiler code again and this looks much better

135
00:11:12.660 --> 00:11:13.680
on the screen.

136
00:11:13.680 --> 00:11:20.850
If this is really useful here the hidden word is cake that's useful for us for debugging and it is for

137
00:11:20.850 --> 00:11:22.060
characters long.

138
00:11:22.170 --> 00:11:23.770
Well the hidden word is cake.

139
00:11:23.820 --> 00:11:25.860
Ball was in there twice still.

140
00:11:25.890 --> 00:11:29.330
I didn't delete the other line so I guess the four letter word.

141
00:11:29.490 --> 00:11:35.460
So we're already starting to duplicate what's going on here and in your challenge coming up you'll be

142
00:11:35.460 --> 00:11:40.910
tidying this up and removing our magic numbers.

143
00:11:40.970 --> 00:11:46.550
Okay so as hinted that we need to remove those magic numbers so replace magic numbers in our code with

144
00:11:46.550 --> 00:11:48.150
an actual number.

145
00:11:48.170 --> 00:11:55.700
So if we're talking about the length of the hidden word then use hidden word dot Len in order to access

146
00:11:55.700 --> 00:11:57.300
the length of the hidden word.

147
00:11:57.440 --> 00:12:01.240
If you want to access lives then of course we will go to lives.

148
00:12:01.340 --> 00:12:06.350
And I think I might eventually end up setting lives to the length of the hidden word.

149
00:12:06.350 --> 00:12:08.680
So the longer the word is the more lives you have.

150
00:12:08.760 --> 00:12:10.060
Haven't quite decided that yet.

151
00:12:10.070 --> 00:12:11.030
But here we go.

152
00:12:11.030 --> 00:12:16.220
You're going to use the hidden words length as the argument that you're passing in and you'll need to

153
00:12:16.220 --> 00:12:20.840
use percentage I in a lot of cases just remember that as your format specifies.

154
00:12:21.080 --> 00:12:24.620
And finally I'd like you to take some time to tidy up your code.

155
00:12:24.620 --> 00:12:29.640
I've noticed in mine I've got some extra whitespace I've obviously been moving something around or if

156
00:12:29.660 --> 00:12:35.240
press enter a couple of times or something thinking about something says good to tidy up your code as

157
00:12:35.240 --> 00:12:40.610
you go if you spot something sorted out there and then otherwise you'll just end up with a mess that's

158
00:12:40.610 --> 00:12:41.980
difficult to read.

159
00:12:42.020 --> 00:12:44.380
So go ahead pulls a video now and give that a go

160
00:12:47.870 --> 00:12:49.100
Okay everybody Welcome back.

161
00:12:49.100 --> 00:12:59.530
Let's go ahead and remove those magic numbers Okay so we're back over in our implementation S.P. file.

162
00:12:59.560 --> 00:13:03.220
I'm happy with the hidden word is this long.

163
00:13:03.220 --> 00:13:05.530
However I want to separate out.

164
00:13:05.530 --> 00:13:09.050
Actually it is this character's long so guess the.

165
00:13:09.340 --> 00:13:10.910
I think we can just remove that.

166
00:13:11.040 --> 00:13:13.210
I'm going to remove that entirely.

167
00:13:13.210 --> 00:13:18.310
Oh I forgot to close off my quotation marks.

168
00:13:18.370 --> 00:13:22.680
So what have you got here we've not got enough parentheses so that's that.

169
00:13:22.690 --> 00:13:23.290
Or have we.

170
00:13:23.800 --> 00:13:25.120
Yes we did.

171
00:13:25.120 --> 00:13:27.340
I'm reacting to a red squiggle that shouldn't be there.

172
00:13:27.640 --> 00:13:36.070
Okay so now that we've said the hidden word is that that's what the bug line in fact that is what was

173
00:13:36.070 --> 00:13:39.310
there before so we can get rid of this one underneath.

174
00:13:39.310 --> 00:13:42.160
Otherwise it's going to print out twice.

175
00:13:42.250 --> 00:13:45.120
So then we're going to welcome to.

176
00:13:45.250 --> 00:13:46.230
We don't need that comma there.

177
00:13:46.240 --> 00:13:48.130
That's why it's complaining okay.

178
00:13:48.190 --> 00:13:53.340
We are welcoming the players so welcome to ball cows guess the four letter word.

179
00:13:53.340 --> 00:13:56.720
So this is the first magic number that we need to remove.

180
00:13:56.720 --> 00:14:04.390
So I guess the four letter word kind of puts a comma in here and we're going to put in hidden word dot

181
00:14:04.570 --> 00:14:05.790
Lane.

182
00:14:05.800 --> 00:14:07.060
There we go.

183
00:14:07.060 --> 00:14:15.520
Now the reason why we can just put that in there is if we hover over we see that whilst hidden word

184
00:14:15.820 --> 00:14:23.350
we hover over that we see it's returning an integer whereas the header word itself is a string so this

185
00:14:23.350 --> 00:14:24.610
is really useful.

186
00:14:24.610 --> 00:14:31.300
Hover over things gets used to what they are returning to the type of the length is an integer so we

187
00:14:31.300 --> 00:14:39.310
can then guess the integer letter words in this case we change our hidden word which we will do in a

188
00:14:39.310 --> 00:14:41.990
moment to test to make sure this is working.

189
00:14:42.100 --> 00:14:44.790
It will change from four to something else.

190
00:14:44.830 --> 00:14:50.650
Some of the saved my work there and remove that comment to remove the magic number because we've just

191
00:14:50.650 --> 00:14:51.590
done that.

192
00:14:51.600 --> 00:14:53.860
Now let's clear up some of this extra whitespace.

193
00:14:53.860 --> 00:14:58.990
We've got a prompts the player for I guess presented to continue at the moment.

194
00:14:59.060 --> 00:15:03.700
Now prompting the player for a guess has to happen before we actually assess their guess.

195
00:15:03.700 --> 00:15:06.320
So we might as well put that in.

196
00:15:06.580 --> 00:15:09.130
Now we said here press Enter to continue.

197
00:15:09.160 --> 00:15:11.690
This is really the prompting the player for the guests.

198
00:15:11.690 --> 00:15:15.580
So we might as well prompt them to guess.

199
00:15:15.670 --> 00:15:22.520
So type in your guess and press and continue.

200
00:15:22.780 --> 00:15:27.060
That might be too long we might want to split it out over two lines.

201
00:15:27.070 --> 00:15:29.290
But I will leave it like that for the moment.

202
00:15:29.290 --> 00:15:30.000
So that's fine.

203
00:15:30.010 --> 00:15:31.480
We've removed the magic number.

204
00:15:31.480 --> 00:15:33.070
Have we got any other magic numbers.

205
00:15:33.070 --> 00:15:35.840
Yes we have the hidden word is.

206
00:15:35.860 --> 00:15:38.200
So this is the reminder that we had earlier.

207
00:15:38.200 --> 00:15:42.070
So full percentage I characters long.

208
00:15:42.070 --> 00:15:47.730
And this is again what we're going to use we're going to use the hidden word dot length.

209
00:15:47.770 --> 00:15:50.960
There we go you've lost.

210
00:15:51.160 --> 00:15:55.870
And I don't think anything else is here we're still not using lives were very close to using it though

211
00:15:56.230 --> 00:15:59.320
because we need to assess whether the game is over or not.

212
00:15:59.440 --> 00:16:02.180
And lives are going to be integral for that happening.

213
00:16:02.200 --> 00:16:08.970
It's going to save my code pop over into unreal compile and make sure it's working as expected.

214
00:16:08.980 --> 00:16:09.420
OK.

215
00:16:09.430 --> 00:16:12.080
Let's press play the hidden word is cake.

216
00:16:12.100 --> 00:16:13.270
Welcome to bull cows.

217
00:16:13.270 --> 00:16:16.900
Guess the four letter word typing your guess and press enter to two.

218
00:16:17.320 --> 00:16:19.750
Okay so we might want to sort that out.

219
00:16:19.940 --> 00:16:26.830
But if I type in something that's the wrong length like that the hidden word is for characters long.

220
00:16:26.830 --> 00:16:27.560
Okay.

221
00:16:27.760 --> 00:16:29.500
So we know that that works.

222
00:16:29.500 --> 00:16:31.330
And it's always been for characters long.

223
00:16:31.330 --> 00:16:36.600
So it would be a good test at this point to also try a different word.

224
00:16:36.640 --> 00:16:38.000
So we've got cake.

225
00:16:38.080 --> 00:16:40.190
We could put in cakes instead.

226
00:16:40.200 --> 00:16:43.810
So we're now we're expecting it to be a five letter word.

227
00:16:43.810 --> 00:16:49.710
We have to go back and compile okay with the compilation complete the hidden word is k.

228
00:16:49.780 --> 00:16:50.390
No it's not.

229
00:16:50.390 --> 00:16:51.700
It's cakes.

230
00:16:51.700 --> 00:16:54.510
I'm pretty sure I typed in this case if cakes.

231
00:16:54.520 --> 00:17:00.820
So I've seen this a couple of times with unreal where the first time you press compile it doesn't seem

232
00:17:00.820 --> 00:17:08.490
to compile the code that you had if it does do that do press compile again and just check.

233
00:17:08.500 --> 00:17:08.980
Here we go.

234
00:17:09.280 --> 00:17:15.820
So that was one of those instances where it just didn't compile correctly the first time guess the five

235
00:17:15.820 --> 00:17:18.550
letter word so I'm happy with everything there.

236
00:17:18.580 --> 00:17:23.460
So if I was to go ahead and type something else in the hidden word is five characters long.

237
00:17:23.500 --> 00:17:24.140
Try again.

238
00:17:24.540 --> 00:17:25.010
Okay.

239
00:17:25.030 --> 00:17:27.570
I'm really happy with my code is working there.

240
00:17:27.610 --> 00:17:30.760
I hope you're happy with your working code as well.

241
00:17:30.760 --> 00:17:34.500
We're almost at the point now where we can have a game loop with lives as well.

242
00:17:34.530 --> 00:17:37.510
And we'll be covering that in the next lecture in fact.

243
00:17:37.540 --> 00:17:41.860
So share your work over in the discussions and I'll see you all in the next lecture.
