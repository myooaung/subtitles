WEBVTT
1
00:00:04.460 --> 00:00:09.860
Hello and welcome, the subject of this lecture is going to be the take damage function of the actor

2
00:00:10.400 --> 00:00:11.960
and how we call it.

3
00:00:12.020 --> 00:00:14.510
Let's dive in and find out all about it.

4
00:00:15.930 --> 00:00:21.120
So in order for us to be able to deal damage to something, we need to actually have some link which

5
00:00:21.120 --> 00:00:22.080
we can hit.

6
00:00:22.590 --> 00:00:30.600
So let's go to our content browser route and bring in one of the BP Chuter characters, because actually

7
00:00:30.600 --> 00:00:37.050
what happens is if you bring in a character into the scene, then automatically unreal is going to make

8
00:00:37.050 --> 00:00:39.140
this character A.I. controlled.

9
00:00:39.630 --> 00:00:43.140
And the ones that spawn at the player starts will be player controlled.

10
00:00:43.260 --> 00:00:44.670
So that's great.

11
00:00:44.680 --> 00:00:45.890
That's exactly the behavior we want.

12
00:00:45.900 --> 00:00:47.930
If I go ahead and hit OPIS.

13
00:00:48.240 --> 00:00:50.420
You'll notice I'm actually in the wrong spawn point.

14
00:00:50.420 --> 00:00:55.090
So maybe I want to delete this second player start by hit up.

15
00:00:55.260 --> 00:00:56.970
Now we'll be in the right location.

16
00:00:57.300 --> 00:00:58.620
There is my enemy.

17
00:00:58.650 --> 00:01:00.060
I can shoot at the enemy.

18
00:01:00.090 --> 00:01:01.050
I get the hit effect.

19
00:01:01.350 --> 00:01:03.120
But obviously I'm not doing any damage.

20
00:01:03.240 --> 00:01:04.050
Not yet anyway.

21
00:01:04.800 --> 00:01:07.200
And doing damage is a two part process.

22
00:01:07.620 --> 00:01:10.260
The first part is sending the damage in.

23
00:01:10.260 --> 00:01:12.510
The second part is receiving it.

24
00:01:12.810 --> 00:01:18.480
And this lecture, we're going to deal with sending damage to the player and the function calls involved

25
00:01:18.540 --> 00:01:19.140
with that.

26
00:01:20.010 --> 00:01:24.450
So the main one that we're going to be looking at is in the actor.

27
00:01:24.870 --> 00:01:25.560
Dot H.

28
00:01:26.190 --> 00:01:30.690
And we're looking for a function call called Take Damage.

29
00:01:31.590 --> 00:01:34.330
And you can see here that is this virtual function here.

30
00:01:34.360 --> 00:01:35.810
It returns a float.

31
00:01:36.030 --> 00:01:41.700
What it's returning is the actual damage applied to the actor, the actual amount that really got applied.

32
00:01:42.630 --> 00:01:50.700
And what goes in is the damage amount, a damage event, which gives us more information about that,

33
00:01:50.850 --> 00:01:52.020
the damage that happened.

34
00:01:52.980 --> 00:01:54.450
We have an instigator.

35
00:01:54.720 --> 00:01:58.530
So that's saying who was the controller responsible for causing this damage?

36
00:01:59.250 --> 00:02:03.690
And then the damage caused, which is what was the actor responsible.

37
00:02:03.960 --> 00:02:09.330
So in this case, it might be a gun or is it saying here the projectile that exploded, the rock that

38
00:02:09.330 --> 00:02:15.660
landed on you in this case, the gun that shot you, is gonna be the actor that was responsible.

39
00:02:16.170 --> 00:02:17.820
So that's take damage.

40
00:02:17.880 --> 00:02:22.770
In a nutshell, most of that should be pretty straightforward for you to put together with the exception

41
00:02:22.800 --> 00:02:25.270
of this damage event structure.

42
00:02:25.290 --> 00:02:26.460
And that's a little bit more complicated.

43
00:02:26.490 --> 00:02:33.510
So let's have a look at this damage event struct and see what can what we do, how is it going to be

44
00:02:33.510 --> 00:02:34.170
composed?

45
00:02:34.170 --> 00:02:35.760
How are we going to put this together?

46
00:02:36.260 --> 00:02:42.360
Now, it's not immediately obvious, but there are actually two subtypes for this damage event.

47
00:02:42.420 --> 00:02:47.370
In practice, you're not going to actually create an EF damage event, but rather you'd be creating

48
00:02:47.370 --> 00:02:54.270
an EF point damage event or you'd be creating an EF radial damage event.

49
00:02:54.570 --> 00:02:58.200
Those are the two main types of damage that exist in Unreal.

50
00:02:58.470 --> 00:03:03.510
You can create more different types of damage for your own custom stuff, like you might have a fire

51
00:03:03.510 --> 00:03:05.640
damage with different parameters.

52
00:03:06.030 --> 00:03:12.020
But in our case, we're interested in the F radial radial and point damaged.

53
00:03:12.030 --> 00:03:18.360
A radial again would be something like a grenade going off, in which case you want to say, okay,

54
00:03:18.390 --> 00:03:20.040
where is the radius?

55
00:03:20.070 --> 00:03:21.000
What's the fall off?

56
00:03:21.030 --> 00:03:22.140
All of those kinds of things?

57
00:03:22.710 --> 00:03:28.140
Where as the point damage is, as it sounds, much more appropriate for things like guns.

58
00:03:28.620 --> 00:03:35.940
So we're going to create an F point damage event and we're going to go and look for the constructor.

59
00:03:35.940 --> 00:03:40.090
Here's the constructor for it and we can see what it's taking in.

60
00:03:40.370 --> 00:03:41.730
It's taken the damage amount again.

61
00:03:41.730 --> 00:03:43.260
So that's a bit of repetition there.

62
00:03:43.830 --> 00:03:48.450
We're having the hit result that caused this point damage to take place.

63
00:03:49.080 --> 00:03:51.390
Then we're having the in shot direction.

64
00:03:51.390 --> 00:03:51.690
Great.

65
00:03:51.690 --> 00:03:52.890
We've already calculated that.

66
00:03:52.920 --> 00:03:55.590
I was thinking a little bit ahead when we did that in the previous lecture.

67
00:03:56.160 --> 00:03:59.520
And then this subclass of damage type.

68
00:03:59.550 --> 00:04:06.660
Now, this can be used to pass more information is actually rather than creating a different damage

69
00:04:06.660 --> 00:04:09.510
event type, you'd probably create a different you damage type.

70
00:04:09.510 --> 00:04:12.840
So you might have a fire type or something like that.

71
00:04:13.170 --> 00:04:18.990
In our case, because we don't need any kind of damage type, we're not doing fire damage or anything

72
00:04:19.050 --> 00:04:20.940
extra like that poison damage.

73
00:04:21.270 --> 00:04:25.140
Then what we're going to do is just pass in a null pointer here instead.

74
00:04:25.500 --> 00:04:28.890
So let's have a go at constructing one of these together.

75
00:04:28.920 --> 00:04:32.100
And then I will let you call that take damage event.

76
00:04:33.150 --> 00:04:40.140
So the first thing to do is to paste in the type, gonna call it the damage event and then we're going

77
00:04:40.140 --> 00:04:41.340
to construct it.

78
00:04:41.730 --> 00:04:43.600
So first of all, the damage amounts.

79
00:04:43.710 --> 00:04:45.870
Well, we don't have one of these for the gun yet.

80
00:04:45.900 --> 00:04:47.940
We don't have how much damage it does.

81
00:04:48.330 --> 00:04:50.970
So we can go ahead and create some information.

82
00:04:50.970 --> 00:04:52.580
They've got a max range already.

83
00:04:52.950 --> 00:04:54.640
We want some more properties in here.

84
00:04:54.810 --> 00:05:00.450
It's gonna be an edit anywhere, which is going to allow us to say float damage.

85
00:05:00.480 --> 00:05:02.780
How much damage do we do on going gonna do a damage of 10.

86
00:05:03.570 --> 00:05:05.770
And then we can use this over in the C plus plus.

87
00:05:05.770 --> 00:05:09.120
So damage is what we're going to pass in is the first argument.

88
00:05:09.690 --> 00:05:11.470
The second one is that hit result.

89
00:05:11.550 --> 00:05:13.470
Well, fortunately, we've got the hit results called hit.

90
00:05:14.610 --> 00:05:23.130
Then the next thing is going to be the shot direction, which we already calculated for emitter at location.

91
00:05:24.100 --> 00:05:30.390
Then we're going to look at the subclass, which is just going to be a no pointer, okay?

92
00:05:30.640 --> 00:05:31.800
So that is done.

93
00:05:31.810 --> 00:05:36.040
The next thing would just be to get hold of the actor that we're trying to damage.

94
00:05:36.070 --> 00:05:37.930
That's fairly straightforward from the hit.

95
00:05:38.030 --> 00:05:46.510
You do hit dot, get actor on here, but you will need to check that this isn't null because we don't

96
00:05:46.630 --> 00:05:52.390
want to end up with a null actor that we're trying to do damage on or we're going to end up crashing.

97
00:05:53.290 --> 00:05:58.810
So your challenge is going to be to call that take damage function, check for the actor being null.

98
00:05:58.810 --> 00:06:04.720
First of all, we don't want a null actor and call take damage and see if you can get it to compile.

99
00:06:04.720 --> 00:06:06.160
Pulls a video and have a go.

100
00:06:08.430 --> 00:06:08.530
OK.

101
00:06:08.720 --> 00:06:09.290
Welcome back.

102
00:06:09.830 --> 00:06:12.230
So we've got to get actor in here.

103
00:06:12.350 --> 00:06:13.640
I'm just going to call this.

104
00:06:14.150 --> 00:06:15.710
I'm going to give this a little variable.

105
00:06:15.710 --> 00:06:19.760
So a actor pointer is gonna be the hit actor.

106
00:06:20.490 --> 00:06:27.500
And we are then going to go ahead and do an F statement in here, basically saying if the hit actor

107
00:06:28.370 --> 00:06:35.130
is not equal to a null pointer, then we're going to go ahead with this hit actor to call the.

108
00:06:35.210 --> 00:06:41.220
Take damage function on it and we're going to do the damage amount in.

109
00:06:41.220 --> 00:06:42.890
Here is the first arguments.

110
00:06:43.280 --> 00:06:44.630
What was the second one?

111
00:06:44.690 --> 00:06:49.220
I'm just going to navigate back to the take damage and have a look.

112
00:06:49.250 --> 00:06:54.520
So the next one is the struct that we've put together this damage event.

113
00:06:54.710 --> 00:06:56.420
Let's put that in second.

114
00:06:56.870 --> 00:07:00.800
Then we're going to have a look at the controller that created this.

115
00:07:00.800 --> 00:07:02.440
Well, that's our controller.

116
00:07:02.480 --> 00:07:05.210
The guns controller is the one doing the damage.

117
00:07:05.270 --> 00:07:11.210
And then this is the instigator was the last parameter in ATAKE damage.

118
00:07:11.240 --> 00:07:19.040
And we probably only wants to construct this struct inside this if actor not equal to null points because

119
00:07:19.040 --> 00:07:19.850
it's not needed.

120
00:07:20.270 --> 00:07:23.600
If we don't have an actor to apply this damage to.

121
00:07:24.650 --> 00:07:28.580
So let's go over and compile and see if this is going to work.

122
00:07:28.940 --> 00:07:30.290
So I got an error in my log.

123
00:07:30.350 --> 00:07:31.850
Let's see what's going on.

124
00:07:31.910 --> 00:07:33.500
Oh, I'm just missing a semicolon.

125
00:07:33.770 --> 00:07:34.820
Well, that's pretty easy.

126
00:07:34.820 --> 00:07:37.010
One to fix after the get actor there.

127
00:07:37.070 --> 00:07:38.120
Let's go and try again.

128
00:07:38.960 --> 00:07:39.260
Cool.

129
00:07:39.360 --> 00:07:45.460
Everything has compiled successfully and we can just go ahead and play and just check that.

130
00:07:46.160 --> 00:07:49.520
Shooting is going to not give us any.

131
00:07:49.580 --> 00:07:51.450
No errors or try and crash.

132
00:07:51.470 --> 00:07:53.680
The engine looks like it's okay.

133
00:07:54.230 --> 00:08:00.800
So we'll move on to the next lecture where we're going to try and receive the damage on this actor here

134
00:08:00.800 --> 00:08:02.600
that we have placed in the level.

135
00:08:02.960 --> 00:08:03.380
See that?
