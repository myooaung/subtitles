1
00:00:04,400 --> 00:00:06,200
Hello everybody and welcome back.

2
00:00:06,200 --> 00:00:08,910
In this lecture we are going to talk about struggles.

3
00:00:09,050 --> 00:00:10,220
Now what is a struct.

4
00:00:10,220 --> 00:00:12,480
Well it's short for a structure.

5
00:00:12,480 --> 00:00:19,580
It's somewhere where we can store stuff a struct is a user defined data type so we're already used to

6
00:00:19,580 --> 00:00:29,900
using in 32 F strings etc. Well a struct is our own data type so that's so that gives us a hint there

7
00:00:29,900 --> 00:00:32,410
of how we're going to use drugs.

8
00:00:32,460 --> 00:00:38,570
Now strokes are somewhere to store data possibly of different types if necessary so you could store

9
00:00:38,840 --> 00:00:43,580
integers in there you could store a string in there and it can be a way of pre determining how much

10
00:00:43,580 --> 00:00:47,130
memory part of your code is going to take up.

11
00:00:47,330 --> 00:00:50,780
Now by default that data is public.

12
00:00:50,900 --> 00:00:55,670
So in classes everything was private instructs.

13
00:00:55,790 --> 00:00:57,500
Everything is public.

14
00:00:57,530 --> 00:01:03,140
Now you will notice some similarity with classes and other than that default visibility.

15
00:01:03,140 --> 00:01:10,890
There are functionally the same however semantically we use them in different ways okay.

16
00:01:10,920 --> 00:01:16,770
So before we dive over into V.S. code let's look at how we would declare our struct we would typically

17
00:01:16,770 --> 00:01:18,850
do this let's say in our header file.

18
00:01:18,990 --> 00:01:24,500
So we would use the keyword struct and then we have a prefix on our struct name.

19
00:01:24,510 --> 00:01:31,650
So in this particular case with unreal we have the F prefix we would then open our curly braces and

20
00:01:31,650 --> 00:01:34,800
then we would give a type and a member.

21
00:01:34,800 --> 00:01:40,620
So this could be an integer named a and we could even initialize it at this point as well.

22
00:01:40,680 --> 00:01:44,910
And then you can have other members in your struct as well.

23
00:01:45,120 --> 00:01:48,150
Then we would close off our curly brace.

24
00:01:48,270 --> 00:01:52,760
And of course remember that semicolon so enough as the fairy.

25
00:01:52,800 --> 00:01:55,180
Let's dive over into V.S. code.

26
00:01:55,940 --> 00:01:56,220
Okay.

27
00:01:56,250 --> 00:01:59,280
So overinvest code there are a couple of things that I want to do.

28
00:01:59,280 --> 00:02:01,560
The first one is off line.

29
00:02:01,620 --> 00:02:08,580
I was reviewing my code and I've got these strange spaces that I've decided to add in before we increment

30
00:02:08,580 --> 00:02:13,130
the ball count and the cow counts I'm just going to get rid of those I don't know what possessed me

31
00:02:13,160 --> 00:02:16,440
I'm going to get rid of these comments just here as well.

32
00:02:16,500 --> 00:02:16,760
Okay.

33
00:02:16,770 --> 00:02:19,300
That's that code tidied up.

34
00:02:19,590 --> 00:02:23,430
Now we need to go over to our header file to create our struct.

35
00:02:23,430 --> 00:02:25,490
So we're going to type in the keyword struct.

36
00:02:25,530 --> 00:02:29,430
S t r u c c and then we need to give it a name.

37
00:02:29,430 --> 00:02:35,160
It's going to be prefixed with F and I'm going to call this the bull cow counts and then we need to

38
00:02:35,160 --> 00:02:39,930
open up our curly braces and I'm gonna immediately put my semicolon on the end.

39
00:02:39,930 --> 00:02:42,840
Otherwise I'm going to forget to do it.

40
00:02:42,840 --> 00:02:45,690
I know that because of experience.

41
00:02:45,690 --> 00:02:46,230
Okay.

42
00:02:46,350 --> 00:02:51,880
So the next thing we need to do is give this some members so the bulls and cows are basically going

43
00:02:51,880 --> 00:02:52,800
to be integers.

44
00:02:52,800 --> 00:03:06,490
So in 32 bulls and then and it's 32 cows now at this point we can leave them on initialized and in some

45
00:03:06,490 --> 00:03:13,510
cases that might be desirable and we can assign them when we actually instantiate our struct within

46
00:03:13,510 --> 00:03:14,610
the implementation.

47
00:03:15,040 --> 00:03:19,790
However for safety let's initialize them with a value of zero.

48
00:03:19,840 --> 00:03:26,980
I cannot see at any point bulls and cows ever being anything other than zero when you start a game.

49
00:03:27,010 --> 00:03:32,770
So this will protect us from other initialized values we should just play havoc and then we go we've

50
00:03:32,770 --> 00:03:35,920
essentially created our struct.

51
00:03:35,920 --> 00:03:37,480
So how do we go ahead and use it.

52
00:03:37,600 --> 00:03:44,350
Well let's go over into our bull cow can't shoot C++ file and then under begin play let's go ahead and

53
00:03:44,350 --> 00:03:46,870
instantiate our struct.

54
00:03:46,960 --> 00:03:54,980
So very much like you can go in 30 to give its a name and then assign it a value.

55
00:03:55,390 --> 00:03:58,360
We can do exactly the same thing with our struct.

56
00:03:58,480 --> 00:04:04,810
Now our struct already has initial values so we can just go f bool cow counts and then give it a name

57
00:04:04,810 --> 00:04:08,200
like counts and then that's it.

58
00:04:08,230 --> 00:04:14,220
We now have an instance of our struct that we can gain access to those member variables.

59
00:04:14,290 --> 00:04:20,370
How do we gain access will remember that both of these are public by default.

60
00:04:20,380 --> 00:04:29,610
So in here we can use the dot operator to access them by going count dot balls or count dot cows.

61
00:04:29,710 --> 00:04:32,140
And that is the same as having those integers there.

62
00:04:32,500 --> 00:04:38,620
So what we can do here is a little bit of fun we can play around with it so we can print line so we

63
00:04:38,620 --> 00:04:48,050
can actually see the values here takes macro and then let's go bulls equals and then the integer format

64
00:04:48,190 --> 00:04:53,540
specified and then cows equals again the integer format specified.

65
00:04:54,310 --> 00:04:56,290
And then what do we put in here.

66
00:04:56,290 --> 00:05:03,520
Well if we go count dot balls that's the same as just putting an integer in there we hover over we can

67
00:05:03,520 --> 00:05:13,360
see it is an integer which is great and we can then go count dot cows if we go ahead and save that once

68
00:05:13,360 --> 00:05:21,820
we've got our semicolon on the end go over into unreal and compile when we press play.

69
00:05:21,820 --> 00:05:30,570
What we should expect to see is bulls equals zero and cows equals zero Okay let's press play.

70
00:05:30,690 --> 00:05:30,980
Okay.

71
00:05:30,990 --> 00:05:34,980
There we go at the top there we can see bulls and cows both equal to zero.

72
00:05:35,430 --> 00:05:38,660
Okay let's dive back over to our code okay.

73
00:05:38,660 --> 00:05:45,180
So let's say we wanted to initialize the bulls and cows to a different value before we started.

74
00:05:45,200 --> 00:05:47,690
We can do that at this point.

75
00:05:47,690 --> 00:05:49,520
We can open up some curly braces.

76
00:05:49,520 --> 00:05:50,330
Not square ones.

77
00:05:50,330 --> 00:05:55,760
There we go and sets our member variables 2 and 3.

78
00:05:55,760 --> 00:06:02,490
Now when I go ahead save compile my code and press play.

79
00:06:02,600 --> 00:06:07,070
We can now see that the bulls and cows have been set to 2 and 3.

80
00:06:07,130 --> 00:06:14,570
Now we can change it in another way as well and let us through this on a line underneath we can access

81
00:06:14,840 --> 00:06:23,090
bulls and just to sign it there and then we can reprint out this line again and what we should see is

82
00:06:23,090 --> 00:06:31,930
the value has been changed from 2 to 9 and of course we need the s on the end of their okay with the

83
00:06:31,930 --> 00:06:39,990
compiler completely as press play and there we go exactly what we expect to see now the bulls is 9 Okay

84
00:06:40,030 --> 00:06:43,620
so we pretty much have the basics of structure under our belts.

85
00:06:43,690 --> 00:06:51,070
It's now time for your challenge okay see your challenge is to rewrite your code to use a struct for

86
00:06:51,070 --> 00:06:55,630
counting the bulls and cows rather than using these out parameters.

87
00:06:55,720 --> 00:07:02,500
And remember you will need to return something from get bull cows polls of the year now and give us

88
00:07:02,500 --> 00:07:06,870
a go Okay everybody Welcome back.

89
00:07:06,890 --> 00:07:13,070
Let's dive on over into as code and rewrite our code so we can use a struct for counting those bulls

90
00:07:13,070 --> 00:07:15,830
and cows.

91
00:07:16,020 --> 00:07:21,120
Okay so the first thing I'm going to do here is get rid of our test code at the very top it's not going

92
00:07:21,120 --> 00:07:23,230
to be of any use to us.

93
00:07:23,310 --> 00:07:29,150
The next thing I'm going to do is go over into my head of file and have a look at this function.

94
00:07:29,160 --> 00:07:36,660
Now we are going to remove the out parameters so let's go ahead and do that and think about does anything

95
00:07:36,660 --> 00:07:39,780
else change is going to remain a constant function.

96
00:07:39,780 --> 00:07:45,720
It's not changing any of our member variables and we don't want to modify the guess that's absolutely

97
00:07:45,720 --> 00:07:46,550
fine.

98
00:07:46,590 --> 00:07:48,660
So at the moment it's returning nothing.

99
00:07:48,660 --> 00:07:51,020
But what do we need it to return.

100
00:07:51,030 --> 00:07:53,790
We needed to return a struct.

101
00:07:53,790 --> 00:07:57,840
We need it to return our new Type R F Falcao count.

102
00:07:57,830 --> 00:08:03,070
So if I delete a void and go f bool Cal count there we go.

103
00:08:03,120 --> 00:08:08,010
So that's the first part done let's go over into the implementation and fix this up.

104
00:08:08,010 --> 00:08:12,660
Now as I'm going down the code at some point we call the ball.

105
00:08:12,690 --> 00:08:20,340
Here we go online 88 so we're no longer passing in the bulls and cows so we can get rid of that and

106
00:08:20,490 --> 00:08:25,110
the thirty 32 here bulls and cows we don't need that declaration either.

107
00:08:25,860 --> 00:08:27,810
Okay let's carry on down.

108
00:08:28,020 --> 00:08:35,460
I think I'm capturing things as we go so we don't need these two out parameters here and this void becomes

109
00:08:35,460 --> 00:08:37,670
an F bull cow count.

110
00:08:37,710 --> 00:08:38,730
Excellent.

111
00:08:39,000 --> 00:08:46,510
Now because our bulls and cows are already initialized to 0 all we have to do here is have the F boop

112
00:08:46,590 --> 00:08:48,420
cow counts as our type.

113
00:08:48,420 --> 00:08:56,740
And then let's name it count as we did before and that is automatically set to zero then we need to

114
00:08:56,740 --> 00:09:00,160
go ahead and increment the bulls and cows.

115
00:09:00,160 --> 00:09:03,150
So here we can just do both counts.

116
00:09:03,160 --> 00:09:09,190
Well in this case we're going to do count dot bulls plus plus.

117
00:09:09,390 --> 00:09:15,160
And then finally count dolts cows plus plus.

118
00:09:15,170 --> 00:09:16,490
Okay that's great.

119
00:09:16,500 --> 00:09:20,340
So what's happening here is we're instantiating our struct.

120
00:09:20,520 --> 00:09:24,320
We have then bulls and cows set to zero.

121
00:09:24,420 --> 00:09:29,890
We incrementing them with the appropriate bulls and cows and then we're throwing away that data.

122
00:09:29,910 --> 00:09:35,890
So the final thing we need to do here I believe is return.

123
00:09:36,000 --> 00:09:37,140
What do we need to return.

124
00:09:37,140 --> 00:09:45,160
Well we need to return our counts and now we need to do something with that in order to get the data

125
00:09:45,220 --> 00:09:53,440
out because at the moment if we go back up where we have gets bull cows that expression is evaluating

126
00:09:53,440 --> 00:09:54,910
to the struct.

127
00:09:54,910 --> 00:09:59,120
So here is where we can instance our struct again.

128
00:09:59,140 --> 00:10:05,320
And in this case I'm going to call it school and we can set it equal to that struct and then all we

129
00:10:05,320 --> 00:10:11,000
need to do is where we're printing out the bulls and cows is go score dot bulls.

130
00:10:11,080 --> 00:10:15,530
And this is just luck here and score on dot cows.

131
00:10:15,580 --> 00:10:18,680
Fortunately their names have never changed.

132
00:10:18,870 --> 00:10:24,920
Now all being well I think that will all work unless I figure on a semicolon somewhere.

133
00:10:25,290 --> 00:10:29,170
Okay let's go into unreal and test that okay.

134
00:10:29,180 --> 00:10:30,870
Let's play our game.

135
00:10:30,870 --> 00:10:37,620
Okay so everything appears to be working so far let's go and type our word in backwards and we should

136
00:10:37,620 --> 00:10:39,630
find here with a five letter word.

137
00:10:39,630 --> 00:10:41,730
We're going to get one ball.

138
00:10:41,850 --> 00:10:44,550
The W and then for cows.

139
00:10:44,550 --> 00:10:45,200
Perfect.

140
00:10:45,210 --> 00:10:50,860
And our count is going down and if we go whoa per we're getting closer.

141
00:10:51,000 --> 00:10:54,380
And then of course if we gave power we've won the game.

142
00:10:54,510 --> 00:10:55,370
Perfect.

143
00:10:55,410 --> 00:10:56,580
Our code is complete.

144
00:10:56,610 --> 00:10:58,650
That's fantastic.

145
00:10:58,650 --> 00:11:01,710
And that completes our basic game.

146
00:11:01,710 --> 00:11:03,270
That's fantastic.

147
00:11:03,270 --> 00:11:09,180
How did you guys get on please share your work over in the discussions if you've made any modifications

148
00:11:09,180 --> 00:11:12,890
to the game I'd love to see it and I'll see you all in the next lecture.
