WEBVTT
1
00:00:04.150 --> 00:00:09.430
Hello everybody and welcome in this lecture we're going to be accessing an object's name in order to

2
00:00:09.430 --> 00:00:09.730
do that.

3
00:00:09.730 --> 00:00:11.460
We're going to have to use pointers.

4
00:00:11.470 --> 00:00:12.170
Don't be scared.

5
00:00:12.190 --> 00:00:14.230
We'll go through it step by step.

6
00:00:14.230 --> 00:00:18.700
The first thing we will do is we are going to play with pointers.

7
00:00:18.700 --> 00:00:19.600
That's the important thing.

8
00:00:19.600 --> 00:00:22.070
Just getting our head around how they work.

9
00:00:22.300 --> 00:00:28.630
And I'll throw a few extra bits in here as we go because we'll learn a little more about operator precedents

10
00:00:28.690 --> 00:00:29.720
as well.

11
00:00:29.770 --> 00:00:37.930
We'll be using get owner to find the components owner a actor star is a pointer to an actor.

12
00:00:38.020 --> 00:00:42.370
Something to remember for when we're looking at the code in the moment and we're going to be using the

13
00:00:42.490 --> 00:00:48.190
arrow operator to access members rather than the dots operator which we used to.

14
00:00:48.190 --> 00:00:55.200
So far we'll be using gets name to find the object's name and the other thing that will crop up during

15
00:00:55.200 --> 00:00:59.130
this is we will be exposed once again to include what you use.

16
00:00:59.130 --> 00:01:02.280
We've mentioned it in the past but now we're going to have to use it.

17
00:01:03.060 --> 00:01:04.860
Let's dive on over into v s code

18
00:01:07.790 --> 00:01:08.380
OK.

19
00:01:08.390 --> 00:01:09.870
Welcome over into V.S. Co.

20
00:01:09.870 --> 00:01:13.310
The first thing I want to do here is just tidy up this.

21
00:01:13.310 --> 00:01:16.610
We're not going to have this all the top one anymore.

22
00:01:16.640 --> 00:01:19.040
We will have the one that outputs in yellow.

23
00:01:19.490 --> 00:01:23.210
And I'm just gonna hijack that and I'll put something else in here later on.

24
00:01:23.270 --> 00:01:23.570
Okay.

25
00:01:23.590 --> 00:01:27.740
So our first example here we're going to use an F string.

26
00:01:27.740 --> 00:01:30.380
It's something we can get members of.

27
00:01:30.380 --> 00:01:35.540
So for instance when we were getting the length of something you can't do that with primitive types

28
00:01:35.540 --> 00:01:36.980
I'll just show you that first of all.

29
00:01:37.010 --> 00:01:45.320
So if we have an int 32 called number and we set to equal to whatever value when we go to the next line

30
00:01:45.320 --> 00:01:50.020
down and go no dot there are no members of this primitive type.

31
00:01:50.030 --> 00:01:56.750
However if we go for something a bit more complex like the F string class we can really start to have

32
00:01:56.750 --> 00:01:58.530
some fun and see how it works.

33
00:01:58.640 --> 00:02:04.430
So let's call this f string lock because it's something that we're locking to the console and we'll

34
00:02:04.430 --> 00:02:11.020
set this equal to what should we set it to set it to just something simple like Hello.

35
00:02:11.630 --> 00:02:14.140
So we know that we can print this out to the log.

36
00:02:14.150 --> 00:02:23.570
Now if we wanted to we could just put within the log percentage s common log and it won't work just

37
00:02:23.570 --> 00:02:27.650
yet because we would need the star operator.

38
00:02:28.070 --> 00:02:32.360
And this is an overloaded operator so does something different.

39
00:02:32.450 --> 00:02:38.510
This is the reason why I've chosen an F string because this is one of these examples where sometimes

40
00:02:38.570 --> 00:02:41.770
in C++ things can get a bit messy.

41
00:02:41.810 --> 00:02:45.610
The star of the asterisk is used for multiplication.

42
00:02:45.710 --> 00:02:48.620
It's used for a pointer is used for D referencing.

43
00:02:48.620 --> 00:02:52.500
And here it's being overloaded to do something different.

44
00:02:52.550 --> 00:02:58.710
So if we go ahead and run the code here it would fail because we don't have our semicolon online 23

45
00:02:58.960 --> 00:03:02.330
by otherwise this will just print out hello to the log.

46
00:03:02.330 --> 00:03:08.230
Let's check that compile our code and of course whilst this is compiling I can open up the output log

47
00:03:08.320 --> 00:03:13.360
and if there are any failures I can just read them straight from here rather than having to click over

48
00:03:13.360 --> 00:03:14.740
here we will see.

49
00:03:14.740 --> 00:03:15.670
It will say hello.

50
00:03:15.670 --> 00:03:16.120
Here we go.

51
00:03:16.150 --> 00:03:17.090
As a warning.

52
00:03:17.230 --> 00:03:18.410
Down in the log.

53
00:03:18.430 --> 00:03:18.730
Brilliant.

54
00:03:18.910 --> 00:03:20.040
So we know that's working.

55
00:03:20.080 --> 00:03:22.280
Let's stop that and go back to our code.

56
00:03:22.510 --> 00:03:22.840
Right.

57
00:03:22.870 --> 00:03:24.630
So we're talking about pointers here.

58
00:03:24.640 --> 00:03:27.370
Now our pointer is simply the memory address of something.

59
00:03:27.760 --> 00:03:32.200
So in order to create a pointer we would need to also give it what type it is.

60
00:03:32.200 --> 00:03:37.060
Now it's not the type of the pointer is the type of the thing it's pointing to.

61
00:03:37.060 --> 00:03:43.450
So in this particular example what we can do is it would be an F string once again because that's what

62
00:03:43.450 --> 00:03:44.430
we are pointing to.

63
00:03:44.950 --> 00:03:46.700
And then we would need the star.

64
00:03:46.720 --> 00:03:48.740
Now it doesn't matter where the star goes.

65
00:03:48.820 --> 00:03:52.240
Let's call this PCR logger pointer to our log.

66
00:03:52.240 --> 00:03:53.050
It could go there.

67
00:03:53.050 --> 00:03:54.740
It could go like basic like that.

68
00:03:54.790 --> 00:04:00.490
It doesn't matter where this goes but we're going to respect unravels coding conventions and put it

69
00:04:00.550 --> 00:04:09.460
next to the type so here we have a pointer called PCR log which is pointing to something that is an

70
00:04:09.460 --> 00:04:10.700
F string.

71
00:04:11.020 --> 00:04:12.130
We need to finish this off.

72
00:04:12.430 --> 00:04:17.770
So it equals and remember that a pointer is a memory address so we're going to use the ampersand now

73
00:04:17.770 --> 00:04:21.490
as part of a declaration the ampersand does mean a reference.

74
00:04:21.490 --> 00:04:27.760
However when we're using it as part of an expression like we are doing here it means the address of

75
00:04:28.090 --> 00:04:36.250
we're saying the address of where it's stored in memory of the log variable for a reference log.

76
00:04:36.250 --> 00:04:38.040
Now this is brilliant.

77
00:04:38.080 --> 00:04:41.220
We've created our first pointer.

78
00:04:41.320 --> 00:04:42.700
Now let's go down a little.

79
00:04:42.970 --> 00:04:44.760
What we can do here.

80
00:04:44.870 --> 00:04:51.490
We have our log is access its members by using the dot operator.

81
00:04:51.580 --> 00:04:55.870
Now with the dot operator what we can then pick out is the length we're familiar with that.

82
00:04:56.170 --> 00:05:02.260
So there we go we've got something here that's being evaluated to an in 32 and it probably be six in

83
00:05:02.260 --> 00:05:02.580
length.

84
00:05:02.590 --> 00:05:04.330
We could print that out if we wanted to.

85
00:05:04.330 --> 00:05:04.870
That's fine.

86
00:05:04.870 --> 00:05:06.520
We've done that lots in the past.

87
00:05:07.030 --> 00:05:12.080
But how do we access any members when it comes to those pointers.

88
00:05:12.100 --> 00:05:12.380
OK.

89
00:05:12.400 --> 00:05:15.010
So how does this work with pointers.

90
00:05:15.010 --> 00:05:22.570
Well if we go pointer log and just go dots it's not going to do anything it doesn't mean anything that's

91
00:05:22.570 --> 00:05:25.000
a pointer or PCR log.

92
00:05:25.000 --> 00:05:29.470
It's not this log so it's not an F string it's a pointer.

93
00:05:29.470 --> 00:05:37.870
So we would have to get the value that's out there by DB referencing and we did reference with the star

94
00:05:38.890 --> 00:05:41.860
but then when we go dot nothing happens.

95
00:05:41.860 --> 00:05:43.060
Why is that.

96
00:05:43.060 --> 00:05:49.900
Well the referencing has a lower precedence than the dot operators the dot operator is trying to run

97
00:05:49.900 --> 00:05:52.000
first and it won't work.

98
00:05:52.030 --> 00:05:55.940
So in order to get around that we'd have to put parentheses around this.

99
00:05:55.990 --> 00:05:58.010
So we did reference.

100
00:05:58.180 --> 00:05:59.080
There we go.

101
00:05:59.170 --> 00:05:59.890
Cleared.

102
00:05:59.920 --> 00:06:07.710
And then when we go dot we gain access to the members where that pointer is pointing to.

103
00:06:07.810 --> 00:06:12.210
Now that seems an awful syntax to keep typing and it is.

104
00:06:12.220 --> 00:06:19.630
So there's another operator that you can use so you don't get into this model so we can go pointer log

105
00:06:19.990 --> 00:06:22.860
and then the arrow is the dash and the right Chevron.

106
00:06:22.880 --> 00:06:23.800
I got that right.

107
00:06:23.800 --> 00:06:25.600
There we go.

108
00:06:25.600 --> 00:06:31.080
And then we have access to the same members that we would do as above.

109
00:06:31.240 --> 00:06:32.890
Really really useful.

110
00:06:32.890 --> 00:06:38.170
So we use the dot operator when we're talking about those direct access to those members and we would

111
00:06:38.170 --> 00:06:42.670
use the arrow when it's indirect when we're going via a pointer.

112
00:06:42.670 --> 00:06:44.440
Now I've mentioned order of precedence.

113
00:06:44.500 --> 00:06:47.460
Let's go and have a look at that okay.

114
00:06:47.460 --> 00:06:49.130
This is a big long list.

115
00:06:49.130 --> 00:06:55.110
I'll make sure that it's in your resources for you but you can see here the operator precedence of the

116
00:06:55.140 --> 00:07:02.310
dots operator comes above that of the indirection or the D reference that we just used.

117
00:07:02.310 --> 00:07:06.180
So that's why we had to put the parentheses around it.

118
00:07:06.180 --> 00:07:11.520
And this is a really useful reference if you're ever wondering about what would happen first in your

119
00:07:11.520 --> 00:07:18.580
code okay so the final thing I'd want to show you here is what happens with this when we have to.

120
00:07:18.580 --> 00:07:24.780
The references and the moments if we were to go ahead and just do this which looks like with the referencing

121
00:07:24.810 --> 00:07:25.560
but we're not.

122
00:07:25.560 --> 00:07:29.490
That's an overloaded operator but this won't compile.

123
00:07:29.490 --> 00:07:33.730
It will fail because it doesn't give our takes macro what it needs.

124
00:07:33.810 --> 00:07:39.090
If we remove that star and let's say our code we weren't printing it out to a log so we didn't know

125
00:07:39.090 --> 00:07:40.210
what it was doing.

126
00:07:40.230 --> 00:07:45.680
Let's see what that comes up with an unreal rigorous says compile complete and roll when we press play

127
00:07:45.690 --> 00:07:48.060
we get some gobbledygook.

128
00:07:48.060 --> 00:07:52.440
That's because we're printing out a reference which is printing a memory address and whatever was in

129
00:07:52.440 --> 00:07:58.860
that memory address is being converted to a string and it's complete garbage right.

130
00:07:58.920 --> 00:08:05.540
And that doesn't work because we're simply going to the memory address where we've created PCR log.

131
00:08:05.550 --> 00:08:08.400
Now if there had been a string there that would've made sense.

132
00:08:08.580 --> 00:08:11.850
There wasn't a string there so it's come back with garbage.

133
00:08:11.850 --> 00:08:18.270
If we put the single asterisk there that also won't work in this particular case we would have to have

134
00:08:18.270 --> 00:08:20.590
two stars or two asterisks.

135
00:08:20.790 --> 00:08:22.290
And I really wanted to show you this.

136
00:08:22.290 --> 00:08:28.030
Just to highlight how difficult for a beginner it can be when you're reading this sort of stuff.

137
00:08:28.030 --> 00:08:33.740
And by exposing yourself to its will make it much easier to do.

138
00:08:33.870 --> 00:08:40.920
And when we do that what we are doing is we are D referencing and we're using the overloaded operator

139
00:08:40.980 --> 00:08:45.780
next to one another which is confusing and that should be able to print out the string hello.

140
00:08:45.930 --> 00:08:52.800
Let's just test that quickly and there we go we get Hello twice because our components on both objects

141
00:08:54.960 --> 00:08:59.330
case and health that we've explored pointers and we've taken a deep breath.

142
00:08:59.380 --> 00:09:04.000
The next thing we're going to do is get ready to go and get the name that this component is attached

143
00:09:04.000 --> 00:09:07.550
to imprint that's out on the console part of that will be your challenge.

144
00:09:07.630 --> 00:09:11.920
But the first thing we need to do is include what we use.

145
00:09:11.920 --> 00:09:17.590
So the issue at the moment is if I just give you the challenge we've got not got the right include at

146
00:09:17.590 --> 00:09:18.310
the top here.

147
00:09:18.340 --> 00:09:24.530
So we need to hash include also completes working in our favor here.

148
00:09:24.750 --> 00:09:27.220
Our look at that it spoils it for me.

149
00:09:27.400 --> 00:09:33.790
Yes it's the game framework that we need forward slash actor header file.

150
00:09:34.030 --> 00:09:37.290
I'm going to save that that in fact line five for the moment.

151
00:09:37.300 --> 00:09:42.440
If you have already typed it I'm going to comment it out and then just bring it back in in a moment.

152
00:09:42.440 --> 00:09:46.490
So I'm going to get rid of what we've got here for the moment.

153
00:09:46.900 --> 00:09:51.390
Well I'm going to leave it there actually as reference material more than anything else.

154
00:09:51.550 --> 00:09:53.830
And then I'll tie the up at the very end.

155
00:09:53.920 --> 00:09:56.780
So that's there for your reference if necessary.

156
00:09:56.830 --> 00:10:03.070
So if we want to get the owner of something as we said before we start typing gets this is a getter

157
00:10:03.760 --> 00:10:06.820
gets owner comes up absolutely fine.

158
00:10:06.970 --> 00:10:14.840
Then we include the parentheses and we can see here that it will return a pointer to a actor that it's

159
00:10:14.860 --> 00:10:20.660
a pointer because we've got a actor which is the type and then we've got Star gets ONA.

160
00:10:20.710 --> 00:10:22.610
Okay fair enough.

161
00:10:22.610 --> 00:10:25.420
Now does that come up also when we're typing here.

162
00:10:25.420 --> 00:10:28.570
Yes we can see it's fully qualified here as well.

163
00:10:28.570 --> 00:10:36.320
You actor component gets ona now if we were to reach into that further and what we would have to do

164
00:10:36.830 --> 00:10:44.210
is use the arrow operator because it's a pointer but then we would need to get name and nothing is coming

165
00:10:44.210 --> 00:10:45.980
up when we do that.

166
00:10:46.070 --> 00:10:52.940
However that's because we've not included what we need to use so we need to include the game framework

167
00:10:53.090 --> 00:10:55.340
forward slash actor if I uncommon.

168
00:10:55.370 --> 00:10:57.170
That's come back down here.

169
00:10:57.170 --> 00:11:00.500
Start the arrow operator and start typing.

170
00:11:00.500 --> 00:11:00.920
Here we go.

171
00:11:00.920 --> 00:11:03.520
Get name will come up.

172
00:11:03.530 --> 00:11:06.640
And that also needs our parentheses.

173
00:11:06.710 --> 00:11:08.220
Boom done.

174
00:11:08.270 --> 00:11:14.730
Not quite because it's time for your challenge and your challenge is to create a variable to store the

175
00:11:14.730 --> 00:11:20.290
object's name and then output the name of the object to the console in your log.

176
00:11:20.340 --> 00:11:25.170
And what should happen if successful is if you've got two objects both of the component in the scene

177
00:11:25.680 --> 00:11:27.630
they will print out their name.

178
00:11:27.840 --> 00:11:35.460
So perhaps use a bit more flavor in your log and say this component is attached to and then use your

179
00:11:35.460 --> 00:11:44.260
format specified to make sure that the object's name is printed positively now and give that a go Okay

180
00:11:44.290 --> 00:11:45.130
everybody Welcome back.

181
00:11:45.130 --> 00:11:48.310
Let's go ahead now and print out all objects names to the log.

182
00:11:49.120 --> 00:11:51.370
Okay so we can use what we've got here.

183
00:11:51.400 --> 00:11:54.130
I'm gonna call it object name.

184
00:11:54.140 --> 00:11:56.830
And we need to give it a type as well in the moment don't we.

185
00:11:56.830 --> 00:11:59.770
In fact when we hover over this we can see what we get back.

186
00:11:59.800 --> 00:12:05.050
So get name is returning and F string we know we need an F string so we can do that here.

187
00:12:05.050 --> 00:12:08.410
So f String object name.

188
00:12:08.410 --> 00:12:10.240
That's not how you spell f string.

189
00:12:10.300 --> 00:12:12.140
So there we go.

190
00:12:12.250 --> 00:12:18.990
Perfect so here we have an F string that we've called object name and is going to be sets to whatever

191
00:12:18.990 --> 00:12:22.940
this slots is returning which will be the name of the object.

192
00:12:23.400 --> 00:12:25.020
And what else can we do here.

193
00:12:25.020 --> 00:12:27.980
Well we need to print it out to the lock so we can do a couple of things here.

194
00:12:28.050 --> 00:12:37.890
We can obviously go you e log and then log temp com a warning because we want it coming out in yellow

195
00:12:38.220 --> 00:12:39.980
and then of course the text macro.

196
00:12:39.990 --> 00:12:49.230
Now this is where it can get a little bit interesting because I can type in here object name is format

197
00:12:49.230 --> 00:12:56.250
specify s or I am attached to this object or whatever wording you've decided to use comma and then I

198
00:12:56.250 --> 00:13:03.450
can pop in here object name save my file and I'll just check this is work and then I'll show you what

199
00:13:03.450 --> 00:13:05.360
else you could have done Oh I'm not.

200
00:13:05.370 --> 00:13:12.690
Let's not forget the asterisk or the star that's needed for the format specified right we're safe.

201
00:13:12.690 --> 00:13:15.310
Let's go and compile okay.

202
00:13:15.350 --> 00:13:20.420
And press play so we can see down here it says cube 2 and sphere 5.

203
00:13:20.600 --> 00:13:26.210
And you may be thinking well hang on a minute I've only got cube and sphere in my scene but if we hover

204
00:13:26.210 --> 00:13:29.550
over we see they've got an I.D. name of cube underscore.

205
00:13:29.590 --> 00:13:36.080
So that's just how many instances unreal things it's had of these objects in the scene that are called

206
00:13:36.080 --> 00:13:38.330
cube or called sphere.

207
00:13:38.330 --> 00:13:40.640
We hover over a sphere we will see a similar thing.

208
00:13:40.850 --> 00:13:43.160
Okay so what else could we have done there.

209
00:13:43.160 --> 00:13:49.440
Well let's go back to our code now if you wanted to use object name in several places.

210
00:13:49.520 --> 00:13:53.560
That's fine storing as a variable like that would get us there.

211
00:13:53.570 --> 00:14:00.260
The other thing that we could do here is not type that and instead here we would need to use our overloaded

212
00:14:00.290 --> 00:14:08.910
operator as before and go get ONA the arrow operator followed by gets name.

213
00:14:09.370 --> 00:14:14.810
Oh I've forgotten it wasn't also filling there because I forgot the brackets on the first one there.

214
00:14:14.950 --> 00:14:16.010
Do I need anything else.

215
00:14:16.010 --> 00:14:16.390
Nope.

216
00:14:16.400 --> 00:14:19.520
Let's save that and see what happens with that complete.

217
00:14:19.520 --> 00:14:20.900
Let's go ahead and press play.

218
00:14:21.410 --> 00:14:22.170
Excellent.

219
00:14:22.250 --> 00:14:23.810
And that works as well.

220
00:14:23.810 --> 00:14:26.890
So there are just two different ways that you could have written your code there.

221
00:14:26.960 --> 00:14:34.860
One obviously only takes up one line but it doesn't allow us to use object name again in our code.

222
00:14:34.900 --> 00:14:40.210
Now I'm going to leave both there for the moment and I'm going to remove this extra bit of code that

223
00:14:40.210 --> 00:14:46.480
I had put there but that is a great start we now know the objects that we are playing with and that

224
00:14:46.480 --> 00:14:52.210
means we can probably get some other things like their transform and when we do that that will mean

225
00:14:52.210 --> 00:14:57.970
we'll be able to calculate the distance from us to another object which means that we can have a radius

226
00:14:57.970 --> 00:15:04.610
around us or even better straight from the center of where we're looking ensuring that we can pick up

227
00:15:04.610 --> 00:15:07.870
objects only within a certain distance.

228
00:15:07.940 --> 00:15:09.710
So that's it for this lecture.

229
00:15:09.710 --> 00:15:10.730
I hope you've enjoyed it.

230
00:15:10.730 --> 00:15:11.410
I really have.

231
00:15:11.600 --> 00:15:13.250
And I'll see you all in the next one.
