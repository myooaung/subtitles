WEBVTT
1
00:00:04.560 --> 00:00:06.090
Hello everybody and welcome back.

2
00:00:06.090 --> 00:00:08.040
In this election we're going to go through a new loop.

3
00:00:08.130 --> 00:00:13.080
Well kind of new we've mentioned it in the past it's the range based for loop and it's designed for

4
00:00:13.080 --> 00:00:17.600
iterating through collections or technically speaking a range.

5
00:00:17.620 --> 00:00:24.780
You'll never guess what we've got a t array is a collection and also a range of f strings but it could

6
00:00:24.780 --> 00:00:26.950
be a collection of any different types.

7
00:00:27.090 --> 00:00:30.400
And this will make our code easier to read now.

8
00:00:30.420 --> 00:00:31.500
So it's going to be easy to read.

9
00:00:31.500 --> 00:00:36.340
Let's actually have a look at how a range based for loop is constructed.

10
00:00:36.420 --> 00:00:42.630
So we have it starting much like a normal for loop we go for we open up parentheses and then we have

11
00:00:42.630 --> 00:00:48.300
a variable created specifically for this loop and we'll give it a certain type as well because we need

12
00:00:48.300 --> 00:00:53.940
to declare what type that variable happens to be and then we have our colon and then the data where

13
00:00:53.940 --> 00:01:00.180
are we pulling the information from now because this range based for loop is designed to iterate over

14
00:01:00.180 --> 00:01:04.400
an entire collection or the entire range.

15
00:01:04.440 --> 00:01:09.420
We can't really use it for anything else but it doesn't mean we don't need to refer to any indices with

16
00:01:09.500 --> 00:01:10.530
in that collection.

17
00:01:10.530 --> 00:01:16.290
It's just going to go step by step through and the variable that we've just created for this loop will

18
00:01:16.290 --> 00:01:22.260
be initialized to the first element of this array and then on the next loop it will be assigned the

19
00:01:22.260 --> 00:01:30.660
second element and so on and then underneath we will have the code executing which does mean we will

20
00:01:30.660 --> 00:01:36.870
have to change some of the code that is beneath to reference the temporary variable rather than the

21
00:01:36.870 --> 00:01:43.080
index of a certain array and I would really like you to stretch yourself on this one.

22
00:01:43.170 --> 00:01:47.830
We've played a lot with for loops now and I'd like to dive straight into the challenge.

23
00:01:47.930 --> 00:01:51.000
It's going to be a bit of a stretch for some of you but it's absolutely fine.

24
00:01:51.000 --> 00:01:54.460
Try your best and let's see what you come up with.

25
00:01:54.580 --> 00:02:01.650
It's a swap out our current for loop in the get valid words function that we've just created and what

26
00:02:01.650 --> 00:02:08.840
we're going to replace it with is a range based for loop check your code as it will need changing is

27
00:02:08.860 --> 00:02:11.270
not going to work straight out of the box.

28
00:02:11.320 --> 00:02:17.380
So little hint here that we're not going to be referring to the index any more because that is built

29
00:02:17.380 --> 00:02:23.530
into this range based for loop so we can say goodbye to those square brackets with the index in them

30
00:02:24.090 --> 00:02:30.540
supports the video now and give that a go Okay everybody Welcome back.

31
00:02:30.550 --> 00:02:36.640
Let's dive over into V.S. code and create our range based for loop okay.

32
00:02:36.650 --> 00:02:37.610
Everybody welcome back.

33
00:02:37.610 --> 00:02:42.350
Let's go ahead and see how we're going to go about doing this range space for loop.

34
00:02:42.380 --> 00:02:47.600
The first thing I'm going to do is grab everything within the parentheses here and get rid of it.

35
00:02:47.630 --> 00:02:53.480
We know we're going to be handling f string so let's go and put that in and then we're going to need

36
00:02:53.570 --> 00:02:56.360
the variable that we're going to use throughout this loop.

37
00:02:56.360 --> 00:02:59.720
And we do have to be careful about what it's called.

38
00:02:59.960 --> 00:03:05.300
In this particular case I am going to call it word but I am also going to be hyper aware that we have

39
00:03:05.300 --> 00:03:06.110
valid words.

40
00:03:06.110 --> 00:03:07.430
We've got words.

41
00:03:07.490 --> 00:03:08.980
We've got word lists.

42
00:03:08.990 --> 00:03:15.140
So this might get a bit confusing if someone else is reading our code but I think word is fine for the

43
00:03:15.140 --> 00:03:16.480
moment.

44
00:03:16.490 --> 00:03:19.000
Now we've got the code colon in there.

45
00:03:19.000 --> 00:03:24.350
And what are we reaching into and iterating through what is going to be the word list itself.

46
00:03:24.350 --> 00:03:26.250
So the word list.

47
00:03:26.270 --> 00:03:27.170
Okay.

48
00:03:27.260 --> 00:03:32.600
Now if you remember in the challenge I was talking about how we're not referring to indices anymore.

49
00:03:32.780 --> 00:03:41.780
We are literally taking the first element of the word list initializing it to this new variable and

50
00:03:41.780 --> 00:03:45.870
then we're going to it's right through the container or the range itself.

51
00:03:45.890 --> 00:03:46.820
So what does that mean.

52
00:03:46.850 --> 00:03:53.260
That means that everything that we've referred to the word lists index can be changed out for just word.

53
00:03:53.270 --> 00:03:58.790
We do still need to cool things like the length function on it so that we can assess it against they

54
00:03:58.790 --> 00:04:03.890
and insert your hair otherwise that wouldn't work but otherwise we can swap each one of these out this

55
00:04:03.890 --> 00:04:04.500
time.

56
00:04:04.610 --> 00:04:11.780
This is going to be a Find and Replace so with wordless index like a control an F for find and it's

57
00:04:11.780 --> 00:04:14.120
only found for instances of it which is great.

58
00:04:14.120 --> 00:04:20.610
Those are the only four I care about and I'm going to replace it with the word word excellent.

59
00:04:20.670 --> 00:04:21.930
That's all done.

60
00:04:21.930 --> 00:04:26.400
Of course we just need to test to make sure that everything is working as expected and you can really

61
00:04:26.400 --> 00:04:30.390
see how much easier that little section is now to read.

62
00:04:30.390 --> 00:04:35.520
Now scrolling up a little we've got the is icy ground functioning you may have thought oh maybe I'll

63
00:04:35.520 --> 00:04:41.220
use the range based for loop on that I'm going to lead this as it is at the moment I think it will overcomplicate

64
00:04:41.220 --> 00:04:47.070
what we've already got here trying to change it into arranged space for loop but this was a perfect

65
00:04:47.100 --> 00:04:53.040
example of iterating through everything in the collection in this case an array and then taking action

66
00:04:53.040 --> 00:04:54.360
on every single element.

67
00:04:54.360 --> 00:05:01.990
So let's save that go over into a real let's compile and pressed play perfect.

68
00:05:02.020 --> 00:05:05.500
Our code is still working and that means we're successful.

69
00:05:05.520 --> 00:05:05.770
All right.

70
00:05:05.770 --> 00:05:07.400
How did you guys get on.

71
00:05:07.420 --> 00:05:12.430
I know for some of you this would have been a real stretch being able to go through and just wrapping

72
00:05:12.430 --> 00:05:15.800
your noodle around this new way of writing a for loop.

73
00:05:15.960 --> 00:05:21.250
Now do bear in mind if he wants to do something more complex than just iterating over an entire collection

74
00:05:21.550 --> 00:05:24.280
then you're going to have to choose one of the other types of loops.

75
00:05:24.290 --> 00:05:28.020
But this was perfect for what we were doing here.

76
00:05:28.090 --> 00:05:32.950
Please share how you got on over in the discussions and I'll see you all in the next lecture.
