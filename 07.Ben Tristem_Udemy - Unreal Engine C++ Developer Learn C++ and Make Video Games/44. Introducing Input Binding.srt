1
00:00:04,220 --> 00:00:08,320
Hello everybody and welcome to introducing input binding.

2
00:00:08,390 --> 00:00:12,320
We are going to look into settings project settings engine input.

3
00:00:12,320 --> 00:00:17,930
We're going to look at how action mappings are used for on off actions and access mappings are used

4
00:00:17,930 --> 00:00:24,290
for analog value so consider a driving simulator you might have a steering wheel or a flight simulator

5
00:00:24,300 --> 00:00:25,470
you might have a joystick.

6
00:00:25,580 --> 00:00:32,090
Anything that's not on and off and has analog inputs and of course a game controller with its two analog

7
00:00:32,090 --> 00:00:35,080
sticks would be another example of that.

8
00:00:35,110 --> 00:00:39,290
Now of course you can give players a way of remapping that's quite common in games you're not gonna

9
00:00:39,310 --> 00:00:46,150
cover that in this particular section though you can bind many keys to the same action and we will go

10
00:00:46,150 --> 00:00:50,950
over how to call a function on a key press all when the key is released.

11
00:00:51,070 --> 00:00:55,690
She can be really useful when we're grabbing something because we don't necessarily want to hold onto

12
00:00:55,720 --> 00:00:57,340
it for ever.

13
00:00:57,400 --> 00:01:02,830
We might want to hold down a key to pick it up and then when we release that key we will drop it.

14
00:01:03,130 --> 00:01:07,010
In this lecture we are going to map a key to do a certain action.

15
00:01:07,060 --> 00:01:12,130
In this case it's going to be to call a function and that function at the end of this lecture will be

16
00:01:12,280 --> 00:01:18,760
showing a grabber press down in the log and then we'll do a final bit of implementation over the next

17
00:01:18,760 --> 00:01:22,500
couple of lectures so we can start picking our objects up.

18
00:01:22,510 --> 00:01:22,750
Okay.

19
00:01:22,770 --> 00:01:26,040
So the input component here is a little bit hidden away.

20
00:01:26,140 --> 00:01:31,890
So when we press play what we used to be able to do is inspect the default porn and see it as parts

21
00:01:31,890 --> 00:01:35,200
of the components that would appear at runtime.

22
00:01:35,200 --> 00:01:39,420
But now all actors have an input component.

23
00:01:39,430 --> 00:01:41,860
It's just built in as part of that class.

24
00:01:41,860 --> 00:01:46,930
So we don't need to worry about attaching anything here or making sure that something has it's there

25
00:01:46,930 --> 00:01:48,540
by default.

26
00:01:48,580 --> 00:01:50,470
So now we know that's going to be there by default.

27
00:01:50,470 --> 00:01:57,190
Let's go into our project settings and go to input which is down here under engine.

28
00:01:57,190 --> 00:02:00,100
Scroll down a little you'll find inputs.

29
00:02:00,130 --> 00:02:02,560
So a new window for us to explore.

30
00:02:02,560 --> 00:02:06,770
So we have action mappings here they are on and off switches.

31
00:02:06,850 --> 00:02:11,230
So like a button press and then we have here our axes mapping.

32
00:02:11,230 --> 00:02:12,410
And that's the analog sticks.

33
00:02:12,490 --> 00:02:18,250
And we were talking about earlier or steering wheel throttle and you think that's not just on or off.

34
00:02:18,250 --> 00:02:18,450
Okay.

35
00:02:18,490 --> 00:02:24,210
So we want to create our own action is not going to be an analog one so we can use the action mappings

36
00:02:24,220 --> 00:02:28,810
we're going to hit the plus button and we come up with new action mapping that's the name.

37
00:02:28,990 --> 00:02:29,950
That's not a very good name.

38
00:02:29,950 --> 00:02:31,270
It's not very descriptive.

39
00:02:31,270 --> 00:02:33,850
We're going to call it grab instead.

40
00:02:33,850 --> 00:02:40,030
Now you can select many keys here but in this particular case look at that we've got tons of options

41
00:02:40,030 --> 00:02:41,950
there and different settings as well.

42
00:02:42,040 --> 00:02:47,380
And you can see here if you're programming a game for multiple platforms you have the code in one for

43
00:02:47,380 --> 00:02:52,840
the X Box controller one for the P.S. For controller what happens if a user is using their mouse and

44
00:02:52,840 --> 00:02:58,600
keyboard again that's going to be a different set of inputs and that's the basis of why you can have

45
00:02:58,960 --> 00:03:02,060
many mappings all linking to the same thing.

46
00:03:02,110 --> 00:03:09,400
So I'm going to search by typing in the letter E and well can we do keyboard and then e so keyboard

47
00:03:10,180 --> 00:03:10,930
and E.

48
00:03:10,970 --> 00:03:11,220
No.

49
00:03:11,230 --> 00:03:16,380
It looks like we're going to have to scroll down here and there we go.

50
00:03:16,380 --> 00:03:18,260
E is on its own just there.

51
00:03:18,540 --> 00:03:23,130
So I'm going to use the E key in order to pick up and let go.

52
00:03:23,430 --> 00:03:28,020
And of course we can add another key as well so we can click the plus button again look you can have

53
00:03:28,320 --> 00:03:32,990
more than one thing here and let's use the mouse this time I'm just going to use the dropdown mouse

54
00:03:33,000 --> 00:03:34,300
it's right there in front of me.

55
00:03:34,370 --> 00:03:39,870
Now let's bind it also to the right mouse button so we can either grab something by using the e key

56
00:03:39,870 --> 00:03:45,070
on the keyboard or using our right mouse button and of course if you have a controller plugged into

57
00:03:45,100 --> 00:03:49,030
a computer why don't you try selecting one of the options on your controller.

58
00:03:49,710 --> 00:03:54,700
So we've now defined that the right mouse button then the key are both mapped to this action here.

59
00:03:54,720 --> 00:04:02,640
This grab and that has to be exactly the same over in our code and this is the sorts of things that

60
00:04:02,640 --> 00:04:08,160
the player can have control over if you give them access in a menu system for instance.

61
00:04:08,260 --> 00:04:09,870
Now we don't have to click save or anything.

62
00:04:09,870 --> 00:04:14,000
Our binding is now set up and now we can go over to our code as well.

63
00:04:14,450 --> 00:04:14,730
Okay.

64
00:04:14,760 --> 00:04:20,310
So in begin play we have our physics handle where we go and get the owner and then find the component

65
00:04:20,310 --> 00:04:21,270
by class.

66
00:04:21,330 --> 00:04:25,950
Now the input component happens to be hidden so we can see it there.

67
00:04:26,010 --> 00:04:30,650
But what I'd like you to do now is create a similar set up to this.

68
00:04:30,660 --> 00:04:35,790
Probably don't need the else but you can just for your practice if you like and that will also confirm

69
00:04:36,100 --> 00:04:40,560
that we've actually found this as well so perhaps because it's invisible it would be a good idea here

70
00:04:40,590 --> 00:04:48,240
to just logout that we found an input component supports video now and go ahead and create a new variable

71
00:04:48,240 --> 00:04:56,070
called input component lock it up using a similar set up to this and then underneath if you found the

72
00:04:56,070 --> 00:05:04,670
input component then say we found it otherwise so that it doesn't exist now it should exist on all actors

73
00:05:04,680 --> 00:05:09,240
so that won't be an issue but just practice the code for the moment pause video now and give that a

74
00:05:09,240 --> 00:05:10,230
go.

75
00:05:10,230 --> 00:05:11,660
Okay everybody Welcome back.

76
00:05:11,670 --> 00:05:16,660
So let's go ahead here and start something called input component.

77
00:05:16,890 --> 00:05:24,180
And we're going to set it equal to get owner remember we're going back up the hierarchy that is going

78
00:05:24,180 --> 00:05:31,530
to be a pointer so we use the arrow operator and we've going to find the component by class and we don't

79
00:05:31,530 --> 00:05:33,300
need anything else in the end there.

80
00:05:33,300 --> 00:05:35,680
So what are we going to look for here.

81
00:05:35,700 --> 00:05:38,550
So let's use fuzzy search.

82
00:05:38,550 --> 00:05:42,280
And then if we can't find it with that we can use the documents instead.

83
00:05:42,300 --> 00:05:46,800
So it's going to be a you input component.

84
00:05:46,800 --> 00:05:47,310
There we go.

85
00:05:47,310 --> 00:05:49,150
That's exactly what we're looking for.

86
00:05:49,200 --> 00:05:51,500
Now we've got a red squiggle here it's undefined.

87
00:05:51,500 --> 00:05:52,440
That's absolutely fine.

88
00:05:52,440 --> 00:06:00,720
Let's go ahead into our header file itself and we're going to also need to include a similar setup as

89
00:06:00,720 --> 00:06:01,830
we had here.

90
00:06:01,830 --> 00:06:04,530
So this is going to be our new input component.

91
00:06:04,530 --> 00:06:05,230
Look at that.

92
00:06:05,340 --> 00:06:09,120
It's a pointer we're going to call it inputs component.

93
00:06:10,110 --> 00:06:16,750
And we're also going to set it to a normal pointer to protect ourselves as well okay so that's that's

94
00:06:16,840 --> 00:06:21,440
all sorted and that will eventually stop having its red squiggles.

95
00:06:21,430 --> 00:06:28,480
Okay now we need to protect ourselves here by saying if input component and what are we going to say

96
00:06:28,480 --> 00:06:30,100
here in the input component.

97
00:06:30,100 --> 00:06:33,940
Well first of all let's test that it actually does exists.

98
00:06:33,940 --> 00:06:39,180
So we're going to do a log log temp let's set it as a warning.

99
00:06:39,280 --> 00:06:40,720
And what should we say.

100
00:06:40,720 --> 00:06:41,930
Let's just say.

101
00:06:42,200 --> 00:06:43,970
Input component found.

102
00:06:44,610 --> 00:06:45,090
Okay.

103
00:06:45,100 --> 00:06:49,090
And we need to reference something here what are we going for.

104
00:06:49,090 --> 00:06:55,480
Well we're going to get owner because that is a pointer we use the arrow operator and we can get its

105
00:06:55,480 --> 00:06:56,920
name.

106
00:06:56,980 --> 00:06:58,110
There we go.

107
00:06:58,120 --> 00:06:59,800
Remember our parentheses on the end.

108
00:06:59,800 --> 00:07:06,970
We need a semicolon right on the very end and we need an asterisk just there next to get owner Whoops

109
00:07:07,030 --> 00:07:13,360
I've just reviewed this and realized that I was going to say input component found on and then a format

110
00:07:13,360 --> 00:07:20,040
specified percentage s some fortunately my owner get name doesn't do anything in this particular case

111
00:07:20,460 --> 00:07:25,990
but if you wanted to print out to the log the actor that the input component is found on that's what

112
00:07:25,990 --> 00:07:26,830
you would need to do.

113
00:07:27,520 --> 00:07:30,030
Okay now we don't have an L statement yet.

114
00:07:30,040 --> 00:07:33,400
So let's pop that in as well so else.

115
00:07:33,910 --> 00:07:41,110
Well it's really this except we would say that we cannot find one to copy that.

116
00:07:41,110 --> 00:07:42,240
So the same again.

117
00:07:42,250 --> 00:07:49,730
And I'm going to say that input component missing like so with three S's that will be very distinct.

118
00:07:49,800 --> 00:07:50,020
Okay.

119
00:07:51,100 --> 00:07:53,710
So that should be all fine.

120
00:07:53,710 --> 00:08:00,550
Let's go ahead save our work go over into real and first compile and then we'll play and what we should

121
00:08:00,550 --> 00:08:03,310
see down in the log is that we've got an input component.

122
00:08:03,350 --> 00:08:05,250
Would just confirm it's working.

123
00:08:05,740 --> 00:08:07,420
Let's press play.

124
00:08:07,420 --> 00:08:08,050
Warning.

125
00:08:08,050 --> 00:08:09,520
Input component found.

126
00:08:10,000 --> 00:08:10,480
Excellent.

127
00:08:10,510 --> 00:08:12,640
So it does exist even though we can't see it.

128
00:08:12,640 --> 00:08:12,890
Okay.

129
00:08:13,270 --> 00:08:17,920
Let's roll back slightly and talk about what else we can do here.

130
00:08:17,950 --> 00:08:25,690
So if input component which is going to be true all the time anyway so let's just comment that out for

131
00:08:25,690 --> 00:08:29,190
the moment if input component.

132
00:08:29,290 --> 00:08:32,330
Well so we're going to type in input component.

133
00:08:32,330 --> 00:08:34,710
So we've got our input component we know.

134
00:08:34,750 --> 00:08:41,710
And if we hover over it it come up as a pointer so we can use our arrow operator to access the members.

135
00:08:41,770 --> 00:08:50,370
Now we need to bind an action that's what we want to do and then we open up some parentheses and this

136
00:08:50,370 --> 00:08:57,000
is going to be a string in here and the name has to be exactly the same as that which we gave it over

137
00:08:57,000 --> 00:09:03,870
in the projects settings under the inputs when we set up that new action we can see here that the next

138
00:09:03,870 --> 00:09:06,980
thing we need is an input event or key events here.

139
00:09:07,110 --> 00:09:08,610
It's in a numerator.

140
00:09:08,610 --> 00:09:14,060
So we could do a bit of fuzzy search here or we could go to the docs and look everything up I know is

141
00:09:14,190 --> 00:09:18,090
an input event and here we go.

142
00:09:18,140 --> 00:09:18,910
This is quite good.

143
00:09:18,920 --> 00:09:21,480
So I see is short for input events.

144
00:09:21,510 --> 00:09:22,930
Then we've got the Axis double click.

145
00:09:22,940 --> 00:09:25,790
That's quite useful Max pressed and released.

146
00:09:25,790 --> 00:09:28,190
So we're talking about if we press a key down.

147
00:09:28,760 --> 00:09:29,540
Excellent.

148
00:09:29,540 --> 00:09:30,520
What's next.

149
00:09:30,560 --> 00:09:33,540
The object so we can use the keyword here.

150
00:09:33,560 --> 00:09:34,780
This.

151
00:09:34,790 --> 00:09:37,550
Now this is the first time that we've used this.

152
00:09:37,550 --> 00:09:42,140
And what this means is that it is a pointer to this object.

153
00:09:42,140 --> 00:09:47,060
That is the instance of the class that is executing this code not to be confused with the reference

154
00:09:47,060 --> 00:09:48,920
to the actual class itself.

155
00:09:48,920 --> 00:09:55,360
Now the final one here and then we look at that signature is a bit of a mess and very confusing and

156
00:09:55,370 --> 00:09:59,730
we're not going to delve into and potentially quite confusing.

157
00:09:59,730 --> 00:10:02,830
So we're not going to delve deep into this syntax right now.

158
00:10:02,970 --> 00:10:09,110
But basically what we need is an address to a function that we haven't written yet.

159
00:10:09,630 --> 00:10:13,440
So we're going to write this in there grab a file that's absolutely fine.

160
00:10:13,500 --> 00:10:16,520
But first of all we're going to have to point to it.

161
00:10:16,530 --> 00:10:23,040
So we need the address off with the ampersand and then we need to fully qualify where we're going so

162
00:10:23,100 --> 00:10:24,720
we're going to be doing it.

163
00:10:24,780 --> 00:10:28,490
You grabber over actually came up then as I was typing.

164
00:10:28,710 --> 00:10:29,710
So the you grab.

165
00:10:29,760 --> 00:10:30,690
That's fine.

166
00:10:30,690 --> 00:10:36,430
And then the scope operator followed by a function that doesn't exist yet which should be grab.

167
00:10:36,450 --> 00:10:37,680
Okay.

168
00:10:37,860 --> 00:10:40,950
So is complaining at the moment that grab doesn't exist.

169
00:10:40,980 --> 00:10:42,430
So let's go ahead and create it.

170
00:10:42,430 --> 00:10:48,990
Now let's go over to our header file okay so we can pop this in our private section.

171
00:10:49,020 --> 00:10:51,510
It's not going to return anything so it can be void.

172
00:10:51,510 --> 00:10:54,690
And we're going to call it grab and it's a method.

173
00:10:55,030 --> 00:10:55,300
Okay.

174
00:10:55,320 --> 00:10:57,750
So that's all we need for the moment in the header file.

175
00:10:57,750 --> 00:11:03,150
If we go back over to the implementation I think here is going to be a fine place to put it for the

176
00:11:03,150 --> 00:11:03,840
moment.

177
00:11:03,840 --> 00:11:11,380
Again it needs to be fully qualified as a void you grab a along came on for the scope operator and it's

178
00:11:11,400 --> 00:11:12,930
just grab.

179
00:11:13,230 --> 00:11:16,310
And then finally we'll put our code in here.

180
00:11:16,410 --> 00:11:21,420
So what will happen here is when this key is pressed wherever we've decided to map it to in this case

181
00:11:21,810 --> 00:11:27,300
e and the right mouse button it will call this particular function.

182
00:11:27,330 --> 00:11:30,780
So we've mapped user inputs to a function code.

183
00:11:31,590 --> 00:11:36,600
So without diving into great detail at the moment let's just make sure all of this works by a quick

184
00:11:36,660 --> 00:11:45,870
log out so you log as has we've done a few times before and then log temp we'll just do a warning here

185
00:11:46,560 --> 00:11:53,030
and then we will use our text macros we always to test keep typing test.

186
00:11:53,060 --> 00:11:53,490
Okay.

187
00:11:53,520 --> 00:11:57,830
Text macro and we can say grab a press or something along those lines.

188
00:11:57,960 --> 00:12:02,370
And then when we go ahead and look in the log we should find that both the E key and the right mouse

189
00:12:02,370 --> 00:12:05,340
button trigger this function call.

190
00:12:05,430 --> 00:12:07,080
We should just log something.

191
00:12:07,140 --> 00:12:09,560
In this case grab a press to a log.

192
00:12:09,570 --> 00:12:10,870
Let's save.

193
00:12:11,260 --> 00:12:16,020
I always gets a little concerned you know when I see red squiggles but it is important to know that

194
00:12:16,020 --> 00:12:21,740
your idea can send you on wild goose chases if you start chasing red squiggles all the time.

195
00:12:21,750 --> 00:12:28,830
Now if I have happened to have made a mistake somewhere the compiler will tell me in a moment.

196
00:12:28,830 --> 00:12:31,550
So let's go ahead and compile our code.

197
00:12:31,710 --> 00:12:33,000
The compiler is complete.

198
00:12:33,000 --> 00:12:34,790
Let's go ahead and press play.

199
00:12:34,890 --> 00:12:39,920
So when we move around our scene you can see already I hit the right mouse button there.

200
00:12:39,990 --> 00:12:41,760
That's the right mouse button.

201
00:12:41,760 --> 00:12:43,320
And this is the E key.

202
00:12:43,320 --> 00:12:49,970
Now of course the key is also bound to going up you see this is what I wanted to show you here and why

203
00:12:49,970 --> 00:12:53,940
are maps to the EAC his Q and E go up and down.

204
00:12:53,940 --> 00:12:57,140
So you do have to watch out what you've mapped that to.

205
00:12:57,270 --> 00:13:01,440
So I think in this particular case what we can do is remove that binding.

206
00:13:01,470 --> 00:13:03,700
And then I think we'd done for this video.

207
00:13:03,780 --> 00:13:08,820
So I'm going to just escape out of play go to a project settings and where we have it bound here we

208
00:13:08,820 --> 00:13:13,480
can just click the little cross at the end so I'm just going to bind it to the right mouse button.

209
00:13:13,800 --> 00:13:16,080
We don't need to do anything only to save anything there.

210
00:13:16,080 --> 00:13:17,680
We've now sorted that out.

211
00:13:17,810 --> 00:13:18,300
Okay.

212
00:13:18,330 --> 00:13:19,380
That's it for this lecture.

213
00:13:19,560 --> 00:13:21,360
And I'll see you guys in the next one.
